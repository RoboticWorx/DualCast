
DualCast-RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  08011868  08011868  00012868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126b8  080126b8  000141f8  2**0
                  CONTENTS
  4 .ARM          00000008  080126b8  080126b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126c0  080126c0  000141f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126c0  080126c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080126c4  080126c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080126c8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200001f8  080128c0  000141f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  080128c0  000145c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec2c  00000000  00000000  00014220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c22  00000000  00000000  00032e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00036a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001608  00000000  00000000  00038678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002039a  00000000  00000000  00039c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020446  00000000  00000000  0005a01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb644  00000000  00000000  0007a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd4  00000000  00000000  00145ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014dabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011850 	.word	0x08011850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	08011850 	.word	0x08011850

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9c1 	bl	80017c4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f901 	bl	8001654 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9b3 	bl	80017c4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9a9 	bl	80017c4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f92b 	bl	80016dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f921 	bl	80016dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f834 	bl	8000580 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_lmul>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	46ce      	mov	lr, r9
 8000528:	4699      	mov	r9, r3
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	469c      	mov	ip, r3
 800052e:	0413      	lsls	r3, r2, #16
 8000530:	4647      	mov	r7, r8
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	001d      	movs	r5, r3
 8000536:	000e      	movs	r6, r1
 8000538:	4661      	mov	r1, ip
 800053a:	0404      	lsls	r4, r0, #16
 800053c:	0c24      	lsrs	r4, r4, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	0007      	movs	r7, r0
 8000542:	0c10      	lsrs	r0, r2, #16
 8000544:	434b      	muls	r3, r1
 8000546:	4365      	muls	r5, r4
 8000548:	4341      	muls	r1, r0
 800054a:	4360      	muls	r0, r4
 800054c:	0c2c      	lsrs	r4, r5, #16
 800054e:	18c0      	adds	r0, r0, r3
 8000550:	1824      	adds	r4, r4, r0
 8000552:	468c      	mov	ip, r1
 8000554:	42a3      	cmp	r3, r4
 8000556:	d903      	bls.n	8000560 <__aeabi_lmul+0x3c>
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	025b      	lsls	r3, r3, #9
 800055c:	4698      	mov	r8, r3
 800055e:	44c4      	add	ip, r8
 8000560:	4649      	mov	r1, r9
 8000562:	4379      	muls	r1, r7
 8000564:	4356      	muls	r6, r2
 8000566:	0c23      	lsrs	r3, r4, #16
 8000568:	042d      	lsls	r5, r5, #16
 800056a:	0c2d      	lsrs	r5, r5, #16
 800056c:	1989      	adds	r1, r1, r6
 800056e:	4463      	add	r3, ip
 8000570:	0424      	lsls	r4, r4, #16
 8000572:	1960      	adds	r0, r4, r5
 8000574:	18c9      	adds	r1, r1, r3
 8000576:	bcc0      	pop	{r6, r7}
 8000578:	46b9      	mov	r9, r7
 800057a:	46b0      	mov	r8, r6
 800057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__udivmoddi4>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	4657      	mov	r7, sl
 8000584:	464e      	mov	r6, r9
 8000586:	4645      	mov	r5, r8
 8000588:	46de      	mov	lr, fp
 800058a:	b5e0      	push	{r5, r6, r7, lr}
 800058c:	0004      	movs	r4, r0
 800058e:	000d      	movs	r5, r1
 8000590:	4692      	mov	sl, r2
 8000592:	4699      	mov	r9, r3
 8000594:	b083      	sub	sp, #12
 8000596:	428b      	cmp	r3, r1
 8000598:	d830      	bhi.n	80005fc <__udivmoddi4+0x7c>
 800059a:	d02d      	beq.n	80005f8 <__udivmoddi4+0x78>
 800059c:	4649      	mov	r1, r9
 800059e:	4650      	mov	r0, sl
 80005a0:	f002 f962 	bl	8002868 <__clzdi2>
 80005a4:	0029      	movs	r1, r5
 80005a6:	0006      	movs	r6, r0
 80005a8:	0020      	movs	r0, r4
 80005aa:	f002 f95d 	bl	8002868 <__clzdi2>
 80005ae:	1a33      	subs	r3, r6, r0
 80005b0:	4698      	mov	r8, r3
 80005b2:	3b20      	subs	r3, #32
 80005b4:	d434      	bmi.n	8000620 <__udivmoddi4+0xa0>
 80005b6:	469b      	mov	fp, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	465a      	mov	r2, fp
 80005bc:	4093      	lsls	r3, r2
 80005be:	4642      	mov	r2, r8
 80005c0:	001f      	movs	r7, r3
 80005c2:	4653      	mov	r3, sl
 80005c4:	4093      	lsls	r3, r2
 80005c6:	001e      	movs	r6, r3
 80005c8:	42af      	cmp	r7, r5
 80005ca:	d83b      	bhi.n	8000644 <__udivmoddi4+0xc4>
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d100      	bne.n	80005d2 <__udivmoddi4+0x52>
 80005d0:	e079      	b.n	80006c6 <__udivmoddi4+0x146>
 80005d2:	465b      	mov	r3, fp
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	41bd      	sbcs	r5, r7
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da00      	bge.n	80005de <__udivmoddi4+0x5e>
 80005dc:	e076      	b.n	80006cc <__udivmoddi4+0x14c>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	465a      	mov	r2, fp
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4642      	mov	r2, r8
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	e029      	b.n	800064c <__udivmoddi4+0xcc>
 80005f8:	4282      	cmp	r2, r0
 80005fa:	d9cf      	bls.n	800059c <__udivmoddi4+0x1c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <__udivmoddi4+0x8e>
 800060a:	601c      	str	r4, [r3, #0]
 800060c:	605d      	str	r5, [r3, #4]
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	b003      	add	sp, #12
 8000614:	bcf0      	pop	{r4, r5, r6, r7}
 8000616:	46bb      	mov	fp, r7
 8000618:	46b2      	mov	sl, r6
 800061a:	46a9      	mov	r9, r5
 800061c:	46a0      	mov	r8, r4
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	4642      	mov	r2, r8
 8000622:	469b      	mov	fp, r3
 8000624:	2320      	movs	r3, #32
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	4652      	mov	r2, sl
 800062a:	40da      	lsrs	r2, r3
 800062c:	4641      	mov	r1, r8
 800062e:	0013      	movs	r3, r2
 8000630:	464a      	mov	r2, r9
 8000632:	408a      	lsls	r2, r1
 8000634:	0017      	movs	r7, r2
 8000636:	4642      	mov	r2, r8
 8000638:	431f      	orrs	r7, r3
 800063a:	4653      	mov	r3, sl
 800063c:	4093      	lsls	r3, r2
 800063e:	001e      	movs	r6, r3
 8000640:	42af      	cmp	r7, r5
 8000642:	d9c3      	bls.n	80005cc <__udivmoddi4+0x4c>
 8000644:	2200      	movs	r2, #0
 8000646:	2300      	movs	r3, #0
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	4643      	mov	r3, r8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0d8      	beq.n	8000604 <__udivmoddi4+0x84>
 8000652:	07fb      	lsls	r3, r7, #31
 8000654:	0872      	lsrs	r2, r6, #1
 8000656:	431a      	orrs	r2, r3
 8000658:	4646      	mov	r6, r8
 800065a:	087b      	lsrs	r3, r7, #1
 800065c:	e00e      	b.n	800067c <__udivmoddi4+0xfc>
 800065e:	42ab      	cmp	r3, r5
 8000660:	d101      	bne.n	8000666 <__udivmoddi4+0xe6>
 8000662:	42a2      	cmp	r2, r4
 8000664:	d80c      	bhi.n	8000680 <__udivmoddi4+0x100>
 8000666:	1aa4      	subs	r4, r4, r2
 8000668:	419d      	sbcs	r5, r3
 800066a:	2001      	movs	r0, #1
 800066c:	1924      	adds	r4, r4, r4
 800066e:	416d      	adcs	r5, r5
 8000670:	2100      	movs	r1, #0
 8000672:	3e01      	subs	r6, #1
 8000674:	1824      	adds	r4, r4, r0
 8000676:	414d      	adcs	r5, r1
 8000678:	2e00      	cmp	r6, #0
 800067a:	d006      	beq.n	800068a <__udivmoddi4+0x10a>
 800067c:	42ab      	cmp	r3, r5
 800067e:	d9ee      	bls.n	800065e <__udivmoddi4+0xde>
 8000680:	3e01      	subs	r6, #1
 8000682:	1924      	adds	r4, r4, r4
 8000684:	416d      	adcs	r5, r5
 8000686:	2e00      	cmp	r6, #0
 8000688:	d1f8      	bne.n	800067c <__udivmoddi4+0xfc>
 800068a:	9800      	ldr	r0, [sp, #0]
 800068c:	9901      	ldr	r1, [sp, #4]
 800068e:	465b      	mov	r3, fp
 8000690:	1900      	adds	r0, r0, r4
 8000692:	4169      	adcs	r1, r5
 8000694:	2b00      	cmp	r3, #0
 8000696:	db24      	blt.n	80006e2 <__udivmoddi4+0x162>
 8000698:	002b      	movs	r3, r5
 800069a:	465a      	mov	r2, fp
 800069c:	4644      	mov	r4, r8
 800069e:	40d3      	lsrs	r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	40e2      	lsrs	r2, r4
 80006a4:	001c      	movs	r4, r3
 80006a6:	465b      	mov	r3, fp
 80006a8:	0015      	movs	r5, r2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db2a      	blt.n	8000704 <__udivmoddi4+0x184>
 80006ae:	0026      	movs	r6, r4
 80006b0:	409e      	lsls	r6, r3
 80006b2:	0033      	movs	r3, r6
 80006b4:	0026      	movs	r6, r4
 80006b6:	4647      	mov	r7, r8
 80006b8:	40be      	lsls	r6, r7
 80006ba:	0032      	movs	r2, r6
 80006bc:	1a80      	subs	r0, r0, r2
 80006be:	4199      	sbcs	r1, r3
 80006c0:	9000      	str	r0, [sp, #0]
 80006c2:	9101      	str	r1, [sp, #4]
 80006c4:	e79e      	b.n	8000604 <__udivmoddi4+0x84>
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d8bc      	bhi.n	8000644 <__udivmoddi4+0xc4>
 80006ca:	e782      	b.n	80005d2 <__udivmoddi4+0x52>
 80006cc:	4642      	mov	r2, r8
 80006ce:	2320      	movs	r3, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	9100      	str	r1, [sp, #0]
 80006d8:	9201      	str	r2, [sp, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	40da      	lsrs	r2, r3
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	e785      	b.n	80005ee <__udivmoddi4+0x6e>
 80006e2:	4642      	mov	r2, r8
 80006e4:	2320      	movs	r3, #32
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	4646      	mov	r6, r8
 80006ec:	409a      	lsls	r2, r3
 80006ee:	0023      	movs	r3, r4
 80006f0:	40f3      	lsrs	r3, r6
 80006f2:	4644      	mov	r4, r8
 80006f4:	4313      	orrs	r3, r2
 80006f6:	002a      	movs	r2, r5
 80006f8:	40e2      	lsrs	r2, r4
 80006fa:	001c      	movs	r4, r3
 80006fc:	465b      	mov	r3, fp
 80006fe:	0015      	movs	r5, r2
 8000700:	2b00      	cmp	r3, #0
 8000702:	dad4      	bge.n	80006ae <__udivmoddi4+0x12e>
 8000704:	4642      	mov	r2, r8
 8000706:	002f      	movs	r7, r5
 8000708:	2320      	movs	r3, #32
 800070a:	0026      	movs	r6, r4
 800070c:	4097      	lsls	r7, r2
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	40de      	lsrs	r6, r3
 8000712:	003b      	movs	r3, r7
 8000714:	4333      	orrs	r3, r6
 8000716:	e7cd      	b.n	80006b4 <__udivmoddi4+0x134>

08000718 <__aeabi_fdiv>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	464f      	mov	r7, r9
 800071c:	4646      	mov	r6, r8
 800071e:	46d6      	mov	lr, sl
 8000720:	0244      	lsls	r4, r0, #9
 8000722:	b5c0      	push	{r6, r7, lr}
 8000724:	0047      	lsls	r7, r0, #1
 8000726:	1c0e      	adds	r6, r1, #0
 8000728:	0a64      	lsrs	r4, r4, #9
 800072a:	0e3f      	lsrs	r7, r7, #24
 800072c:	0fc5      	lsrs	r5, r0, #31
 800072e:	2f00      	cmp	r7, #0
 8000730:	d03c      	beq.n	80007ac <__aeabi_fdiv+0x94>
 8000732:	2fff      	cmp	r7, #255	@ 0xff
 8000734:	d042      	beq.n	80007bc <__aeabi_fdiv+0xa4>
 8000736:	2300      	movs	r3, #0
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	4699      	mov	r9, r3
 800073c:	469a      	mov	sl, r3
 800073e:	00e4      	lsls	r4, r4, #3
 8000740:	04d2      	lsls	r2, r2, #19
 8000742:	4314      	orrs	r4, r2
 8000744:	3f7f      	subs	r7, #127	@ 0x7f
 8000746:	0273      	lsls	r3, r6, #9
 8000748:	0a5b      	lsrs	r3, r3, #9
 800074a:	4698      	mov	r8, r3
 800074c:	0073      	lsls	r3, r6, #1
 800074e:	0e1b      	lsrs	r3, r3, #24
 8000750:	0ff6      	lsrs	r6, r6, #31
 8000752:	2b00      	cmp	r3, #0
 8000754:	d01b      	beq.n	800078e <__aeabi_fdiv+0x76>
 8000756:	2bff      	cmp	r3, #255	@ 0xff
 8000758:	d013      	beq.n	8000782 <__aeabi_fdiv+0x6a>
 800075a:	4642      	mov	r2, r8
 800075c:	2180      	movs	r1, #128	@ 0x80
 800075e:	00d2      	lsls	r2, r2, #3
 8000760:	04c9      	lsls	r1, r1, #19
 8000762:	4311      	orrs	r1, r2
 8000764:	4688      	mov	r8, r1
 8000766:	2000      	movs	r0, #0
 8000768:	3b7f      	subs	r3, #127	@ 0x7f
 800076a:	0029      	movs	r1, r5
 800076c:	1aff      	subs	r7, r7, r3
 800076e:	464b      	mov	r3, r9
 8000770:	4071      	eors	r1, r6
 8000772:	b2c9      	uxtb	r1, r1
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d900      	bls.n	800077a <__aeabi_fdiv+0x62>
 8000778:	e0b5      	b.n	80008e6 <__aeabi_fdiv+0x1ce>
 800077a:	4a74      	ldr	r2, [pc, #464]	@ (800094c <__aeabi_fdiv+0x234>)
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	58d3      	ldr	r3, [r2, r3]
 8000780:	469f      	mov	pc, r3
 8000782:	4643      	mov	r3, r8
 8000784:	2b00      	cmp	r3, #0
 8000786:	d13f      	bne.n	8000808 <__aeabi_fdiv+0xf0>
 8000788:	3fff      	subs	r7, #255	@ 0xff
 800078a:	3302      	adds	r3, #2
 800078c:	e003      	b.n	8000796 <__aeabi_fdiv+0x7e>
 800078e:	4643      	mov	r3, r8
 8000790:	2b00      	cmp	r3, #0
 8000792:	d12d      	bne.n	80007f0 <__aeabi_fdiv+0xd8>
 8000794:	2301      	movs	r3, #1
 8000796:	0029      	movs	r1, r5
 8000798:	464a      	mov	r2, r9
 800079a:	4071      	eors	r1, r6
 800079c:	b2c9      	uxtb	r1, r1
 800079e:	431a      	orrs	r2, r3
 80007a0:	2a0e      	cmp	r2, #14
 80007a2:	d838      	bhi.n	8000816 <__aeabi_fdiv+0xfe>
 80007a4:	486a      	ldr	r0, [pc, #424]	@ (8000950 <__aeabi_fdiv+0x238>)
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	5882      	ldr	r2, [r0, r2]
 80007aa:	4697      	mov	pc, r2
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d113      	bne.n	80007d8 <__aeabi_fdiv+0xc0>
 80007b0:	2304      	movs	r3, #4
 80007b2:	4699      	mov	r9, r3
 80007b4:	3b03      	subs	r3, #3
 80007b6:	2700      	movs	r7, #0
 80007b8:	469a      	mov	sl, r3
 80007ba:	e7c4      	b.n	8000746 <__aeabi_fdiv+0x2e>
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d105      	bne.n	80007cc <__aeabi_fdiv+0xb4>
 80007c0:	2308      	movs	r3, #8
 80007c2:	4699      	mov	r9, r3
 80007c4:	3b06      	subs	r3, #6
 80007c6:	27ff      	movs	r7, #255	@ 0xff
 80007c8:	469a      	mov	sl, r3
 80007ca:	e7bc      	b.n	8000746 <__aeabi_fdiv+0x2e>
 80007cc:	230c      	movs	r3, #12
 80007ce:	4699      	mov	r9, r3
 80007d0:	3b09      	subs	r3, #9
 80007d2:	27ff      	movs	r7, #255	@ 0xff
 80007d4:	469a      	mov	sl, r3
 80007d6:	e7b6      	b.n	8000746 <__aeabi_fdiv+0x2e>
 80007d8:	0020      	movs	r0, r4
 80007da:	f7ff fe65 	bl	80004a8 <__clzsi2>
 80007de:	2776      	movs	r7, #118	@ 0x76
 80007e0:	1f43      	subs	r3, r0, #5
 80007e2:	409c      	lsls	r4, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	427f      	negs	r7, r7
 80007e8:	4699      	mov	r9, r3
 80007ea:	469a      	mov	sl, r3
 80007ec:	1a3f      	subs	r7, r7, r0
 80007ee:	e7aa      	b.n	8000746 <__aeabi_fdiv+0x2e>
 80007f0:	4640      	mov	r0, r8
 80007f2:	f7ff fe59 	bl	80004a8 <__clzsi2>
 80007f6:	4642      	mov	r2, r8
 80007f8:	1f43      	subs	r3, r0, #5
 80007fa:	409a      	lsls	r2, r3
 80007fc:	2376      	movs	r3, #118	@ 0x76
 80007fe:	425b      	negs	r3, r3
 8000800:	1a1b      	subs	r3, r3, r0
 8000802:	4690      	mov	r8, r2
 8000804:	2000      	movs	r0, #0
 8000806:	e7b0      	b.n	800076a <__aeabi_fdiv+0x52>
 8000808:	2303      	movs	r3, #3
 800080a:	464a      	mov	r2, r9
 800080c:	431a      	orrs	r2, r3
 800080e:	4691      	mov	r9, r2
 8000810:	2003      	movs	r0, #3
 8000812:	33fc      	adds	r3, #252	@ 0xfc
 8000814:	e7a9      	b.n	800076a <__aeabi_fdiv+0x52>
 8000816:	000d      	movs	r5, r1
 8000818:	20ff      	movs	r0, #255	@ 0xff
 800081a:	2200      	movs	r2, #0
 800081c:	05c0      	lsls	r0, r0, #23
 800081e:	07ed      	lsls	r5, r5, #31
 8000820:	4310      	orrs	r0, r2
 8000822:	4328      	orrs	r0, r5
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	000d      	movs	r5, r1
 8000830:	2000      	movs	r0, #0
 8000832:	2200      	movs	r2, #0
 8000834:	e7f2      	b.n	800081c <__aeabi_fdiv+0x104>
 8000836:	4653      	mov	r3, sl
 8000838:	2b02      	cmp	r3, #2
 800083a:	d0ed      	beq.n	8000818 <__aeabi_fdiv+0x100>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d033      	beq.n	80008a8 <__aeabi_fdiv+0x190>
 8000840:	46a0      	mov	r8, r4
 8000842:	2b01      	cmp	r3, #1
 8000844:	d105      	bne.n	8000852 <__aeabi_fdiv+0x13a>
 8000846:	2000      	movs	r0, #0
 8000848:	2200      	movs	r2, #0
 800084a:	e7e7      	b.n	800081c <__aeabi_fdiv+0x104>
 800084c:	0035      	movs	r5, r6
 800084e:	2803      	cmp	r0, #3
 8000850:	d07a      	beq.n	8000948 <__aeabi_fdiv+0x230>
 8000852:	003b      	movs	r3, r7
 8000854:	337f      	adds	r3, #127	@ 0x7f
 8000856:	2b00      	cmp	r3, #0
 8000858:	dd2d      	ble.n	80008b6 <__aeabi_fdiv+0x19e>
 800085a:	4642      	mov	r2, r8
 800085c:	0752      	lsls	r2, r2, #29
 800085e:	d007      	beq.n	8000870 <__aeabi_fdiv+0x158>
 8000860:	220f      	movs	r2, #15
 8000862:	4641      	mov	r1, r8
 8000864:	400a      	ands	r2, r1
 8000866:	2a04      	cmp	r2, #4
 8000868:	d002      	beq.n	8000870 <__aeabi_fdiv+0x158>
 800086a:	2204      	movs	r2, #4
 800086c:	4694      	mov	ip, r2
 800086e:	44e0      	add	r8, ip
 8000870:	4642      	mov	r2, r8
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	d505      	bpl.n	8000882 <__aeabi_fdiv+0x16a>
 8000876:	4642      	mov	r2, r8
 8000878:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <__aeabi_fdiv+0x23c>)
 800087a:	401a      	ands	r2, r3
 800087c:	003b      	movs	r3, r7
 800087e:	4690      	mov	r8, r2
 8000880:	3380      	adds	r3, #128	@ 0x80
 8000882:	2bfe      	cmp	r3, #254	@ 0xfe
 8000884:	dcc8      	bgt.n	8000818 <__aeabi_fdiv+0x100>
 8000886:	4642      	mov	r2, r8
 8000888:	0192      	lsls	r2, r2, #6
 800088a:	0a52      	lsrs	r2, r2, #9
 800088c:	b2d8      	uxtb	r0, r3
 800088e:	e7c5      	b.n	800081c <__aeabi_fdiv+0x104>
 8000890:	2280      	movs	r2, #128	@ 0x80
 8000892:	2500      	movs	r5, #0
 8000894:	20ff      	movs	r0, #255	@ 0xff
 8000896:	03d2      	lsls	r2, r2, #15
 8000898:	e7c0      	b.n	800081c <__aeabi_fdiv+0x104>
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	03d2      	lsls	r2, r2, #15
 800089e:	4214      	tst	r4, r2
 80008a0:	d002      	beq.n	80008a8 <__aeabi_fdiv+0x190>
 80008a2:	4643      	mov	r3, r8
 80008a4:	4213      	tst	r3, r2
 80008a6:	d049      	beq.n	800093c <__aeabi_fdiv+0x224>
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	03d2      	lsls	r2, r2, #15
 80008ac:	4322      	orrs	r2, r4
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	20ff      	movs	r0, #255	@ 0xff
 80008b2:	0a52      	lsrs	r2, r2, #9
 80008b4:	e7b2      	b.n	800081c <__aeabi_fdiv+0x104>
 80008b6:	2201      	movs	r2, #1
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dcc3      	bgt.n	8000846 <__aeabi_fdiv+0x12e>
 80008be:	4642      	mov	r2, r8
 80008c0:	40da      	lsrs	r2, r3
 80008c2:	4643      	mov	r3, r8
 80008c4:	379e      	adds	r7, #158	@ 0x9e
 80008c6:	40bb      	lsls	r3, r7
 80008c8:	1e59      	subs	r1, r3, #1
 80008ca:	418b      	sbcs	r3, r1
 80008cc:	431a      	orrs	r2, r3
 80008ce:	0753      	lsls	r3, r2, #29
 80008d0:	d004      	beq.n	80008dc <__aeabi_fdiv+0x1c4>
 80008d2:	230f      	movs	r3, #15
 80008d4:	4013      	ands	r3, r2
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d000      	beq.n	80008dc <__aeabi_fdiv+0x1c4>
 80008da:	3204      	adds	r2, #4
 80008dc:	0153      	lsls	r3, r2, #5
 80008de:	d529      	bpl.n	8000934 <__aeabi_fdiv+0x21c>
 80008e0:	2001      	movs	r0, #1
 80008e2:	2200      	movs	r2, #0
 80008e4:	e79a      	b.n	800081c <__aeabi_fdiv+0x104>
 80008e6:	4642      	mov	r2, r8
 80008e8:	0163      	lsls	r3, r4, #5
 80008ea:	0155      	lsls	r5, r2, #5
 80008ec:	42ab      	cmp	r3, r5
 80008ee:	d215      	bcs.n	800091c <__aeabi_fdiv+0x204>
 80008f0:	201b      	movs	r0, #27
 80008f2:	2200      	movs	r2, #0
 80008f4:	3f01      	subs	r7, #1
 80008f6:	2601      	movs	r6, #1
 80008f8:	001c      	movs	r4, r3
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2c00      	cmp	r4, #0
 8000900:	db01      	blt.n	8000906 <__aeabi_fdiv+0x1ee>
 8000902:	429d      	cmp	r5, r3
 8000904:	d801      	bhi.n	800090a <__aeabi_fdiv+0x1f2>
 8000906:	1b5b      	subs	r3, r3, r5
 8000908:	4332      	orrs	r2, r6
 800090a:	3801      	subs	r0, #1
 800090c:	2800      	cmp	r0, #0
 800090e:	d1f3      	bne.n	80008f8 <__aeabi_fdiv+0x1e0>
 8000910:	1e58      	subs	r0, r3, #1
 8000912:	4183      	sbcs	r3, r0
 8000914:	4313      	orrs	r3, r2
 8000916:	4698      	mov	r8, r3
 8000918:	000d      	movs	r5, r1
 800091a:	e79a      	b.n	8000852 <__aeabi_fdiv+0x13a>
 800091c:	201a      	movs	r0, #26
 800091e:	2201      	movs	r2, #1
 8000920:	1b5b      	subs	r3, r3, r5
 8000922:	e7e8      	b.n	80008f6 <__aeabi_fdiv+0x1de>
 8000924:	3b02      	subs	r3, #2
 8000926:	425a      	negs	r2, r3
 8000928:	4153      	adcs	r3, r2
 800092a:	425b      	negs	r3, r3
 800092c:	0035      	movs	r5, r6
 800092e:	2200      	movs	r2, #0
 8000930:	b2d8      	uxtb	r0, r3
 8000932:	e773      	b.n	800081c <__aeabi_fdiv+0x104>
 8000934:	0192      	lsls	r2, r2, #6
 8000936:	2000      	movs	r0, #0
 8000938:	0a52      	lsrs	r2, r2, #9
 800093a:	e76f      	b.n	800081c <__aeabi_fdiv+0x104>
 800093c:	431a      	orrs	r2, r3
 800093e:	0252      	lsls	r2, r2, #9
 8000940:	0035      	movs	r5, r6
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	0a52      	lsrs	r2, r2, #9
 8000946:	e769      	b.n	800081c <__aeabi_fdiv+0x104>
 8000948:	4644      	mov	r4, r8
 800094a:	e7ad      	b.n	80008a8 <__aeabi_fdiv+0x190>
 800094c:	08011e94 	.word	0x08011e94
 8000950:	08011ed4 	.word	0x08011ed4
 8000954:	f7ffffff 	.word	0xf7ffffff

08000958 <__aeabi_dadd>:
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	4657      	mov	r7, sl
 800095c:	464e      	mov	r6, r9
 800095e:	4645      	mov	r5, r8
 8000960:	46de      	mov	lr, fp
 8000962:	b5e0      	push	{r5, r6, r7, lr}
 8000964:	b083      	sub	sp, #12
 8000966:	9000      	str	r0, [sp, #0]
 8000968:	9101      	str	r1, [sp, #4]
 800096a:	030c      	lsls	r4, r1, #12
 800096c:	004f      	lsls	r7, r1, #1
 800096e:	0fce      	lsrs	r6, r1, #31
 8000970:	0a61      	lsrs	r1, r4, #9
 8000972:	9c00      	ldr	r4, [sp, #0]
 8000974:	031d      	lsls	r5, r3, #12
 8000976:	0f64      	lsrs	r4, r4, #29
 8000978:	430c      	orrs	r4, r1
 800097a:	9900      	ldr	r1, [sp, #0]
 800097c:	9200      	str	r2, [sp, #0]
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	00c8      	lsls	r0, r1, #3
 8000982:	0059      	lsls	r1, r3, #1
 8000984:	0d4b      	lsrs	r3, r1, #21
 8000986:	4699      	mov	r9, r3
 8000988:	9a00      	ldr	r2, [sp, #0]
 800098a:	9b01      	ldr	r3, [sp, #4]
 800098c:	0a6d      	lsrs	r5, r5, #9
 800098e:	0fd9      	lsrs	r1, r3, #31
 8000990:	0f53      	lsrs	r3, r2, #29
 8000992:	432b      	orrs	r3, r5
 8000994:	469a      	mov	sl, r3
 8000996:	9b00      	ldr	r3, [sp, #0]
 8000998:	0d7f      	lsrs	r7, r7, #21
 800099a:	00da      	lsls	r2, r3, #3
 800099c:	4694      	mov	ip, r2
 800099e:	464a      	mov	r2, r9
 80009a0:	46b0      	mov	r8, r6
 80009a2:	1aba      	subs	r2, r7, r2
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x52>
 80009a8:	e0b0      	b.n	8000b0c <__aeabi_dadd+0x1b4>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	dc00      	bgt.n	80009b0 <__aeabi_dadd+0x58>
 80009ae:	e078      	b.n	8000aa2 <__aeabi_dadd+0x14a>
 80009b0:	4649      	mov	r1, r9
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x60>
 80009b6:	e0e9      	b.n	8000b8c <__aeabi_dadd+0x234>
 80009b8:	49c9      	ldr	r1, [pc, #804]	@ (8000ce0 <__aeabi_dadd+0x388>)
 80009ba:	428f      	cmp	r7, r1
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0x68>
 80009be:	e195      	b.n	8000cec <__aeabi_dadd+0x394>
 80009c0:	2501      	movs	r5, #1
 80009c2:	2a38      	cmp	r2, #56	@ 0x38
 80009c4:	dc16      	bgt.n	80009f4 <__aeabi_dadd+0x9c>
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	4653      	mov	r3, sl
 80009ca:	0409      	lsls	r1, r1, #16
 80009cc:	430b      	orrs	r3, r1
 80009ce:	469a      	mov	sl, r3
 80009d0:	2a1f      	cmp	r2, #31
 80009d2:	dd00      	ble.n	80009d6 <__aeabi_dadd+0x7e>
 80009d4:	e1e7      	b.n	8000da6 <__aeabi_dadd+0x44e>
 80009d6:	2120      	movs	r1, #32
 80009d8:	4655      	mov	r5, sl
 80009da:	1a8b      	subs	r3, r1, r2
 80009dc:	4661      	mov	r1, ip
 80009de:	409d      	lsls	r5, r3
 80009e0:	40d1      	lsrs	r1, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	4661      	mov	r1, ip
 80009e6:	4099      	lsls	r1, r3
 80009e8:	1e4b      	subs	r3, r1, #1
 80009ea:	4199      	sbcs	r1, r3
 80009ec:	4653      	mov	r3, sl
 80009ee:	40d3      	lsrs	r3, r2
 80009f0:	430d      	orrs	r5, r1
 80009f2:	1ae4      	subs	r4, r4, r3
 80009f4:	1b45      	subs	r5, r0, r5
 80009f6:	42a8      	cmp	r0, r5
 80009f8:	4180      	sbcs	r0, r0
 80009fa:	4240      	negs	r0, r0
 80009fc:	1a24      	subs	r4, r4, r0
 80009fe:	0223      	lsls	r3, r4, #8
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_dadd+0xac>
 8000a02:	e10f      	b.n	8000c24 <__aeabi_dadd+0x2cc>
 8000a04:	0264      	lsls	r4, r4, #9
 8000a06:	0a64      	lsrs	r4, r4, #9
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0xb6>
 8000a0c:	e139      	b.n	8000c82 <__aeabi_dadd+0x32a>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f7ff fd4a 	bl	80004a8 <__clzsi2>
 8000a14:	0003      	movs	r3, r0
 8000a16:	3b08      	subs	r3, #8
 8000a18:	2120      	movs	r1, #32
 8000a1a:	0028      	movs	r0, r5
 8000a1c:	1aca      	subs	r2, r1, r3
 8000a1e:	40d0      	lsrs	r0, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	0002      	movs	r2, r0
 8000a24:	409d      	lsls	r5, r3
 8000a26:	4322      	orrs	r2, r4
 8000a28:	429f      	cmp	r7, r3
 8000a2a:	dd00      	ble.n	8000a2e <__aeabi_dadd+0xd6>
 8000a2c:	e173      	b.n	8000d16 <__aeabi_dadd+0x3be>
 8000a2e:	1bd8      	subs	r0, r3, r7
 8000a30:	3001      	adds	r0, #1
 8000a32:	1a09      	subs	r1, r1, r0
 8000a34:	002c      	movs	r4, r5
 8000a36:	408d      	lsls	r5, r1
 8000a38:	40c4      	lsrs	r4, r0
 8000a3a:	1e6b      	subs	r3, r5, #1
 8000a3c:	419d      	sbcs	r5, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	40c2      	lsrs	r2, r0
 8000a42:	408b      	lsls	r3, r1
 8000a44:	4325      	orrs	r5, r4
 8000a46:	2700      	movs	r7, #0
 8000a48:	0014      	movs	r4, r2
 8000a4a:	431d      	orrs	r5, r3
 8000a4c:	076b      	lsls	r3, r5, #29
 8000a4e:	d009      	beq.n	8000a64 <__aeabi_dadd+0x10c>
 8000a50:	230f      	movs	r3, #15
 8000a52:	402b      	ands	r3, r5
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d005      	beq.n	8000a64 <__aeabi_dadd+0x10c>
 8000a58:	1d2b      	adds	r3, r5, #4
 8000a5a:	42ab      	cmp	r3, r5
 8000a5c:	41ad      	sbcs	r5, r5
 8000a5e:	426d      	negs	r5, r5
 8000a60:	1964      	adds	r4, r4, r5
 8000a62:	001d      	movs	r5, r3
 8000a64:	0223      	lsls	r3, r4, #8
 8000a66:	d400      	bmi.n	8000a6a <__aeabi_dadd+0x112>
 8000a68:	e12d      	b.n	8000cc6 <__aeabi_dadd+0x36e>
 8000a6a:	4a9d      	ldr	r2, [pc, #628]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000a6c:	3701      	adds	r7, #1
 8000a6e:	4297      	cmp	r7, r2
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dadd+0x11c>
 8000a72:	e0d3      	b.n	8000c1c <__aeabi_dadd+0x2c4>
 8000a74:	4646      	mov	r6, r8
 8000a76:	499b      	ldr	r1, [pc, #620]	@ (8000ce4 <__aeabi_dadd+0x38c>)
 8000a78:	08ed      	lsrs	r5, r5, #3
 8000a7a:	4021      	ands	r1, r4
 8000a7c:	074a      	lsls	r2, r1, #29
 8000a7e:	432a      	orrs	r2, r5
 8000a80:	057c      	lsls	r4, r7, #21
 8000a82:	024d      	lsls	r5, r1, #9
 8000a84:	0b2d      	lsrs	r5, r5, #12
 8000a86:	0d64      	lsrs	r4, r4, #21
 8000a88:	0524      	lsls	r4, r4, #20
 8000a8a:	432c      	orrs	r4, r5
 8000a8c:	07f6      	lsls	r6, r6, #31
 8000a8e:	4334      	orrs	r4, r6
 8000a90:	0010      	movs	r0, r2
 8000a92:	0021      	movs	r1, r4
 8000a94:	b003      	add	sp, #12
 8000a96:	bcf0      	pop	{r4, r5, r6, r7}
 8000a98:	46bb      	mov	fp, r7
 8000a9a:	46b2      	mov	sl, r6
 8000a9c:	46a9      	mov	r9, r5
 8000a9e:	46a0      	mov	r8, r4
 8000aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x150>
 8000aa6:	e084      	b.n	8000bb2 <__aeabi_dadd+0x25a>
 8000aa8:	464a      	mov	r2, r9
 8000aaa:	1bd2      	subs	r2, r2, r7
 8000aac:	2f00      	cmp	r7, #0
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x15a>
 8000ab0:	e16d      	b.n	8000d8e <__aeabi_dadd+0x436>
 8000ab2:	0025      	movs	r5, r4
 8000ab4:	4305      	orrs	r5, r0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x162>
 8000ab8:	e127      	b.n	8000d0a <__aeabi_dadd+0x3b2>
 8000aba:	1e56      	subs	r6, r2, #1
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x16a>
 8000ac0:	e23b      	b.n	8000f3a <__aeabi_dadd+0x5e2>
 8000ac2:	4d87      	ldr	r5, [pc, #540]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000ac4:	42aa      	cmp	r2, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x172>
 8000ac8:	e26a      	b.n	8000fa0 <__aeabi_dadd+0x648>
 8000aca:	2501      	movs	r5, #1
 8000acc:	2e38      	cmp	r6, #56	@ 0x38
 8000ace:	dc12      	bgt.n	8000af6 <__aeabi_dadd+0x19e>
 8000ad0:	0032      	movs	r2, r6
 8000ad2:	2a1f      	cmp	r2, #31
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_dadd+0x180>
 8000ad6:	e1f8      	b.n	8000eca <__aeabi_dadd+0x572>
 8000ad8:	2620      	movs	r6, #32
 8000ada:	0025      	movs	r5, r4
 8000adc:	1ab6      	subs	r6, r6, r2
 8000ade:	0007      	movs	r7, r0
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	40b0      	lsls	r0, r6
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	40b5      	lsls	r5, r6
 8000ae8:	40d7      	lsrs	r7, r2
 8000aea:	1e46      	subs	r6, r0, #1
 8000aec:	41b0      	sbcs	r0, r6
 8000aee:	1b1b      	subs	r3, r3, r4
 8000af0:	469a      	mov	sl, r3
 8000af2:	433d      	orrs	r5, r7
 8000af4:	4305      	orrs	r5, r0
 8000af6:	4662      	mov	r2, ip
 8000af8:	1b55      	subs	r5, r2, r5
 8000afa:	45ac      	cmp	ip, r5
 8000afc:	4192      	sbcs	r2, r2
 8000afe:	4653      	mov	r3, sl
 8000b00:	4252      	negs	r2, r2
 8000b02:	000e      	movs	r6, r1
 8000b04:	464f      	mov	r7, r9
 8000b06:	4688      	mov	r8, r1
 8000b08:	1a9c      	subs	r4, r3, r2
 8000b0a:	e778      	b.n	80009fe <__aeabi_dadd+0xa6>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	dc00      	bgt.n	8000b12 <__aeabi_dadd+0x1ba>
 8000b10:	e08e      	b.n	8000c30 <__aeabi_dadd+0x2d8>
 8000b12:	4649      	mov	r1, r9
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d175      	bne.n	8000c04 <__aeabi_dadd+0x2ac>
 8000b18:	4661      	mov	r1, ip
 8000b1a:	4653      	mov	r3, sl
 8000b1c:	4319      	orrs	r1, r3
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x1ca>
 8000b20:	e0f6      	b.n	8000d10 <__aeabi_dadd+0x3b8>
 8000b22:	1e51      	subs	r1, r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x1d2>
 8000b28:	e191      	b.n	8000e4e <__aeabi_dadd+0x4f6>
 8000b2a:	4d6d      	ldr	r5, [pc, #436]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000b2c:	42aa      	cmp	r2, r5
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x1da>
 8000b30:	e0dc      	b.n	8000cec <__aeabi_dadd+0x394>
 8000b32:	2501      	movs	r5, #1
 8000b34:	2938      	cmp	r1, #56	@ 0x38
 8000b36:	dc14      	bgt.n	8000b62 <__aeabi_dadd+0x20a>
 8000b38:	000a      	movs	r2, r1
 8000b3a:	2a1f      	cmp	r2, #31
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x1e8>
 8000b3e:	e1a2      	b.n	8000e86 <__aeabi_dadd+0x52e>
 8000b40:	2120      	movs	r1, #32
 8000b42:	4653      	mov	r3, sl
 8000b44:	1a89      	subs	r1, r1, r2
 8000b46:	408b      	lsls	r3, r1
 8000b48:	001d      	movs	r5, r3
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	40d3      	lsrs	r3, r2
 8000b4e:	431d      	orrs	r5, r3
 8000b50:	4663      	mov	r3, ip
 8000b52:	408b      	lsls	r3, r1
 8000b54:	0019      	movs	r1, r3
 8000b56:	1e4b      	subs	r3, r1, #1
 8000b58:	4199      	sbcs	r1, r3
 8000b5a:	4653      	mov	r3, sl
 8000b5c:	40d3      	lsrs	r3, r2
 8000b5e:	430d      	orrs	r5, r1
 8000b60:	18e4      	adds	r4, r4, r3
 8000b62:	182d      	adds	r5, r5, r0
 8000b64:	4285      	cmp	r5, r0
 8000b66:	4180      	sbcs	r0, r0
 8000b68:	4240      	negs	r0, r0
 8000b6a:	1824      	adds	r4, r4, r0
 8000b6c:	0223      	lsls	r3, r4, #8
 8000b6e:	d559      	bpl.n	8000c24 <__aeabi_dadd+0x2cc>
 8000b70:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000b72:	3701      	adds	r7, #1
 8000b74:	429f      	cmp	r7, r3
 8000b76:	d051      	beq.n	8000c1c <__aeabi_dadd+0x2c4>
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce4 <__aeabi_dadd+0x38c>)
 8000b7c:	086a      	lsrs	r2, r5, #1
 8000b7e:	401c      	ands	r4, r3
 8000b80:	4029      	ands	r1, r5
 8000b82:	430a      	orrs	r2, r1
 8000b84:	07e5      	lsls	r5, r4, #31
 8000b86:	4315      	orrs	r5, r2
 8000b88:	0864      	lsrs	r4, r4, #1
 8000b8a:	e75f      	b.n	8000a4c <__aeabi_dadd+0xf4>
 8000b8c:	4661      	mov	r1, ip
 8000b8e:	4653      	mov	r3, sl
 8000b90:	4319      	orrs	r1, r3
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x23e>
 8000b94:	e0bc      	b.n	8000d10 <__aeabi_dadd+0x3b8>
 8000b96:	1e51      	subs	r1, r2, #1
 8000b98:	2a01      	cmp	r2, #1
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0x246>
 8000b9c:	e164      	b.n	8000e68 <__aeabi_dadd+0x510>
 8000b9e:	4d50      	ldr	r5, [pc, #320]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000ba0:	42aa      	cmp	r2, r5
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x24e>
 8000ba4:	e16a      	b.n	8000e7c <__aeabi_dadd+0x524>
 8000ba6:	2501      	movs	r5, #1
 8000ba8:	2938      	cmp	r1, #56	@ 0x38
 8000baa:	dd00      	ble.n	8000bae <__aeabi_dadd+0x256>
 8000bac:	e722      	b.n	80009f4 <__aeabi_dadd+0x9c>
 8000bae:	000a      	movs	r2, r1
 8000bb0:	e70e      	b.n	80009d0 <__aeabi_dadd+0x78>
 8000bb2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ce8 <__aeabi_dadd+0x390>)
 8000bb4:	1c7d      	adds	r5, r7, #1
 8000bb6:	4215      	tst	r5, r2
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_dadd+0x264>
 8000bba:	e0d0      	b.n	8000d5e <__aeabi_dadd+0x406>
 8000bbc:	0025      	movs	r5, r4
 8000bbe:	4662      	mov	r2, ip
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	4305      	orrs	r5, r0
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dadd+0x274>
 8000bca:	e137      	b.n	8000e3c <__aeabi_dadd+0x4e4>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x27a>
 8000bd0:	e1a8      	b.n	8000f24 <__aeabi_dadd+0x5cc>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x280>
 8000bd6:	e16a      	b.n	8000eae <__aeabi_dadd+0x556>
 8000bd8:	4663      	mov	r3, ip
 8000bda:	1ac5      	subs	r5, r0, r3
 8000bdc:	4653      	mov	r3, sl
 8000bde:	1ae2      	subs	r2, r4, r3
 8000be0:	42a8      	cmp	r0, r5
 8000be2:	419b      	sbcs	r3, r3
 8000be4:	425b      	negs	r3, r3
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	021a      	lsls	r2, r3, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dadd+0x296>
 8000bec:	e203      	b.n	8000ff6 <__aeabi_dadd+0x69e>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	1a1d      	subs	r5, r3, r0
 8000bf2:	45ac      	cmp	ip, r5
 8000bf4:	4192      	sbcs	r2, r2
 8000bf6:	4653      	mov	r3, sl
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	1b1c      	subs	r4, r3, r4
 8000bfc:	000e      	movs	r6, r1
 8000bfe:	4688      	mov	r8, r1
 8000c00:	1aa4      	subs	r4, r4, r2
 8000c02:	e723      	b.n	8000a4c <__aeabi_dadd+0xf4>
 8000c04:	4936      	ldr	r1, [pc, #216]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000c06:	428f      	cmp	r7, r1
 8000c08:	d070      	beq.n	8000cec <__aeabi_dadd+0x394>
 8000c0a:	2501      	movs	r5, #1
 8000c0c:	2a38      	cmp	r2, #56	@ 0x38
 8000c0e:	dca8      	bgt.n	8000b62 <__aeabi_dadd+0x20a>
 8000c10:	2180      	movs	r1, #128	@ 0x80
 8000c12:	4653      	mov	r3, sl
 8000c14:	0409      	lsls	r1, r1, #16
 8000c16:	430b      	orrs	r3, r1
 8000c18:	469a      	mov	sl, r3
 8000c1a:	e78e      	b.n	8000b3a <__aeabi_dadd+0x1e2>
 8000c1c:	003c      	movs	r4, r7
 8000c1e:	2500      	movs	r5, #0
 8000c20:	2200      	movs	r2, #0
 8000c22:	e731      	b.n	8000a88 <__aeabi_dadd+0x130>
 8000c24:	2307      	movs	r3, #7
 8000c26:	402b      	ands	r3, r5
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_dadd+0x2d6>
 8000c2c:	e710      	b.n	8000a50 <__aeabi_dadd+0xf8>
 8000c2e:	e093      	b.n	8000d58 <__aeabi_dadd+0x400>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d074      	beq.n	8000d1e <__aeabi_dadd+0x3c6>
 8000c34:	464a      	mov	r2, r9
 8000c36:	1bd2      	subs	r2, r2, r7
 8000c38:	2f00      	cmp	r7, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dadd+0x2e6>
 8000c3c:	e0c7      	b.n	8000dce <__aeabi_dadd+0x476>
 8000c3e:	4928      	ldr	r1, [pc, #160]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000c40:	4589      	cmp	r9, r1
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x2ee>
 8000c44:	e185      	b.n	8000f52 <__aeabi_dadd+0x5fa>
 8000c46:	2501      	movs	r5, #1
 8000c48:	2a38      	cmp	r2, #56	@ 0x38
 8000c4a:	dc12      	bgt.n	8000c72 <__aeabi_dadd+0x31a>
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	0409      	lsls	r1, r1, #16
 8000c50:	430c      	orrs	r4, r1
 8000c52:	2a1f      	cmp	r2, #31
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_dadd+0x300>
 8000c56:	e1ab      	b.n	8000fb0 <__aeabi_dadd+0x658>
 8000c58:	2120      	movs	r1, #32
 8000c5a:	0025      	movs	r5, r4
 8000c5c:	1a89      	subs	r1, r1, r2
 8000c5e:	0007      	movs	r7, r0
 8000c60:	4088      	lsls	r0, r1
 8000c62:	408d      	lsls	r5, r1
 8000c64:	40d7      	lsrs	r7, r2
 8000c66:	1e41      	subs	r1, r0, #1
 8000c68:	4188      	sbcs	r0, r1
 8000c6a:	40d4      	lsrs	r4, r2
 8000c6c:	433d      	orrs	r5, r7
 8000c6e:	4305      	orrs	r5, r0
 8000c70:	44a2      	add	sl, r4
 8000c72:	4465      	add	r5, ip
 8000c74:	4565      	cmp	r5, ip
 8000c76:	4192      	sbcs	r2, r2
 8000c78:	4252      	negs	r2, r2
 8000c7a:	4452      	add	r2, sl
 8000c7c:	0014      	movs	r4, r2
 8000c7e:	464f      	mov	r7, r9
 8000c80:	e774      	b.n	8000b6c <__aeabi_dadd+0x214>
 8000c82:	0028      	movs	r0, r5
 8000c84:	f7ff fc10 	bl	80004a8 <__clzsi2>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	2b1f      	cmp	r3, #31
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x33a>
 8000c90:	e6c2      	b.n	8000a18 <__aeabi_dadd+0xc0>
 8000c92:	002a      	movs	r2, r5
 8000c94:	3808      	subs	r0, #8
 8000c96:	4082      	lsls	r2, r0
 8000c98:	429f      	cmp	r7, r3
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x346>
 8000c9c:	e0a9      	b.n	8000df2 <__aeabi_dadd+0x49a>
 8000c9e:	1bdb      	subs	r3, r3, r7
 8000ca0:	1c58      	adds	r0, r3, #1
 8000ca2:	281f      	cmp	r0, #31
 8000ca4:	dc00      	bgt.n	8000ca8 <__aeabi_dadd+0x350>
 8000ca6:	e1ac      	b.n	8001002 <__aeabi_dadd+0x6aa>
 8000ca8:	0015      	movs	r5, r2
 8000caa:	3b1f      	subs	r3, #31
 8000cac:	40dd      	lsrs	r5, r3
 8000cae:	2820      	cmp	r0, #32
 8000cb0:	d005      	beq.n	8000cbe <__aeabi_dadd+0x366>
 8000cb2:	2340      	movs	r3, #64	@ 0x40
 8000cb4:	1a1b      	subs	r3, r3, r0
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	1e53      	subs	r3, r2, #1
 8000cba:	419a      	sbcs	r2, r3
 8000cbc:	4315      	orrs	r5, r2
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	402b      	ands	r3, r5
 8000cc4:	e7b0      	b.n	8000c28 <__aeabi_dadd+0x2d0>
 8000cc6:	08ed      	lsrs	r5, r5, #3
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <__aeabi_dadd+0x388>)
 8000cca:	0762      	lsls	r2, r4, #29
 8000ccc:	432a      	orrs	r2, r5
 8000cce:	08e4      	lsrs	r4, r4, #3
 8000cd0:	429f      	cmp	r7, r3
 8000cd2:	d00f      	beq.n	8000cf4 <__aeabi_dadd+0x39c>
 8000cd4:	0324      	lsls	r4, r4, #12
 8000cd6:	0b25      	lsrs	r5, r4, #12
 8000cd8:	057c      	lsls	r4, r7, #21
 8000cda:	0d64      	lsrs	r4, r4, #21
 8000cdc:	e6d4      	b.n	8000a88 <__aeabi_dadd+0x130>
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	000007ff 	.word	0x000007ff
 8000ce4:	ff7fffff 	.word	0xff7fffff
 8000ce8:	000007fe 	.word	0x000007fe
 8000cec:	08c0      	lsrs	r0, r0, #3
 8000cee:	0762      	lsls	r2, r4, #29
 8000cf0:	4302      	orrs	r2, r0
 8000cf2:	08e4      	lsrs	r4, r4, #3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x3a4>
 8000cfa:	e186      	b.n	800100a <__aeabi_dadd+0x6b2>
 8000cfc:	2580      	movs	r5, #128	@ 0x80
 8000cfe:	032d      	lsls	r5, r5, #12
 8000d00:	4325      	orrs	r5, r4
 8000d02:	032d      	lsls	r5, r5, #12
 8000d04:	4cc3      	ldr	r4, [pc, #780]	@ (8001014 <__aeabi_dadd+0x6bc>)
 8000d06:	0b2d      	lsrs	r5, r5, #12
 8000d08:	e6be      	b.n	8000a88 <__aeabi_dadd+0x130>
 8000d0a:	4660      	mov	r0, ip
 8000d0c:	4654      	mov	r4, sl
 8000d0e:	000e      	movs	r6, r1
 8000d10:	0017      	movs	r7, r2
 8000d12:	08c5      	lsrs	r5, r0, #3
 8000d14:	e7d8      	b.n	8000cc8 <__aeabi_dadd+0x370>
 8000d16:	4cc0      	ldr	r4, [pc, #768]	@ (8001018 <__aeabi_dadd+0x6c0>)
 8000d18:	1aff      	subs	r7, r7, r3
 8000d1a:	4014      	ands	r4, r2
 8000d1c:	e696      	b.n	8000a4c <__aeabi_dadd+0xf4>
 8000d1e:	4abf      	ldr	r2, [pc, #764]	@ (800101c <__aeabi_dadd+0x6c4>)
 8000d20:	1c79      	adds	r1, r7, #1
 8000d22:	4211      	tst	r1, r2
 8000d24:	d16b      	bne.n	8000dfe <__aeabi_dadd+0x4a6>
 8000d26:	0022      	movs	r2, r4
 8000d28:	4302      	orrs	r2, r0
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d000      	beq.n	8000d30 <__aeabi_dadd+0x3d8>
 8000d2e:	e0db      	b.n	8000ee8 <__aeabi_dadd+0x590>
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x3de>
 8000d34:	e12d      	b.n	8000f92 <__aeabi_dadd+0x63a>
 8000d36:	4662      	mov	r2, ip
 8000d38:	4653      	mov	r3, sl
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x3e8>
 8000d3e:	e0b6      	b.n	8000eae <__aeabi_dadd+0x556>
 8000d40:	4663      	mov	r3, ip
 8000d42:	18c5      	adds	r5, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	4180      	sbcs	r0, r0
 8000d48:	4454      	add	r4, sl
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	1824      	adds	r4, r4, r0
 8000d4e:	0223      	lsls	r3, r4, #8
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_dadd+0x400>
 8000d52:	000f      	movs	r7, r1
 8000d54:	4bb0      	ldr	r3, [pc, #704]	@ (8001018 <__aeabi_dadd+0x6c0>)
 8000d56:	401c      	ands	r4, r3
 8000d58:	003a      	movs	r2, r7
 8000d5a:	0028      	movs	r0, r5
 8000d5c:	e7d8      	b.n	8000d10 <__aeabi_dadd+0x3b8>
 8000d5e:	4662      	mov	r2, ip
 8000d60:	1a85      	subs	r5, r0, r2
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	4192      	sbcs	r2, r2
 8000d66:	4653      	mov	r3, sl
 8000d68:	4252      	negs	r2, r2
 8000d6a:	4691      	mov	r9, r2
 8000d6c:	1ae3      	subs	r3, r4, r3
 8000d6e:	001a      	movs	r2, r3
 8000d70:	464b      	mov	r3, r9
 8000d72:	1ad2      	subs	r2, r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	4691      	mov	r9, r2
 8000d78:	021a      	lsls	r2, r3, #8
 8000d7a:	d454      	bmi.n	8000e26 <__aeabi_dadd+0x4ce>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	464c      	mov	r4, r9
 8000d80:	432a      	orrs	r2, r5
 8000d82:	d000      	beq.n	8000d86 <__aeabi_dadd+0x42e>
 8000d84:	e640      	b.n	8000a08 <__aeabi_dadd+0xb0>
 8000d86:	2600      	movs	r6, #0
 8000d88:	2400      	movs	r4, #0
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	e67c      	b.n	8000a88 <__aeabi_dadd+0x130>
 8000d8e:	4da1      	ldr	r5, [pc, #644]	@ (8001014 <__aeabi_dadd+0x6bc>)
 8000d90:	45a9      	cmp	r9, r5
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x43e>
 8000d94:	e090      	b.n	8000eb8 <__aeabi_dadd+0x560>
 8000d96:	2501      	movs	r5, #1
 8000d98:	2a38      	cmp	r2, #56	@ 0x38
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_dadd+0x446>
 8000d9c:	e6ab      	b.n	8000af6 <__aeabi_dadd+0x19e>
 8000d9e:	2580      	movs	r5, #128	@ 0x80
 8000da0:	042d      	lsls	r5, r5, #16
 8000da2:	432c      	orrs	r4, r5
 8000da4:	e695      	b.n	8000ad2 <__aeabi_dadd+0x17a>
 8000da6:	0011      	movs	r1, r2
 8000da8:	4655      	mov	r5, sl
 8000daa:	3920      	subs	r1, #32
 8000dac:	40cd      	lsrs	r5, r1
 8000dae:	46a9      	mov	r9, r5
 8000db0:	2a20      	cmp	r2, #32
 8000db2:	d006      	beq.n	8000dc2 <__aeabi_dadd+0x46a>
 8000db4:	2140      	movs	r1, #64	@ 0x40
 8000db6:	4653      	mov	r3, sl
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	4662      	mov	r2, ip
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	4694      	mov	ip, r2
 8000dc2:	4665      	mov	r5, ip
 8000dc4:	1e6b      	subs	r3, r5, #1
 8000dc6:	419d      	sbcs	r5, r3
 8000dc8:	464b      	mov	r3, r9
 8000dca:	431d      	orrs	r5, r3
 8000dcc:	e612      	b.n	80009f4 <__aeabi_dadd+0x9c>
 8000dce:	0021      	movs	r1, r4
 8000dd0:	4301      	orrs	r1, r0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x47e>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_dadd+0x608>
 8000dd6:	1e51      	subs	r1, r2, #1
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x486>
 8000ddc:	e0fb      	b.n	8000fd6 <__aeabi_dadd+0x67e>
 8000dde:	4d8d      	ldr	r5, [pc, #564]	@ (8001014 <__aeabi_dadd+0x6bc>)
 8000de0:	42aa      	cmp	r2, r5
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x48e>
 8000de4:	e0b5      	b.n	8000f52 <__aeabi_dadd+0x5fa>
 8000de6:	2501      	movs	r5, #1
 8000de8:	2938      	cmp	r1, #56	@ 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x496>
 8000dec:	e741      	b.n	8000c72 <__aeabi_dadd+0x31a>
 8000dee:	000a      	movs	r2, r1
 8000df0:	e72f      	b.n	8000c52 <__aeabi_dadd+0x2fa>
 8000df2:	4c89      	ldr	r4, [pc, #548]	@ (8001018 <__aeabi_dadd+0x6c0>)
 8000df4:	1aff      	subs	r7, r7, r3
 8000df6:	4014      	ands	r4, r2
 8000df8:	0762      	lsls	r2, r4, #29
 8000dfa:	08e4      	lsrs	r4, r4, #3
 8000dfc:	e76a      	b.n	8000cd4 <__aeabi_dadd+0x37c>
 8000dfe:	4a85      	ldr	r2, [pc, #532]	@ (8001014 <__aeabi_dadd+0x6bc>)
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x4ae>
 8000e04:	e0e3      	b.n	8000fce <__aeabi_dadd+0x676>
 8000e06:	4663      	mov	r3, ip
 8000e08:	18c2      	adds	r2, r0, r3
 8000e0a:	4282      	cmp	r2, r0
 8000e0c:	4180      	sbcs	r0, r0
 8000e0e:	0023      	movs	r3, r4
 8000e10:	4240      	negs	r0, r0
 8000e12:	4453      	add	r3, sl
 8000e14:	181b      	adds	r3, r3, r0
 8000e16:	07dd      	lsls	r5, r3, #31
 8000e18:	085c      	lsrs	r4, r3, #1
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	0852      	lsrs	r2, r2, #1
 8000e1e:	4315      	orrs	r5, r2
 8000e20:	000f      	movs	r7, r1
 8000e22:	402b      	ands	r3, r5
 8000e24:	e700      	b.n	8000c28 <__aeabi_dadd+0x2d0>
 8000e26:	4663      	mov	r3, ip
 8000e28:	1a1d      	subs	r5, r3, r0
 8000e2a:	45ac      	cmp	ip, r5
 8000e2c:	4192      	sbcs	r2, r2
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4252      	negs	r2, r2
 8000e32:	1b1c      	subs	r4, r3, r4
 8000e34:	000e      	movs	r6, r1
 8000e36:	4688      	mov	r8, r1
 8000e38:	1aa4      	subs	r4, r4, r2
 8000e3a:	e5e5      	b.n	8000a08 <__aeabi_dadd+0xb0>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x4ea>
 8000e40:	e091      	b.n	8000f66 <__aeabi_dadd+0x60e>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d138      	bne.n	8000eb8 <__aeabi_dadd+0x560>
 8000e46:	2480      	movs	r4, #128	@ 0x80
 8000e48:	2600      	movs	r6, #0
 8000e4a:	0324      	lsls	r4, r4, #12
 8000e4c:	e756      	b.n	8000cfc <__aeabi_dadd+0x3a4>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	18c5      	adds	r5, r0, r3
 8000e52:	4285      	cmp	r5, r0
 8000e54:	4180      	sbcs	r0, r0
 8000e56:	4454      	add	r4, sl
 8000e58:	4240      	negs	r0, r0
 8000e5a:	1824      	adds	r4, r4, r0
 8000e5c:	2701      	movs	r7, #1
 8000e5e:	0223      	lsls	r3, r4, #8
 8000e60:	d400      	bmi.n	8000e64 <__aeabi_dadd+0x50c>
 8000e62:	e6df      	b.n	8000c24 <__aeabi_dadd+0x2cc>
 8000e64:	2702      	movs	r7, #2
 8000e66:	e687      	b.n	8000b78 <__aeabi_dadd+0x220>
 8000e68:	4663      	mov	r3, ip
 8000e6a:	1ac5      	subs	r5, r0, r3
 8000e6c:	42a8      	cmp	r0, r5
 8000e6e:	4180      	sbcs	r0, r0
 8000e70:	4653      	mov	r3, sl
 8000e72:	4240      	negs	r0, r0
 8000e74:	1ae4      	subs	r4, r4, r3
 8000e76:	2701      	movs	r7, #1
 8000e78:	1a24      	subs	r4, r4, r0
 8000e7a:	e5c0      	b.n	80009fe <__aeabi_dadd+0xa6>
 8000e7c:	0762      	lsls	r2, r4, #29
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	4302      	orrs	r2, r0
 8000e82:	08e4      	lsrs	r4, r4, #3
 8000e84:	e736      	b.n	8000cf4 <__aeabi_dadd+0x39c>
 8000e86:	0011      	movs	r1, r2
 8000e88:	4653      	mov	r3, sl
 8000e8a:	3920      	subs	r1, #32
 8000e8c:	40cb      	lsrs	r3, r1
 8000e8e:	4699      	mov	r9, r3
 8000e90:	2a20      	cmp	r2, #32
 8000e92:	d006      	beq.n	8000ea2 <__aeabi_dadd+0x54a>
 8000e94:	2140      	movs	r1, #64	@ 0x40
 8000e96:	4653      	mov	r3, sl
 8000e98:	1a8a      	subs	r2, r1, r2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	4665      	mov	r5, ip
 8000ea4:	1e6b      	subs	r3, r5, #1
 8000ea6:	419d      	sbcs	r5, r3
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	431d      	orrs	r5, r3
 8000eac:	e659      	b.n	8000b62 <__aeabi_dadd+0x20a>
 8000eae:	0762      	lsls	r2, r4, #29
 8000eb0:	08c0      	lsrs	r0, r0, #3
 8000eb2:	4302      	orrs	r2, r0
 8000eb4:	08e4      	lsrs	r4, r4, #3
 8000eb6:	e70d      	b.n	8000cd4 <__aeabi_dadd+0x37c>
 8000eb8:	4653      	mov	r3, sl
 8000eba:	075a      	lsls	r2, r3, #29
 8000ebc:	4663      	mov	r3, ip
 8000ebe:	08d8      	lsrs	r0, r3, #3
 8000ec0:	4653      	mov	r3, sl
 8000ec2:	000e      	movs	r6, r1
 8000ec4:	4302      	orrs	r2, r0
 8000ec6:	08dc      	lsrs	r4, r3, #3
 8000ec8:	e714      	b.n	8000cf4 <__aeabi_dadd+0x39c>
 8000eca:	0015      	movs	r5, r2
 8000ecc:	0026      	movs	r6, r4
 8000ece:	3d20      	subs	r5, #32
 8000ed0:	40ee      	lsrs	r6, r5
 8000ed2:	2a20      	cmp	r2, #32
 8000ed4:	d003      	beq.n	8000ede <__aeabi_dadd+0x586>
 8000ed6:	2540      	movs	r5, #64	@ 0x40
 8000ed8:	1aaa      	subs	r2, r5, r2
 8000eda:	4094      	lsls	r4, r2
 8000edc:	4320      	orrs	r0, r4
 8000ede:	1e42      	subs	r2, r0, #1
 8000ee0:	4190      	sbcs	r0, r2
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	4335      	orrs	r5, r6
 8000ee6:	e606      	b.n	8000af6 <__aeabi_dadd+0x19e>
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d07c      	beq.n	8000fe6 <__aeabi_dadd+0x68e>
 8000eec:	4662      	mov	r2, ip
 8000eee:	4653      	mov	r3, sl
 8000ef0:	08c0      	lsrs	r0, r0, #3
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x5a0>
 8000ef6:	e6fa      	b.n	8000cee <__aeabi_dadd+0x396>
 8000ef8:	0762      	lsls	r2, r4, #29
 8000efa:	4310      	orrs	r0, r2
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	08e4      	lsrs	r4, r4, #3
 8000f00:	0312      	lsls	r2, r2, #12
 8000f02:	4214      	tst	r4, r2
 8000f04:	d008      	beq.n	8000f18 <__aeabi_dadd+0x5c0>
 8000f06:	08d9      	lsrs	r1, r3, #3
 8000f08:	4211      	tst	r1, r2
 8000f0a:	d105      	bne.n	8000f18 <__aeabi_dadd+0x5c0>
 8000f0c:	4663      	mov	r3, ip
 8000f0e:	08d8      	lsrs	r0, r3, #3
 8000f10:	4653      	mov	r3, sl
 8000f12:	000c      	movs	r4, r1
 8000f14:	075b      	lsls	r3, r3, #29
 8000f16:	4318      	orrs	r0, r3
 8000f18:	0f42      	lsrs	r2, r0, #29
 8000f1a:	00c0      	lsls	r0, r0, #3
 8000f1c:	08c0      	lsrs	r0, r0, #3
 8000f1e:	0752      	lsls	r2, r2, #29
 8000f20:	4302      	orrs	r2, r0
 8000f22:	e6e7      	b.n	8000cf4 <__aeabi_dadd+0x39c>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x5d2>
 8000f28:	e72d      	b.n	8000d86 <__aeabi_dadd+0x42e>
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	08d8      	lsrs	r0, r3, #3
 8000f2e:	4653      	mov	r3, sl
 8000f30:	075a      	lsls	r2, r3, #29
 8000f32:	000e      	movs	r6, r1
 8000f34:	4302      	orrs	r2, r0
 8000f36:	08dc      	lsrs	r4, r3, #3
 8000f38:	e6cc      	b.n	8000cd4 <__aeabi_dadd+0x37c>
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	1a1d      	subs	r5, r3, r0
 8000f3e:	45ac      	cmp	ip, r5
 8000f40:	4192      	sbcs	r2, r2
 8000f42:	4653      	mov	r3, sl
 8000f44:	4252      	negs	r2, r2
 8000f46:	1b1c      	subs	r4, r3, r4
 8000f48:	000e      	movs	r6, r1
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	1aa4      	subs	r4, r4, r2
 8000f4e:	3701      	adds	r7, #1
 8000f50:	e555      	b.n	80009fe <__aeabi_dadd+0xa6>
 8000f52:	4663      	mov	r3, ip
 8000f54:	08d9      	lsrs	r1, r3, #3
 8000f56:	4653      	mov	r3, sl
 8000f58:	075a      	lsls	r2, r3, #29
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	08dc      	lsrs	r4, r3, #3
 8000f5e:	e6c9      	b.n	8000cf4 <__aeabi_dadd+0x39c>
 8000f60:	4660      	mov	r0, ip
 8000f62:	4654      	mov	r4, sl
 8000f64:	e6d4      	b.n	8000d10 <__aeabi_dadd+0x3b8>
 8000f66:	08c0      	lsrs	r0, r0, #3
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x616>
 8000f6c:	e6bf      	b.n	8000cee <__aeabi_dadd+0x396>
 8000f6e:	0762      	lsls	r2, r4, #29
 8000f70:	4310      	orrs	r0, r2
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	08e4      	lsrs	r4, r4, #3
 8000f76:	0312      	lsls	r2, r2, #12
 8000f78:	4214      	tst	r4, r2
 8000f7a:	d0cd      	beq.n	8000f18 <__aeabi_dadd+0x5c0>
 8000f7c:	08dd      	lsrs	r5, r3, #3
 8000f7e:	4215      	tst	r5, r2
 8000f80:	d1ca      	bne.n	8000f18 <__aeabi_dadd+0x5c0>
 8000f82:	4663      	mov	r3, ip
 8000f84:	08d8      	lsrs	r0, r3, #3
 8000f86:	4653      	mov	r3, sl
 8000f88:	075b      	lsls	r3, r3, #29
 8000f8a:	000e      	movs	r6, r1
 8000f8c:	002c      	movs	r4, r5
 8000f8e:	4318      	orrs	r0, r3
 8000f90:	e7c2      	b.n	8000f18 <__aeabi_dadd+0x5c0>
 8000f92:	4663      	mov	r3, ip
 8000f94:	08d9      	lsrs	r1, r3, #3
 8000f96:	4653      	mov	r3, sl
 8000f98:	075a      	lsls	r2, r3, #29
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	08dc      	lsrs	r4, r3, #3
 8000f9e:	e699      	b.n	8000cd4 <__aeabi_dadd+0x37c>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	08d8      	lsrs	r0, r3, #3
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	075a      	lsls	r2, r3, #29
 8000fa8:	000e      	movs	r6, r1
 8000faa:	4302      	orrs	r2, r0
 8000fac:	08dc      	lsrs	r4, r3, #3
 8000fae:	e6a1      	b.n	8000cf4 <__aeabi_dadd+0x39c>
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0027      	movs	r7, r4
 8000fb4:	3920      	subs	r1, #32
 8000fb6:	40cf      	lsrs	r7, r1
 8000fb8:	2a20      	cmp	r2, #32
 8000fba:	d003      	beq.n	8000fc4 <__aeabi_dadd+0x66c>
 8000fbc:	2140      	movs	r1, #64	@ 0x40
 8000fbe:	1a8a      	subs	r2, r1, r2
 8000fc0:	4094      	lsls	r4, r2
 8000fc2:	4320      	orrs	r0, r4
 8000fc4:	1e42      	subs	r2, r0, #1
 8000fc6:	4190      	sbcs	r0, r2
 8000fc8:	0005      	movs	r5, r0
 8000fca:	433d      	orrs	r5, r7
 8000fcc:	e651      	b.n	8000c72 <__aeabi_dadd+0x31a>
 8000fce:	000c      	movs	r4, r1
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	e558      	b.n	8000a88 <__aeabi_dadd+0x130>
 8000fd6:	4460      	add	r0, ip
 8000fd8:	4560      	cmp	r0, ip
 8000fda:	4192      	sbcs	r2, r2
 8000fdc:	4454      	add	r4, sl
 8000fde:	4252      	negs	r2, r2
 8000fe0:	0005      	movs	r5, r0
 8000fe2:	18a4      	adds	r4, r4, r2
 8000fe4:	e73a      	b.n	8000e5c <__aeabi_dadd+0x504>
 8000fe6:	4653      	mov	r3, sl
 8000fe8:	075a      	lsls	r2, r3, #29
 8000fea:	4663      	mov	r3, ip
 8000fec:	08d9      	lsrs	r1, r3, #3
 8000fee:	4653      	mov	r3, sl
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	08dc      	lsrs	r4, r3, #3
 8000ff4:	e67e      	b.n	8000cf4 <__aeabi_dadd+0x39c>
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	001c      	movs	r4, r3
 8000ffa:	432a      	orrs	r2, r5
 8000ffc:	d000      	beq.n	8001000 <__aeabi_dadd+0x6a8>
 8000ffe:	e6ab      	b.n	8000d58 <__aeabi_dadd+0x400>
 8001000:	e6c1      	b.n	8000d86 <__aeabi_dadd+0x42e>
 8001002:	2120      	movs	r1, #32
 8001004:	2500      	movs	r5, #0
 8001006:	1a09      	subs	r1, r1, r0
 8001008:	e519      	b.n	8000a3e <__aeabi_dadd+0xe6>
 800100a:	2200      	movs	r2, #0
 800100c:	2500      	movs	r5, #0
 800100e:	4c01      	ldr	r4, [pc, #4]	@ (8001014 <__aeabi_dadd+0x6bc>)
 8001010:	e53a      	b.n	8000a88 <__aeabi_dadd+0x130>
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	000007ff 	.word	0x000007ff
 8001018:	ff7fffff 	.word	0xff7fffff
 800101c:	000007fe 	.word	0x000007fe

08001020 <__aeabi_ddiv>:
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	46de      	mov	lr, fp
 8001024:	4645      	mov	r5, r8
 8001026:	4657      	mov	r7, sl
 8001028:	464e      	mov	r6, r9
 800102a:	b5e0      	push	{r5, r6, r7, lr}
 800102c:	b087      	sub	sp, #28
 800102e:	9200      	str	r2, [sp, #0]
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	030b      	lsls	r3, r1, #12
 8001034:	0b1b      	lsrs	r3, r3, #12
 8001036:	469b      	mov	fp, r3
 8001038:	0fca      	lsrs	r2, r1, #31
 800103a:	004b      	lsls	r3, r1, #1
 800103c:	0004      	movs	r4, r0
 800103e:	4680      	mov	r8, r0
 8001040:	0d5b      	lsrs	r3, r3, #21
 8001042:	9202      	str	r2, [sp, #8]
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x28>
 8001046:	e16a      	b.n	800131e <__aeabi_ddiv+0x2fe>
 8001048:	4ad4      	ldr	r2, [pc, #848]	@ (800139c <__aeabi_ddiv+0x37c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x30>
 800104e:	e18c      	b.n	800136a <__aeabi_ddiv+0x34a>
 8001050:	4659      	mov	r1, fp
 8001052:	0f42      	lsrs	r2, r0, #29
 8001054:	00c9      	lsls	r1, r1, #3
 8001056:	430a      	orrs	r2, r1
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	0409      	lsls	r1, r1, #16
 800105c:	4311      	orrs	r1, r2
 800105e:	00c2      	lsls	r2, r0, #3
 8001060:	4690      	mov	r8, r2
 8001062:	4acf      	ldr	r2, [pc, #828]	@ (80013a0 <__aeabi_ddiv+0x380>)
 8001064:	4689      	mov	r9, r1
 8001066:	4692      	mov	sl, r2
 8001068:	449a      	add	sl, r3
 800106a:	2300      	movs	r3, #0
 800106c:	2400      	movs	r4, #0
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9e00      	ldr	r6, [sp, #0]
 8001072:	9f01      	ldr	r7, [sp, #4]
 8001074:	033b      	lsls	r3, r7, #12
 8001076:	0b1b      	lsrs	r3, r3, #12
 8001078:	469b      	mov	fp, r3
 800107a:	007b      	lsls	r3, r7, #1
 800107c:	0030      	movs	r0, r6
 800107e:	0d5b      	lsrs	r3, r3, #21
 8001080:	0ffd      	lsrs	r5, r7, #31
 8001082:	2b00      	cmp	r3, #0
 8001084:	d100      	bne.n	8001088 <__aeabi_ddiv+0x68>
 8001086:	e128      	b.n	80012da <__aeabi_ddiv+0x2ba>
 8001088:	4ac4      	ldr	r2, [pc, #784]	@ (800139c <__aeabi_ddiv+0x37c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d100      	bne.n	8001090 <__aeabi_ddiv+0x70>
 800108e:	e177      	b.n	8001380 <__aeabi_ddiv+0x360>
 8001090:	4659      	mov	r1, fp
 8001092:	0f72      	lsrs	r2, r6, #29
 8001094:	00c9      	lsls	r1, r1, #3
 8001096:	430a      	orrs	r2, r1
 8001098:	2180      	movs	r1, #128	@ 0x80
 800109a:	0409      	lsls	r1, r1, #16
 800109c:	4311      	orrs	r1, r2
 800109e:	468b      	mov	fp, r1
 80010a0:	49bf      	ldr	r1, [pc, #764]	@ (80013a0 <__aeabi_ddiv+0x380>)
 80010a2:	00f2      	lsls	r2, r6, #3
 80010a4:	468c      	mov	ip, r1
 80010a6:	4651      	mov	r1, sl
 80010a8:	4463      	add	r3, ip
 80010aa:	1acb      	subs	r3, r1, r3
 80010ac:	469a      	mov	sl, r3
 80010ae:	2300      	movs	r3, #0
 80010b0:	9e02      	ldr	r6, [sp, #8]
 80010b2:	406e      	eors	r6, r5
 80010b4:	2c0f      	cmp	r4, #15
 80010b6:	d827      	bhi.n	8001108 <__aeabi_ddiv+0xe8>
 80010b8:	49ba      	ldr	r1, [pc, #744]	@ (80013a4 <__aeabi_ddiv+0x384>)
 80010ba:	00a4      	lsls	r4, r4, #2
 80010bc:	5909      	ldr	r1, [r1, r4]
 80010be:	468f      	mov	pc, r1
 80010c0:	46cb      	mov	fp, r9
 80010c2:	4642      	mov	r2, r8
 80010c4:	9e02      	ldr	r6, [sp, #8]
 80010c6:	9b03      	ldr	r3, [sp, #12]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d016      	beq.n	80010fa <__aeabi_ddiv+0xda>
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d100      	bne.n	80010d2 <__aeabi_ddiv+0xb2>
 80010d0:	e2a6      	b.n	8001620 <__aeabi_ddiv+0x600>
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0xb8>
 80010d6:	e0df      	b.n	8001298 <__aeabi_ddiv+0x278>
 80010d8:	2200      	movs	r2, #0
 80010da:	2300      	movs	r3, #0
 80010dc:	2400      	movs	r4, #0
 80010de:	4690      	mov	r8, r2
 80010e0:	051b      	lsls	r3, r3, #20
 80010e2:	4323      	orrs	r3, r4
 80010e4:	07f6      	lsls	r6, r6, #31
 80010e6:	4333      	orrs	r3, r6
 80010e8:	4640      	mov	r0, r8
 80010ea:	0019      	movs	r1, r3
 80010ec:	b007      	add	sp, #28
 80010ee:	bcf0      	pop	{r4, r5, r6, r7}
 80010f0:	46bb      	mov	fp, r7
 80010f2:	46b2      	mov	sl, r6
 80010f4:	46a9      	mov	r9, r5
 80010f6:	46a0      	mov	r8, r4
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fa:	2200      	movs	r2, #0
 80010fc:	2400      	movs	r4, #0
 80010fe:	4690      	mov	r8, r2
 8001100:	4ba6      	ldr	r3, [pc, #664]	@ (800139c <__aeabi_ddiv+0x37c>)
 8001102:	e7ed      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 8001104:	002e      	movs	r6, r5
 8001106:	e7df      	b.n	80010c8 <__aeabi_ddiv+0xa8>
 8001108:	45cb      	cmp	fp, r9
 800110a:	d200      	bcs.n	800110e <__aeabi_ddiv+0xee>
 800110c:	e1d4      	b.n	80014b8 <__aeabi_ddiv+0x498>
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0xf2>
 8001110:	e1cf      	b.n	80014b2 <__aeabi_ddiv+0x492>
 8001112:	2301      	movs	r3, #1
 8001114:	425b      	negs	r3, r3
 8001116:	469c      	mov	ip, r3
 8001118:	4644      	mov	r4, r8
 800111a:	4648      	mov	r0, r9
 800111c:	2700      	movs	r7, #0
 800111e:	44e2      	add	sl, ip
 8001120:	465b      	mov	r3, fp
 8001122:	0e15      	lsrs	r5, r2, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	431d      	orrs	r5, r3
 8001128:	0c19      	lsrs	r1, r3, #16
 800112a:	042b      	lsls	r3, r5, #16
 800112c:	0212      	lsls	r2, r2, #8
 800112e:	9500      	str	r5, [sp, #0]
 8001130:	0c1d      	lsrs	r5, r3, #16
 8001132:	4691      	mov	r9, r2
 8001134:	9102      	str	r1, [sp, #8]
 8001136:	9503      	str	r5, [sp, #12]
 8001138:	f7ff f888 	bl	800024c <__aeabi_uidivmod>
 800113c:	0002      	movs	r2, r0
 800113e:	436a      	muls	r2, r5
 8001140:	040b      	lsls	r3, r1, #16
 8001142:	0c21      	lsrs	r1, r4, #16
 8001144:	4680      	mov	r8, r0
 8001146:	4319      	orrs	r1, r3
 8001148:	428a      	cmp	r2, r1
 800114a:	d909      	bls.n	8001160 <__aeabi_ddiv+0x140>
 800114c:	9d00      	ldr	r5, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	46ac      	mov	ip, r5
 8001152:	425b      	negs	r3, r3
 8001154:	4461      	add	r1, ip
 8001156:	469c      	mov	ip, r3
 8001158:	44e0      	add	r8, ip
 800115a:	428d      	cmp	r5, r1
 800115c:	d800      	bhi.n	8001160 <__aeabi_ddiv+0x140>
 800115e:	e1fb      	b.n	8001558 <__aeabi_ddiv+0x538>
 8001160:	1a88      	subs	r0, r1, r2
 8001162:	9902      	ldr	r1, [sp, #8]
 8001164:	f7ff f872 	bl	800024c <__aeabi_uidivmod>
 8001168:	9a03      	ldr	r2, [sp, #12]
 800116a:	0424      	lsls	r4, r4, #16
 800116c:	4342      	muls	r2, r0
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	0c24      	lsrs	r4, r4, #16
 8001172:	0003      	movs	r3, r0
 8001174:	430c      	orrs	r4, r1
 8001176:	42a2      	cmp	r2, r4
 8001178:	d906      	bls.n	8001188 <__aeabi_ddiv+0x168>
 800117a:	9900      	ldr	r1, [sp, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	468c      	mov	ip, r1
 8001180:	4464      	add	r4, ip
 8001182:	42a1      	cmp	r1, r4
 8001184:	d800      	bhi.n	8001188 <__aeabi_ddiv+0x168>
 8001186:	e1e1      	b.n	800154c <__aeabi_ddiv+0x52c>
 8001188:	1aa0      	subs	r0, r4, r2
 800118a:	4642      	mov	r2, r8
 800118c:	0412      	lsls	r2, r2, #16
 800118e:	431a      	orrs	r2, r3
 8001190:	4693      	mov	fp, r2
 8001192:	464b      	mov	r3, r9
 8001194:	4659      	mov	r1, fp
 8001196:	0c1b      	lsrs	r3, r3, #16
 8001198:	001d      	movs	r5, r3
 800119a:	9304      	str	r3, [sp, #16]
 800119c:	040b      	lsls	r3, r1, #16
 800119e:	4649      	mov	r1, r9
 80011a0:	0409      	lsls	r1, r1, #16
 80011a2:	0c09      	lsrs	r1, r1, #16
 80011a4:	000c      	movs	r4, r1
 80011a6:	0c1b      	lsrs	r3, r3, #16
 80011a8:	435c      	muls	r4, r3
 80011aa:	0c12      	lsrs	r2, r2, #16
 80011ac:	436b      	muls	r3, r5
 80011ae:	4688      	mov	r8, r1
 80011b0:	4351      	muls	r1, r2
 80011b2:	436a      	muls	r2, r5
 80011b4:	0c25      	lsrs	r5, r4, #16
 80011b6:	46ac      	mov	ip, r5
 80011b8:	185b      	adds	r3, r3, r1
 80011ba:	4463      	add	r3, ip
 80011bc:	4299      	cmp	r1, r3
 80011be:	d903      	bls.n	80011c8 <__aeabi_ddiv+0x1a8>
 80011c0:	2180      	movs	r1, #128	@ 0x80
 80011c2:	0249      	lsls	r1, r1, #9
 80011c4:	468c      	mov	ip, r1
 80011c6:	4462      	add	r2, ip
 80011c8:	0c19      	lsrs	r1, r3, #16
 80011ca:	0424      	lsls	r4, r4, #16
 80011cc:	041b      	lsls	r3, r3, #16
 80011ce:	0c24      	lsrs	r4, r4, #16
 80011d0:	188a      	adds	r2, r1, r2
 80011d2:	191c      	adds	r4, r3, r4
 80011d4:	4290      	cmp	r0, r2
 80011d6:	d302      	bcc.n	80011de <__aeabi_ddiv+0x1be>
 80011d8:	d116      	bne.n	8001208 <__aeabi_ddiv+0x1e8>
 80011da:	42a7      	cmp	r7, r4
 80011dc:	d214      	bcs.n	8001208 <__aeabi_ddiv+0x1e8>
 80011de:	465b      	mov	r3, fp
 80011e0:	9d00      	ldr	r5, [sp, #0]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	444f      	add	r7, r9
 80011e6:	9305      	str	r3, [sp, #20]
 80011e8:	454f      	cmp	r7, r9
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	46ac      	mov	ip, r5
 80011ee:	425b      	negs	r3, r3
 80011f0:	4463      	add	r3, ip
 80011f2:	18c0      	adds	r0, r0, r3
 80011f4:	4285      	cmp	r5, r0
 80011f6:	d300      	bcc.n	80011fa <__aeabi_ddiv+0x1da>
 80011f8:	e1a1      	b.n	800153e <__aeabi_ddiv+0x51e>
 80011fa:	4282      	cmp	r2, r0
 80011fc:	d900      	bls.n	8001200 <__aeabi_ddiv+0x1e0>
 80011fe:	e1f6      	b.n	80015ee <__aeabi_ddiv+0x5ce>
 8001200:	d100      	bne.n	8001204 <__aeabi_ddiv+0x1e4>
 8001202:	e1f1      	b.n	80015e8 <__aeabi_ddiv+0x5c8>
 8001204:	9b05      	ldr	r3, [sp, #20]
 8001206:	469b      	mov	fp, r3
 8001208:	1b3c      	subs	r4, r7, r4
 800120a:	42a7      	cmp	r7, r4
 800120c:	41bf      	sbcs	r7, r7
 800120e:	9d00      	ldr	r5, [sp, #0]
 8001210:	1a80      	subs	r0, r0, r2
 8001212:	427f      	negs	r7, r7
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	4285      	cmp	r5, r0
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x1fc>
 800121a:	e1d0      	b.n	80015be <__aeabi_ddiv+0x59e>
 800121c:	9902      	ldr	r1, [sp, #8]
 800121e:	f7ff f815 	bl	800024c <__aeabi_uidivmod>
 8001222:	9a03      	ldr	r2, [sp, #12]
 8001224:	040b      	lsls	r3, r1, #16
 8001226:	4342      	muls	r2, r0
 8001228:	0c21      	lsrs	r1, r4, #16
 800122a:	0007      	movs	r7, r0
 800122c:	4319      	orrs	r1, r3
 800122e:	428a      	cmp	r2, r1
 8001230:	d900      	bls.n	8001234 <__aeabi_ddiv+0x214>
 8001232:	e178      	b.n	8001526 <__aeabi_ddiv+0x506>
 8001234:	1a88      	subs	r0, r1, r2
 8001236:	9902      	ldr	r1, [sp, #8]
 8001238:	f7ff f808 	bl	800024c <__aeabi_uidivmod>
 800123c:	9a03      	ldr	r2, [sp, #12]
 800123e:	0424      	lsls	r4, r4, #16
 8001240:	4342      	muls	r2, r0
 8001242:	0409      	lsls	r1, r1, #16
 8001244:	0c24      	lsrs	r4, r4, #16
 8001246:	0003      	movs	r3, r0
 8001248:	430c      	orrs	r4, r1
 800124a:	42a2      	cmp	r2, r4
 800124c:	d900      	bls.n	8001250 <__aeabi_ddiv+0x230>
 800124e:	e15d      	b.n	800150c <__aeabi_ddiv+0x4ec>
 8001250:	4641      	mov	r1, r8
 8001252:	1aa4      	subs	r4, r4, r2
 8001254:	043a      	lsls	r2, r7, #16
 8001256:	431a      	orrs	r2, r3
 8001258:	9d04      	ldr	r5, [sp, #16]
 800125a:	0413      	lsls	r3, r2, #16
 800125c:	0c1b      	lsrs	r3, r3, #16
 800125e:	4359      	muls	r1, r3
 8001260:	4647      	mov	r7, r8
 8001262:	436b      	muls	r3, r5
 8001264:	469c      	mov	ip, r3
 8001266:	0c10      	lsrs	r0, r2, #16
 8001268:	4347      	muls	r7, r0
 800126a:	0c0b      	lsrs	r3, r1, #16
 800126c:	44bc      	add	ip, r7
 800126e:	4463      	add	r3, ip
 8001270:	4368      	muls	r0, r5
 8001272:	429f      	cmp	r7, r3
 8001274:	d903      	bls.n	800127e <__aeabi_ddiv+0x25e>
 8001276:	2580      	movs	r5, #128	@ 0x80
 8001278:	026d      	lsls	r5, r5, #9
 800127a:	46ac      	mov	ip, r5
 800127c:	4460      	add	r0, ip
 800127e:	0c1f      	lsrs	r7, r3, #16
 8001280:	0409      	lsls	r1, r1, #16
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	0c09      	lsrs	r1, r1, #16
 8001286:	183f      	adds	r7, r7, r0
 8001288:	185b      	adds	r3, r3, r1
 800128a:	42bc      	cmp	r4, r7
 800128c:	d200      	bcs.n	8001290 <__aeabi_ddiv+0x270>
 800128e:	e102      	b.n	8001496 <__aeabi_ddiv+0x476>
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x274>
 8001292:	e0fd      	b.n	8001490 <__aeabi_ddiv+0x470>
 8001294:	2301      	movs	r3, #1
 8001296:	431a      	orrs	r2, r3
 8001298:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <__aeabi_ddiv+0x388>)
 800129a:	4453      	add	r3, sl
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_ddiv+0x282>
 80012a0:	e0ae      	b.n	8001400 <__aeabi_ddiv+0x3e0>
 80012a2:	0751      	lsls	r1, r2, #29
 80012a4:	d000      	beq.n	80012a8 <__aeabi_ddiv+0x288>
 80012a6:	e198      	b.n	80015da <__aeabi_ddiv+0x5ba>
 80012a8:	4659      	mov	r1, fp
 80012aa:	01c9      	lsls	r1, r1, #7
 80012ac:	d506      	bpl.n	80012bc <__aeabi_ddiv+0x29c>
 80012ae:	4659      	mov	r1, fp
 80012b0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ac <__aeabi_ddiv+0x38c>)
 80012b2:	4019      	ands	r1, r3
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	468b      	mov	fp, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4453      	add	r3, sl
 80012bc:	493c      	ldr	r1, [pc, #240]	@ (80013b0 <__aeabi_ddiv+0x390>)
 80012be:	428b      	cmp	r3, r1
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_ddiv+0x2a4>
 80012c2:	e71a      	b.n	80010fa <__aeabi_ddiv+0xda>
 80012c4:	4659      	mov	r1, fp
 80012c6:	08d2      	lsrs	r2, r2, #3
 80012c8:	0749      	lsls	r1, r1, #29
 80012ca:	4311      	orrs	r1, r2
 80012cc:	465a      	mov	r2, fp
 80012ce:	055b      	lsls	r3, r3, #21
 80012d0:	0254      	lsls	r4, r2, #9
 80012d2:	4688      	mov	r8, r1
 80012d4:	0b24      	lsrs	r4, r4, #12
 80012d6:	0d5b      	lsrs	r3, r3, #21
 80012d8:	e702      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 80012da:	465a      	mov	r2, fp
 80012dc:	9b00      	ldr	r3, [sp, #0]
 80012de:	431a      	orrs	r2, r3
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x2c4>
 80012e2:	e07e      	b.n	80013e2 <__aeabi_ddiv+0x3c2>
 80012e4:	465b      	mov	r3, fp
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_ddiv+0x2cc>
 80012ea:	e100      	b.n	80014ee <__aeabi_ddiv+0x4ce>
 80012ec:	4658      	mov	r0, fp
 80012ee:	f7ff f8db 	bl	80004a8 <__clzsi2>
 80012f2:	0002      	movs	r2, r0
 80012f4:	0003      	movs	r3, r0
 80012f6:	3a0b      	subs	r2, #11
 80012f8:	271d      	movs	r7, #29
 80012fa:	9e00      	ldr	r6, [sp, #0]
 80012fc:	1aba      	subs	r2, r7, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	4658      	mov	r0, fp
 8001302:	40d6      	lsrs	r6, r2
 8001304:	3908      	subs	r1, #8
 8001306:	4088      	lsls	r0, r1
 8001308:	0032      	movs	r2, r6
 800130a:	4302      	orrs	r2, r0
 800130c:	4693      	mov	fp, r2
 800130e:	9a00      	ldr	r2, [sp, #0]
 8001310:	408a      	lsls	r2, r1
 8001312:	4928      	ldr	r1, [pc, #160]	@ (80013b4 <__aeabi_ddiv+0x394>)
 8001314:	4453      	add	r3, sl
 8001316:	468a      	mov	sl, r1
 8001318:	449a      	add	sl, r3
 800131a:	2300      	movs	r3, #0
 800131c:	e6c8      	b.n	80010b0 <__aeabi_ddiv+0x90>
 800131e:	465b      	mov	r3, fp
 8001320:	4303      	orrs	r3, r0
 8001322:	4699      	mov	r9, r3
 8001324:	d056      	beq.n	80013d4 <__aeabi_ddiv+0x3b4>
 8001326:	465b      	mov	r3, fp
 8001328:	2b00      	cmp	r3, #0
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0x30e>
 800132c:	e0cd      	b.n	80014ca <__aeabi_ddiv+0x4aa>
 800132e:	4658      	mov	r0, fp
 8001330:	f7ff f8ba 	bl	80004a8 <__clzsi2>
 8001334:	230b      	movs	r3, #11
 8001336:	425b      	negs	r3, r3
 8001338:	469c      	mov	ip, r3
 800133a:	0002      	movs	r2, r0
 800133c:	4484      	add	ip, r0
 800133e:	4666      	mov	r6, ip
 8001340:	231d      	movs	r3, #29
 8001342:	1b9b      	subs	r3, r3, r6
 8001344:	0026      	movs	r6, r4
 8001346:	0011      	movs	r1, r2
 8001348:	4658      	mov	r0, fp
 800134a:	40de      	lsrs	r6, r3
 800134c:	3908      	subs	r1, #8
 800134e:	4088      	lsls	r0, r1
 8001350:	0033      	movs	r3, r6
 8001352:	4303      	orrs	r3, r0
 8001354:	4699      	mov	r9, r3
 8001356:	0023      	movs	r3, r4
 8001358:	408b      	lsls	r3, r1
 800135a:	4698      	mov	r8, r3
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <__aeabi_ddiv+0x398>)
 800135e:	2400      	movs	r4, #0
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	469a      	mov	sl, r3
 8001364:	2300      	movs	r3, #0
 8001366:	9303      	str	r3, [sp, #12]
 8001368:	e682      	b.n	8001070 <__aeabi_ddiv+0x50>
 800136a:	465a      	mov	r2, fp
 800136c:	4302      	orrs	r2, r0
 800136e:	4691      	mov	r9, r2
 8001370:	d12a      	bne.n	80013c8 <__aeabi_ddiv+0x3a8>
 8001372:	2200      	movs	r2, #0
 8001374:	469a      	mov	sl, r3
 8001376:	2302      	movs	r3, #2
 8001378:	4690      	mov	r8, r2
 800137a:	2408      	movs	r4, #8
 800137c:	9303      	str	r3, [sp, #12]
 800137e:	e677      	b.n	8001070 <__aeabi_ddiv+0x50>
 8001380:	465a      	mov	r2, fp
 8001382:	9b00      	ldr	r3, [sp, #0]
 8001384:	431a      	orrs	r2, r3
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <__aeabi_ddiv+0x39c>)
 8001388:	469c      	mov	ip, r3
 800138a:	44e2      	add	sl, ip
 800138c:	2a00      	cmp	r2, #0
 800138e:	d117      	bne.n	80013c0 <__aeabi_ddiv+0x3a0>
 8001390:	2302      	movs	r3, #2
 8001392:	431c      	orrs	r4, r3
 8001394:	2300      	movs	r3, #0
 8001396:	469b      	mov	fp, r3
 8001398:	3302      	adds	r3, #2
 800139a:	e689      	b.n	80010b0 <__aeabi_ddiv+0x90>
 800139c:	000007ff 	.word	0x000007ff
 80013a0:	fffffc01 	.word	0xfffffc01
 80013a4:	08011f10 	.word	0x08011f10
 80013a8:	000003ff 	.word	0x000003ff
 80013ac:	feffffff 	.word	0xfeffffff
 80013b0:	000007fe 	.word	0x000007fe
 80013b4:	000003f3 	.word	0x000003f3
 80013b8:	fffffc0d 	.word	0xfffffc0d
 80013bc:	fffff801 	.word	0xfffff801
 80013c0:	2303      	movs	r3, #3
 80013c2:	0032      	movs	r2, r6
 80013c4:	431c      	orrs	r4, r3
 80013c6:	e673      	b.n	80010b0 <__aeabi_ddiv+0x90>
 80013c8:	469a      	mov	sl, r3
 80013ca:	2303      	movs	r3, #3
 80013cc:	46d9      	mov	r9, fp
 80013ce:	240c      	movs	r4, #12
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	e64d      	b.n	8001070 <__aeabi_ddiv+0x50>
 80013d4:	2300      	movs	r3, #0
 80013d6:	4698      	mov	r8, r3
 80013d8:	469a      	mov	sl, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	2404      	movs	r4, #4
 80013de:	9303      	str	r3, [sp, #12]
 80013e0:	e646      	b.n	8001070 <__aeabi_ddiv+0x50>
 80013e2:	2301      	movs	r3, #1
 80013e4:	431c      	orrs	r4, r3
 80013e6:	2300      	movs	r3, #0
 80013e8:	469b      	mov	fp, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	e660      	b.n	80010b0 <__aeabi_ddiv+0x90>
 80013ee:	2300      	movs	r3, #0
 80013f0:	2480      	movs	r4, #128	@ 0x80
 80013f2:	4698      	mov	r8, r3
 80013f4:	2600      	movs	r6, #0
 80013f6:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <__aeabi_ddiv+0x620>)
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	e671      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 80013fc:	2201      	movs	r2, #1
 80013fe:	4252      	negs	r2, r2
 8001400:	2101      	movs	r1, #1
 8001402:	1ac9      	subs	r1, r1, r3
 8001404:	2938      	cmp	r1, #56	@ 0x38
 8001406:	dd00      	ble.n	800140a <__aeabi_ddiv+0x3ea>
 8001408:	e666      	b.n	80010d8 <__aeabi_ddiv+0xb8>
 800140a:	291f      	cmp	r1, #31
 800140c:	dc00      	bgt.n	8001410 <__aeabi_ddiv+0x3f0>
 800140e:	e0ab      	b.n	8001568 <__aeabi_ddiv+0x548>
 8001410:	201f      	movs	r0, #31
 8001412:	4240      	negs	r0, r0
 8001414:	1ac3      	subs	r3, r0, r3
 8001416:	4658      	mov	r0, fp
 8001418:	40d8      	lsrs	r0, r3
 800141a:	0003      	movs	r3, r0
 800141c:	2920      	cmp	r1, #32
 800141e:	d004      	beq.n	800142a <__aeabi_ddiv+0x40a>
 8001420:	4658      	mov	r0, fp
 8001422:	4988      	ldr	r1, [pc, #544]	@ (8001644 <__aeabi_ddiv+0x624>)
 8001424:	4451      	add	r1, sl
 8001426:	4088      	lsls	r0, r1
 8001428:	4302      	orrs	r2, r0
 800142a:	1e51      	subs	r1, r2, #1
 800142c:	418a      	sbcs	r2, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	2307      	movs	r3, #7
 8001432:	0019      	movs	r1, r3
 8001434:	2400      	movs	r4, #0
 8001436:	4011      	ands	r1, r2
 8001438:	4213      	tst	r3, r2
 800143a:	d00c      	beq.n	8001456 <__aeabi_ddiv+0x436>
 800143c:	230f      	movs	r3, #15
 800143e:	4013      	ands	r3, r2
 8001440:	2b04      	cmp	r3, #4
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0x426>
 8001444:	e0f9      	b.n	800163a <__aeabi_ddiv+0x61a>
 8001446:	1d11      	adds	r1, r2, #4
 8001448:	4291      	cmp	r1, r2
 800144a:	419b      	sbcs	r3, r3
 800144c:	000a      	movs	r2, r1
 800144e:	425b      	negs	r3, r3
 8001450:	0759      	lsls	r1, r3, #29
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	0b1c      	lsrs	r4, r3, #12
 8001456:	08d2      	lsrs	r2, r2, #3
 8001458:	430a      	orrs	r2, r1
 800145a:	4690      	mov	r8, r2
 800145c:	2300      	movs	r3, #0
 800145e:	e63f      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 8001460:	2480      	movs	r4, #128	@ 0x80
 8001462:	464b      	mov	r3, r9
 8001464:	0324      	lsls	r4, r4, #12
 8001466:	4223      	tst	r3, r4
 8001468:	d009      	beq.n	800147e <__aeabi_ddiv+0x45e>
 800146a:	465b      	mov	r3, fp
 800146c:	4223      	tst	r3, r4
 800146e:	d106      	bne.n	800147e <__aeabi_ddiv+0x45e>
 8001470:	431c      	orrs	r4, r3
 8001472:	0324      	lsls	r4, r4, #12
 8001474:	002e      	movs	r6, r5
 8001476:	4690      	mov	r8, r2
 8001478:	4b71      	ldr	r3, [pc, #452]	@ (8001640 <__aeabi_ddiv+0x620>)
 800147a:	0b24      	lsrs	r4, r4, #12
 800147c:	e630      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 800147e:	2480      	movs	r4, #128	@ 0x80
 8001480:	464b      	mov	r3, r9
 8001482:	0324      	lsls	r4, r4, #12
 8001484:	431c      	orrs	r4, r3
 8001486:	0324      	lsls	r4, r4, #12
 8001488:	9e02      	ldr	r6, [sp, #8]
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <__aeabi_ddiv+0x620>)
 800148c:	0b24      	lsrs	r4, r4, #12
 800148e:	e627      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 8001490:	2b00      	cmp	r3, #0
 8001492:	d100      	bne.n	8001496 <__aeabi_ddiv+0x476>
 8001494:	e700      	b.n	8001298 <__aeabi_ddiv+0x278>
 8001496:	9800      	ldr	r0, [sp, #0]
 8001498:	1e51      	subs	r1, r2, #1
 800149a:	4684      	mov	ip, r0
 800149c:	4464      	add	r4, ip
 800149e:	4284      	cmp	r4, r0
 80014a0:	d200      	bcs.n	80014a4 <__aeabi_ddiv+0x484>
 80014a2:	e084      	b.n	80015ae <__aeabi_ddiv+0x58e>
 80014a4:	42bc      	cmp	r4, r7
 80014a6:	d200      	bcs.n	80014aa <__aeabi_ddiv+0x48a>
 80014a8:	e0ae      	b.n	8001608 <__aeabi_ddiv+0x5e8>
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x48e>
 80014ac:	e0c1      	b.n	8001632 <__aeabi_ddiv+0x612>
 80014ae:	000a      	movs	r2, r1
 80014b0:	e6f0      	b.n	8001294 <__aeabi_ddiv+0x274>
 80014b2:	4542      	cmp	r2, r8
 80014b4:	d900      	bls.n	80014b8 <__aeabi_ddiv+0x498>
 80014b6:	e62c      	b.n	8001112 <__aeabi_ddiv+0xf2>
 80014b8:	464b      	mov	r3, r9
 80014ba:	07dc      	lsls	r4, r3, #31
 80014bc:	0858      	lsrs	r0, r3, #1
 80014be:	4643      	mov	r3, r8
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	431c      	orrs	r4, r3
 80014c4:	4643      	mov	r3, r8
 80014c6:	07df      	lsls	r7, r3, #31
 80014c8:	e62a      	b.n	8001120 <__aeabi_ddiv+0x100>
 80014ca:	f7fe ffed 	bl	80004a8 <__clzsi2>
 80014ce:	2315      	movs	r3, #21
 80014d0:	469c      	mov	ip, r3
 80014d2:	4484      	add	ip, r0
 80014d4:	0002      	movs	r2, r0
 80014d6:	4663      	mov	r3, ip
 80014d8:	3220      	adds	r2, #32
 80014da:	2b1c      	cmp	r3, #28
 80014dc:	dc00      	bgt.n	80014e0 <__aeabi_ddiv+0x4c0>
 80014de:	e72e      	b.n	800133e <__aeabi_ddiv+0x31e>
 80014e0:	0023      	movs	r3, r4
 80014e2:	3808      	subs	r0, #8
 80014e4:	4083      	lsls	r3, r0
 80014e6:	4699      	mov	r9, r3
 80014e8:	2300      	movs	r3, #0
 80014ea:	4698      	mov	r8, r3
 80014ec:	e736      	b.n	800135c <__aeabi_ddiv+0x33c>
 80014ee:	f7fe ffdb 	bl	80004a8 <__clzsi2>
 80014f2:	0002      	movs	r2, r0
 80014f4:	0003      	movs	r3, r0
 80014f6:	3215      	adds	r2, #21
 80014f8:	3320      	adds	r3, #32
 80014fa:	2a1c      	cmp	r2, #28
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_ddiv+0x4e0>
 80014fe:	e6fb      	b.n	80012f8 <__aeabi_ddiv+0x2d8>
 8001500:	9900      	ldr	r1, [sp, #0]
 8001502:	3808      	subs	r0, #8
 8001504:	4081      	lsls	r1, r0
 8001506:	2200      	movs	r2, #0
 8001508:	468b      	mov	fp, r1
 800150a:	e702      	b.n	8001312 <__aeabi_ddiv+0x2f2>
 800150c:	9900      	ldr	r1, [sp, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	468c      	mov	ip, r1
 8001512:	4464      	add	r4, ip
 8001514:	42a1      	cmp	r1, r4
 8001516:	d900      	bls.n	800151a <__aeabi_ddiv+0x4fa>
 8001518:	e69a      	b.n	8001250 <__aeabi_ddiv+0x230>
 800151a:	42a2      	cmp	r2, r4
 800151c:	d800      	bhi.n	8001520 <__aeabi_ddiv+0x500>
 800151e:	e697      	b.n	8001250 <__aeabi_ddiv+0x230>
 8001520:	1e83      	subs	r3, r0, #2
 8001522:	4464      	add	r4, ip
 8001524:	e694      	b.n	8001250 <__aeabi_ddiv+0x230>
 8001526:	46ac      	mov	ip, r5
 8001528:	4461      	add	r1, ip
 800152a:	3f01      	subs	r7, #1
 800152c:	428d      	cmp	r5, r1
 800152e:	d900      	bls.n	8001532 <__aeabi_ddiv+0x512>
 8001530:	e680      	b.n	8001234 <__aeabi_ddiv+0x214>
 8001532:	428a      	cmp	r2, r1
 8001534:	d800      	bhi.n	8001538 <__aeabi_ddiv+0x518>
 8001536:	e67d      	b.n	8001234 <__aeabi_ddiv+0x214>
 8001538:	1e87      	subs	r7, r0, #2
 800153a:	4461      	add	r1, ip
 800153c:	e67a      	b.n	8001234 <__aeabi_ddiv+0x214>
 800153e:	4285      	cmp	r5, r0
 8001540:	d000      	beq.n	8001544 <__aeabi_ddiv+0x524>
 8001542:	e65f      	b.n	8001204 <__aeabi_ddiv+0x1e4>
 8001544:	45b9      	cmp	r9, r7
 8001546:	d900      	bls.n	800154a <__aeabi_ddiv+0x52a>
 8001548:	e65c      	b.n	8001204 <__aeabi_ddiv+0x1e4>
 800154a:	e656      	b.n	80011fa <__aeabi_ddiv+0x1da>
 800154c:	42a2      	cmp	r2, r4
 800154e:	d800      	bhi.n	8001552 <__aeabi_ddiv+0x532>
 8001550:	e61a      	b.n	8001188 <__aeabi_ddiv+0x168>
 8001552:	1e83      	subs	r3, r0, #2
 8001554:	4464      	add	r4, ip
 8001556:	e617      	b.n	8001188 <__aeabi_ddiv+0x168>
 8001558:	428a      	cmp	r2, r1
 800155a:	d800      	bhi.n	800155e <__aeabi_ddiv+0x53e>
 800155c:	e600      	b.n	8001160 <__aeabi_ddiv+0x140>
 800155e:	46ac      	mov	ip, r5
 8001560:	1e83      	subs	r3, r0, #2
 8001562:	4698      	mov	r8, r3
 8001564:	4461      	add	r1, ip
 8001566:	e5fb      	b.n	8001160 <__aeabi_ddiv+0x140>
 8001568:	4837      	ldr	r0, [pc, #220]	@ (8001648 <__aeabi_ddiv+0x628>)
 800156a:	0014      	movs	r4, r2
 800156c:	4450      	add	r0, sl
 800156e:	4082      	lsls	r2, r0
 8001570:	465b      	mov	r3, fp
 8001572:	0017      	movs	r7, r2
 8001574:	4083      	lsls	r3, r0
 8001576:	40cc      	lsrs	r4, r1
 8001578:	1e7a      	subs	r2, r7, #1
 800157a:	4197      	sbcs	r7, r2
 800157c:	4323      	orrs	r3, r4
 800157e:	433b      	orrs	r3, r7
 8001580:	001a      	movs	r2, r3
 8001582:	465b      	mov	r3, fp
 8001584:	40cb      	lsrs	r3, r1
 8001586:	0751      	lsls	r1, r2, #29
 8001588:	d009      	beq.n	800159e <__aeabi_ddiv+0x57e>
 800158a:	210f      	movs	r1, #15
 800158c:	4011      	ands	r1, r2
 800158e:	2904      	cmp	r1, #4
 8001590:	d005      	beq.n	800159e <__aeabi_ddiv+0x57e>
 8001592:	1d11      	adds	r1, r2, #4
 8001594:	4291      	cmp	r1, r2
 8001596:	4192      	sbcs	r2, r2
 8001598:	4252      	negs	r2, r2
 800159a:	189b      	adds	r3, r3, r2
 800159c:	000a      	movs	r2, r1
 800159e:	0219      	lsls	r1, r3, #8
 80015a0:	d400      	bmi.n	80015a4 <__aeabi_ddiv+0x584>
 80015a2:	e755      	b.n	8001450 <__aeabi_ddiv+0x430>
 80015a4:	2200      	movs	r2, #0
 80015a6:	2301      	movs	r3, #1
 80015a8:	2400      	movs	r4, #0
 80015aa:	4690      	mov	r8, r2
 80015ac:	e598      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 80015ae:	000a      	movs	r2, r1
 80015b0:	42bc      	cmp	r4, r7
 80015b2:	d000      	beq.n	80015b6 <__aeabi_ddiv+0x596>
 80015b4:	e66e      	b.n	8001294 <__aeabi_ddiv+0x274>
 80015b6:	454b      	cmp	r3, r9
 80015b8:	d000      	beq.n	80015bc <__aeabi_ddiv+0x59c>
 80015ba:	e66b      	b.n	8001294 <__aeabi_ddiv+0x274>
 80015bc:	e66c      	b.n	8001298 <__aeabi_ddiv+0x278>
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <__aeabi_ddiv+0x62c>)
 80015c0:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <__aeabi_ddiv+0x630>)
 80015c2:	4453      	add	r3, sl
 80015c4:	4592      	cmp	sl, r2
 80015c6:	da00      	bge.n	80015ca <__aeabi_ddiv+0x5aa>
 80015c8:	e718      	b.n	80013fc <__aeabi_ddiv+0x3dc>
 80015ca:	2101      	movs	r1, #1
 80015cc:	4249      	negs	r1, r1
 80015ce:	1d0a      	adds	r2, r1, #4
 80015d0:	428a      	cmp	r2, r1
 80015d2:	4189      	sbcs	r1, r1
 80015d4:	4249      	negs	r1, r1
 80015d6:	448b      	add	fp, r1
 80015d8:	e666      	b.n	80012a8 <__aeabi_ddiv+0x288>
 80015da:	210f      	movs	r1, #15
 80015dc:	4011      	ands	r1, r2
 80015de:	2904      	cmp	r1, #4
 80015e0:	d100      	bne.n	80015e4 <__aeabi_ddiv+0x5c4>
 80015e2:	e661      	b.n	80012a8 <__aeabi_ddiv+0x288>
 80015e4:	0011      	movs	r1, r2
 80015e6:	e7f2      	b.n	80015ce <__aeabi_ddiv+0x5ae>
 80015e8:	42bc      	cmp	r4, r7
 80015ea:	d800      	bhi.n	80015ee <__aeabi_ddiv+0x5ce>
 80015ec:	e60a      	b.n	8001204 <__aeabi_ddiv+0x1e4>
 80015ee:	2302      	movs	r3, #2
 80015f0:	425b      	negs	r3, r3
 80015f2:	469c      	mov	ip, r3
 80015f4:	9900      	ldr	r1, [sp, #0]
 80015f6:	444f      	add	r7, r9
 80015f8:	454f      	cmp	r7, r9
 80015fa:	419b      	sbcs	r3, r3
 80015fc:	44e3      	add	fp, ip
 80015fe:	468c      	mov	ip, r1
 8001600:	425b      	negs	r3, r3
 8001602:	4463      	add	r3, ip
 8001604:	18c0      	adds	r0, r0, r3
 8001606:	e5ff      	b.n	8001208 <__aeabi_ddiv+0x1e8>
 8001608:	4649      	mov	r1, r9
 800160a:	9d00      	ldr	r5, [sp, #0]
 800160c:	0048      	lsls	r0, r1, #1
 800160e:	4548      	cmp	r0, r9
 8001610:	4189      	sbcs	r1, r1
 8001612:	46ac      	mov	ip, r5
 8001614:	4249      	negs	r1, r1
 8001616:	4461      	add	r1, ip
 8001618:	4681      	mov	r9, r0
 800161a:	3a02      	subs	r2, #2
 800161c:	1864      	adds	r4, r4, r1
 800161e:	e7c7      	b.n	80015b0 <__aeabi_ddiv+0x590>
 8001620:	2480      	movs	r4, #128	@ 0x80
 8001622:	465b      	mov	r3, fp
 8001624:	0324      	lsls	r4, r4, #12
 8001626:	431c      	orrs	r4, r3
 8001628:	0324      	lsls	r4, r4, #12
 800162a:	4690      	mov	r8, r2
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__aeabi_ddiv+0x620>)
 800162e:	0b24      	lsrs	r4, r4, #12
 8001630:	e556      	b.n	80010e0 <__aeabi_ddiv+0xc0>
 8001632:	4599      	cmp	r9, r3
 8001634:	d3e8      	bcc.n	8001608 <__aeabi_ddiv+0x5e8>
 8001636:	000a      	movs	r2, r1
 8001638:	e7bd      	b.n	80015b6 <__aeabi_ddiv+0x596>
 800163a:	2300      	movs	r3, #0
 800163c:	e708      	b.n	8001450 <__aeabi_ddiv+0x430>
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	000007ff 	.word	0x000007ff
 8001644:	0000043e 	.word	0x0000043e
 8001648:	0000041e 	.word	0x0000041e
 800164c:	000003ff 	.word	0x000003ff
 8001650:	fffffc02 	.word	0xfffffc02

08001654 <__eqdf2>:
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	4657      	mov	r7, sl
 8001658:	46de      	mov	lr, fp
 800165a:	464e      	mov	r6, r9
 800165c:	4645      	mov	r5, r8
 800165e:	b5e0      	push	{r5, r6, r7, lr}
 8001660:	000d      	movs	r5, r1
 8001662:	0004      	movs	r4, r0
 8001664:	0fe8      	lsrs	r0, r5, #31
 8001666:	4683      	mov	fp, r0
 8001668:	0309      	lsls	r1, r1, #12
 800166a:	0fd8      	lsrs	r0, r3, #31
 800166c:	0b09      	lsrs	r1, r1, #12
 800166e:	4682      	mov	sl, r0
 8001670:	4819      	ldr	r0, [pc, #100]	@ (80016d8 <__eqdf2+0x84>)
 8001672:	468c      	mov	ip, r1
 8001674:	031f      	lsls	r7, r3, #12
 8001676:	0069      	lsls	r1, r5, #1
 8001678:	005e      	lsls	r6, r3, #1
 800167a:	0d49      	lsrs	r1, r1, #21
 800167c:	0b3f      	lsrs	r7, r7, #12
 800167e:	0d76      	lsrs	r6, r6, #21
 8001680:	4281      	cmp	r1, r0
 8001682:	d018      	beq.n	80016b6 <__eqdf2+0x62>
 8001684:	4286      	cmp	r6, r0
 8001686:	d00f      	beq.n	80016a8 <__eqdf2+0x54>
 8001688:	2001      	movs	r0, #1
 800168a:	42b1      	cmp	r1, r6
 800168c:	d10d      	bne.n	80016aa <__eqdf2+0x56>
 800168e:	45bc      	cmp	ip, r7
 8001690:	d10b      	bne.n	80016aa <__eqdf2+0x56>
 8001692:	4294      	cmp	r4, r2
 8001694:	d109      	bne.n	80016aa <__eqdf2+0x56>
 8001696:	45d3      	cmp	fp, sl
 8001698:	d01c      	beq.n	80016d4 <__eqdf2+0x80>
 800169a:	2900      	cmp	r1, #0
 800169c:	d105      	bne.n	80016aa <__eqdf2+0x56>
 800169e:	4660      	mov	r0, ip
 80016a0:	4320      	orrs	r0, r4
 80016a2:	1e43      	subs	r3, r0, #1
 80016a4:	4198      	sbcs	r0, r3
 80016a6:	e000      	b.n	80016aa <__eqdf2+0x56>
 80016a8:	2001      	movs	r0, #1
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	2001      	movs	r0, #1
 80016b8:	428e      	cmp	r6, r1
 80016ba:	d1f6      	bne.n	80016aa <__eqdf2+0x56>
 80016bc:	4661      	mov	r1, ip
 80016be:	4339      	orrs	r1, r7
 80016c0:	000f      	movs	r7, r1
 80016c2:	4317      	orrs	r7, r2
 80016c4:	4327      	orrs	r7, r4
 80016c6:	d1f0      	bne.n	80016aa <__eqdf2+0x56>
 80016c8:	465b      	mov	r3, fp
 80016ca:	4652      	mov	r2, sl
 80016cc:	1a98      	subs	r0, r3, r2
 80016ce:	1e43      	subs	r3, r0, #1
 80016d0:	4198      	sbcs	r0, r3
 80016d2:	e7ea      	b.n	80016aa <__eqdf2+0x56>
 80016d4:	2000      	movs	r0, #0
 80016d6:	e7e8      	b.n	80016aa <__eqdf2+0x56>
 80016d8:	000007ff 	.word	0x000007ff

080016dc <__gedf2>:
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	4657      	mov	r7, sl
 80016e0:	464e      	mov	r6, r9
 80016e2:	4645      	mov	r5, r8
 80016e4:	46de      	mov	lr, fp
 80016e6:	b5e0      	push	{r5, r6, r7, lr}
 80016e8:	000d      	movs	r5, r1
 80016ea:	030f      	lsls	r7, r1, #12
 80016ec:	0b39      	lsrs	r1, r7, #12
 80016ee:	b083      	sub	sp, #12
 80016f0:	0004      	movs	r4, r0
 80016f2:	4680      	mov	r8, r0
 80016f4:	9101      	str	r1, [sp, #4]
 80016f6:	0058      	lsls	r0, r3, #1
 80016f8:	0fe9      	lsrs	r1, r5, #31
 80016fa:	4f31      	ldr	r7, [pc, #196]	@ (80017c0 <__gedf2+0xe4>)
 80016fc:	0d40      	lsrs	r0, r0, #21
 80016fe:	468c      	mov	ip, r1
 8001700:	006e      	lsls	r6, r5, #1
 8001702:	0319      	lsls	r1, r3, #12
 8001704:	4682      	mov	sl, r0
 8001706:	4691      	mov	r9, r2
 8001708:	0d76      	lsrs	r6, r6, #21
 800170a:	0b09      	lsrs	r1, r1, #12
 800170c:	0fd8      	lsrs	r0, r3, #31
 800170e:	42be      	cmp	r6, r7
 8001710:	d01f      	beq.n	8001752 <__gedf2+0x76>
 8001712:	45ba      	cmp	sl, r7
 8001714:	d00f      	beq.n	8001736 <__gedf2+0x5a>
 8001716:	2e00      	cmp	r6, #0
 8001718:	d12f      	bne.n	800177a <__gedf2+0x9e>
 800171a:	4655      	mov	r5, sl
 800171c:	9e01      	ldr	r6, [sp, #4]
 800171e:	4334      	orrs	r4, r6
 8001720:	2d00      	cmp	r5, #0
 8001722:	d127      	bne.n	8001774 <__gedf2+0x98>
 8001724:	430a      	orrs	r2, r1
 8001726:	d03a      	beq.n	800179e <__gedf2+0xc2>
 8001728:	2c00      	cmp	r4, #0
 800172a:	d145      	bne.n	80017b8 <__gedf2+0xdc>
 800172c:	2800      	cmp	r0, #0
 800172e:	d11a      	bne.n	8001766 <__gedf2+0x8a>
 8001730:	2001      	movs	r0, #1
 8001732:	4240      	negs	r0, r0
 8001734:	e017      	b.n	8001766 <__gedf2+0x8a>
 8001736:	4311      	orrs	r1, r2
 8001738:	d13b      	bne.n	80017b2 <__gedf2+0xd6>
 800173a:	2e00      	cmp	r6, #0
 800173c:	d102      	bne.n	8001744 <__gedf2+0x68>
 800173e:	9f01      	ldr	r7, [sp, #4]
 8001740:	4327      	orrs	r7, r4
 8001742:	d0f3      	beq.n	800172c <__gedf2+0x50>
 8001744:	4584      	cmp	ip, r0
 8001746:	d109      	bne.n	800175c <__gedf2+0x80>
 8001748:	4663      	mov	r3, ip
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <__gedf2+0x54>
 800174e:	4660      	mov	r0, ip
 8001750:	e009      	b.n	8001766 <__gedf2+0x8a>
 8001752:	9f01      	ldr	r7, [sp, #4]
 8001754:	4327      	orrs	r7, r4
 8001756:	d12c      	bne.n	80017b2 <__gedf2+0xd6>
 8001758:	45b2      	cmp	sl, r6
 800175a:	d024      	beq.n	80017a6 <__gedf2+0xca>
 800175c:	4663      	mov	r3, ip
 800175e:	2002      	movs	r0, #2
 8001760:	3b01      	subs	r3, #1
 8001762:	4018      	ands	r0, r3
 8001764:	3801      	subs	r0, #1
 8001766:	b003      	add	sp, #12
 8001768:	bcf0      	pop	{r4, r5, r6, r7}
 800176a:	46bb      	mov	fp, r7
 800176c:	46b2      	mov	sl, r6
 800176e:	46a9      	mov	r9, r5
 8001770:	46a0      	mov	r8, r4
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001774:	2c00      	cmp	r4, #0
 8001776:	d0d9      	beq.n	800172c <__gedf2+0x50>
 8001778:	e7e4      	b.n	8001744 <__gedf2+0x68>
 800177a:	4654      	mov	r4, sl
 800177c:	2c00      	cmp	r4, #0
 800177e:	d0ed      	beq.n	800175c <__gedf2+0x80>
 8001780:	4584      	cmp	ip, r0
 8001782:	d1eb      	bne.n	800175c <__gedf2+0x80>
 8001784:	4556      	cmp	r6, sl
 8001786:	dce9      	bgt.n	800175c <__gedf2+0x80>
 8001788:	dbde      	blt.n	8001748 <__gedf2+0x6c>
 800178a:	9b01      	ldr	r3, [sp, #4]
 800178c:	428b      	cmp	r3, r1
 800178e:	d8e5      	bhi.n	800175c <__gedf2+0x80>
 8001790:	d1da      	bne.n	8001748 <__gedf2+0x6c>
 8001792:	45c8      	cmp	r8, r9
 8001794:	d8e2      	bhi.n	800175c <__gedf2+0x80>
 8001796:	2000      	movs	r0, #0
 8001798:	45c8      	cmp	r8, r9
 800179a:	d2e4      	bcs.n	8001766 <__gedf2+0x8a>
 800179c:	e7d4      	b.n	8001748 <__gedf2+0x6c>
 800179e:	2000      	movs	r0, #0
 80017a0:	2c00      	cmp	r4, #0
 80017a2:	d0e0      	beq.n	8001766 <__gedf2+0x8a>
 80017a4:	e7da      	b.n	800175c <__gedf2+0x80>
 80017a6:	4311      	orrs	r1, r2
 80017a8:	d103      	bne.n	80017b2 <__gedf2+0xd6>
 80017aa:	4584      	cmp	ip, r0
 80017ac:	d1d6      	bne.n	800175c <__gedf2+0x80>
 80017ae:	2000      	movs	r0, #0
 80017b0:	e7d9      	b.n	8001766 <__gedf2+0x8a>
 80017b2:	2002      	movs	r0, #2
 80017b4:	4240      	negs	r0, r0
 80017b6:	e7d6      	b.n	8001766 <__gedf2+0x8a>
 80017b8:	4584      	cmp	ip, r0
 80017ba:	d0e6      	beq.n	800178a <__gedf2+0xae>
 80017bc:	e7ce      	b.n	800175c <__gedf2+0x80>
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	000007ff 	.word	0x000007ff

080017c4 <__ledf2>:
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	b5e0      	push	{r5, r6, r7, lr}
 80017d0:	000d      	movs	r5, r1
 80017d2:	030f      	lsls	r7, r1, #12
 80017d4:	0004      	movs	r4, r0
 80017d6:	4680      	mov	r8, r0
 80017d8:	0fe8      	lsrs	r0, r5, #31
 80017da:	0b39      	lsrs	r1, r7, #12
 80017dc:	4684      	mov	ip, r0
 80017de:	b083      	sub	sp, #12
 80017e0:	0058      	lsls	r0, r3, #1
 80017e2:	4f30      	ldr	r7, [pc, #192]	@ (80018a4 <__ledf2+0xe0>)
 80017e4:	0d40      	lsrs	r0, r0, #21
 80017e6:	9101      	str	r1, [sp, #4]
 80017e8:	031e      	lsls	r6, r3, #12
 80017ea:	0069      	lsls	r1, r5, #1
 80017ec:	4682      	mov	sl, r0
 80017ee:	4691      	mov	r9, r2
 80017f0:	0d49      	lsrs	r1, r1, #21
 80017f2:	0b36      	lsrs	r6, r6, #12
 80017f4:	0fd8      	lsrs	r0, r3, #31
 80017f6:	42b9      	cmp	r1, r7
 80017f8:	d020      	beq.n	800183c <__ledf2+0x78>
 80017fa:	45ba      	cmp	sl, r7
 80017fc:	d00f      	beq.n	800181e <__ledf2+0x5a>
 80017fe:	2900      	cmp	r1, #0
 8001800:	d12b      	bne.n	800185a <__ledf2+0x96>
 8001802:	9901      	ldr	r1, [sp, #4]
 8001804:	430c      	orrs	r4, r1
 8001806:	4651      	mov	r1, sl
 8001808:	2900      	cmp	r1, #0
 800180a:	d137      	bne.n	800187c <__ledf2+0xb8>
 800180c:	4332      	orrs	r2, r6
 800180e:	d038      	beq.n	8001882 <__ledf2+0xbe>
 8001810:	2c00      	cmp	r4, #0
 8001812:	d144      	bne.n	800189e <__ledf2+0xda>
 8001814:	2800      	cmp	r0, #0
 8001816:	d119      	bne.n	800184c <__ledf2+0x88>
 8001818:	2001      	movs	r0, #1
 800181a:	4240      	negs	r0, r0
 800181c:	e016      	b.n	800184c <__ledf2+0x88>
 800181e:	4316      	orrs	r6, r2
 8001820:	d113      	bne.n	800184a <__ledf2+0x86>
 8001822:	2900      	cmp	r1, #0
 8001824:	d102      	bne.n	800182c <__ledf2+0x68>
 8001826:	9f01      	ldr	r7, [sp, #4]
 8001828:	4327      	orrs	r7, r4
 800182a:	d0f3      	beq.n	8001814 <__ledf2+0x50>
 800182c:	4584      	cmp	ip, r0
 800182e:	d020      	beq.n	8001872 <__ledf2+0xae>
 8001830:	4663      	mov	r3, ip
 8001832:	2002      	movs	r0, #2
 8001834:	3b01      	subs	r3, #1
 8001836:	4018      	ands	r0, r3
 8001838:	3801      	subs	r0, #1
 800183a:	e007      	b.n	800184c <__ledf2+0x88>
 800183c:	9f01      	ldr	r7, [sp, #4]
 800183e:	4327      	orrs	r7, r4
 8001840:	d103      	bne.n	800184a <__ledf2+0x86>
 8001842:	458a      	cmp	sl, r1
 8001844:	d1f4      	bne.n	8001830 <__ledf2+0x6c>
 8001846:	4316      	orrs	r6, r2
 8001848:	d01f      	beq.n	800188a <__ledf2+0xc6>
 800184a:	2002      	movs	r0, #2
 800184c:	b003      	add	sp, #12
 800184e:	bcf0      	pop	{r4, r5, r6, r7}
 8001850:	46bb      	mov	fp, r7
 8001852:	46b2      	mov	sl, r6
 8001854:	46a9      	mov	r9, r5
 8001856:	46a0      	mov	r8, r4
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	4654      	mov	r4, sl
 800185c:	2c00      	cmp	r4, #0
 800185e:	d0e7      	beq.n	8001830 <__ledf2+0x6c>
 8001860:	4584      	cmp	ip, r0
 8001862:	d1e5      	bne.n	8001830 <__ledf2+0x6c>
 8001864:	4551      	cmp	r1, sl
 8001866:	dce3      	bgt.n	8001830 <__ledf2+0x6c>
 8001868:	db03      	blt.n	8001872 <__ledf2+0xae>
 800186a:	9b01      	ldr	r3, [sp, #4]
 800186c:	42b3      	cmp	r3, r6
 800186e:	d8df      	bhi.n	8001830 <__ledf2+0x6c>
 8001870:	d00f      	beq.n	8001892 <__ledf2+0xce>
 8001872:	4663      	mov	r3, ip
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0cf      	beq.n	8001818 <__ledf2+0x54>
 8001878:	4660      	mov	r0, ip
 800187a:	e7e7      	b.n	800184c <__ledf2+0x88>
 800187c:	2c00      	cmp	r4, #0
 800187e:	d0c9      	beq.n	8001814 <__ledf2+0x50>
 8001880:	e7d4      	b.n	800182c <__ledf2+0x68>
 8001882:	2000      	movs	r0, #0
 8001884:	2c00      	cmp	r4, #0
 8001886:	d0e1      	beq.n	800184c <__ledf2+0x88>
 8001888:	e7d2      	b.n	8001830 <__ledf2+0x6c>
 800188a:	4584      	cmp	ip, r0
 800188c:	d1d0      	bne.n	8001830 <__ledf2+0x6c>
 800188e:	2000      	movs	r0, #0
 8001890:	e7dc      	b.n	800184c <__ledf2+0x88>
 8001892:	45c8      	cmp	r8, r9
 8001894:	d8cc      	bhi.n	8001830 <__ledf2+0x6c>
 8001896:	2000      	movs	r0, #0
 8001898:	45c8      	cmp	r8, r9
 800189a:	d2d7      	bcs.n	800184c <__ledf2+0x88>
 800189c:	e7e9      	b.n	8001872 <__ledf2+0xae>
 800189e:	4584      	cmp	ip, r0
 80018a0:	d0e3      	beq.n	800186a <__ledf2+0xa6>
 80018a2:	e7c5      	b.n	8001830 <__ledf2+0x6c>
 80018a4:	000007ff 	.word	0x000007ff

080018a8 <__aeabi_dmul>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	4657      	mov	r7, sl
 80018ac:	46de      	mov	lr, fp
 80018ae:	464e      	mov	r6, r9
 80018b0:	4645      	mov	r5, r8
 80018b2:	b5e0      	push	{r5, r6, r7, lr}
 80018b4:	001f      	movs	r7, r3
 80018b6:	030b      	lsls	r3, r1, #12
 80018b8:	0b1b      	lsrs	r3, r3, #12
 80018ba:	0016      	movs	r6, r2
 80018bc:	469a      	mov	sl, r3
 80018be:	0fca      	lsrs	r2, r1, #31
 80018c0:	004b      	lsls	r3, r1, #1
 80018c2:	0004      	movs	r4, r0
 80018c4:	4693      	mov	fp, r2
 80018c6:	b087      	sub	sp, #28
 80018c8:	0d5b      	lsrs	r3, r3, #21
 80018ca:	d100      	bne.n	80018ce <__aeabi_dmul+0x26>
 80018cc:	e0d5      	b.n	8001a7a <__aeabi_dmul+0x1d2>
 80018ce:	4abb      	ldr	r2, [pc, #748]	@ (8001bbc <__aeabi_dmul+0x314>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dmul+0x2e>
 80018d4:	e0f8      	b.n	8001ac8 <__aeabi_dmul+0x220>
 80018d6:	4651      	mov	r1, sl
 80018d8:	0f42      	lsrs	r2, r0, #29
 80018da:	00c9      	lsls	r1, r1, #3
 80018dc:	430a      	orrs	r2, r1
 80018de:	2180      	movs	r1, #128	@ 0x80
 80018e0:	0409      	lsls	r1, r1, #16
 80018e2:	4311      	orrs	r1, r2
 80018e4:	00c2      	lsls	r2, r0, #3
 80018e6:	4691      	mov	r9, r2
 80018e8:	4ab5      	ldr	r2, [pc, #724]	@ (8001bc0 <__aeabi_dmul+0x318>)
 80018ea:	468a      	mov	sl, r1
 80018ec:	189d      	adds	r5, r3, r2
 80018ee:	2300      	movs	r3, #0
 80018f0:	4698      	mov	r8, r3
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	033c      	lsls	r4, r7, #12
 80018f6:	007b      	lsls	r3, r7, #1
 80018f8:	0ffa      	lsrs	r2, r7, #31
 80018fa:	0030      	movs	r0, r6
 80018fc:	0b24      	lsrs	r4, r4, #12
 80018fe:	0d5b      	lsrs	r3, r3, #21
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	d100      	bne.n	8001906 <__aeabi_dmul+0x5e>
 8001904:	e096      	b.n	8001a34 <__aeabi_dmul+0x18c>
 8001906:	4aad      	ldr	r2, [pc, #692]	@ (8001bbc <__aeabi_dmul+0x314>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d031      	beq.n	8001970 <__aeabi_dmul+0xc8>
 800190c:	0f72      	lsrs	r2, r6, #29
 800190e:	00e4      	lsls	r4, r4, #3
 8001910:	4322      	orrs	r2, r4
 8001912:	2480      	movs	r4, #128	@ 0x80
 8001914:	0424      	lsls	r4, r4, #16
 8001916:	4314      	orrs	r4, r2
 8001918:	4aa9      	ldr	r2, [pc, #676]	@ (8001bc0 <__aeabi_dmul+0x318>)
 800191a:	00f0      	lsls	r0, r6, #3
 800191c:	4694      	mov	ip, r2
 800191e:	4463      	add	r3, ip
 8001920:	195b      	adds	r3, r3, r5
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	9201      	str	r2, [sp, #4]
 8001926:	4642      	mov	r2, r8
 8001928:	2600      	movs	r6, #0
 800192a:	2a0a      	cmp	r2, #10
 800192c:	dc42      	bgt.n	80019b4 <__aeabi_dmul+0x10c>
 800192e:	465a      	mov	r2, fp
 8001930:	9900      	ldr	r1, [sp, #0]
 8001932:	404a      	eors	r2, r1
 8001934:	4693      	mov	fp, r2
 8001936:	4642      	mov	r2, r8
 8001938:	2a02      	cmp	r2, #2
 800193a:	dc32      	bgt.n	80019a2 <__aeabi_dmul+0xfa>
 800193c:	3a01      	subs	r2, #1
 800193e:	2a01      	cmp	r2, #1
 8001940:	d900      	bls.n	8001944 <__aeabi_dmul+0x9c>
 8001942:	e149      	b.n	8001bd8 <__aeabi_dmul+0x330>
 8001944:	2e02      	cmp	r6, #2
 8001946:	d100      	bne.n	800194a <__aeabi_dmul+0xa2>
 8001948:	e0ca      	b.n	8001ae0 <__aeabi_dmul+0x238>
 800194a:	2e01      	cmp	r6, #1
 800194c:	d13d      	bne.n	80019ca <__aeabi_dmul+0x122>
 800194e:	2300      	movs	r3, #0
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	0010      	movs	r0, r2
 8001956:	465a      	mov	r2, fp
 8001958:	051b      	lsls	r3, r3, #20
 800195a:	4323      	orrs	r3, r4
 800195c:	07d2      	lsls	r2, r2, #31
 800195e:	4313      	orrs	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	b007      	add	sp, #28
 8001964:	bcf0      	pop	{r4, r5, r6, r7}
 8001966:	46bb      	mov	fp, r7
 8001968:	46b2      	mov	sl, r6
 800196a:	46a9      	mov	r9, r5
 800196c:	46a0      	mov	r8, r4
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001970:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <__aeabi_dmul+0x314>)
 8001972:	4326      	orrs	r6, r4
 8001974:	18eb      	adds	r3, r5, r3
 8001976:	2e00      	cmp	r6, #0
 8001978:	d100      	bne.n	800197c <__aeabi_dmul+0xd4>
 800197a:	e0bb      	b.n	8001af4 <__aeabi_dmul+0x24c>
 800197c:	2203      	movs	r2, #3
 800197e:	4641      	mov	r1, r8
 8001980:	4311      	orrs	r1, r2
 8001982:	465a      	mov	r2, fp
 8001984:	4688      	mov	r8, r1
 8001986:	9900      	ldr	r1, [sp, #0]
 8001988:	404a      	eors	r2, r1
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0109      	lsls	r1, r1, #4
 800198e:	468c      	mov	ip, r1
 8001990:	0029      	movs	r1, r5
 8001992:	4461      	add	r1, ip
 8001994:	9101      	str	r1, [sp, #4]
 8001996:	4641      	mov	r1, r8
 8001998:	290a      	cmp	r1, #10
 800199a:	dd00      	ble.n	800199e <__aeabi_dmul+0xf6>
 800199c:	e233      	b.n	8001e06 <__aeabi_dmul+0x55e>
 800199e:	4693      	mov	fp, r2
 80019a0:	2603      	movs	r6, #3
 80019a2:	4642      	mov	r2, r8
 80019a4:	2701      	movs	r7, #1
 80019a6:	4097      	lsls	r7, r2
 80019a8:	21a6      	movs	r1, #166	@ 0xa6
 80019aa:	003a      	movs	r2, r7
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	420f      	tst	r7, r1
 80019b2:	d031      	beq.n	8001a18 <__aeabi_dmul+0x170>
 80019b4:	9e02      	ldr	r6, [sp, #8]
 80019b6:	2e02      	cmp	r6, #2
 80019b8:	d100      	bne.n	80019bc <__aeabi_dmul+0x114>
 80019ba:	e235      	b.n	8001e28 <__aeabi_dmul+0x580>
 80019bc:	2e03      	cmp	r6, #3
 80019be:	d100      	bne.n	80019c2 <__aeabi_dmul+0x11a>
 80019c0:	e1d2      	b.n	8001d68 <__aeabi_dmul+0x4c0>
 80019c2:	4654      	mov	r4, sl
 80019c4:	4648      	mov	r0, r9
 80019c6:	2e01      	cmp	r6, #1
 80019c8:	d0c1      	beq.n	800194e <__aeabi_dmul+0xa6>
 80019ca:	9a01      	ldr	r2, [sp, #4]
 80019cc:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc4 <__aeabi_dmul+0x31c>)
 80019ce:	4694      	mov	ip, r2
 80019d0:	4463      	add	r3, ip
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x130>
 80019d6:	e0c0      	b.n	8001b5a <__aeabi_dmul+0x2b2>
 80019d8:	0742      	lsls	r2, r0, #29
 80019da:	d009      	beq.n	80019f0 <__aeabi_dmul+0x148>
 80019dc:	220f      	movs	r2, #15
 80019de:	4002      	ands	r2, r0
 80019e0:	2a04      	cmp	r2, #4
 80019e2:	d005      	beq.n	80019f0 <__aeabi_dmul+0x148>
 80019e4:	1d02      	adds	r2, r0, #4
 80019e6:	4282      	cmp	r2, r0
 80019e8:	4180      	sbcs	r0, r0
 80019ea:	4240      	negs	r0, r0
 80019ec:	1824      	adds	r4, r4, r0
 80019ee:	0010      	movs	r0, r2
 80019f0:	01e2      	lsls	r2, r4, #7
 80019f2:	d506      	bpl.n	8001a02 <__aeabi_dmul+0x15a>
 80019f4:	4b74      	ldr	r3, [pc, #464]	@ (8001bc8 <__aeabi_dmul+0x320>)
 80019f6:	9a01      	ldr	r2, [sp, #4]
 80019f8:	401c      	ands	r4, r3
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	4694      	mov	ip, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4463      	add	r3, ip
 8001a02:	4a72      	ldr	r2, [pc, #456]	@ (8001bcc <__aeabi_dmul+0x324>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	dc6b      	bgt.n	8001ae0 <__aeabi_dmul+0x238>
 8001a08:	0762      	lsls	r2, r4, #29
 8001a0a:	08c0      	lsrs	r0, r0, #3
 8001a0c:	0264      	lsls	r4, r4, #9
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	4302      	orrs	r2, r0
 8001a12:	0b24      	lsrs	r4, r4, #12
 8001a14:	0d5b      	lsrs	r3, r3, #21
 8001a16:	e79d      	b.n	8001954 <__aeabi_dmul+0xac>
 8001a18:	2190      	movs	r1, #144	@ 0x90
 8001a1a:	0089      	lsls	r1, r1, #2
 8001a1c:	420f      	tst	r7, r1
 8001a1e:	d163      	bne.n	8001ae8 <__aeabi_dmul+0x240>
 8001a20:	2288      	movs	r2, #136	@ 0x88
 8001a22:	423a      	tst	r2, r7
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dmul+0x180>
 8001a26:	e0d7      	b.n	8001bd8 <__aeabi_dmul+0x330>
 8001a28:	9b00      	ldr	r3, [sp, #0]
 8001a2a:	46a2      	mov	sl, r4
 8001a2c:	469b      	mov	fp, r3
 8001a2e:	4681      	mov	r9, r0
 8001a30:	9602      	str	r6, [sp, #8]
 8001a32:	e7bf      	b.n	80019b4 <__aeabi_dmul+0x10c>
 8001a34:	0023      	movs	r3, r4
 8001a36:	4333      	orrs	r3, r6
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dmul+0x194>
 8001a3a:	e07f      	b.n	8001b3c <__aeabi_dmul+0x294>
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dmul+0x19a>
 8001a40:	e1ad      	b.n	8001d9e <__aeabi_dmul+0x4f6>
 8001a42:	0020      	movs	r0, r4
 8001a44:	f7fe fd30 	bl	80004a8 <__clzsi2>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	3a0b      	subs	r2, #11
 8001a4e:	201d      	movs	r0, #29
 8001a50:	0019      	movs	r1, r3
 8001a52:	1a82      	subs	r2, r0, r2
 8001a54:	0030      	movs	r0, r6
 8001a56:	3908      	subs	r1, #8
 8001a58:	40d0      	lsrs	r0, r2
 8001a5a:	408c      	lsls	r4, r1
 8001a5c:	4304      	orrs	r4, r0
 8001a5e:	0030      	movs	r0, r6
 8001a60:	4088      	lsls	r0, r1
 8001a62:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd0 <__aeabi_dmul+0x328>)
 8001a64:	1aeb      	subs	r3, r5, r3
 8001a66:	4694      	mov	ip, r2
 8001a68:	4463      	add	r3, ip
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	9201      	str	r2, [sp, #4]
 8001a6e:	4642      	mov	r2, r8
 8001a70:	2600      	movs	r6, #0
 8001a72:	2a0a      	cmp	r2, #10
 8001a74:	dc00      	bgt.n	8001a78 <__aeabi_dmul+0x1d0>
 8001a76:	e75a      	b.n	800192e <__aeabi_dmul+0x86>
 8001a78:	e79c      	b.n	80019b4 <__aeabi_dmul+0x10c>
 8001a7a:	4653      	mov	r3, sl
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	d054      	beq.n	8001b2c <__aeabi_dmul+0x284>
 8001a82:	4653      	mov	r3, sl
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dmul+0x1e2>
 8001a88:	e177      	b.n	8001d7a <__aeabi_dmul+0x4d2>
 8001a8a:	4650      	mov	r0, sl
 8001a8c:	f7fe fd0c 	bl	80004a8 <__clzsi2>
 8001a90:	230b      	movs	r3, #11
 8001a92:	425b      	negs	r3, r3
 8001a94:	469c      	mov	ip, r3
 8001a96:	0002      	movs	r2, r0
 8001a98:	4484      	add	ip, r0
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	4650      	mov	r0, sl
 8001a9e:	3908      	subs	r1, #8
 8001aa0:	4088      	lsls	r0, r1
 8001aa2:	231d      	movs	r3, #29
 8001aa4:	4680      	mov	r8, r0
 8001aa6:	4660      	mov	r0, ip
 8001aa8:	1a1b      	subs	r3, r3, r0
 8001aaa:	0020      	movs	r0, r4
 8001aac:	40d8      	lsrs	r0, r3
 8001aae:	0003      	movs	r3, r0
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4303      	orrs	r3, r0
 8001ab4:	469a      	mov	sl, r3
 8001ab6:	0023      	movs	r3, r4
 8001ab8:	408b      	lsls	r3, r1
 8001aba:	4699      	mov	r9, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	4d44      	ldr	r5, [pc, #272]	@ (8001bd0 <__aeabi_dmul+0x328>)
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	1aad      	subs	r5, r5, r2
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	e715      	b.n	80018f4 <__aeabi_dmul+0x4c>
 8001ac8:	4652      	mov	r2, sl
 8001aca:	4302      	orrs	r2, r0
 8001acc:	4691      	mov	r9, r2
 8001ace:	d126      	bne.n	8001b1e <__aeabi_dmul+0x276>
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	001d      	movs	r5, r3
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	4692      	mov	sl, r2
 8001ad8:	3208      	adds	r2, #8
 8001ada:	4690      	mov	r8, r2
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	e709      	b.n	80018f4 <__aeabi_dmul+0x4c>
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4b35      	ldr	r3, [pc, #212]	@ (8001bbc <__aeabi_dmul+0x314>)
 8001ae6:	e735      	b.n	8001954 <__aeabi_dmul+0xac>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2480      	movs	r4, #128	@ 0x80
 8001aec:	469b      	mov	fp, r3
 8001aee:	0324      	lsls	r4, r4, #12
 8001af0:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <__aeabi_dmul+0x314>)
 8001af2:	e72f      	b.n	8001954 <__aeabi_dmul+0xac>
 8001af4:	2202      	movs	r2, #2
 8001af6:	4641      	mov	r1, r8
 8001af8:	4311      	orrs	r1, r2
 8001afa:	2280      	movs	r2, #128	@ 0x80
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	4694      	mov	ip, r2
 8001b00:	002a      	movs	r2, r5
 8001b02:	4462      	add	r2, ip
 8001b04:	4688      	mov	r8, r1
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	290a      	cmp	r1, #10
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dmul+0x266>
 8001b0c:	e752      	b.n	80019b4 <__aeabi_dmul+0x10c>
 8001b0e:	465a      	mov	r2, fp
 8001b10:	2000      	movs	r0, #0
 8001b12:	9900      	ldr	r1, [sp, #0]
 8001b14:	0004      	movs	r4, r0
 8001b16:	404a      	eors	r2, r1
 8001b18:	4693      	mov	fp, r2
 8001b1a:	2602      	movs	r6, #2
 8001b1c:	e70b      	b.n	8001936 <__aeabi_dmul+0x8e>
 8001b1e:	220c      	movs	r2, #12
 8001b20:	001d      	movs	r5, r3
 8001b22:	2303      	movs	r3, #3
 8001b24:	4681      	mov	r9, r0
 8001b26:	4690      	mov	r8, r2
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	e6e3      	b.n	80018f4 <__aeabi_dmul+0x4c>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	469a      	mov	sl, r3
 8001b30:	3304      	adds	r3, #4
 8001b32:	4698      	mov	r8, r3
 8001b34:	3b03      	subs	r3, #3
 8001b36:	2500      	movs	r5, #0
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	e6db      	b.n	80018f4 <__aeabi_dmul+0x4c>
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	3301      	adds	r3, #1
 8001b40:	431a      	orrs	r2, r3
 8001b42:	002b      	movs	r3, r5
 8001b44:	4690      	mov	r8, r2
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	2000      	movs	r0, #0
 8001b50:	2601      	movs	r6, #1
 8001b52:	2a0a      	cmp	r2, #10
 8001b54:	dc00      	bgt.n	8001b58 <__aeabi_dmul+0x2b0>
 8001b56:	e6ea      	b.n	800192e <__aeabi_dmul+0x86>
 8001b58:	e72c      	b.n	80019b4 <__aeabi_dmul+0x10c>
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	2a38      	cmp	r2, #56	@ 0x38
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dmul+0x2bc>
 8001b62:	e6f4      	b.n	800194e <__aeabi_dmul+0xa6>
 8001b64:	2a1f      	cmp	r2, #31
 8001b66:	dc00      	bgt.n	8001b6a <__aeabi_dmul+0x2c2>
 8001b68:	e12a      	b.n	8001dc0 <__aeabi_dmul+0x518>
 8001b6a:	211f      	movs	r1, #31
 8001b6c:	4249      	negs	r1, r1
 8001b6e:	1acb      	subs	r3, r1, r3
 8001b70:	0021      	movs	r1, r4
 8001b72:	40d9      	lsrs	r1, r3
 8001b74:	000b      	movs	r3, r1
 8001b76:	2a20      	cmp	r2, #32
 8001b78:	d005      	beq.n	8001b86 <__aeabi_dmul+0x2de>
 8001b7a:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <__aeabi_dmul+0x32c>)
 8001b7c:	9d01      	ldr	r5, [sp, #4]
 8001b7e:	4694      	mov	ip, r2
 8001b80:	4465      	add	r5, ip
 8001b82:	40ac      	lsls	r4, r5
 8001b84:	4320      	orrs	r0, r4
 8001b86:	1e42      	subs	r2, r0, #1
 8001b88:	4190      	sbcs	r0, r2
 8001b8a:	4318      	orrs	r0, r3
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	0019      	movs	r1, r3
 8001b90:	2400      	movs	r4, #0
 8001b92:	4001      	ands	r1, r0
 8001b94:	4203      	tst	r3, r0
 8001b96:	d00c      	beq.n	8001bb2 <__aeabi_dmul+0x30a>
 8001b98:	230f      	movs	r3, #15
 8001b9a:	4003      	ands	r3, r0
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dmul+0x2fa>
 8001ba0:	e140      	b.n	8001e24 <__aeabi_dmul+0x57c>
 8001ba2:	1d03      	adds	r3, r0, #4
 8001ba4:	4283      	cmp	r3, r0
 8001ba6:	41a4      	sbcs	r4, r4
 8001ba8:	0018      	movs	r0, r3
 8001baa:	4264      	negs	r4, r4
 8001bac:	0761      	lsls	r1, r4, #29
 8001bae:	0264      	lsls	r4, r4, #9
 8001bb0:	0b24      	lsrs	r4, r4, #12
 8001bb2:	08c2      	lsrs	r2, r0, #3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	e6cc      	b.n	8001954 <__aeabi_dmul+0xac>
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	000007ff 	.word	0x000007ff
 8001bc0:	fffffc01 	.word	0xfffffc01
 8001bc4:	000003ff 	.word	0x000003ff
 8001bc8:	feffffff 	.word	0xfeffffff
 8001bcc:	000007fe 	.word	0x000007fe
 8001bd0:	fffffc0d 	.word	0xfffffc0d
 8001bd4:	0000043e 	.word	0x0000043e
 8001bd8:	4649      	mov	r1, r9
 8001bda:	464a      	mov	r2, r9
 8001bdc:	0409      	lsls	r1, r1, #16
 8001bde:	0c09      	lsrs	r1, r1, #16
 8001be0:	000d      	movs	r5, r1
 8001be2:	0c16      	lsrs	r6, r2, #16
 8001be4:	0c02      	lsrs	r2, r0, #16
 8001be6:	0400      	lsls	r0, r0, #16
 8001be8:	0c00      	lsrs	r0, r0, #16
 8001bea:	4345      	muls	r5, r0
 8001bec:	46ac      	mov	ip, r5
 8001bee:	0005      	movs	r5, r0
 8001bf0:	4375      	muls	r5, r6
 8001bf2:	46a8      	mov	r8, r5
 8001bf4:	0015      	movs	r5, r2
 8001bf6:	000f      	movs	r7, r1
 8001bf8:	4375      	muls	r5, r6
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	9502      	str	r5, [sp, #8]
 8001bfe:	002a      	movs	r2, r5
 8001c00:	9d00      	ldr	r5, [sp, #0]
 8001c02:	436f      	muls	r7, r5
 8001c04:	4665      	mov	r5, ip
 8001c06:	0c2d      	lsrs	r5, r5, #16
 8001c08:	46a9      	mov	r9, r5
 8001c0a:	4447      	add	r7, r8
 8001c0c:	444f      	add	r7, r9
 8001c0e:	45b8      	cmp	r8, r7
 8001c10:	d905      	bls.n	8001c1e <__aeabi_dmul+0x376>
 8001c12:	0015      	movs	r5, r2
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	0252      	lsls	r2, r2, #9
 8001c18:	4690      	mov	r8, r2
 8001c1a:	4445      	add	r5, r8
 8001c1c:	9502      	str	r5, [sp, #8]
 8001c1e:	0c3d      	lsrs	r5, r7, #16
 8001c20:	9503      	str	r5, [sp, #12]
 8001c22:	4665      	mov	r5, ip
 8001c24:	042d      	lsls	r5, r5, #16
 8001c26:	043f      	lsls	r7, r7, #16
 8001c28:	0c2d      	lsrs	r5, r5, #16
 8001c2a:	46ac      	mov	ip, r5
 8001c2c:	003d      	movs	r5, r7
 8001c2e:	4465      	add	r5, ip
 8001c30:	9504      	str	r5, [sp, #16]
 8001c32:	0c25      	lsrs	r5, r4, #16
 8001c34:	0424      	lsls	r4, r4, #16
 8001c36:	0c24      	lsrs	r4, r4, #16
 8001c38:	46ac      	mov	ip, r5
 8001c3a:	0025      	movs	r5, r4
 8001c3c:	4375      	muls	r5, r6
 8001c3e:	46a8      	mov	r8, r5
 8001c40:	4665      	mov	r5, ip
 8001c42:	000f      	movs	r7, r1
 8001c44:	4369      	muls	r1, r5
 8001c46:	4441      	add	r1, r8
 8001c48:	4689      	mov	r9, r1
 8001c4a:	4367      	muls	r7, r4
 8001c4c:	0c39      	lsrs	r1, r7, #16
 8001c4e:	4449      	add	r1, r9
 8001c50:	436e      	muls	r6, r5
 8001c52:	4588      	cmp	r8, r1
 8001c54:	d903      	bls.n	8001c5e <__aeabi_dmul+0x3b6>
 8001c56:	2280      	movs	r2, #128	@ 0x80
 8001c58:	0252      	lsls	r2, r2, #9
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4446      	add	r6, r8
 8001c5e:	0c0d      	lsrs	r5, r1, #16
 8001c60:	46a8      	mov	r8, r5
 8001c62:	0035      	movs	r5, r6
 8001c64:	4445      	add	r5, r8
 8001c66:	9505      	str	r5, [sp, #20]
 8001c68:	9d03      	ldr	r5, [sp, #12]
 8001c6a:	043f      	lsls	r7, r7, #16
 8001c6c:	46a8      	mov	r8, r5
 8001c6e:	0c3f      	lsrs	r7, r7, #16
 8001c70:	0409      	lsls	r1, r1, #16
 8001c72:	19c9      	adds	r1, r1, r7
 8001c74:	4488      	add	r8, r1
 8001c76:	4645      	mov	r5, r8
 8001c78:	9503      	str	r5, [sp, #12]
 8001c7a:	4655      	mov	r5, sl
 8001c7c:	042e      	lsls	r6, r5, #16
 8001c7e:	0c36      	lsrs	r6, r6, #16
 8001c80:	0c2f      	lsrs	r7, r5, #16
 8001c82:	0035      	movs	r5, r6
 8001c84:	4345      	muls	r5, r0
 8001c86:	4378      	muls	r0, r7
 8001c88:	4681      	mov	r9, r0
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	46a8      	mov	r8, r5
 8001c8e:	0c2d      	lsrs	r5, r5, #16
 8001c90:	46aa      	mov	sl, r5
 8001c92:	9a00      	ldr	r2, [sp, #0]
 8001c94:	4350      	muls	r0, r2
 8001c96:	4372      	muls	r2, r6
 8001c98:	444a      	add	r2, r9
 8001c9a:	4452      	add	r2, sl
 8001c9c:	4591      	cmp	r9, r2
 8001c9e:	d903      	bls.n	8001ca8 <__aeabi_dmul+0x400>
 8001ca0:	2580      	movs	r5, #128	@ 0x80
 8001ca2:	026d      	lsls	r5, r5, #9
 8001ca4:	46a9      	mov	r9, r5
 8001ca6:	4448      	add	r0, r9
 8001ca8:	0c15      	lsrs	r5, r2, #16
 8001caa:	46a9      	mov	r9, r5
 8001cac:	4645      	mov	r5, r8
 8001cae:	042d      	lsls	r5, r5, #16
 8001cb0:	0c2d      	lsrs	r5, r5, #16
 8001cb2:	46a8      	mov	r8, r5
 8001cb4:	4665      	mov	r5, ip
 8001cb6:	437d      	muls	r5, r7
 8001cb8:	0412      	lsls	r2, r2, #16
 8001cba:	4448      	add	r0, r9
 8001cbc:	4490      	add	r8, r2
 8001cbe:	46a9      	mov	r9, r5
 8001cc0:	0032      	movs	r2, r6
 8001cc2:	4665      	mov	r5, ip
 8001cc4:	4362      	muls	r2, r4
 8001cc6:	436e      	muls	r6, r5
 8001cc8:	437c      	muls	r4, r7
 8001cca:	0c17      	lsrs	r7, r2, #16
 8001ccc:	1936      	adds	r6, r6, r4
 8001cce:	19bf      	adds	r7, r7, r6
 8001cd0:	42bc      	cmp	r4, r7
 8001cd2:	d903      	bls.n	8001cdc <__aeabi_dmul+0x434>
 8001cd4:	2480      	movs	r4, #128	@ 0x80
 8001cd6:	0264      	lsls	r4, r4, #9
 8001cd8:	46a4      	mov	ip, r4
 8001cda:	44e1      	add	r9, ip
 8001cdc:	9c02      	ldr	r4, [sp, #8]
 8001cde:	9e03      	ldr	r6, [sp, #12]
 8001ce0:	46a4      	mov	ip, r4
 8001ce2:	9d05      	ldr	r5, [sp, #20]
 8001ce4:	4466      	add	r6, ip
 8001ce6:	428e      	cmp	r6, r1
 8001ce8:	4189      	sbcs	r1, r1
 8001cea:	46ac      	mov	ip, r5
 8001cec:	0412      	lsls	r2, r2, #16
 8001cee:	043c      	lsls	r4, r7, #16
 8001cf0:	0c12      	lsrs	r2, r2, #16
 8001cf2:	18a2      	adds	r2, r4, r2
 8001cf4:	4462      	add	r2, ip
 8001cf6:	4249      	negs	r1, r1
 8001cf8:	1854      	adds	r4, r2, r1
 8001cfa:	4446      	add	r6, r8
 8001cfc:	46a4      	mov	ip, r4
 8001cfe:	4546      	cmp	r6, r8
 8001d00:	41a4      	sbcs	r4, r4
 8001d02:	4682      	mov	sl, r0
 8001d04:	4264      	negs	r4, r4
 8001d06:	46a0      	mov	r8, r4
 8001d08:	42aa      	cmp	r2, r5
 8001d0a:	4192      	sbcs	r2, r2
 8001d0c:	458c      	cmp	ip, r1
 8001d0e:	4189      	sbcs	r1, r1
 8001d10:	44e2      	add	sl, ip
 8001d12:	44d0      	add	r8, sl
 8001d14:	4249      	negs	r1, r1
 8001d16:	4252      	negs	r2, r2
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	45a0      	cmp	r8, r4
 8001d1c:	41a4      	sbcs	r4, r4
 8001d1e:	4582      	cmp	sl, r0
 8001d20:	4189      	sbcs	r1, r1
 8001d22:	4264      	negs	r4, r4
 8001d24:	4249      	negs	r1, r1
 8001d26:	430c      	orrs	r4, r1
 8001d28:	4641      	mov	r1, r8
 8001d2a:	0c3f      	lsrs	r7, r7, #16
 8001d2c:	19d2      	adds	r2, r2, r7
 8001d2e:	1912      	adds	r2, r2, r4
 8001d30:	0dcc      	lsrs	r4, r1, #23
 8001d32:	9904      	ldr	r1, [sp, #16]
 8001d34:	0270      	lsls	r0, r6, #9
 8001d36:	4308      	orrs	r0, r1
 8001d38:	1e41      	subs	r1, r0, #1
 8001d3a:	4188      	sbcs	r0, r1
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	444a      	add	r2, r9
 8001d40:	0df6      	lsrs	r6, r6, #23
 8001d42:	0252      	lsls	r2, r2, #9
 8001d44:	4330      	orrs	r0, r6
 8001d46:	0249      	lsls	r1, r1, #9
 8001d48:	4314      	orrs	r4, r2
 8001d4a:	4308      	orrs	r0, r1
 8001d4c:	01d2      	lsls	r2, r2, #7
 8001d4e:	d535      	bpl.n	8001dbc <__aeabi_dmul+0x514>
 8001d50:	2201      	movs	r2, #1
 8001d52:	0843      	lsrs	r3, r0, #1
 8001d54:	4002      	ands	r2, r0
 8001d56:	4313      	orrs	r3, r2
 8001d58:	07e0      	lsls	r0, r4, #31
 8001d5a:	4318      	orrs	r0, r3
 8001d5c:	0864      	lsrs	r4, r4, #1
 8001d5e:	e634      	b.n	80019ca <__aeabi_dmul+0x122>
 8001d60:	9b00      	ldr	r3, [sp, #0]
 8001d62:	46a2      	mov	sl, r4
 8001d64:	469b      	mov	fp, r3
 8001d66:	4681      	mov	r9, r0
 8001d68:	2480      	movs	r4, #128	@ 0x80
 8001d6a:	4653      	mov	r3, sl
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	431c      	orrs	r4, r3
 8001d70:	0324      	lsls	r4, r4, #12
 8001d72:	464a      	mov	r2, r9
 8001d74:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <__aeabi_dmul+0x588>)
 8001d76:	0b24      	lsrs	r4, r4, #12
 8001d78:	e5ec      	b.n	8001954 <__aeabi_dmul+0xac>
 8001d7a:	f7fe fb95 	bl	80004a8 <__clzsi2>
 8001d7e:	2315      	movs	r3, #21
 8001d80:	469c      	mov	ip, r3
 8001d82:	4484      	add	ip, r0
 8001d84:	0002      	movs	r2, r0
 8001d86:	4663      	mov	r3, ip
 8001d88:	3220      	adds	r2, #32
 8001d8a:	2b1c      	cmp	r3, #28
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_dmul+0x4e8>
 8001d8e:	e684      	b.n	8001a9a <__aeabi_dmul+0x1f2>
 8001d90:	2300      	movs	r3, #0
 8001d92:	4699      	mov	r9, r3
 8001d94:	0023      	movs	r3, r4
 8001d96:	3808      	subs	r0, #8
 8001d98:	4083      	lsls	r3, r0
 8001d9a:	469a      	mov	sl, r3
 8001d9c:	e68e      	b.n	8001abc <__aeabi_dmul+0x214>
 8001d9e:	f7fe fb83 	bl	80004a8 <__clzsi2>
 8001da2:	0002      	movs	r2, r0
 8001da4:	0003      	movs	r3, r0
 8001da6:	3215      	adds	r2, #21
 8001da8:	3320      	adds	r3, #32
 8001daa:	2a1c      	cmp	r2, #28
 8001dac:	dc00      	bgt.n	8001db0 <__aeabi_dmul+0x508>
 8001dae:	e64e      	b.n	8001a4e <__aeabi_dmul+0x1a6>
 8001db0:	0002      	movs	r2, r0
 8001db2:	0034      	movs	r4, r6
 8001db4:	3a08      	subs	r2, #8
 8001db6:	2000      	movs	r0, #0
 8001db8:	4094      	lsls	r4, r2
 8001dba:	e652      	b.n	8001a62 <__aeabi_dmul+0x1ba>
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	e604      	b.n	80019ca <__aeabi_dmul+0x122>
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <__aeabi_dmul+0x58c>)
 8001dc2:	0021      	movs	r1, r4
 8001dc4:	469c      	mov	ip, r3
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	9d01      	ldr	r5, [sp, #4]
 8001dca:	40d3      	lsrs	r3, r2
 8001dcc:	4465      	add	r5, ip
 8001dce:	40a9      	lsls	r1, r5
 8001dd0:	4319      	orrs	r1, r3
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	40ab      	lsls	r3, r5
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	4183      	sbcs	r3, r0
 8001dda:	4319      	orrs	r1, r3
 8001ddc:	0008      	movs	r0, r1
 8001dde:	40d4      	lsrs	r4, r2
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	d009      	beq.n	8001df8 <__aeabi_dmul+0x550>
 8001de4:	230f      	movs	r3, #15
 8001de6:	400b      	ands	r3, r1
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d005      	beq.n	8001df8 <__aeabi_dmul+0x550>
 8001dec:	1d0b      	adds	r3, r1, #4
 8001dee:	428b      	cmp	r3, r1
 8001df0:	4180      	sbcs	r0, r0
 8001df2:	4240      	negs	r0, r0
 8001df4:	1824      	adds	r4, r4, r0
 8001df6:	0018      	movs	r0, r3
 8001df8:	0223      	lsls	r3, r4, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dmul+0x556>
 8001dfc:	e6d6      	b.n	8001bac <__aeabi_dmul+0x304>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	2400      	movs	r4, #0
 8001e02:	2200      	movs	r2, #0
 8001e04:	e5a6      	b.n	8001954 <__aeabi_dmul+0xac>
 8001e06:	290f      	cmp	r1, #15
 8001e08:	d1aa      	bne.n	8001d60 <__aeabi_dmul+0x4b8>
 8001e0a:	2380      	movs	r3, #128	@ 0x80
 8001e0c:	4652      	mov	r2, sl
 8001e0e:	031b      	lsls	r3, r3, #12
 8001e10:	421a      	tst	r2, r3
 8001e12:	d0a9      	beq.n	8001d68 <__aeabi_dmul+0x4c0>
 8001e14:	421c      	tst	r4, r3
 8001e16:	d1a7      	bne.n	8001d68 <__aeabi_dmul+0x4c0>
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	469b      	mov	fp, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <__aeabi_dmul+0x588>)
 8001e22:	e597      	b.n	8001954 <__aeabi_dmul+0xac>
 8001e24:	2400      	movs	r4, #0
 8001e26:	e6c1      	b.n	8001bac <__aeabi_dmul+0x304>
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4b01      	ldr	r3, [pc, #4]	@ (8001e30 <__aeabi_dmul+0x588>)
 8001e2c:	0022      	movs	r2, r4
 8001e2e:	e591      	b.n	8001954 <__aeabi_dmul+0xac>
 8001e30:	000007ff 	.word	0x000007ff
 8001e34:	0000041e 	.word	0x0000041e

08001e38 <__aeabi_dsub>:
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	46de      	mov	lr, fp
 8001e40:	4657      	mov	r7, sl
 8001e42:	b5e0      	push	{r5, r6, r7, lr}
 8001e44:	b085      	sub	sp, #20
 8001e46:	9000      	str	r0, [sp, #0]
 8001e48:	9101      	str	r1, [sp, #4]
 8001e4a:	030c      	lsls	r4, r1, #12
 8001e4c:	004f      	lsls	r7, r1, #1
 8001e4e:	0fce      	lsrs	r6, r1, #31
 8001e50:	0a61      	lsrs	r1, r4, #9
 8001e52:	9c00      	ldr	r4, [sp, #0]
 8001e54:	46b0      	mov	r8, r6
 8001e56:	0f64      	lsrs	r4, r4, #29
 8001e58:	430c      	orrs	r4, r1
 8001e5a:	9900      	ldr	r1, [sp, #0]
 8001e5c:	0d7f      	lsrs	r7, r7, #21
 8001e5e:	00c8      	lsls	r0, r1, #3
 8001e60:	0011      	movs	r1, r2
 8001e62:	001a      	movs	r2, r3
 8001e64:	031b      	lsls	r3, r3, #12
 8001e66:	469c      	mov	ip, r3
 8001e68:	9100      	str	r1, [sp, #0]
 8001e6a:	9201      	str	r2, [sp, #4]
 8001e6c:	0051      	lsls	r1, r2, #1
 8001e6e:	0d4b      	lsrs	r3, r1, #21
 8001e70:	4699      	mov	r9, r3
 8001e72:	9b01      	ldr	r3, [sp, #4]
 8001e74:	9d00      	ldr	r5, [sp, #0]
 8001e76:	0fd9      	lsrs	r1, r3, #31
 8001e78:	4663      	mov	r3, ip
 8001e7a:	0f6a      	lsrs	r2, r5, #29
 8001e7c:	0a5b      	lsrs	r3, r3, #9
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	00ea      	lsls	r2, r5, #3
 8001e82:	4694      	mov	ip, r2
 8001e84:	4693      	mov	fp, r2
 8001e86:	4ac1      	ldr	r2, [pc, #772]	@ (800218c <__aeabi_dsub+0x354>)
 8001e88:	9003      	str	r0, [sp, #12]
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	4591      	cmp	r9, r2
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x5a>
 8001e90:	e0cd      	b.n	800202e <__aeabi_dsub+0x1f6>
 8001e92:	2501      	movs	r5, #1
 8001e94:	4069      	eors	r1, r5
 8001e96:	464d      	mov	r5, r9
 8001e98:	1b7d      	subs	r5, r7, r5
 8001e9a:	46aa      	mov	sl, r5
 8001e9c:	428e      	cmp	r6, r1
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_dsub+0x6a>
 8001ea0:	e080      	b.n	8001fa4 <__aeabi_dsub+0x16c>
 8001ea2:	2d00      	cmp	r5, #0
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dsub+0x70>
 8001ea6:	e335      	b.n	8002514 <__aeabi_dsub+0x6dc>
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x78>
 8001eae:	e0df      	b.n	8002070 <__aeabi_dsub+0x238>
 8001eb0:	4297      	cmp	r7, r2
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dsub+0x7e>
 8001eb4:	e194      	b.n	80021e0 <__aeabi_dsub+0x3a8>
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	2501      	movs	r5, #1
 8001eba:	2a38      	cmp	r2, #56	@ 0x38
 8001ebc:	dc19      	bgt.n	8001ef2 <__aeabi_dsub+0xba>
 8001ebe:	2280      	movs	r2, #128	@ 0x80
 8001ec0:	9b02      	ldr	r3, [sp, #8]
 8001ec2:	0412      	lsls	r2, r2, #16
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	4652      	mov	r2, sl
 8001eca:	2a1f      	cmp	r2, #31
 8001ecc:	dd00      	ble.n	8001ed0 <__aeabi_dsub+0x98>
 8001ece:	e1e3      	b.n	8002298 <__aeabi_dsub+0x460>
 8001ed0:	4653      	mov	r3, sl
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	4661      	mov	r1, ip
 8001ed6:	9d02      	ldr	r5, [sp, #8]
 8001ed8:	1ad2      	subs	r2, r2, r3
 8001eda:	4095      	lsls	r5, r2
 8001edc:	40d9      	lsrs	r1, r3
 8001ede:	430d      	orrs	r5, r1
 8001ee0:	4661      	mov	r1, ip
 8001ee2:	4091      	lsls	r1, r2
 8001ee4:	000a      	movs	r2, r1
 8001ee6:	1e51      	subs	r1, r2, #1
 8001ee8:	418a      	sbcs	r2, r1
 8001eea:	4315      	orrs	r5, r2
 8001eec:	9a02      	ldr	r2, [sp, #8]
 8001eee:	40da      	lsrs	r2, r3
 8001ef0:	1aa4      	subs	r4, r4, r2
 8001ef2:	1b45      	subs	r5, r0, r5
 8001ef4:	42a8      	cmp	r0, r5
 8001ef6:	4180      	sbcs	r0, r0
 8001ef8:	4240      	negs	r0, r0
 8001efa:	1a24      	subs	r4, r4, r0
 8001efc:	0223      	lsls	r3, r4, #8
 8001efe:	d400      	bmi.n	8001f02 <__aeabi_dsub+0xca>
 8001f00:	e13d      	b.n	800217e <__aeabi_dsub+0x346>
 8001f02:	0264      	lsls	r4, r4, #9
 8001f04:	0a64      	lsrs	r4, r4, #9
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0xd4>
 8001f0a:	e147      	b.n	800219c <__aeabi_dsub+0x364>
 8001f0c:	0020      	movs	r0, r4
 8001f0e:	f7fe facb 	bl	80004a8 <__clzsi2>
 8001f12:	0003      	movs	r3, r0
 8001f14:	3b08      	subs	r3, #8
 8001f16:	2120      	movs	r1, #32
 8001f18:	0028      	movs	r0, r5
 8001f1a:	1aca      	subs	r2, r1, r3
 8001f1c:	40d0      	lsrs	r0, r2
 8001f1e:	409c      	lsls	r4, r3
 8001f20:	0002      	movs	r2, r0
 8001f22:	409d      	lsls	r5, r3
 8001f24:	4322      	orrs	r2, r4
 8001f26:	429f      	cmp	r7, r3
 8001f28:	dd00      	ble.n	8001f2c <__aeabi_dsub+0xf4>
 8001f2a:	e177      	b.n	800221c <__aeabi_dsub+0x3e4>
 8001f2c:	1bd8      	subs	r0, r3, r7
 8001f2e:	3001      	adds	r0, #1
 8001f30:	1a09      	subs	r1, r1, r0
 8001f32:	002c      	movs	r4, r5
 8001f34:	408d      	lsls	r5, r1
 8001f36:	40c4      	lsrs	r4, r0
 8001f38:	1e6b      	subs	r3, r5, #1
 8001f3a:	419d      	sbcs	r5, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	40c2      	lsrs	r2, r0
 8001f40:	408b      	lsls	r3, r1
 8001f42:	4325      	orrs	r5, r4
 8001f44:	2700      	movs	r7, #0
 8001f46:	0014      	movs	r4, r2
 8001f48:	431d      	orrs	r5, r3
 8001f4a:	076b      	lsls	r3, r5, #29
 8001f4c:	d009      	beq.n	8001f62 <__aeabi_dsub+0x12a>
 8001f4e:	230f      	movs	r3, #15
 8001f50:	402b      	ands	r3, r5
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d005      	beq.n	8001f62 <__aeabi_dsub+0x12a>
 8001f56:	1d2b      	adds	r3, r5, #4
 8001f58:	42ab      	cmp	r3, r5
 8001f5a:	41ad      	sbcs	r5, r5
 8001f5c:	426d      	negs	r5, r5
 8001f5e:	1964      	adds	r4, r4, r5
 8001f60:	001d      	movs	r5, r3
 8001f62:	0223      	lsls	r3, r4, #8
 8001f64:	d400      	bmi.n	8001f68 <__aeabi_dsub+0x130>
 8001f66:	e140      	b.n	80021ea <__aeabi_dsub+0x3b2>
 8001f68:	4a88      	ldr	r2, [pc, #544]	@ (800218c <__aeabi_dsub+0x354>)
 8001f6a:	3701      	adds	r7, #1
 8001f6c:	4297      	cmp	r7, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x13a>
 8001f70:	e101      	b.n	8002176 <__aeabi_dsub+0x33e>
 8001f72:	2601      	movs	r6, #1
 8001f74:	4643      	mov	r3, r8
 8001f76:	4986      	ldr	r1, [pc, #536]	@ (8002190 <__aeabi_dsub+0x358>)
 8001f78:	08ed      	lsrs	r5, r5, #3
 8001f7a:	4021      	ands	r1, r4
 8001f7c:	074a      	lsls	r2, r1, #29
 8001f7e:	432a      	orrs	r2, r5
 8001f80:	057c      	lsls	r4, r7, #21
 8001f82:	024d      	lsls	r5, r1, #9
 8001f84:	0b2d      	lsrs	r5, r5, #12
 8001f86:	0d64      	lsrs	r4, r4, #21
 8001f88:	401e      	ands	r6, r3
 8001f8a:	0524      	lsls	r4, r4, #20
 8001f8c:	432c      	orrs	r4, r5
 8001f8e:	07f6      	lsls	r6, r6, #31
 8001f90:	4334      	orrs	r4, r6
 8001f92:	0010      	movs	r0, r2
 8001f94:	0021      	movs	r1, r4
 8001f96:	b005      	add	sp, #20
 8001f98:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9a:	46bb      	mov	fp, r7
 8001f9c:	46b2      	mov	sl, r6
 8001f9e:	46a9      	mov	r9, r5
 8001fa0:	46a0      	mov	r8, r4
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	2d00      	cmp	r5, #0
 8001fa6:	dc00      	bgt.n	8001faa <__aeabi_dsub+0x172>
 8001fa8:	e2d0      	b.n	800254c <__aeabi_dsub+0x714>
 8001faa:	4649      	mov	r1, r9
 8001fac:	2900      	cmp	r1, #0
 8001fae:	d000      	beq.n	8001fb2 <__aeabi_dsub+0x17a>
 8001fb0:	e0d4      	b.n	800215c <__aeabi_dsub+0x324>
 8001fb2:	4661      	mov	r1, ip
 8001fb4:	9b02      	ldr	r3, [sp, #8]
 8001fb6:	4319      	orrs	r1, r3
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x184>
 8001fba:	e12b      	b.n	8002214 <__aeabi_dsub+0x3dc>
 8001fbc:	1e69      	subs	r1, r5, #1
 8001fbe:	2d01      	cmp	r5, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x18c>
 8001fc2:	e1d9      	b.n	8002378 <__aeabi_dsub+0x540>
 8001fc4:	4295      	cmp	r5, r2
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dsub+0x192>
 8001fc8:	e10a      	b.n	80021e0 <__aeabi_dsub+0x3a8>
 8001fca:	2501      	movs	r5, #1
 8001fcc:	2938      	cmp	r1, #56	@ 0x38
 8001fce:	dc17      	bgt.n	8002000 <__aeabi_dsub+0x1c8>
 8001fd0:	468a      	mov	sl, r1
 8001fd2:	4653      	mov	r3, sl
 8001fd4:	2b1f      	cmp	r3, #31
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dsub+0x1a2>
 8001fd8:	e1e7      	b.n	80023aa <__aeabi_dsub+0x572>
 8001fda:	2220      	movs	r2, #32
 8001fdc:	1ad2      	subs	r2, r2, r3
 8001fde:	9b02      	ldr	r3, [sp, #8]
 8001fe0:	4661      	mov	r1, ip
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	001d      	movs	r5, r3
 8001fe6:	4653      	mov	r3, sl
 8001fe8:	40d9      	lsrs	r1, r3
 8001fea:	4663      	mov	r3, ip
 8001fec:	4093      	lsls	r3, r2
 8001fee:	001a      	movs	r2, r3
 8001ff0:	430d      	orrs	r5, r1
 8001ff2:	1e51      	subs	r1, r2, #1
 8001ff4:	418a      	sbcs	r2, r1
 8001ff6:	4653      	mov	r3, sl
 8001ff8:	4315      	orrs	r5, r2
 8001ffa:	9a02      	ldr	r2, [sp, #8]
 8001ffc:	40da      	lsrs	r2, r3
 8001ffe:	18a4      	adds	r4, r4, r2
 8002000:	182d      	adds	r5, r5, r0
 8002002:	4285      	cmp	r5, r0
 8002004:	4180      	sbcs	r0, r0
 8002006:	4240      	negs	r0, r0
 8002008:	1824      	adds	r4, r4, r0
 800200a:	0223      	lsls	r3, r4, #8
 800200c:	d400      	bmi.n	8002010 <__aeabi_dsub+0x1d8>
 800200e:	e0b6      	b.n	800217e <__aeabi_dsub+0x346>
 8002010:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <__aeabi_dsub+0x354>)
 8002012:	3701      	adds	r7, #1
 8002014:	429f      	cmp	r7, r3
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x1e2>
 8002018:	e0ad      	b.n	8002176 <__aeabi_dsub+0x33e>
 800201a:	2101      	movs	r1, #1
 800201c:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <__aeabi_dsub+0x358>)
 800201e:	086a      	lsrs	r2, r5, #1
 8002020:	401c      	ands	r4, r3
 8002022:	4029      	ands	r1, r5
 8002024:	430a      	orrs	r2, r1
 8002026:	07e5      	lsls	r5, r4, #31
 8002028:	4315      	orrs	r5, r2
 800202a:	0864      	lsrs	r4, r4, #1
 800202c:	e78d      	b.n	8001f4a <__aeabi_dsub+0x112>
 800202e:	4a59      	ldr	r2, [pc, #356]	@ (8002194 <__aeabi_dsub+0x35c>)
 8002030:	9b02      	ldr	r3, [sp, #8]
 8002032:	4692      	mov	sl, r2
 8002034:	4662      	mov	r2, ip
 8002036:	44ba      	add	sl, r7
 8002038:	431a      	orrs	r2, r3
 800203a:	d02c      	beq.n	8002096 <__aeabi_dsub+0x25e>
 800203c:	428e      	cmp	r6, r1
 800203e:	d02e      	beq.n	800209e <__aeabi_dsub+0x266>
 8002040:	4652      	mov	r2, sl
 8002042:	2a00      	cmp	r2, #0
 8002044:	d060      	beq.n	8002108 <__aeabi_dsub+0x2d0>
 8002046:	2f00      	cmp	r7, #0
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x214>
 800204a:	e0db      	b.n	8002204 <__aeabi_dsub+0x3cc>
 800204c:	4663      	mov	r3, ip
 800204e:	000e      	movs	r6, r1
 8002050:	9c02      	ldr	r4, [sp, #8]
 8002052:	08d8      	lsrs	r0, r3, #3
 8002054:	0762      	lsls	r2, r4, #29
 8002056:	4302      	orrs	r2, r0
 8002058:	08e4      	lsrs	r4, r4, #3
 800205a:	0013      	movs	r3, r2
 800205c:	4323      	orrs	r3, r4
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x22a>
 8002060:	e254      	b.n	800250c <__aeabi_dsub+0x6d4>
 8002062:	2580      	movs	r5, #128	@ 0x80
 8002064:	032d      	lsls	r5, r5, #12
 8002066:	4325      	orrs	r5, r4
 8002068:	032d      	lsls	r5, r5, #12
 800206a:	4c48      	ldr	r4, [pc, #288]	@ (800218c <__aeabi_dsub+0x354>)
 800206c:	0b2d      	lsrs	r5, r5, #12
 800206e:	e78c      	b.n	8001f8a <__aeabi_dsub+0x152>
 8002070:	4661      	mov	r1, ip
 8002072:	9b02      	ldr	r3, [sp, #8]
 8002074:	4319      	orrs	r1, r3
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x242>
 8002078:	e0cc      	b.n	8002214 <__aeabi_dsub+0x3dc>
 800207a:	0029      	movs	r1, r5
 800207c:	3901      	subs	r1, #1
 800207e:	2d01      	cmp	r5, #1
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x24c>
 8002082:	e188      	b.n	8002396 <__aeabi_dsub+0x55e>
 8002084:	4295      	cmp	r5, r2
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x252>
 8002088:	e0aa      	b.n	80021e0 <__aeabi_dsub+0x3a8>
 800208a:	2501      	movs	r5, #1
 800208c:	2938      	cmp	r1, #56	@ 0x38
 800208e:	dd00      	ble.n	8002092 <__aeabi_dsub+0x25a>
 8002090:	e72f      	b.n	8001ef2 <__aeabi_dsub+0xba>
 8002092:	468a      	mov	sl, r1
 8002094:	e718      	b.n	8001ec8 <__aeabi_dsub+0x90>
 8002096:	2201      	movs	r2, #1
 8002098:	4051      	eors	r1, r2
 800209a:	428e      	cmp	r6, r1
 800209c:	d1d0      	bne.n	8002040 <__aeabi_dsub+0x208>
 800209e:	4653      	mov	r3, sl
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x26e>
 80020a4:	e0be      	b.n	8002224 <__aeabi_dsub+0x3ec>
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d000      	beq.n	80020ac <__aeabi_dsub+0x274>
 80020aa:	e138      	b.n	800231e <__aeabi_dsub+0x4e6>
 80020ac:	46ca      	mov	sl, r9
 80020ae:	0022      	movs	r2, r4
 80020b0:	4302      	orrs	r2, r0
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x27e>
 80020b4:	e1e2      	b.n	800247c <__aeabi_dsub+0x644>
 80020b6:	4653      	mov	r3, sl
 80020b8:	1e59      	subs	r1, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x288>
 80020be:	e20d      	b.n	80024dc <__aeabi_dsub+0x6a4>
 80020c0:	4a32      	ldr	r2, [pc, #200]	@ (800218c <__aeabi_dsub+0x354>)
 80020c2:	4592      	cmp	sl, r2
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x290>
 80020c6:	e1d2      	b.n	800246e <__aeabi_dsub+0x636>
 80020c8:	2701      	movs	r7, #1
 80020ca:	2938      	cmp	r1, #56	@ 0x38
 80020cc:	dc13      	bgt.n	80020f6 <__aeabi_dsub+0x2be>
 80020ce:	291f      	cmp	r1, #31
 80020d0:	dd00      	ble.n	80020d4 <__aeabi_dsub+0x29c>
 80020d2:	e1ee      	b.n	80024b2 <__aeabi_dsub+0x67a>
 80020d4:	2220      	movs	r2, #32
 80020d6:	9b02      	ldr	r3, [sp, #8]
 80020d8:	1a52      	subs	r2, r2, r1
 80020da:	0025      	movs	r5, r4
 80020dc:	0007      	movs	r7, r0
 80020de:	469a      	mov	sl, r3
 80020e0:	40cc      	lsrs	r4, r1
 80020e2:	4090      	lsls	r0, r2
 80020e4:	4095      	lsls	r5, r2
 80020e6:	40cf      	lsrs	r7, r1
 80020e8:	44a2      	add	sl, r4
 80020ea:	1e42      	subs	r2, r0, #1
 80020ec:	4190      	sbcs	r0, r2
 80020ee:	4653      	mov	r3, sl
 80020f0:	432f      	orrs	r7, r5
 80020f2:	4307      	orrs	r7, r0
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	003d      	movs	r5, r7
 80020f8:	4465      	add	r5, ip
 80020fa:	4565      	cmp	r5, ip
 80020fc:	4192      	sbcs	r2, r2
 80020fe:	9b02      	ldr	r3, [sp, #8]
 8002100:	4252      	negs	r2, r2
 8002102:	464f      	mov	r7, r9
 8002104:	18d4      	adds	r4, r2, r3
 8002106:	e780      	b.n	800200a <__aeabi_dsub+0x1d2>
 8002108:	4a23      	ldr	r2, [pc, #140]	@ (8002198 <__aeabi_dsub+0x360>)
 800210a:	1c7d      	adds	r5, r7, #1
 800210c:	4215      	tst	r5, r2
 800210e:	d000      	beq.n	8002112 <__aeabi_dsub+0x2da>
 8002110:	e0aa      	b.n	8002268 <__aeabi_dsub+0x430>
 8002112:	4662      	mov	r2, ip
 8002114:	0025      	movs	r5, r4
 8002116:	9b02      	ldr	r3, [sp, #8]
 8002118:	4305      	orrs	r5, r0
 800211a:	431a      	orrs	r2, r3
 800211c:	2f00      	cmp	r7, #0
 800211e:	d000      	beq.n	8002122 <__aeabi_dsub+0x2ea>
 8002120:	e0f5      	b.n	800230e <__aeabi_dsub+0x4d6>
 8002122:	2d00      	cmp	r5, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x2f0>
 8002126:	e16b      	b.n	8002400 <__aeabi_dsub+0x5c8>
 8002128:	2a00      	cmp	r2, #0
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x2f6>
 800212c:	e152      	b.n	80023d4 <__aeabi_dsub+0x59c>
 800212e:	4663      	mov	r3, ip
 8002130:	1ac5      	subs	r5, r0, r3
 8002132:	9b02      	ldr	r3, [sp, #8]
 8002134:	1ae2      	subs	r2, r4, r3
 8002136:	42a8      	cmp	r0, r5
 8002138:	419b      	sbcs	r3, r3
 800213a:	425b      	negs	r3, r3
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	021a      	lsls	r2, r3, #8
 8002140:	d400      	bmi.n	8002144 <__aeabi_dsub+0x30c>
 8002142:	e1d5      	b.n	80024f0 <__aeabi_dsub+0x6b8>
 8002144:	4663      	mov	r3, ip
 8002146:	1a1d      	subs	r5, r3, r0
 8002148:	45ac      	cmp	ip, r5
 800214a:	4192      	sbcs	r2, r2
 800214c:	2601      	movs	r6, #1
 800214e:	9b02      	ldr	r3, [sp, #8]
 8002150:	4252      	negs	r2, r2
 8002152:	1b1c      	subs	r4, r3, r4
 8002154:	4688      	mov	r8, r1
 8002156:	1aa4      	subs	r4, r4, r2
 8002158:	400e      	ands	r6, r1
 800215a:	e6f6      	b.n	8001f4a <__aeabi_dsub+0x112>
 800215c:	4297      	cmp	r7, r2
 800215e:	d03f      	beq.n	80021e0 <__aeabi_dsub+0x3a8>
 8002160:	4652      	mov	r2, sl
 8002162:	2501      	movs	r5, #1
 8002164:	2a38      	cmp	r2, #56	@ 0x38
 8002166:	dd00      	ble.n	800216a <__aeabi_dsub+0x332>
 8002168:	e74a      	b.n	8002000 <__aeabi_dsub+0x1c8>
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	9b02      	ldr	r3, [sp, #8]
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	4313      	orrs	r3, r2
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	e72d      	b.n	8001fd2 <__aeabi_dsub+0x19a>
 8002176:	003c      	movs	r4, r7
 8002178:	2500      	movs	r5, #0
 800217a:	2200      	movs	r2, #0
 800217c:	e705      	b.n	8001f8a <__aeabi_dsub+0x152>
 800217e:	2307      	movs	r3, #7
 8002180:	402b      	ands	r3, r5
 8002182:	2b00      	cmp	r3, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x350>
 8002186:	e6e2      	b.n	8001f4e <__aeabi_dsub+0x116>
 8002188:	e06b      	b.n	8002262 <__aeabi_dsub+0x42a>
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff
 8002190:	ff7fffff 	.word	0xff7fffff
 8002194:	fffff801 	.word	0xfffff801
 8002198:	000007fe 	.word	0x000007fe
 800219c:	0028      	movs	r0, r5
 800219e:	f7fe f983 	bl	80004a8 <__clzsi2>
 80021a2:	0003      	movs	r3, r0
 80021a4:	3318      	adds	r3, #24
 80021a6:	2b1f      	cmp	r3, #31
 80021a8:	dc00      	bgt.n	80021ac <__aeabi_dsub+0x374>
 80021aa:	e6b4      	b.n	8001f16 <__aeabi_dsub+0xde>
 80021ac:	002a      	movs	r2, r5
 80021ae:	3808      	subs	r0, #8
 80021b0:	4082      	lsls	r2, r0
 80021b2:	429f      	cmp	r7, r3
 80021b4:	dd00      	ble.n	80021b8 <__aeabi_dsub+0x380>
 80021b6:	e0b9      	b.n	800232c <__aeabi_dsub+0x4f4>
 80021b8:	1bdb      	subs	r3, r3, r7
 80021ba:	1c58      	adds	r0, r3, #1
 80021bc:	281f      	cmp	r0, #31
 80021be:	dc00      	bgt.n	80021c2 <__aeabi_dsub+0x38a>
 80021c0:	e1a0      	b.n	8002504 <__aeabi_dsub+0x6cc>
 80021c2:	0015      	movs	r5, r2
 80021c4:	3b1f      	subs	r3, #31
 80021c6:	40dd      	lsrs	r5, r3
 80021c8:	2820      	cmp	r0, #32
 80021ca:	d005      	beq.n	80021d8 <__aeabi_dsub+0x3a0>
 80021cc:	2340      	movs	r3, #64	@ 0x40
 80021ce:	1a1b      	subs	r3, r3, r0
 80021d0:	409a      	lsls	r2, r3
 80021d2:	1e53      	subs	r3, r2, #1
 80021d4:	419a      	sbcs	r2, r3
 80021d6:	4315      	orrs	r5, r2
 80021d8:	2307      	movs	r3, #7
 80021da:	2700      	movs	r7, #0
 80021dc:	402b      	ands	r3, r5
 80021de:	e7d0      	b.n	8002182 <__aeabi_dsub+0x34a>
 80021e0:	08c0      	lsrs	r0, r0, #3
 80021e2:	0762      	lsls	r2, r4, #29
 80021e4:	4302      	orrs	r2, r0
 80021e6:	08e4      	lsrs	r4, r4, #3
 80021e8:	e737      	b.n	800205a <__aeabi_dsub+0x222>
 80021ea:	08ea      	lsrs	r2, r5, #3
 80021ec:	0763      	lsls	r3, r4, #29
 80021ee:	431a      	orrs	r2, r3
 80021f0:	4bd3      	ldr	r3, [pc, #844]	@ (8002540 <__aeabi_dsub+0x708>)
 80021f2:	08e4      	lsrs	r4, r4, #3
 80021f4:	429f      	cmp	r7, r3
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x3c2>
 80021f8:	e72f      	b.n	800205a <__aeabi_dsub+0x222>
 80021fa:	0324      	lsls	r4, r4, #12
 80021fc:	0b25      	lsrs	r5, r4, #12
 80021fe:	057c      	lsls	r4, r7, #21
 8002200:	0d64      	lsrs	r4, r4, #21
 8002202:	e6c2      	b.n	8001f8a <__aeabi_dsub+0x152>
 8002204:	46ca      	mov	sl, r9
 8002206:	0022      	movs	r2, r4
 8002208:	4302      	orrs	r2, r0
 800220a:	d158      	bne.n	80022be <__aeabi_dsub+0x486>
 800220c:	4663      	mov	r3, ip
 800220e:	000e      	movs	r6, r1
 8002210:	9c02      	ldr	r4, [sp, #8]
 8002212:	9303      	str	r3, [sp, #12]
 8002214:	9b03      	ldr	r3, [sp, #12]
 8002216:	4657      	mov	r7, sl
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	e7e7      	b.n	80021ec <__aeabi_dsub+0x3b4>
 800221c:	4cc9      	ldr	r4, [pc, #804]	@ (8002544 <__aeabi_dsub+0x70c>)
 800221e:	1aff      	subs	r7, r7, r3
 8002220:	4014      	ands	r4, r2
 8002222:	e692      	b.n	8001f4a <__aeabi_dsub+0x112>
 8002224:	4dc8      	ldr	r5, [pc, #800]	@ (8002548 <__aeabi_dsub+0x710>)
 8002226:	1c7a      	adds	r2, r7, #1
 8002228:	422a      	tst	r2, r5
 800222a:	d000      	beq.n	800222e <__aeabi_dsub+0x3f6>
 800222c:	e084      	b.n	8002338 <__aeabi_dsub+0x500>
 800222e:	0022      	movs	r2, r4
 8002230:	4302      	orrs	r2, r0
 8002232:	2f00      	cmp	r7, #0
 8002234:	d000      	beq.n	8002238 <__aeabi_dsub+0x400>
 8002236:	e0ef      	b.n	8002418 <__aeabi_dsub+0x5e0>
 8002238:	2a00      	cmp	r2, #0
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x406>
 800223c:	e0e5      	b.n	800240a <__aeabi_dsub+0x5d2>
 800223e:	4662      	mov	r2, ip
 8002240:	9902      	ldr	r1, [sp, #8]
 8002242:	430a      	orrs	r2, r1
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x410>
 8002246:	e0c5      	b.n	80023d4 <__aeabi_dsub+0x59c>
 8002248:	4663      	mov	r3, ip
 800224a:	18c5      	adds	r5, r0, r3
 800224c:	468c      	mov	ip, r1
 800224e:	4285      	cmp	r5, r0
 8002250:	4180      	sbcs	r0, r0
 8002252:	4464      	add	r4, ip
 8002254:	4240      	negs	r0, r0
 8002256:	1824      	adds	r4, r4, r0
 8002258:	0223      	lsls	r3, r4, #8
 800225a:	d502      	bpl.n	8002262 <__aeabi_dsub+0x42a>
 800225c:	4bb9      	ldr	r3, [pc, #740]	@ (8002544 <__aeabi_dsub+0x70c>)
 800225e:	3701      	adds	r7, #1
 8002260:	401c      	ands	r4, r3
 8002262:	46ba      	mov	sl, r7
 8002264:	9503      	str	r5, [sp, #12]
 8002266:	e7d5      	b.n	8002214 <__aeabi_dsub+0x3dc>
 8002268:	4662      	mov	r2, ip
 800226a:	1a85      	subs	r5, r0, r2
 800226c:	42a8      	cmp	r0, r5
 800226e:	4192      	sbcs	r2, r2
 8002270:	4252      	negs	r2, r2
 8002272:	4691      	mov	r9, r2
 8002274:	9b02      	ldr	r3, [sp, #8]
 8002276:	1ae3      	subs	r3, r4, r3
 8002278:	001a      	movs	r2, r3
 800227a:	464b      	mov	r3, r9
 800227c:	1ad2      	subs	r2, r2, r3
 800227e:	0013      	movs	r3, r2
 8002280:	4691      	mov	r9, r2
 8002282:	021a      	lsls	r2, r3, #8
 8002284:	d46c      	bmi.n	8002360 <__aeabi_dsub+0x528>
 8002286:	464a      	mov	r2, r9
 8002288:	464c      	mov	r4, r9
 800228a:	432a      	orrs	r2, r5
 800228c:	d000      	beq.n	8002290 <__aeabi_dsub+0x458>
 800228e:	e63a      	b.n	8001f06 <__aeabi_dsub+0xce>
 8002290:	2600      	movs	r6, #0
 8002292:	2400      	movs	r4, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e678      	b.n	8001f8a <__aeabi_dsub+0x152>
 8002298:	9902      	ldr	r1, [sp, #8]
 800229a:	4653      	mov	r3, sl
 800229c:	000d      	movs	r5, r1
 800229e:	3a20      	subs	r2, #32
 80022a0:	40d5      	lsrs	r5, r2
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d006      	beq.n	80022b4 <__aeabi_dsub+0x47c>
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	000b      	movs	r3, r1
 80022ac:	4093      	lsls	r3, r2
 80022ae:	4662      	mov	r2, ip
 80022b0:	431a      	orrs	r2, r3
 80022b2:	4693      	mov	fp, r2
 80022b4:	465b      	mov	r3, fp
 80022b6:	1e5a      	subs	r2, r3, #1
 80022b8:	4193      	sbcs	r3, r2
 80022ba:	431d      	orrs	r5, r3
 80022bc:	e619      	b.n	8001ef2 <__aeabi_dsub+0xba>
 80022be:	4653      	mov	r3, sl
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x490>
 80022c6:	e0c6      	b.n	8002456 <__aeabi_dsub+0x61e>
 80022c8:	4e9d      	ldr	r6, [pc, #628]	@ (8002540 <__aeabi_dsub+0x708>)
 80022ca:	45b2      	cmp	sl, r6
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x498>
 80022ce:	e6bd      	b.n	800204c <__aeabi_dsub+0x214>
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	2501      	movs	r5, #1
 80022d6:	2a38      	cmp	r2, #56	@ 0x38
 80022d8:	dc10      	bgt.n	80022fc <__aeabi_dsub+0x4c4>
 80022da:	2a1f      	cmp	r2, #31
 80022dc:	dc7f      	bgt.n	80023de <__aeabi_dsub+0x5a6>
 80022de:	2120      	movs	r1, #32
 80022e0:	0025      	movs	r5, r4
 80022e2:	1a89      	subs	r1, r1, r2
 80022e4:	0007      	movs	r7, r0
 80022e6:	4088      	lsls	r0, r1
 80022e8:	408d      	lsls	r5, r1
 80022ea:	40d7      	lsrs	r7, r2
 80022ec:	40d4      	lsrs	r4, r2
 80022ee:	1e41      	subs	r1, r0, #1
 80022f0:	4188      	sbcs	r0, r1
 80022f2:	9b02      	ldr	r3, [sp, #8]
 80022f4:	433d      	orrs	r5, r7
 80022f6:	1b1b      	subs	r3, r3, r4
 80022f8:	4305      	orrs	r5, r0
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	4662      	mov	r2, ip
 80022fe:	1b55      	subs	r5, r2, r5
 8002300:	45ac      	cmp	ip, r5
 8002302:	4192      	sbcs	r2, r2
 8002304:	9b02      	ldr	r3, [sp, #8]
 8002306:	4252      	negs	r2, r2
 8002308:	464f      	mov	r7, r9
 800230a:	1a9c      	subs	r4, r3, r2
 800230c:	e5f6      	b.n	8001efc <__aeabi_dsub+0xc4>
 800230e:	2d00      	cmp	r5, #0
 8002310:	d000      	beq.n	8002314 <__aeabi_dsub+0x4dc>
 8002312:	e0b7      	b.n	8002484 <__aeabi_dsub+0x64c>
 8002314:	2a00      	cmp	r2, #0
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x4e2>
 8002318:	e0f0      	b.n	80024fc <__aeabi_dsub+0x6c4>
 800231a:	2601      	movs	r6, #1
 800231c:	400e      	ands	r6, r1
 800231e:	4663      	mov	r3, ip
 8002320:	9802      	ldr	r0, [sp, #8]
 8002322:	08d9      	lsrs	r1, r3, #3
 8002324:	0742      	lsls	r2, r0, #29
 8002326:	430a      	orrs	r2, r1
 8002328:	08c4      	lsrs	r4, r0, #3
 800232a:	e696      	b.n	800205a <__aeabi_dsub+0x222>
 800232c:	4c85      	ldr	r4, [pc, #532]	@ (8002544 <__aeabi_dsub+0x70c>)
 800232e:	1aff      	subs	r7, r7, r3
 8002330:	4014      	ands	r4, r2
 8002332:	0762      	lsls	r2, r4, #29
 8002334:	08e4      	lsrs	r4, r4, #3
 8002336:	e760      	b.n	80021fa <__aeabi_dsub+0x3c2>
 8002338:	4981      	ldr	r1, [pc, #516]	@ (8002540 <__aeabi_dsub+0x708>)
 800233a:	428a      	cmp	r2, r1
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x508>
 800233e:	e0c9      	b.n	80024d4 <__aeabi_dsub+0x69c>
 8002340:	4663      	mov	r3, ip
 8002342:	18c1      	adds	r1, r0, r3
 8002344:	4281      	cmp	r1, r0
 8002346:	4180      	sbcs	r0, r0
 8002348:	9b02      	ldr	r3, [sp, #8]
 800234a:	4240      	negs	r0, r0
 800234c:	18e3      	adds	r3, r4, r3
 800234e:	181b      	adds	r3, r3, r0
 8002350:	07dd      	lsls	r5, r3, #31
 8002352:	085c      	lsrs	r4, r3, #1
 8002354:	2307      	movs	r3, #7
 8002356:	0849      	lsrs	r1, r1, #1
 8002358:	430d      	orrs	r5, r1
 800235a:	0017      	movs	r7, r2
 800235c:	402b      	ands	r3, r5
 800235e:	e710      	b.n	8002182 <__aeabi_dsub+0x34a>
 8002360:	4663      	mov	r3, ip
 8002362:	1a1d      	subs	r5, r3, r0
 8002364:	45ac      	cmp	ip, r5
 8002366:	4192      	sbcs	r2, r2
 8002368:	2601      	movs	r6, #1
 800236a:	9b02      	ldr	r3, [sp, #8]
 800236c:	4252      	negs	r2, r2
 800236e:	1b1c      	subs	r4, r3, r4
 8002370:	4688      	mov	r8, r1
 8002372:	1aa4      	subs	r4, r4, r2
 8002374:	400e      	ands	r6, r1
 8002376:	e5c6      	b.n	8001f06 <__aeabi_dsub+0xce>
 8002378:	4663      	mov	r3, ip
 800237a:	18c5      	adds	r5, r0, r3
 800237c:	9b02      	ldr	r3, [sp, #8]
 800237e:	4285      	cmp	r5, r0
 8002380:	4180      	sbcs	r0, r0
 8002382:	469c      	mov	ip, r3
 8002384:	4240      	negs	r0, r0
 8002386:	4464      	add	r4, ip
 8002388:	1824      	adds	r4, r4, r0
 800238a:	2701      	movs	r7, #1
 800238c:	0223      	lsls	r3, r4, #8
 800238e:	d400      	bmi.n	8002392 <__aeabi_dsub+0x55a>
 8002390:	e6f5      	b.n	800217e <__aeabi_dsub+0x346>
 8002392:	2702      	movs	r7, #2
 8002394:	e641      	b.n	800201a <__aeabi_dsub+0x1e2>
 8002396:	4663      	mov	r3, ip
 8002398:	1ac5      	subs	r5, r0, r3
 800239a:	42a8      	cmp	r0, r5
 800239c:	4180      	sbcs	r0, r0
 800239e:	9b02      	ldr	r3, [sp, #8]
 80023a0:	4240      	negs	r0, r0
 80023a2:	1ae4      	subs	r4, r4, r3
 80023a4:	2701      	movs	r7, #1
 80023a6:	1a24      	subs	r4, r4, r0
 80023a8:	e5a8      	b.n	8001efc <__aeabi_dsub+0xc4>
 80023aa:	9d02      	ldr	r5, [sp, #8]
 80023ac:	4652      	mov	r2, sl
 80023ae:	002b      	movs	r3, r5
 80023b0:	3a20      	subs	r2, #32
 80023b2:	40d3      	lsrs	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	4653      	mov	r3, sl
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d006      	beq.n	80023ca <__aeabi_dsub+0x592>
 80023bc:	2240      	movs	r2, #64	@ 0x40
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	002b      	movs	r3, r5
 80023c2:	4093      	lsls	r3, r2
 80023c4:	4662      	mov	r2, ip
 80023c6:	431a      	orrs	r2, r3
 80023c8:	4693      	mov	fp, r2
 80023ca:	465d      	mov	r5, fp
 80023cc:	1e6b      	subs	r3, r5, #1
 80023ce:	419d      	sbcs	r5, r3
 80023d0:	430d      	orrs	r5, r1
 80023d2:	e615      	b.n	8002000 <__aeabi_dsub+0x1c8>
 80023d4:	0762      	lsls	r2, r4, #29
 80023d6:	08c0      	lsrs	r0, r0, #3
 80023d8:	4302      	orrs	r2, r0
 80023da:	08e4      	lsrs	r4, r4, #3
 80023dc:	e70d      	b.n	80021fa <__aeabi_dsub+0x3c2>
 80023de:	0011      	movs	r1, r2
 80023e0:	0027      	movs	r7, r4
 80023e2:	3920      	subs	r1, #32
 80023e4:	40cf      	lsrs	r7, r1
 80023e6:	2a20      	cmp	r2, #32
 80023e8:	d005      	beq.n	80023f6 <__aeabi_dsub+0x5be>
 80023ea:	2140      	movs	r1, #64	@ 0x40
 80023ec:	1a8a      	subs	r2, r1, r2
 80023ee:	4094      	lsls	r4, r2
 80023f0:	0025      	movs	r5, r4
 80023f2:	4305      	orrs	r5, r0
 80023f4:	9503      	str	r5, [sp, #12]
 80023f6:	9d03      	ldr	r5, [sp, #12]
 80023f8:	1e6a      	subs	r2, r5, #1
 80023fa:	4195      	sbcs	r5, r2
 80023fc:	433d      	orrs	r5, r7
 80023fe:	e77d      	b.n	80022fc <__aeabi_dsub+0x4c4>
 8002400:	2a00      	cmp	r2, #0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x5ce>
 8002404:	e744      	b.n	8002290 <__aeabi_dsub+0x458>
 8002406:	2601      	movs	r6, #1
 8002408:	400e      	ands	r6, r1
 800240a:	4663      	mov	r3, ip
 800240c:	08d9      	lsrs	r1, r3, #3
 800240e:	9b02      	ldr	r3, [sp, #8]
 8002410:	075a      	lsls	r2, r3, #29
 8002412:	430a      	orrs	r2, r1
 8002414:	08dc      	lsrs	r4, r3, #3
 8002416:	e6f0      	b.n	80021fa <__aeabi_dsub+0x3c2>
 8002418:	2a00      	cmp	r2, #0
 800241a:	d028      	beq.n	800246e <__aeabi_dsub+0x636>
 800241c:	4662      	mov	r2, ip
 800241e:	9f02      	ldr	r7, [sp, #8]
 8002420:	08c0      	lsrs	r0, r0, #3
 8002422:	433a      	orrs	r2, r7
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x5f0>
 8002426:	e6dc      	b.n	80021e2 <__aeabi_dsub+0x3aa>
 8002428:	0762      	lsls	r2, r4, #29
 800242a:	4310      	orrs	r0, r2
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	08e4      	lsrs	r4, r4, #3
 8002430:	0312      	lsls	r2, r2, #12
 8002432:	4214      	tst	r4, r2
 8002434:	d009      	beq.n	800244a <__aeabi_dsub+0x612>
 8002436:	08fd      	lsrs	r5, r7, #3
 8002438:	4215      	tst	r5, r2
 800243a:	d106      	bne.n	800244a <__aeabi_dsub+0x612>
 800243c:	4663      	mov	r3, ip
 800243e:	2601      	movs	r6, #1
 8002440:	002c      	movs	r4, r5
 8002442:	08d8      	lsrs	r0, r3, #3
 8002444:	077b      	lsls	r3, r7, #29
 8002446:	4318      	orrs	r0, r3
 8002448:	400e      	ands	r6, r1
 800244a:	0f42      	lsrs	r2, r0, #29
 800244c:	00c0      	lsls	r0, r0, #3
 800244e:	08c0      	lsrs	r0, r0, #3
 8002450:	0752      	lsls	r2, r2, #29
 8002452:	4302      	orrs	r2, r0
 8002454:	e601      	b.n	800205a <__aeabi_dsub+0x222>
 8002456:	4663      	mov	r3, ip
 8002458:	1a1d      	subs	r5, r3, r0
 800245a:	45ac      	cmp	ip, r5
 800245c:	4192      	sbcs	r2, r2
 800245e:	9b02      	ldr	r3, [sp, #8]
 8002460:	4252      	negs	r2, r2
 8002462:	1b1c      	subs	r4, r3, r4
 8002464:	000e      	movs	r6, r1
 8002466:	4688      	mov	r8, r1
 8002468:	2701      	movs	r7, #1
 800246a:	1aa4      	subs	r4, r4, r2
 800246c:	e546      	b.n	8001efc <__aeabi_dsub+0xc4>
 800246e:	4663      	mov	r3, ip
 8002470:	08d9      	lsrs	r1, r3, #3
 8002472:	9b02      	ldr	r3, [sp, #8]
 8002474:	075a      	lsls	r2, r3, #29
 8002476:	430a      	orrs	r2, r1
 8002478:	08dc      	lsrs	r4, r3, #3
 800247a:	e5ee      	b.n	800205a <__aeabi_dsub+0x222>
 800247c:	4663      	mov	r3, ip
 800247e:	9c02      	ldr	r4, [sp, #8]
 8002480:	9303      	str	r3, [sp, #12]
 8002482:	e6c7      	b.n	8002214 <__aeabi_dsub+0x3dc>
 8002484:	08c0      	lsrs	r0, r0, #3
 8002486:	2a00      	cmp	r2, #0
 8002488:	d100      	bne.n	800248c <__aeabi_dsub+0x654>
 800248a:	e6aa      	b.n	80021e2 <__aeabi_dsub+0x3aa>
 800248c:	0762      	lsls	r2, r4, #29
 800248e:	4310      	orrs	r0, r2
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	08e4      	lsrs	r4, r4, #3
 8002494:	0312      	lsls	r2, r2, #12
 8002496:	4214      	tst	r4, r2
 8002498:	d0d7      	beq.n	800244a <__aeabi_dsub+0x612>
 800249a:	9f02      	ldr	r7, [sp, #8]
 800249c:	08fd      	lsrs	r5, r7, #3
 800249e:	4215      	tst	r5, r2
 80024a0:	d1d3      	bne.n	800244a <__aeabi_dsub+0x612>
 80024a2:	4663      	mov	r3, ip
 80024a4:	2601      	movs	r6, #1
 80024a6:	08d8      	lsrs	r0, r3, #3
 80024a8:	077b      	lsls	r3, r7, #29
 80024aa:	002c      	movs	r4, r5
 80024ac:	4318      	orrs	r0, r3
 80024ae:	400e      	ands	r6, r1
 80024b0:	e7cb      	b.n	800244a <__aeabi_dsub+0x612>
 80024b2:	000a      	movs	r2, r1
 80024b4:	0027      	movs	r7, r4
 80024b6:	3a20      	subs	r2, #32
 80024b8:	40d7      	lsrs	r7, r2
 80024ba:	2920      	cmp	r1, #32
 80024bc:	d005      	beq.n	80024ca <__aeabi_dsub+0x692>
 80024be:	2240      	movs	r2, #64	@ 0x40
 80024c0:	1a52      	subs	r2, r2, r1
 80024c2:	4094      	lsls	r4, r2
 80024c4:	0025      	movs	r5, r4
 80024c6:	4305      	orrs	r5, r0
 80024c8:	9503      	str	r5, [sp, #12]
 80024ca:	9d03      	ldr	r5, [sp, #12]
 80024cc:	1e6a      	subs	r2, r5, #1
 80024ce:	4195      	sbcs	r5, r2
 80024d0:	432f      	orrs	r7, r5
 80024d2:	e610      	b.n	80020f6 <__aeabi_dsub+0x2be>
 80024d4:	0014      	movs	r4, r2
 80024d6:	2500      	movs	r5, #0
 80024d8:	2200      	movs	r2, #0
 80024da:	e556      	b.n	8001f8a <__aeabi_dsub+0x152>
 80024dc:	9b02      	ldr	r3, [sp, #8]
 80024de:	4460      	add	r0, ip
 80024e0:	4699      	mov	r9, r3
 80024e2:	4560      	cmp	r0, ip
 80024e4:	4192      	sbcs	r2, r2
 80024e6:	444c      	add	r4, r9
 80024e8:	4252      	negs	r2, r2
 80024ea:	0005      	movs	r5, r0
 80024ec:	18a4      	adds	r4, r4, r2
 80024ee:	e74c      	b.n	800238a <__aeabi_dsub+0x552>
 80024f0:	001a      	movs	r2, r3
 80024f2:	001c      	movs	r4, r3
 80024f4:	432a      	orrs	r2, r5
 80024f6:	d000      	beq.n	80024fa <__aeabi_dsub+0x6c2>
 80024f8:	e6b3      	b.n	8002262 <__aeabi_dsub+0x42a>
 80024fa:	e6c9      	b.n	8002290 <__aeabi_dsub+0x458>
 80024fc:	2480      	movs	r4, #128	@ 0x80
 80024fe:	2600      	movs	r6, #0
 8002500:	0324      	lsls	r4, r4, #12
 8002502:	e5ae      	b.n	8002062 <__aeabi_dsub+0x22a>
 8002504:	2120      	movs	r1, #32
 8002506:	2500      	movs	r5, #0
 8002508:	1a09      	subs	r1, r1, r0
 800250a:	e517      	b.n	8001f3c <__aeabi_dsub+0x104>
 800250c:	2200      	movs	r2, #0
 800250e:	2500      	movs	r5, #0
 8002510:	4c0b      	ldr	r4, [pc, #44]	@ (8002540 <__aeabi_dsub+0x708>)
 8002512:	e53a      	b.n	8001f8a <__aeabi_dsub+0x152>
 8002514:	2d00      	cmp	r5, #0
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x6e2>
 8002518:	e5f6      	b.n	8002108 <__aeabi_dsub+0x2d0>
 800251a:	464b      	mov	r3, r9
 800251c:	1bda      	subs	r2, r3, r7
 800251e:	4692      	mov	sl, r2
 8002520:	2f00      	cmp	r7, #0
 8002522:	d100      	bne.n	8002526 <__aeabi_dsub+0x6ee>
 8002524:	e66f      	b.n	8002206 <__aeabi_dsub+0x3ce>
 8002526:	2a38      	cmp	r2, #56	@ 0x38
 8002528:	dc05      	bgt.n	8002536 <__aeabi_dsub+0x6fe>
 800252a:	2680      	movs	r6, #128	@ 0x80
 800252c:	0436      	lsls	r6, r6, #16
 800252e:	4334      	orrs	r4, r6
 8002530:	4688      	mov	r8, r1
 8002532:	000e      	movs	r6, r1
 8002534:	e6d1      	b.n	80022da <__aeabi_dsub+0x4a2>
 8002536:	4688      	mov	r8, r1
 8002538:	000e      	movs	r6, r1
 800253a:	2501      	movs	r5, #1
 800253c:	e6de      	b.n	80022fc <__aeabi_dsub+0x4c4>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	000007ff 	.word	0x000007ff
 8002544:	ff7fffff 	.word	0xff7fffff
 8002548:	000007fe 	.word	0x000007fe
 800254c:	2d00      	cmp	r5, #0
 800254e:	d100      	bne.n	8002552 <__aeabi_dsub+0x71a>
 8002550:	e668      	b.n	8002224 <__aeabi_dsub+0x3ec>
 8002552:	464b      	mov	r3, r9
 8002554:	1bd9      	subs	r1, r3, r7
 8002556:	2f00      	cmp	r7, #0
 8002558:	d101      	bne.n	800255e <__aeabi_dsub+0x726>
 800255a:	468a      	mov	sl, r1
 800255c:	e5a7      	b.n	80020ae <__aeabi_dsub+0x276>
 800255e:	2701      	movs	r7, #1
 8002560:	2938      	cmp	r1, #56	@ 0x38
 8002562:	dd00      	ble.n	8002566 <__aeabi_dsub+0x72e>
 8002564:	e5c7      	b.n	80020f6 <__aeabi_dsub+0x2be>
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	0412      	lsls	r2, r2, #16
 800256a:	4314      	orrs	r4, r2
 800256c:	e5af      	b.n	80020ce <__aeabi_dsub+0x296>
 800256e:	46c0      	nop			@ (mov r8, r8)

08002570 <__aeabi_dcmpun>:
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	46c6      	mov	lr, r8
 8002574:	031e      	lsls	r6, r3, #12
 8002576:	0b36      	lsrs	r6, r6, #12
 8002578:	46b0      	mov	r8, r6
 800257a:	4e0d      	ldr	r6, [pc, #52]	@ (80025b0 <__aeabi_dcmpun+0x40>)
 800257c:	030c      	lsls	r4, r1, #12
 800257e:	004d      	lsls	r5, r1, #1
 8002580:	005f      	lsls	r7, r3, #1
 8002582:	b500      	push	{lr}
 8002584:	0b24      	lsrs	r4, r4, #12
 8002586:	0d6d      	lsrs	r5, r5, #21
 8002588:	0d7f      	lsrs	r7, r7, #21
 800258a:	42b5      	cmp	r5, r6
 800258c:	d00b      	beq.n	80025a6 <__aeabi_dcmpun+0x36>
 800258e:	4908      	ldr	r1, [pc, #32]	@ (80025b0 <__aeabi_dcmpun+0x40>)
 8002590:	2000      	movs	r0, #0
 8002592:	428f      	cmp	r7, r1
 8002594:	d104      	bne.n	80025a0 <__aeabi_dcmpun+0x30>
 8002596:	4646      	mov	r6, r8
 8002598:	4316      	orrs	r6, r2
 800259a:	0030      	movs	r0, r6
 800259c:	1e43      	subs	r3, r0, #1
 800259e:	4198      	sbcs	r0, r3
 80025a0:	bc80      	pop	{r7}
 80025a2:	46b8      	mov	r8, r7
 80025a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a6:	4304      	orrs	r4, r0
 80025a8:	2001      	movs	r0, #1
 80025aa:	2c00      	cmp	r4, #0
 80025ac:	d1f8      	bne.n	80025a0 <__aeabi_dcmpun+0x30>
 80025ae:	e7ee      	b.n	800258e <__aeabi_dcmpun+0x1e>
 80025b0:	000007ff 	.word	0x000007ff

080025b4 <__aeabi_d2iz>:
 80025b4:	000b      	movs	r3, r1
 80025b6:	0002      	movs	r2, r0
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	4d16      	ldr	r5, [pc, #88]	@ (8002614 <__aeabi_d2iz+0x60>)
 80025bc:	030c      	lsls	r4, r1, #12
 80025be:	b082      	sub	sp, #8
 80025c0:	0049      	lsls	r1, r1, #1
 80025c2:	2000      	movs	r0, #0
 80025c4:	9200      	str	r2, [sp, #0]
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	0b24      	lsrs	r4, r4, #12
 80025ca:	0d49      	lsrs	r1, r1, #21
 80025cc:	0fde      	lsrs	r6, r3, #31
 80025ce:	42a9      	cmp	r1, r5
 80025d0:	dd04      	ble.n	80025dc <__aeabi_d2iz+0x28>
 80025d2:	4811      	ldr	r0, [pc, #68]	@ (8002618 <__aeabi_d2iz+0x64>)
 80025d4:	4281      	cmp	r1, r0
 80025d6:	dd03      	ble.n	80025e0 <__aeabi_d2iz+0x2c>
 80025d8:	4b10      	ldr	r3, [pc, #64]	@ (800261c <__aeabi_d2iz+0x68>)
 80025da:	18f0      	adds	r0, r6, r3
 80025dc:	b002      	add	sp, #8
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	2080      	movs	r0, #128	@ 0x80
 80025e2:	0340      	lsls	r0, r0, #13
 80025e4:	4320      	orrs	r0, r4
 80025e6:	4c0e      	ldr	r4, [pc, #56]	@ (8002620 <__aeabi_d2iz+0x6c>)
 80025e8:	1a64      	subs	r4, r4, r1
 80025ea:	2c1f      	cmp	r4, #31
 80025ec:	dd08      	ble.n	8002600 <__aeabi_d2iz+0x4c>
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <__aeabi_d2iz+0x70>)
 80025f0:	1a5b      	subs	r3, r3, r1
 80025f2:	40d8      	lsrs	r0, r3
 80025f4:	0003      	movs	r3, r0
 80025f6:	4258      	negs	r0, r3
 80025f8:	2e00      	cmp	r6, #0
 80025fa:	d1ef      	bne.n	80025dc <__aeabi_d2iz+0x28>
 80025fc:	0018      	movs	r0, r3
 80025fe:	e7ed      	b.n	80025dc <__aeabi_d2iz+0x28>
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <__aeabi_d2iz+0x74>)
 8002602:	9a00      	ldr	r2, [sp, #0]
 8002604:	469c      	mov	ip, r3
 8002606:	0003      	movs	r3, r0
 8002608:	4461      	add	r1, ip
 800260a:	408b      	lsls	r3, r1
 800260c:	40e2      	lsrs	r2, r4
 800260e:	4313      	orrs	r3, r2
 8002610:	e7f1      	b.n	80025f6 <__aeabi_d2iz+0x42>
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	000003fe 	.word	0x000003fe
 8002618:	0000041d 	.word	0x0000041d
 800261c:	7fffffff 	.word	0x7fffffff
 8002620:	00000433 	.word	0x00000433
 8002624:	00000413 	.word	0x00000413
 8002628:	fffffbed 	.word	0xfffffbed

0800262c <__aeabi_i2d>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2800      	cmp	r0, #0
 8002630:	d016      	beq.n	8002660 <__aeabi_i2d+0x34>
 8002632:	17c3      	asrs	r3, r0, #31
 8002634:	18c5      	adds	r5, r0, r3
 8002636:	405d      	eors	r5, r3
 8002638:	0fc4      	lsrs	r4, r0, #31
 800263a:	0028      	movs	r0, r5
 800263c:	f7fd ff34 	bl	80004a8 <__clzsi2>
 8002640:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <__aeabi_i2d+0x58>)
 8002642:	1a1b      	subs	r3, r3, r0
 8002644:	055b      	lsls	r3, r3, #21
 8002646:	0d5b      	lsrs	r3, r3, #21
 8002648:	280a      	cmp	r0, #10
 800264a:	dc14      	bgt.n	8002676 <__aeabi_i2d+0x4a>
 800264c:	0002      	movs	r2, r0
 800264e:	002e      	movs	r6, r5
 8002650:	3215      	adds	r2, #21
 8002652:	4096      	lsls	r6, r2
 8002654:	220b      	movs	r2, #11
 8002656:	1a12      	subs	r2, r2, r0
 8002658:	40d5      	lsrs	r5, r2
 800265a:	032d      	lsls	r5, r5, #12
 800265c:	0b2d      	lsrs	r5, r5, #12
 800265e:	e003      	b.n	8002668 <__aeabi_i2d+0x3c>
 8002660:	2400      	movs	r4, #0
 8002662:	2300      	movs	r3, #0
 8002664:	2500      	movs	r5, #0
 8002666:	2600      	movs	r6, #0
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	432b      	orrs	r3, r5
 800266c:	07e4      	lsls	r4, r4, #31
 800266e:	4323      	orrs	r3, r4
 8002670:	0030      	movs	r0, r6
 8002672:	0019      	movs	r1, r3
 8002674:	bd70      	pop	{r4, r5, r6, pc}
 8002676:	380b      	subs	r0, #11
 8002678:	4085      	lsls	r5, r0
 800267a:	032d      	lsls	r5, r5, #12
 800267c:	2600      	movs	r6, #0
 800267e:	0b2d      	lsrs	r5, r5, #12
 8002680:	e7f2      	b.n	8002668 <__aeabi_i2d+0x3c>
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	0000041e 	.word	0x0000041e

08002688 <__aeabi_ui2d>:
 8002688:	b510      	push	{r4, lr}
 800268a:	1e04      	subs	r4, r0, #0
 800268c:	d010      	beq.n	80026b0 <__aeabi_ui2d+0x28>
 800268e:	f7fd ff0b 	bl	80004a8 <__clzsi2>
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <__aeabi_ui2d+0x44>)
 8002694:	1a1b      	subs	r3, r3, r0
 8002696:	055b      	lsls	r3, r3, #21
 8002698:	0d5b      	lsrs	r3, r3, #21
 800269a:	280a      	cmp	r0, #10
 800269c:	dc0f      	bgt.n	80026be <__aeabi_ui2d+0x36>
 800269e:	220b      	movs	r2, #11
 80026a0:	0021      	movs	r1, r4
 80026a2:	1a12      	subs	r2, r2, r0
 80026a4:	40d1      	lsrs	r1, r2
 80026a6:	3015      	adds	r0, #21
 80026a8:	030a      	lsls	r2, r1, #12
 80026aa:	4084      	lsls	r4, r0
 80026ac:	0b12      	lsrs	r2, r2, #12
 80026ae:	e001      	b.n	80026b4 <__aeabi_ui2d+0x2c>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2200      	movs	r2, #0
 80026b4:	051b      	lsls	r3, r3, #20
 80026b6:	4313      	orrs	r3, r2
 80026b8:	0020      	movs	r0, r4
 80026ba:	0019      	movs	r1, r3
 80026bc:	bd10      	pop	{r4, pc}
 80026be:	0022      	movs	r2, r4
 80026c0:	380b      	subs	r0, #11
 80026c2:	4082      	lsls	r2, r0
 80026c4:	0312      	lsls	r2, r2, #12
 80026c6:	2400      	movs	r4, #0
 80026c8:	0b12      	lsrs	r2, r2, #12
 80026ca:	e7f3      	b.n	80026b4 <__aeabi_ui2d+0x2c>
 80026cc:	0000041e 	.word	0x0000041e

080026d0 <__aeabi_f2d>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	0242      	lsls	r2, r0, #9
 80026d4:	0043      	lsls	r3, r0, #1
 80026d6:	0fc4      	lsrs	r4, r0, #31
 80026d8:	20fe      	movs	r0, #254	@ 0xfe
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	1c59      	adds	r1, r3, #1
 80026de:	0a55      	lsrs	r5, r2, #9
 80026e0:	4208      	tst	r0, r1
 80026e2:	d00c      	beq.n	80026fe <__aeabi_f2d+0x2e>
 80026e4:	21e0      	movs	r1, #224	@ 0xe0
 80026e6:	0089      	lsls	r1, r1, #2
 80026e8:	468c      	mov	ip, r1
 80026ea:	076d      	lsls	r5, r5, #29
 80026ec:	0b12      	lsrs	r2, r2, #12
 80026ee:	4463      	add	r3, ip
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	4313      	orrs	r3, r2
 80026f4:	07e4      	lsls	r4, r4, #31
 80026f6:	4323      	orrs	r3, r4
 80026f8:	0028      	movs	r0, r5
 80026fa:	0019      	movs	r1, r3
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d114      	bne.n	800272c <__aeabi_f2d+0x5c>
 8002702:	2d00      	cmp	r5, #0
 8002704:	d01b      	beq.n	800273e <__aeabi_f2d+0x6e>
 8002706:	0028      	movs	r0, r5
 8002708:	f7fd fece 	bl	80004a8 <__clzsi2>
 800270c:	280a      	cmp	r0, #10
 800270e:	dc1c      	bgt.n	800274a <__aeabi_f2d+0x7a>
 8002710:	230b      	movs	r3, #11
 8002712:	002a      	movs	r2, r5
 8002714:	1a1b      	subs	r3, r3, r0
 8002716:	40da      	lsrs	r2, r3
 8002718:	0003      	movs	r3, r0
 800271a:	3315      	adds	r3, #21
 800271c:	409d      	lsls	r5, r3
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <__aeabi_f2d+0x88>)
 8002720:	0312      	lsls	r2, r2, #12
 8002722:	1a1b      	subs	r3, r3, r0
 8002724:	055b      	lsls	r3, r3, #21
 8002726:	0b12      	lsrs	r2, r2, #12
 8002728:	0d5b      	lsrs	r3, r3, #21
 800272a:	e7e1      	b.n	80026f0 <__aeabi_f2d+0x20>
 800272c:	2d00      	cmp	r5, #0
 800272e:	d009      	beq.n	8002744 <__aeabi_f2d+0x74>
 8002730:	0b13      	lsrs	r3, r2, #12
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	0312      	lsls	r2, r2, #12
 8002736:	431a      	orrs	r2, r3
 8002738:	076d      	lsls	r5, r5, #29
 800273a:	4b08      	ldr	r3, [pc, #32]	@ (800275c <__aeabi_f2d+0x8c>)
 800273c:	e7d8      	b.n	80026f0 <__aeabi_f2d+0x20>
 800273e:	2300      	movs	r3, #0
 8002740:	2200      	movs	r2, #0
 8002742:	e7d5      	b.n	80026f0 <__aeabi_f2d+0x20>
 8002744:	2200      	movs	r2, #0
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <__aeabi_f2d+0x8c>)
 8002748:	e7d2      	b.n	80026f0 <__aeabi_f2d+0x20>
 800274a:	0003      	movs	r3, r0
 800274c:	002a      	movs	r2, r5
 800274e:	3b0b      	subs	r3, #11
 8002750:	409a      	lsls	r2, r3
 8002752:	2500      	movs	r5, #0
 8002754:	e7e3      	b.n	800271e <__aeabi_f2d+0x4e>
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	00000389 	.word	0x00000389
 800275c:	000007ff 	.word	0x000007ff

08002760 <__aeabi_d2f>:
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	004b      	lsls	r3, r1, #1
 8002764:	030f      	lsls	r7, r1, #12
 8002766:	0d5b      	lsrs	r3, r3, #21
 8002768:	4c3b      	ldr	r4, [pc, #236]	@ (8002858 <__aeabi_d2f+0xf8>)
 800276a:	0f45      	lsrs	r5, r0, #29
 800276c:	b083      	sub	sp, #12
 800276e:	0a7f      	lsrs	r7, r7, #9
 8002770:	1c5e      	adds	r6, r3, #1
 8002772:	432f      	orrs	r7, r5
 8002774:	9000      	str	r0, [sp, #0]
 8002776:	9101      	str	r1, [sp, #4]
 8002778:	0fca      	lsrs	r2, r1, #31
 800277a:	00c5      	lsls	r5, r0, #3
 800277c:	4226      	tst	r6, r4
 800277e:	d00b      	beq.n	8002798 <__aeabi_d2f+0x38>
 8002780:	4936      	ldr	r1, [pc, #216]	@ (800285c <__aeabi_d2f+0xfc>)
 8002782:	185c      	adds	r4, r3, r1
 8002784:	2cfe      	cmp	r4, #254	@ 0xfe
 8002786:	dd13      	ble.n	80027b0 <__aeabi_d2f+0x50>
 8002788:	20ff      	movs	r0, #255	@ 0xff
 800278a:	2300      	movs	r3, #0
 800278c:	05c0      	lsls	r0, r0, #23
 800278e:	4318      	orrs	r0, r3
 8002790:	07d2      	lsls	r2, r2, #31
 8002792:	4310      	orrs	r0, r2
 8002794:	b003      	add	sp, #12
 8002796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <__aeabi_d2f+0x42>
 800279c:	2000      	movs	r0, #0
 800279e:	2300      	movs	r3, #0
 80027a0:	e7f4      	b.n	800278c <__aeabi_d2f+0x2c>
 80027a2:	433d      	orrs	r5, r7
 80027a4:	d0f0      	beq.n	8002788 <__aeabi_d2f+0x28>
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	03db      	lsls	r3, r3, #15
 80027aa:	20ff      	movs	r0, #255	@ 0xff
 80027ac:	433b      	orrs	r3, r7
 80027ae:	e7ed      	b.n	800278c <__aeabi_d2f+0x2c>
 80027b0:	2c00      	cmp	r4, #0
 80027b2:	dd14      	ble.n	80027de <__aeabi_d2f+0x7e>
 80027b4:	9b00      	ldr	r3, [sp, #0]
 80027b6:	00ff      	lsls	r7, r7, #3
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	4183      	sbcs	r3, r0
 80027be:	0f69      	lsrs	r1, r5, #29
 80027c0:	433b      	orrs	r3, r7
 80027c2:	430b      	orrs	r3, r1
 80027c4:	0759      	lsls	r1, r3, #29
 80027c6:	d041      	beq.n	800284c <__aeabi_d2f+0xec>
 80027c8:	210f      	movs	r1, #15
 80027ca:	4019      	ands	r1, r3
 80027cc:	2904      	cmp	r1, #4
 80027ce:	d028      	beq.n	8002822 <__aeabi_d2f+0xc2>
 80027d0:	3304      	adds	r3, #4
 80027d2:	0159      	lsls	r1, r3, #5
 80027d4:	d525      	bpl.n	8002822 <__aeabi_d2f+0xc2>
 80027d6:	3401      	adds	r4, #1
 80027d8:	2300      	movs	r3, #0
 80027da:	b2e0      	uxtb	r0, r4
 80027dc:	e7d6      	b.n	800278c <__aeabi_d2f+0x2c>
 80027de:	0021      	movs	r1, r4
 80027e0:	3117      	adds	r1, #23
 80027e2:	dbdb      	blt.n	800279c <__aeabi_d2f+0x3c>
 80027e4:	2180      	movs	r1, #128	@ 0x80
 80027e6:	201e      	movs	r0, #30
 80027e8:	0409      	lsls	r1, r1, #16
 80027ea:	4339      	orrs	r1, r7
 80027ec:	1b00      	subs	r0, r0, r4
 80027ee:	281f      	cmp	r0, #31
 80027f0:	dd1b      	ble.n	800282a <__aeabi_d2f+0xca>
 80027f2:	2602      	movs	r6, #2
 80027f4:	4276      	negs	r6, r6
 80027f6:	1b34      	subs	r4, r6, r4
 80027f8:	000e      	movs	r6, r1
 80027fa:	40e6      	lsrs	r6, r4
 80027fc:	0034      	movs	r4, r6
 80027fe:	2820      	cmp	r0, #32
 8002800:	d004      	beq.n	800280c <__aeabi_d2f+0xac>
 8002802:	4817      	ldr	r0, [pc, #92]	@ (8002860 <__aeabi_d2f+0x100>)
 8002804:	4684      	mov	ip, r0
 8002806:	4463      	add	r3, ip
 8002808:	4099      	lsls	r1, r3
 800280a:	430d      	orrs	r5, r1
 800280c:	002b      	movs	r3, r5
 800280e:	1e59      	subs	r1, r3, #1
 8002810:	418b      	sbcs	r3, r1
 8002812:	4323      	orrs	r3, r4
 8002814:	0759      	lsls	r1, r3, #29
 8002816:	d015      	beq.n	8002844 <__aeabi_d2f+0xe4>
 8002818:	210f      	movs	r1, #15
 800281a:	2400      	movs	r4, #0
 800281c:	4019      	ands	r1, r3
 800281e:	2904      	cmp	r1, #4
 8002820:	d117      	bne.n	8002852 <__aeabi_d2f+0xf2>
 8002822:	019b      	lsls	r3, r3, #6
 8002824:	0a5b      	lsrs	r3, r3, #9
 8002826:	b2e0      	uxtb	r0, r4
 8002828:	e7b0      	b.n	800278c <__aeabi_d2f+0x2c>
 800282a:	4c0e      	ldr	r4, [pc, #56]	@ (8002864 <__aeabi_d2f+0x104>)
 800282c:	191c      	adds	r4, r3, r4
 800282e:	002b      	movs	r3, r5
 8002830:	40a5      	lsls	r5, r4
 8002832:	40c3      	lsrs	r3, r0
 8002834:	40a1      	lsls	r1, r4
 8002836:	1e68      	subs	r0, r5, #1
 8002838:	4185      	sbcs	r5, r0
 800283a:	4329      	orrs	r1, r5
 800283c:	430b      	orrs	r3, r1
 800283e:	2400      	movs	r4, #0
 8002840:	0759      	lsls	r1, r3, #29
 8002842:	d1c1      	bne.n	80027c8 <__aeabi_d2f+0x68>
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	2000      	movs	r0, #0
 8002848:	0a5b      	lsrs	r3, r3, #9
 800284a:	e79f      	b.n	800278c <__aeabi_d2f+0x2c>
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	b2e0      	uxtb	r0, r4
 8002850:	e79c      	b.n	800278c <__aeabi_d2f+0x2c>
 8002852:	3304      	adds	r3, #4
 8002854:	e7e5      	b.n	8002822 <__aeabi_d2f+0xc2>
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	000007fe 	.word	0x000007fe
 800285c:	fffffc80 	.word	0xfffffc80
 8002860:	fffffca2 	.word	0xfffffca2
 8002864:	fffffc82 	.word	0xfffffc82

08002868 <__clzdi2>:
 8002868:	b510      	push	{r4, lr}
 800286a:	2900      	cmp	r1, #0
 800286c:	d103      	bne.n	8002876 <__clzdi2+0xe>
 800286e:	f7fd fe1b 	bl	80004a8 <__clzsi2>
 8002872:	3020      	adds	r0, #32
 8002874:	e002      	b.n	800287c <__clzdi2+0x14>
 8002876:	0008      	movs	r0, r1
 8002878:	f7fd fe16 	bl	80004a8 <__clzsi2>
 800287c:	bd10      	pop	{r4, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)

08002880 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e030      	b.n	80028f2 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	18d2      	adds	r2, r2, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	18cb      	adds	r3, r1, r3
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	3301      	adds	r3, #1
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	18d2      	adds	r2, r2, r3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	3301      	adds	r3, #1
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	18cb      	adds	r3, r1, r3
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	18d2      	adds	r2, r2, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	18cb      	adds	r3, r1, r3
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	3303      	adds	r3, #3
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	18d2      	adds	r2, r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3303      	adds	r3, #3
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	18cb      	adds	r3, r1, r3
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d9cb      	bls.n	8002890 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80028f8:	2304      	movs	r3, #4
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	e0a0      	b.n	8002a40 <KeyExpansion+0x1c0>
  {
    {
      k = (i - 1) * 4;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b01      	subs	r3, #1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	18d3      	adds	r3, r2, r3
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	210c      	movs	r1, #12
 8002910:	187b      	adds	r3, r7, r1
 8002912:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	3301      	adds	r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	18d3      	adds	r3, r2, r3
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	187b      	adds	r3, r7, r1
 8002920:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	3302      	adds	r3, #2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	187b      	adds	r3, r7, r1
 800292e:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3303      	adds	r3, #3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	18d3      	adds	r3, r2, r3
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	187b      	adds	r3, r7, r1
 800293c:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	d13b      	bne.n	80029be <KeyExpansion+0x13e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8002946:	2417      	movs	r4, #23
 8002948:	193b      	adds	r3, r7, r4
 800294a:	0008      	movs	r0, r1
 800294c:	183a      	adds	r2, r7, r0
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8002952:	183b      	adds	r3, r7, r0
 8002954:	785a      	ldrb	r2, [r3, #1]
 8002956:	183b      	adds	r3, r7, r0
 8002958:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 800295a:	183b      	adds	r3, r7, r0
 800295c:	789a      	ldrb	r2, [r3, #2]
 800295e:	183b      	adds	r3, r7, r0
 8002960:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8002962:	183b      	adds	r3, r7, r0
 8002964:	78da      	ldrb	r2, [r3, #3]
 8002966:	183b      	adds	r3, r7, r0
 8002968:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 800296a:	183b      	adds	r3, r7, r0
 800296c:	193a      	adds	r2, r7, r4
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8002972:	183b      	adds	r3, r7, r0
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	001a      	movs	r2, r3
 8002978:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <KeyExpansion+0x1d4>)
 800297a:	5c9a      	ldrb	r2, [r3, r2]
 800297c:	183b      	adds	r3, r7, r0
 800297e:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8002980:	183b      	adds	r3, r7, r0
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	001a      	movs	r2, r3
 8002986:	4b33      	ldr	r3, [pc, #204]	@ (8002a54 <KeyExpansion+0x1d4>)
 8002988:	5c9a      	ldrb	r2, [r3, r2]
 800298a:	183b      	adds	r3, r7, r0
 800298c:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 800298e:	183b      	adds	r3, r7, r0
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	001a      	movs	r2, r3
 8002994:	4b2f      	ldr	r3, [pc, #188]	@ (8002a54 <KeyExpansion+0x1d4>)
 8002996:	5c9a      	ldrb	r2, [r3, r2]
 8002998:	183b      	adds	r3, r7, r0
 800299a:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 800299c:	183b      	adds	r3, r7, r0
 800299e:	78db      	ldrb	r3, [r3, #3]
 80029a0:	001a      	movs	r2, r3
 80029a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <KeyExpansion+0x1d4>)
 80029a4:	5c9a      	ldrb	r2, [r3, r2]
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80029aa:	183b      	adds	r3, r7, r0
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	4929      	ldr	r1, [pc, #164]	@ (8002a58 <KeyExpansion+0x1d8>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	4053      	eors	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	183b      	adds	r3, r7, r0
 80029bc:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	3b04      	subs	r3, #4
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	7819      	ldrb	r1, [r3, #0]
 80029d4:	240c      	movs	r4, #12
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	18c3      	adds	r3, r0, r3
 80029e0:	404a      	eors	r2, r1
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3301      	adds	r3, #1
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	18d3      	adds	r3, r2, r3
 80029ee:	7819      	ldrb	r1, [r3, #0]
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	785a      	ldrb	r2, [r3, #1]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	3301      	adds	r3, #1
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	18c3      	adds	r3, r0, r3
 80029fc:	404a      	eors	r2, r1
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3302      	adds	r3, #2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	18d3      	adds	r3, r2, r3
 8002a0a:	7819      	ldrb	r1, [r3, #0]
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	789a      	ldrb	r2, [r3, #2]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3302      	adds	r3, #2
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	18c3      	adds	r3, r0, r3
 8002a18:	404a      	eors	r2, r1
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3303      	adds	r3, #3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	7819      	ldrb	r1, [r3, #0]
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	78da      	ldrb	r2, [r3, #3]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	3303      	adds	r3, #3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	18c3      	adds	r3, r0, r3
 8002a34:	404a      	eors	r2, r1
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b2b      	cmp	r3, #43	@ 0x2b
 8002a44:	d800      	bhi.n	8002a48 <KeyExpansion+0x1c8>
 8002a46:	e75a      	b.n	80028fe <KeyExpansion+0x7e>
  }
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b009      	add	sp, #36	@ 0x24
 8002a50:	bd90      	pop	{r4, r7, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	08011f50 	.word	0x08011f50
 8002a58:	08012150 	.word	0x08012150

08002a5c <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff ff06 	bl	8002880 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	33b0      	adds	r3, #176	@ 0xb0
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f00b fad5 	bl	800e02c <memcpy>
}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8002a8a:	b5b0      	push	{r4, r5, r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	1c02      	adds	r2, r0, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8002a9c:	2317      	movs	r3, #23
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e038      	b.n	8002b18 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8002aa6:	2316      	movs	r3, #22
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e028      	b.n	8002b02 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8002ab0:	2517      	movs	r5, #23
 8002ab2:	197b      	adds	r3, r7, r5
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	2416      	movs	r4, #22
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	188a      	adds	r2, r1, r2
 8002ac2:	5cd0      	ldrb	r0, [r2, r3]
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	18d3      	adds	r3, r2, r3
 8002ad2:	009a      	lsls	r2, r3, #2
 8002ad4:	193b      	adds	r3, r7, r4
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	18d3      	adds	r3, r2, r3
 8002ada:	001a      	movs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	7819      	ldrb	r1, [r3, #0]
 8002ae2:	197b      	adds	r3, r7, r5
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	4041      	eors	r1, r0
 8002aec:	b2c8      	uxtb	r0, r1
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	188a      	adds	r2, r1, r2
 8002af4:	1c01      	adds	r1, r0, #0
 8002af6:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	193a      	adds	r2, r7, r4
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	3201      	adds	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	2316      	movs	r3, #22
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d9d1      	bls.n	8002ab0 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 8002b0c:	2217      	movs	r2, #23
 8002b0e:	18bb      	adds	r3, r7, r2
 8002b10:	18ba      	adds	r2, r7, r2
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	3201      	adds	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d9c1      	bls.n	8002aa6 <AddRoundKey+0x1c>
    }
  }
}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b006      	add	sp, #24
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}

08002b2c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e02a      	b.n	8002b94 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8002b3e:	230e      	movs	r3, #14
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e01a      	b.n	8002b7e <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8002b48:	240e      	movs	r4, #14
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	250f      	movs	r5, #15
 8002b50:	197b      	adds	r3, r7, r5
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	188a      	adds	r2, r1, r2
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	197b      	adds	r3, r7, r5
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4910      	ldr	r1, [pc, #64]	@ (8002ba8 <SubBytes+0x7c>)
 8002b68:	5c08      	ldrb	r0, [r1, r0]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	0092      	lsls	r2, r2, #2
 8002b6e:	188a      	adds	r2, r1, r2
 8002b70:	1c01      	adds	r1, r0, #0
 8002b72:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	193a      	adds	r2, r7, r4
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	3201      	adds	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	230e      	movs	r3, #14
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d9df      	bls.n	8002b48 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8002b88:	220f      	movs	r2, #15
 8002b8a:	18bb      	adds	r3, r7, r2
 8002b8c:	18ba      	adds	r2, r7, r2
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	3201      	adds	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d9cf      	bls.n	8002b3e <SubBytes+0x12>
    }
  }
}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba8:	08011f50 	.word	0x08011f50

08002bac <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8002bb4:	210f      	movs	r1, #15
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	7852      	ldrb	r2, [r2, #1]
 8002bbc:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	795a      	ldrb	r2, [r3, #5]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7a5a      	ldrb	r2, [r3, #9]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7b5a      	ldrb	r2, [r3, #13]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	187a      	adds	r2, r7, r1
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	7892      	ldrb	r2, [r2, #2]
 8002be4:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7a9a      	ldrb	r2, [r3, #10]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	187a      	adds	r2, r7, r1
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	7992      	ldrb	r2, [r2, #6]
 8002bfc:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7b9a      	ldrb	r2, [r3, #14]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	187a      	adds	r2, r7, r1
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	78d2      	ldrb	r2, [r2, #3]
 8002c14:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7bda      	ldrb	r2, [r3, #15]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7ada      	ldrb	r2, [r3, #11]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	79da      	ldrb	r2, [r3, #7]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	187a      	adds	r2, r7, r1
 8002c32:	7812      	ldrb	r2, [r2, #0]
 8002c34:	71da      	strb	r2, [r3, #7]
}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b004      	add	sp, #16
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <xtime>:

static uint8_t xtime(uint8_t x)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	0002      	movs	r2, r0
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	b25a      	sxtb	r2, r3
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	1c19      	adds	r1, r3, #0
 8002c5c:	1c0b      	adds	r3, r1, #0
 8002c5e:	18db      	adds	r3, r3, r3
 8002c60:	185b      	adds	r3, r3, r1
 8002c62:	1c19      	adds	r1, r3, #0
 8002c64:	00c8      	lsls	r0, r1, #3
 8002c66:	1c19      	adds	r1, r3, #0
 8002c68:	1c03      	adds	r3, r0, #0
 8002c6a:	18cb      	adds	r3, r1, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	4053      	eors	r3, r2
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8002c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8002c86:	230f      	movs	r3, #15
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e0ef      	b.n	8002e70 <MixColumns+0x1f2>
  {  
    t   = (*state)[i][0];
 8002c90:	250f      	movs	r5, #15
 8002c92:	197b      	adds	r3, r7, r5
 8002c94:	7819      	ldrb	r1, [r3, #0]
 8002c96:	230e      	movs	r3, #14
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	0089      	lsls	r1, r1, #2
 8002c9e:	5c8a      	ldrb	r2, [r1, r2]
 8002ca0:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8002ca2:	197b      	adds	r3, r7, r5
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	5cd2      	ldrb	r2, [r2, r3]
 8002cac:	197b      	adds	r3, r7, r5
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	18cb      	adds	r3, r1, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4053      	eors	r3, r2
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	18cb      	adds	r3, r1, r3
 8002cc8:	3302      	adds	r3, #2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4053      	eors	r3, r2
 8002cce:	b2d9      	uxtb	r1, r3
 8002cd0:	197b      	adds	r3, r7, r5
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	3303      	adds	r3, #3
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	230d      	movs	r3, #13
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	404a      	eors	r2, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8002ce6:	197b      	adds	r3, r7, r5
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	5cd1      	ldrb	r1, [r2, r3]
 8002cf0:	197b      	adds	r3, r7, r5
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	18d3      	adds	r3, r2, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	260c      	movs	r6, #12
 8002d00:	19bb      	adds	r3, r7, r6
 8002d02:	404a      	eors	r2, r1
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	19bc      	adds	r4, r7, r6
 8002d08:	19bb      	adds	r3, r7, r6
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff ff96 	bl	8002c3e <xtime>
 8002d12:	0003      	movs	r3, r0
 8002d14:	7023      	strb	r3, [r4, #0]
 8002d16:	197b      	adds	r3, r7, r5
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	5cd1      	ldrb	r1, [r2, r3]
 8002d20:	0030      	movs	r0, r6
 8002d22:	183a      	adds	r2, r7, r0
 8002d24:	230d      	movs	r3, #13
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4053      	eors	r3, r2
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	197a      	adds	r2, r7, r5
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	404b      	eors	r3, r1
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8002d3e:	197b      	adds	r3, r7, r5
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	18d3      	adds	r3, r2, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	7819      	ldrb	r1, [r3, #0]
 8002d4c:	197b      	adds	r3, r7, r5
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	3302      	adds	r3, #2
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	183b      	adds	r3, r7, r0
 8002d5c:	404a      	eors	r2, r1
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	183c      	adds	r4, r7, r0
 8002d62:	0006      	movs	r6, r0
 8002d64:	183b      	adds	r3, r7, r0
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff68 	bl	8002c3e <xtime>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	7023      	strb	r3, [r4, #0]
 8002d72:	197b      	adds	r3, r7, r5
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	18d3      	adds	r3, r2, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	7819      	ldrb	r1, [r3, #0]
 8002d80:	0030      	movs	r0, r6
 8002d82:	183a      	adds	r2, r7, r0
 8002d84:	230d      	movs	r3, #13
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4053      	eors	r3, r2
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	197b      	adds	r3, r7, r5
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	404a      	eors	r2, r1
 8002d96:	b2d1      	uxtb	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	18d3      	adds	r3, r2, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	1c0a      	adds	r2, r1, #0
 8002da2:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8002da4:	197b      	adds	r3, r7, r5
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	3302      	adds	r3, #2
 8002db0:	7819      	ldrb	r1, [r3, #0]
 8002db2:	197b      	adds	r3, r7, r5
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	18d3      	adds	r3, r2, r3
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	183b      	adds	r3, r7, r0
 8002dc2:	404a      	eors	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	183c      	adds	r4, r7, r0
 8002dc8:	0006      	movs	r6, r0
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ff35 	bl	8002c3e <xtime>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	7023      	strb	r3, [r4, #0]
 8002dd8:	197b      	adds	r3, r7, r5
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	3302      	adds	r3, #2
 8002de4:	7819      	ldrb	r1, [r3, #0]
 8002de6:	0030      	movs	r0, r6
 8002de8:	183a      	adds	r2, r7, r0
 8002dea:	230d      	movs	r3, #13
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4053      	eors	r3, r2
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	197b      	adds	r3, r7, r5
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	404a      	eors	r2, r1
 8002dfc:	b2d1      	uxtb	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	18d3      	adds	r3, r2, r3
 8002e04:	3302      	adds	r3, #2
 8002e06:	1c0a      	adds	r2, r1, #0
 8002e08:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8002e0a:	197b      	adds	r3, r7, r5
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	3303      	adds	r3, #3
 8002e16:	7819      	ldrb	r1, [r3, #0]
 8002e18:	183b      	adds	r3, r7, r0
 8002e1a:	220e      	movs	r2, #14
 8002e1c:	18ba      	adds	r2, r7, r2
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	404a      	eors	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	183c      	adds	r4, r7, r0
 8002e26:	0006      	movs	r6, r0
 8002e28:	183b      	adds	r3, r7, r0
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff ff06 	bl	8002c3e <xtime>
 8002e32:	0003      	movs	r3, r0
 8002e34:	7023      	strb	r3, [r4, #0]
 8002e36:	197b      	adds	r3, r7, r5
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	3303      	adds	r3, #3
 8002e42:	7819      	ldrb	r1, [r3, #0]
 8002e44:	19ba      	adds	r2, r7, r6
 8002e46:	230d      	movs	r3, #13
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4053      	eors	r3, r2
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	197b      	adds	r3, r7, r5
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	404a      	eors	r2, r1
 8002e58:	b2d1      	uxtb	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	18d3      	adds	r3, r2, r3
 8002e60:	3303      	adds	r3, #3
 8002e62:	1c0a      	adds	r2, r1, #0
 8002e64:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8002e66:	197b      	adds	r3, r7, r5
 8002e68:	197a      	adds	r2, r7, r5
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	3201      	adds	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	230f      	movs	r3, #15
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d800      	bhi.n	8002e7c <MixColumns+0x1fe>
 8002e7a:	e709      	b.n	8002c90 <MixColumns+0x12>
  }
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b005      	add	sp, #20
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e86 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8002e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e3bb      	b.n	800360c <InvMixColumns+0x786>
  { 
    a = (*state)[i][0];
 8002e94:	260b      	movs	r6, #11
 8002e96:	19bb      	adds	r3, r7, r6
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	0089      	lsls	r1, r1, #2
 8002e9e:	5c8a      	ldrb	r2, [r1, r2]
 8002ea0:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 8002ea2:	250a      	movs	r5, #10
 8002ea4:	197b      	adds	r3, r7, r5
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	188a      	adds	r2, r1, r2
 8002eae:	3201      	adds	r2, #1
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 8002eb4:	2409      	movs	r4, #9
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	188a      	adds	r2, r1, r2
 8002ec0:	3202      	adds	r2, #2
 8002ec2:	7812      	ldrb	r2, [r2, #0]
 8002ec4:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	188a      	adds	r2, r1, r2
 8002ed2:	3203      	adds	r2, #3
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8002ed8:	19bb      	adds	r3, r7, r6
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff feae 	bl	8002c3e <xtime>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff feaa 	bl	8002c3e <xtime>
 8002eea:	0003      	movs	r3, r0
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff fea6 	bl	8002c3e <xtime>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff fea2 	bl	8002c3e <xtime>
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff fe9d 	bl	8002c3e <xtime>
 8002f04:	0003      	movs	r3, r0
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff fe99 	bl	8002c3e <xtime>
 8002f0c:	197b      	adds	r3, r7, r5
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff fe94 	bl	8002c3e <xtime>
 8002f16:	0003      	movs	r3, r0
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff fe90 	bl	8002c3e <xtime>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff fe8c 	bl	8002c3e <xtime>
 8002f26:	0003      	movs	r3, r0
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff fe88 	bl	8002c3e <xtime>
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff fe83 	bl	8002c3e <xtime>
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff fe7e 	bl	8002c3e <xtime>
 8002f42:	0003      	movs	r3, r0
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff fe7a 	bl	8002c3e <xtime>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fe76 	bl	8002c3e <xtime>
 8002f52:	0003      	movs	r3, r0
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff fe72 	bl	8002c3e <xtime>
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	0014      	movs	r4, r2
 8002f5e:	18bb      	adds	r3, r7, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff fe6b 	bl	8002c3e <xtime>
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff fe66 	bl	8002c3e <xtime>
 8002f72:	0003      	movs	r3, r0
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fe62 	bl	8002c3e <xtime>
 8002f7a:	0022      	movs	r2, r4
 8002f7c:	18bb      	adds	r3, r7, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fe5c 	bl	8002c3e <xtime>
 8002f86:	0003      	movs	r3, r0
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff fe58 	bl	8002c3e <xtime>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff fe54 	bl	8002c3e <xtime>
 8002f96:	0003      	movs	r3, r0
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff fe50 	bl	8002c3e <xtime>
 8002f9e:	19bb      	adds	r3, r7, r6
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fe4b 	bl	8002c3e <xtime>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	001c      	movs	r4, r3
 8002fac:	19bb      	adds	r3, r7, r6
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fe44 	bl	8002c3e <xtime>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7ff fe40 	bl	8002c3e <xtime>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	4063      	eors	r3, r4
 8002fc2:	b2dc      	uxtb	r4, r3
 8002fc4:	19bb      	adds	r3, r7, r6
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fe38 	bl	8002c3e <xtime>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff fe34 	bl	8002c3e <xtime>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff fe30 	bl	8002c3e <xtime>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	4063      	eors	r3, r4
 8002fe2:	b2dc      	uxtb	r4, r3
 8002fe4:	197b      	adds	r3, r7, r5
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fe28 	bl	8002c3e <xtime>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	0029      	movs	r1, r5
 8002ff4:	197b      	adds	r3, r7, r5
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4053      	eors	r3, r2
 8002ffa:	b2dd      	uxtb	r5, r3
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fe1c 	bl	8002c3e <xtime>
 8003006:	0003      	movs	r3, r0
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff fe18 	bl	8002c3e <xtime>
 800300e:	0003      	movs	r3, r0
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fe14 	bl	8002c3e <xtime>
 8003016:	0003      	movs	r3, r0
 8003018:	406b      	eors	r3, r5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4063      	eors	r3, r4
 800301e:	b2dc      	uxtb	r4, r3
 8003020:	2309      	movs	r3, #9
 8003022:	001d      	movs	r5, r3
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff fe08 	bl	8002c3e <xtime>
 800302e:	0003      	movs	r3, r0
 8003030:	0018      	movs	r0, r3
 8003032:	f7ff fe04 	bl	8002c3e <xtime>
 8003036:	0003      	movs	r3, r0
 8003038:	001a      	movs	r2, r3
 800303a:	0028      	movs	r0, r5
 800303c:	183b      	adds	r3, r7, r0
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4053      	eors	r3, r2
 8003042:	b2dd      	uxtb	r5, r3
 8003044:	183b      	adds	r3, r7, r0
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff fdf8 	bl	8002c3e <xtime>
 800304e:	0003      	movs	r3, r0
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fdf4 	bl	8002c3e <xtime>
 8003056:	0003      	movs	r3, r0
 8003058:	0018      	movs	r0, r3
 800305a:	f7ff fdf0 	bl	8002c3e <xtime>
 800305e:	0003      	movs	r3, r0
 8003060:	406b      	eors	r3, r5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	4063      	eors	r3, r4
 8003066:	b2dc      	uxtb	r4, r3
 8003068:	2208      	movs	r2, #8
 800306a:	0015      	movs	r5, r2
 800306c:	18bb      	adds	r3, r7, r2
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fde4 	bl	8002c3e <xtime>
 8003076:	0003      	movs	r3, r0
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fde0 	bl	8002c3e <xtime>
 800307e:	0003      	movs	r3, r0
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff fddc 	bl	8002c3e <xtime>
 8003086:	0003      	movs	r3, r0
 8003088:	001a      	movs	r2, r3
 800308a:	002b      	movs	r3, r5
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4053      	eors	r3, r2
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4063      	eors	r3, r4
 8003096:	b2d9      	uxtb	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80030a0:	19bb      	adds	r3, r7, r6
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff fdca 	bl	8002c3e <xtime>
 80030aa:	19bb      	adds	r3, r7, r6
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fdc5 	bl	8002c3e <xtime>
 80030b4:	0003      	movs	r3, r0
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fdc1 	bl	8002c3e <xtime>
 80030bc:	19bb      	adds	r3, r7, r6
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff fdbc 	bl	8002c3e <xtime>
 80030c6:	0003      	movs	r3, r0
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff fdb8 	bl	8002c3e <xtime>
 80030ce:	0003      	movs	r3, r0
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff fdb4 	bl	8002c3e <xtime>
 80030d6:	0003      	movs	r3, r0
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff fdb0 	bl	8002c3e <xtime>
 80030de:	250a      	movs	r5, #10
 80030e0:	197b      	adds	r3, r7, r5
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fdaa 	bl	8002c3e <xtime>
 80030ea:	0003      	movs	r3, r0
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff fda6 	bl	8002c3e <xtime>
 80030f2:	0003      	movs	r3, r0
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff fda2 	bl	8002c3e <xtime>
 80030fa:	0003      	movs	r3, r0
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff fd9e 	bl	8002c3e <xtime>
 8003102:	2409      	movs	r4, #9
 8003104:	193b      	adds	r3, r7, r4
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	0018      	movs	r0, r3
 800310a:	f7ff fd98 	bl	8002c3e <xtime>
 800310e:	0003      	movs	r3, r0
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff fd94 	bl	8002c3e <xtime>
 8003116:	193b      	adds	r3, r7, r4
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fd8f 	bl	8002c3e <xtime>
 8003120:	0003      	movs	r3, r0
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff fd8b 	bl	8002c3e <xtime>
 8003128:	0003      	movs	r3, r0
 800312a:	0018      	movs	r0, r3
 800312c:	f7ff fd87 	bl	8002c3e <xtime>
 8003130:	0003      	movs	r3, r0
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff fd83 	bl	8002c3e <xtime>
 8003138:	2308      	movs	r3, #8
 800313a:	001c      	movs	r4, r3
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff fd7c 	bl	8002c3e <xtime>
 8003146:	0023      	movs	r3, r4
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fd76 	bl	8002c3e <xtime>
 8003152:	0003      	movs	r3, r0
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff fd72 	bl	8002c3e <xtime>
 800315a:	0003      	movs	r3, r0
 800315c:	0018      	movs	r0, r3
 800315e:	f7ff fd6e 	bl	8002c3e <xtime>
 8003162:	0003      	movs	r3, r0
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff fd6a 	bl	8002c3e <xtime>
 800316a:	19bb      	adds	r3, r7, r6
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff fd65 	bl	8002c3e <xtime>
 8003174:	0003      	movs	r3, r0
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff fd61 	bl	8002c3e <xtime>
 800317c:	0003      	movs	r3, r0
 800317e:	0018      	movs	r0, r3
 8003180:	f7ff fd5d 	bl	8002c3e <xtime>
 8003184:	0003      	movs	r3, r0
 8003186:	001a      	movs	r2, r3
 8003188:	19bb      	adds	r3, r7, r6
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4053      	eors	r3, r2
 800318e:	b2dc      	uxtb	r4, r3
 8003190:	197b      	adds	r3, r7, r5
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff fd52 	bl	8002c3e <xtime>
 800319a:	0003      	movs	r3, r0
 800319c:	001d      	movs	r5, r3
 800319e:	230a      	movs	r3, #10
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff fd4a 	bl	8002c3e <xtime>
 80031aa:	0003      	movs	r3, r0
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff fd46 	bl	8002c3e <xtime>
 80031b2:	0003      	movs	r3, r0
 80031b4:	406b      	eors	r3, r5
 80031b6:	b2dd      	uxtb	r5, r3
 80031b8:	230a      	movs	r3, #10
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fd3d 	bl	8002c3e <xtime>
 80031c4:	0003      	movs	r3, r0
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7ff fd39 	bl	8002c3e <xtime>
 80031cc:	0003      	movs	r3, r0
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7ff fd35 	bl	8002c3e <xtime>
 80031d4:	0003      	movs	r3, r0
 80031d6:	406b      	eors	r3, r5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4063      	eors	r3, r4
 80031dc:	b2dc      	uxtb	r4, r3
 80031de:	2209      	movs	r2, #9
 80031e0:	0015      	movs	r5, r2
 80031e2:	18bb      	adds	r3, r7, r2
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff fd29 	bl	8002c3e <xtime>
 80031ec:	0003      	movs	r3, r0
 80031ee:	001a      	movs	r2, r3
 80031f0:	0029      	movs	r1, r5
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4053      	eors	r3, r2
 80031f8:	b2dd      	uxtb	r5, r3
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fd1d 	bl	8002c3e <xtime>
 8003204:	0003      	movs	r3, r0
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff fd19 	bl	8002c3e <xtime>
 800320c:	0003      	movs	r3, r0
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff fd15 	bl	8002c3e <xtime>
 8003214:	0003      	movs	r3, r0
 8003216:	406b      	eors	r3, r5
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4063      	eors	r3, r4
 800321c:	b2dc      	uxtb	r4, r3
 800321e:	2208      	movs	r2, #8
 8003220:	0015      	movs	r5, r2
 8003222:	18bb      	adds	r3, r7, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	0018      	movs	r0, r3
 8003228:	f7ff fd09 	bl	8002c3e <xtime>
 800322c:	0003      	movs	r3, r0
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff fd05 	bl	8002c3e <xtime>
 8003234:	0003      	movs	r3, r0
 8003236:	001a      	movs	r2, r3
 8003238:	0028      	movs	r0, r5
 800323a:	183b      	adds	r3, r7, r0
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4053      	eors	r3, r2
 8003240:	b2dd      	uxtb	r5, r3
 8003242:	183b      	adds	r3, r7, r0
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff fcf9 	bl	8002c3e <xtime>
 800324c:	0003      	movs	r3, r0
 800324e:	0018      	movs	r0, r3
 8003250:	f7ff fcf5 	bl	8002c3e <xtime>
 8003254:	0003      	movs	r3, r0
 8003256:	0018      	movs	r0, r3
 8003258:	f7ff fcf1 	bl	8002c3e <xtime>
 800325c:	0003      	movs	r3, r0
 800325e:	406b      	eors	r3, r5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	4063      	eors	r3, r4
 8003264:	b2d9      	uxtb	r1, r3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	18d3      	adds	r3, r2, r3
 800326e:	3301      	adds	r3, #1
 8003270:	1c0a      	adds	r2, r1, #0
 8003272:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8003274:	19bb      	adds	r3, r7, r6
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fce0 	bl	8002c3e <xtime>
 800327e:	19bb      	adds	r3, r7, r6
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff fcdb 	bl	8002c3e <xtime>
 8003288:	0003      	movs	r3, r0
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff fcd7 	bl	8002c3e <xtime>
 8003290:	0003      	movs	r3, r0
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff fcd3 	bl	8002c3e <xtime>
 8003298:	0003      	movs	r3, r0
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fccf 	bl	8002c3e <xtime>
 80032a0:	250a      	movs	r5, #10
 80032a2:	197b      	adds	r3, r7, r5
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fcc9 	bl	8002c3e <xtime>
 80032ac:	197b      	adds	r3, r7, r5
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff fcc4 	bl	8002c3e <xtime>
 80032b6:	0003      	movs	r3, r0
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff fcc0 	bl	8002c3e <xtime>
 80032be:	197b      	adds	r3, r7, r5
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff fcbb 	bl	8002c3e <xtime>
 80032c8:	0003      	movs	r3, r0
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff fcb7 	bl	8002c3e <xtime>
 80032d0:	0003      	movs	r3, r0
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7ff fcb3 	bl	8002c3e <xtime>
 80032d8:	0003      	movs	r3, r0
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff fcaf 	bl	8002c3e <xtime>
 80032e0:	2109      	movs	r1, #9
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff fca9 	bl	8002c3e <xtime>
 80032ec:	0003      	movs	r3, r0
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff fca5 	bl	8002c3e <xtime>
 80032f4:	0003      	movs	r3, r0
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fca1 	bl	8002c3e <xtime>
 80032fc:	0003      	movs	r3, r0
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff fc9d 	bl	8002c3e <xtime>
 8003304:	2408      	movs	r4, #8
 8003306:	193b      	adds	r3, r7, r4
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff fc97 	bl	8002c3e <xtime>
 8003310:	0003      	movs	r3, r0
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff fc93 	bl	8002c3e <xtime>
 8003318:	193b      	adds	r3, r7, r4
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff fc8e 	bl	8002c3e <xtime>
 8003322:	0003      	movs	r3, r0
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff fc8a 	bl	8002c3e <xtime>
 800332a:	0003      	movs	r3, r0
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fc86 	bl	8002c3e <xtime>
 8003332:	0003      	movs	r3, r0
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff fc82 	bl	8002c3e <xtime>
 800333a:	19bb      	adds	r3, r7, r6
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0018      	movs	r0, r3
 8003340:	f7ff fc7d 	bl	8002c3e <xtime>
 8003344:	0003      	movs	r3, r0
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff fc79 	bl	8002c3e <xtime>
 800334c:	0003      	movs	r3, r0
 800334e:	001a      	movs	r2, r3
 8003350:	19bb      	adds	r3, r7, r6
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4053      	eors	r3, r2
 8003356:	b2dc      	uxtb	r4, r3
 8003358:	19bb      	adds	r3, r7, r6
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	0018      	movs	r0, r3
 800335e:	f7ff fc6e 	bl	8002c3e <xtime>
 8003362:	0003      	movs	r3, r0
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff fc6a 	bl	8002c3e <xtime>
 800336a:	0003      	movs	r3, r0
 800336c:	0018      	movs	r0, r3
 800336e:	f7ff fc66 	bl	8002c3e <xtime>
 8003372:	0003      	movs	r3, r0
 8003374:	4063      	eors	r3, r4
 8003376:	b2dc      	uxtb	r4, r3
 8003378:	197b      	adds	r3, r7, r5
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff fc5e 	bl	8002c3e <xtime>
 8003382:	0003      	movs	r3, r0
 8003384:	0018      	movs	r0, r3
 8003386:	f7ff fc5a 	bl	8002c3e <xtime>
 800338a:	0003      	movs	r3, r0
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff fc56 	bl	8002c3e <xtime>
 8003392:	0003      	movs	r3, r0
 8003394:	001a      	movs	r2, r3
 8003396:	197b      	adds	r3, r7, r5
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4053      	eors	r3, r2
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4063      	eors	r3, r4
 80033a0:	b2dc      	uxtb	r4, r3
 80033a2:	2109      	movs	r1, #9
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fc48 	bl	8002c3e <xtime>
 80033ae:	0003      	movs	r3, r0
 80033b0:	001d      	movs	r5, r3
 80033b2:	2109      	movs	r1, #9
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff fc40 	bl	8002c3e <xtime>
 80033be:	0003      	movs	r3, r0
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7ff fc3c 	bl	8002c3e <xtime>
 80033c6:	0003      	movs	r3, r0
 80033c8:	406b      	eors	r3, r5
 80033ca:	b2dd      	uxtb	r5, r3
 80033cc:	2109      	movs	r1, #9
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff fc33 	bl	8002c3e <xtime>
 80033d8:	0003      	movs	r3, r0
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff fc2f 	bl	8002c3e <xtime>
 80033e0:	0003      	movs	r3, r0
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff fc2b 	bl	8002c3e <xtime>
 80033e8:	0003      	movs	r3, r0
 80033ea:	406b      	eors	r3, r5
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4063      	eors	r3, r4
 80033f0:	b2dc      	uxtb	r4, r3
 80033f2:	2308      	movs	r3, #8
 80033f4:	001d      	movs	r5, r3
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff fc1f 	bl	8002c3e <xtime>
 8003400:	0003      	movs	r3, r0
 8003402:	001a      	movs	r2, r3
 8003404:	0028      	movs	r0, r5
 8003406:	183b      	adds	r3, r7, r0
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4053      	eors	r3, r2
 800340c:	b2dd      	uxtb	r5, r3
 800340e:	183b      	adds	r3, r7, r0
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	0018      	movs	r0, r3
 8003414:	f7ff fc13 	bl	8002c3e <xtime>
 8003418:	0003      	movs	r3, r0
 800341a:	0018      	movs	r0, r3
 800341c:	f7ff fc0f 	bl	8002c3e <xtime>
 8003420:	0003      	movs	r3, r0
 8003422:	0018      	movs	r0, r3
 8003424:	f7ff fc0b 	bl	8002c3e <xtime>
 8003428:	0003      	movs	r3, r0
 800342a:	406b      	eors	r3, r5
 800342c:	b2db      	uxtb	r3, r3
 800342e:	4063      	eors	r3, r4
 8003430:	b2d9      	uxtb	r1, r3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	3302      	adds	r3, #2
 800343c:	1c0a      	adds	r2, r1, #0
 800343e:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8003440:	19bb      	adds	r3, r7, r6
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fbfa 	bl	8002c3e <xtime>
 800344a:	0003      	movs	r3, r0
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff fbf6 	bl	8002c3e <xtime>
 8003452:	19bb      	adds	r3, r7, r6
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fbf1 	bl	8002c3e <xtime>
 800345c:	0003      	movs	r3, r0
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff fbed 	bl	8002c3e <xtime>
 8003464:	0003      	movs	r3, r0
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff fbe9 	bl	8002c3e <xtime>
 800346c:	0003      	movs	r3, r0
 800346e:	0018      	movs	r0, r3
 8003470:	f7ff fbe5 	bl	8002c3e <xtime>
 8003474:	250a      	movs	r5, #10
 8003476:	197b      	adds	r3, r7, r5
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	0018      	movs	r0, r3
 800347c:	f7ff fbdf 	bl	8002c3e <xtime>
 8003480:	197b      	adds	r3, r7, r5
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fbda 	bl	8002c3e <xtime>
 800348a:	0003      	movs	r3, r0
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff fbd6 	bl	8002c3e <xtime>
 8003492:	0003      	movs	r3, r0
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff fbd2 	bl	8002c3e <xtime>
 800349a:	0003      	movs	r3, r0
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fbce 	bl	8002c3e <xtime>
 80034a2:	2409      	movs	r4, #9
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff fbc8 	bl	8002c3e <xtime>
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7ff fbc3 	bl	8002c3e <xtime>
 80034b8:	0003      	movs	r3, r0
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff fbbf 	bl	8002c3e <xtime>
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff fbba 	bl	8002c3e <xtime>
 80034ca:	0003      	movs	r3, r0
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fbb6 	bl	8002c3e <xtime>
 80034d2:	0003      	movs	r3, r0
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fbb2 	bl	8002c3e <xtime>
 80034da:	0003      	movs	r3, r0
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff fbae 	bl	8002c3e <xtime>
 80034e2:	2008      	movs	r0, #8
 80034e4:	183b      	adds	r3, r7, r0
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff fba8 	bl	8002c3e <xtime>
 80034ee:	0003      	movs	r3, r0
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fba4 	bl	8002c3e <xtime>
 80034f6:	0003      	movs	r3, r0
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff fba0 	bl	8002c3e <xtime>
 80034fe:	0003      	movs	r3, r0
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff fb9c 	bl	8002c3e <xtime>
 8003506:	19bb      	adds	r3, r7, r6
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fb97 	bl	8002c3e <xtime>
 8003510:	0003      	movs	r3, r0
 8003512:	001a      	movs	r2, r3
 8003514:	19bb      	adds	r3, r7, r6
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4053      	eors	r3, r2
 800351a:	b2dc      	uxtb	r4, r3
 800351c:	19bb      	adds	r3, r7, r6
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff fb8c 	bl	8002c3e <xtime>
 8003526:	0003      	movs	r3, r0
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fb88 	bl	8002c3e <xtime>
 800352e:	0003      	movs	r3, r0
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff fb84 	bl	8002c3e <xtime>
 8003536:	0003      	movs	r3, r0
 8003538:	4063      	eors	r3, r4
 800353a:	b2dc      	uxtb	r4, r3
 800353c:	197b      	adds	r3, r7, r5
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fb7c 	bl	8002c3e <xtime>
 8003546:	0003      	movs	r3, r0
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff fb78 	bl	8002c3e <xtime>
 800354e:	0003      	movs	r3, r0
 8003550:	001a      	movs	r2, r3
 8003552:	0029      	movs	r1, r5
 8003554:	197b      	adds	r3, r7, r5
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4053      	eors	r3, r2
 800355a:	b2dd      	uxtb	r5, r3
 800355c:	187b      	adds	r3, r7, r1
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff fb6c 	bl	8002c3e <xtime>
 8003566:	0003      	movs	r3, r0
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff fb68 	bl	8002c3e <xtime>
 800356e:	0003      	movs	r3, r0
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff fb64 	bl	8002c3e <xtime>
 8003576:	0003      	movs	r3, r0
 8003578:	406b      	eors	r3, r5
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4063      	eors	r3, r4
 800357e:	b2dc      	uxtb	r4, r3
 8003580:	2509      	movs	r5, #9
 8003582:	197b      	adds	r3, r7, r5
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff fb59 	bl	8002c3e <xtime>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff fb55 	bl	8002c3e <xtime>
 8003594:	0003      	movs	r3, r0
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fb51 	bl	8002c3e <xtime>
 800359c:	0003      	movs	r3, r0
 800359e:	001a      	movs	r2, r3
 80035a0:	197b      	adds	r3, r7, r5
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4053      	eors	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	4063      	eors	r3, r4
 80035aa:	b2dc      	uxtb	r4, r3
 80035ac:	2608      	movs	r6, #8
 80035ae:	19bb      	adds	r3, r7, r6
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff fb43 	bl	8002c3e <xtime>
 80035b8:	0003      	movs	r3, r0
 80035ba:	001d      	movs	r5, r3
 80035bc:	19bb      	adds	r3, r7, r6
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff fb3c 	bl	8002c3e <xtime>
 80035c6:	0003      	movs	r3, r0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7ff fb38 	bl	8002c3e <xtime>
 80035ce:	0003      	movs	r3, r0
 80035d0:	406b      	eors	r3, r5
 80035d2:	b2dd      	uxtb	r5, r3
 80035d4:	19bb      	adds	r3, r7, r6
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff fb30 	bl	8002c3e <xtime>
 80035de:	0003      	movs	r3, r0
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff fb2c 	bl	8002c3e <xtime>
 80035e6:	0003      	movs	r3, r0
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff fb28 	bl	8002c3e <xtime>
 80035ee:	0003      	movs	r3, r0
 80035f0:	406b      	eors	r3, r5
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4063      	eors	r3, r4
 80035f6:	b2d9      	uxtb	r1, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	3303      	adds	r3, #3
 8003602:	1c0a      	adds	r2, r1, #0
 8003604:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b03      	cmp	r3, #3
 8003610:	dc00      	bgt.n	8003614 <InvMixColumns+0x78e>
 8003612:	e43f      	b.n	8002e94 <InvMixColumns+0xe>
  }
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b005      	add	sp, #20
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003620 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8003628:	230f      	movs	r3, #15
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e02a      	b.n	8003688 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8003632:	230e      	movs	r3, #14
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e01a      	b.n	8003672 <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 800363c:	240e      	movs	r4, #14
 800363e:	193b      	adds	r3, r7, r4
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	250f      	movs	r5, #15
 8003644:	197b      	adds	r3, r7, r5
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	188a      	adds	r2, r1, r2
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	0018      	movs	r0, r3
 8003652:	193b      	adds	r3, r7, r4
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	197b      	adds	r3, r7, r5
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	4910      	ldr	r1, [pc, #64]	@ (800369c <InvSubBytes+0x7c>)
 800365c:	5c08      	ldrb	r0, [r1, r0]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	0092      	lsls	r2, r2, #2
 8003662:	188a      	adds	r2, r1, r2
 8003664:	1c01      	adds	r1, r0, #0
 8003666:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8003668:	193b      	adds	r3, r7, r4
 800366a:	193a      	adds	r2, r7, r4
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	3201      	adds	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	230e      	movs	r3, #14
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d9df      	bls.n	800363c <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 800367c:	220f      	movs	r2, #15
 800367e:	18bb      	adds	r3, r7, r2
 8003680:	18ba      	adds	r2, r7, r2
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	3201      	adds	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	230f      	movs	r3, #15
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d9cf      	bls.n	8003632 <InvSubBytes+0x12>
    }
  }
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	08012050 	.word	0x08012050

080036a0 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 80036a8:	210f      	movs	r1, #15
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	7b52      	ldrb	r2, [r2, #13]
 80036b0:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7a5a      	ldrb	r2, [r3, #9]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	795a      	ldrb	r2, [r3, #5]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	785a      	ldrb	r2, [r3, #1]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	187a      	adds	r2, r7, r1
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	7892      	ldrb	r2, [r2, #2]
 80036d8:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	7a9a      	ldrb	r2, [r3, #10]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	187a      	adds	r2, r7, r1
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	7992      	ldrb	r2, [r2, #6]
 80036f0:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7b9a      	ldrb	r2, [r3, #14]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	187a      	adds	r2, r7, r1
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8003702:	187b      	adds	r3, r7, r1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	78d2      	ldrb	r2, [r2, #3]
 8003708:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	79da      	ldrb	r2, [r3, #7]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7ada      	ldrb	r2, [r3, #11]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7bda      	ldrb	r2, [r3, #15]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	187a      	adds	r2, r7, r1
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	73da      	strb	r2, [r3, #15]
}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}

08003732 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8003732:	b590      	push	{r4, r7, lr}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800373c:	240f      	movs	r4, #15
 800373e:	193b      	adds	r3, r7, r4
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0019      	movs	r1, r3
 800374a:	2000      	movs	r0, #0
 800374c:	f7ff f99d 	bl	8002a8a <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8003750:	193b      	adds	r3, r7, r4
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
  {
    SubBytes(state);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff f9e7 	bl	8002b2c <SubBytes>
    ShiftRows(state);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fa23 	bl	8002bac <ShiftRows>
    if (round == Nr) {
 8003766:	240f      	movs	r4, #15
 8003768:	193b      	adds	r3, r7, r4
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b0a      	cmp	r3, #10
 800376e:	d010      	beq.n	8003792 <Cipher+0x60>
      break;
    }
    MixColumns(state);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fa83 	bl	8002c7e <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	193b      	adds	r3, r7, r4
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff f982 	bl	8002a8a <AddRoundKey>
  for (round = 1; ; ++round)
 8003786:	193b      	adds	r3, r7, r4
 8003788:	193a      	adds	r2, r7, r4
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	3201      	adds	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
    SubBytes(state);
 8003790:	e7e1      	b.n	8003756 <Cipher+0x24>
      break;
 8003792:	46c0      	nop			@ (mov r8, r8)
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	200a      	movs	r0, #10
 800379c:	f7ff f975 	bl	8002a8a <AddRoundKey>
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b005      	add	sp, #20
 80037a6:	bd90      	pop	{r4, r7, pc}

080037a8 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80037b2:	240f      	movs	r4, #15
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	0019      	movs	r1, r3
 80037c0:	200a      	movs	r0, #10
 80037c2:	f7ff f962 	bl	8002a8a <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	2209      	movs	r2, #9
 80037ca:	701a      	strb	r2, [r3, #0]
  {
    InvShiftRows(state);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7ff ff66 	bl	80036a0 <InvShiftRows>
    InvSubBytes(state);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff ff22 	bl	8003620 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	240f      	movs	r4, #15
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7ff f94f 	bl	8002a8a <AddRoundKey>
    if (round == 0) {
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <InvCipher+0x60>
      break;
    }
    InvMixColumns(state);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff fb45 	bl	8002e86 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	193a      	adds	r2, r7, r4
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	3a01      	subs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
    InvShiftRows(state);
 8003806:	e7e1      	b.n	80037cc <InvCipher+0x24>
      break;
 8003808:	46c0      	nop			@ (mov r8, r8)
  }

}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b005      	add	sp, #20
 8003810:	bd90      	pop	{r4, r7, pc}

08003812 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8003812:	b590      	push	{r4, r7, lr}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800381c:	230f      	movs	r3, #15
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e016      	b.n	8003854 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 8003826:	240f      	movs	r4, #15
 8003828:	193b      	adds	r3, r7, r4
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	7819      	ldrb	r1, [r3, #0]
 8003832:	193b      	adds	r3, r7, r4
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	18d3      	adds	r3, r2, r3
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	193b      	adds	r3, r7, r4
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	18c3      	adds	r3, r0, r3
 8003844:	404a      	eors	r2, r1
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800384a:	193b      	adds	r3, r7, r4
 800384c:	193a      	adds	r2, r7, r4
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	230f      	movs	r3, #15
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d9e3      	bls.n	8003826 <XorWithIv+0x14>
  }
}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b005      	add	sp, #20
 8003866:	bd90      	pop	{r4, r7, pc}

08003868 <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	33b0      	adds	r3, #176	@ 0xb0
 8003878:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e013      	b.n	80038a8 <AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f7ff ffc3 	bl	8003812 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0011      	movs	r1, r2
 8003892:	0018      	movs	r0, r3
 8003894:	f7ff ff4d 	bl	8003732 <Cipher>
    Iv = buf;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3310      	adds	r3, #16
 80038a0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3310      	adds	r3, #16
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d3e7      	bcc.n	8003880 <AES_CBC_encrypt_buffer+0x18>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	33b0      	adds	r3, #176	@ 0xb0
 80038b4:	6939      	ldr	r1, [r7, #16]
 80038b6:	2210      	movs	r2, #16
 80038b8:	0018      	movs	r0, r3
 80038ba:	f00a fbb7 	bl	800e02c <memcpy>
}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b006      	add	sp, #24
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80038c6:	b590      	push	{r4, r7, lr}
 80038c8:	b08b      	sub	sp, #44	@ 0x2c
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d6:	e026      	b.n	8003926 <AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 80038d8:	2414      	movs	r4, #20
 80038da:	193a      	adds	r2, r7, r4
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	0010      	movs	r0, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	2310      	movs	r3, #16
 80038e4:	001a      	movs	r2, r3
 80038e6:	f00a fba1 	bl	800e02c <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	0011      	movs	r1, r2
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff ff59 	bl	80037a8 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	33b0      	adds	r3, #176	@ 0xb0
 80038fa:	001a      	movs	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0011      	movs	r1, r2
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff ff86 	bl	8003812 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	33b0      	adds	r3, #176	@ 0xb0
 800390a:	001a      	movs	r2, r3
 800390c:	193b      	adds	r3, r7, r4
 800390e:	0010      	movs	r0, r2
 8003910:	0019      	movs	r1, r3
 8003912:	2310      	movs	r3, #16
 8003914:	001a      	movs	r2, r3
 8003916:	f00a fb89 	bl	800e02c <memcpy>
    buf += AES_BLOCKLEN;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3310      	adds	r3, #16
 800391e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	3310      	adds	r3, #16
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3d4      	bcc.n	80038d8 <AES_CBC_decrypt_buffer+0x12>
  }

}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	46c0      	nop			@ (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b00b      	add	sp, #44	@ 0x2c
 8003936:	bd90      	pop	{r4, r7, pc}

08003938 <generate_random_iv>:

static bool in_tx_mode = false;
static bool in_rx_mode = false;

static void generate_random_iv(uint8_t *iv, size_t length)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	for (size_t i = 0; i < length; i++) {
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e012      	b.n	800396e <generate_random_iv+0x36>
		iv[i] = (uint8_t) (rand() % (255 + 1)); // Generate number 0 - 255
 8003948:	f009 fbc0 	bl	800d0cc <rand>
 800394c:	0003      	movs	r3, r0
 800394e:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <generate_random_iv+0x48>)
 8003950:	4013      	ands	r3, r2
 8003952:	d503      	bpl.n	800395c <generate_random_iv+0x24>
 8003954:	3b01      	subs	r3, #1
 8003956:	4a0b      	ldr	r2, [pc, #44]	@ (8003984 <generate_random_iv+0x4c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	3301      	adds	r3, #1
 800395c:	0019      	movs	r1, r3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	18d3      	adds	r3, r2, r3
 8003964:	b2ca      	uxtb	r2, r1
 8003966:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3e8      	bcc.n	8003948 <generate_random_iv+0x10>
	}
	// or int value = rand() % (upper_bound - lower_bound + 1) + lower_bound;
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	800000ff 	.word	0x800000ff
 8003984:	ffffff00 	.word	0xffffff00

08003988 <set_lora_rx_mode>:

void set_lora_rx_mode(void) // Call once to set RX mode and receive on EXTI8
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
	if (!in_rx_mode) // If not already in rx mode
 800398e:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <set_lora_rx_mode+0x74>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	4053      	eors	r3, r2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d026      	beq.n	80039ea <set_lora_rx_mode+0x62>
	{
		while (HAL_GPIO_ReadPin(SX_BUSY_GPIO_Port, SX_BUSY_Pin) == GPIO_PIN_SET);
 800399c:	46c0      	nop			@ (mov r8, r8)
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	23a0      	movs	r3, #160	@ 0xa0
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	0011      	movs	r1, r2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f002 fb43 	bl	8006034 <HAL_GPIO_ReadPin>
 80039ae:	0003      	movs	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d0f4      	beq.n	800399e <set_lora_rx_mode+0x16>

		HAL_GPIO_WritePin(DIO2_GPIO_Port, DIO2_Pin, GPIO_PIN_RESET); // 1 = TX, 0 = RX
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4811      	ldr	r0, [pc, #68]	@ (8003a00 <set_lora_rx_mode+0x78>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	0019      	movs	r1, r3
 80039be:	f002 fb56 	bl	800606e <HAL_GPIO_WritePin>

		sx126x_cfg_rx_boosted(NULL, true); // Increase sensitivity at higher power cost
 80039c2:	2101      	movs	r1, #1
 80039c4:	2000      	movs	r0, #0
 80039c6:	f009 f90f 	bl	800cbe8 <sx126x_cfg_rx_boosted>

		// Enter continuous RX mode
		sx126x_status_t status = sx126x_set_rx(NULL, SX126X_RX_SINGLE_MODE); // sx126x_set_rx_with_timeout_in_rtc_step(NULL, SX126X_RX_SINGLE_MODE);
 80039ca:	1dfc      	adds	r4, r7, #7
 80039cc:	2100      	movs	r1, #0
 80039ce:	2000      	movs	r0, #0
 80039d0:	f008 fd65 	bl	800c49e <sx126x_set_rx>
 80039d4:	0003      	movs	r3, r0
 80039d6:	7023      	strb	r3, [r4, #0]
		if (status != SX126X_STATUS_OK)
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <set_lora_rx_mode+0x62>
		{
			printf("Failed to enter continuous RX mode\n");
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <set_lora_rx_mode+0x7c>)
 80039e2:	0018      	movs	r0, r3
 80039e4:	f00a f93c 	bl	800dc60 <puts>
			return;
 80039e8:	e005      	b.n	80039f6 <set_lora_rx_mode+0x6e>
		}
	}
	in_rx_mode = true;
 80039ea:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <set_lora_rx_mode+0x74>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
	in_tx_mode = false;
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <set_lora_rx_mode+0x80>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
}
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b003      	add	sp, #12
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	20000215 	.word	0x20000215
 8003a00:	50000400 	.word	0x50000400
 8003a04:	08011868 	.word	0x08011868
 8003a08:	20000214 	.word	0x20000214

08003a0c <set_lora_tx_mode>:

void set_lora_tx_mode(void) // Call once to set TX mode
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
	if (!in_tx_mode) // If not already in tx mode
 8003a12:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <set_lora_tx_mode+0x70>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	4053      	eors	r3, r2
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d022      	beq.n	8003a66 <set_lora_tx_mode+0x5a>
	{
		while (HAL_GPIO_ReadPin(SX_BUSY_GPIO_Port, SX_BUSY_Pin) == GPIO_PIN_SET);
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	23a0      	movs	r3, #160	@ 0xa0
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f002 fb01 	bl	8006034 <HAL_GPIO_ReadPin>
 8003a32:	0003      	movs	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d0f4      	beq.n	8003a22 <set_lora_tx_mode+0x16>

		HAL_GPIO_WritePin(DIO2_GPIO_Port, DIO2_Pin, GPIO_PIN_SET); // 1 = TX, 0 = RX
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4810      	ldr	r0, [pc, #64]	@ (8003a80 <set_lora_tx_mode+0x74>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	0019      	movs	r1, r3
 8003a42:	f002 fb14 	bl	800606e <HAL_GPIO_WritePin>

		sx126x_status_t status = sx126x_set_tx_params(NULL, 22, SX126X_RAMP_200_US);
 8003a46:	1dfc      	adds	r4, r7, #7
 8003a48:	2204      	movs	r2, #4
 8003a4a:	2116      	movs	r1, #22
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f008 ff4c 	bl	800c8ea <sx126x_set_tx_params>
 8003a52:	0003      	movs	r3, r0
 8003a54:	7023      	strb	r3, [r4, #0]
		if (status != SX126X_STATUS_OK) {
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <set_lora_tx_mode+0x5a>
			printf("Failed to TX parameters\n");
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <set_lora_tx_mode+0x78>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f00a f8fd 	bl	800dc60 <puts>
		}
	}
	in_tx_mode = true;
 8003a66:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <set_lora_tx_mode+0x70>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
	in_rx_mode = false;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <set_lora_tx_mode+0x7c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b003      	add	sp, #12
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	20000214 	.word	0x20000214
 8003a80:	50000400 	.word	0x50000400
 8003a84:	0801188c 	.word	0x0801188c
 8003a88:	20000215 	.word	0x20000215

08003a8c <lora_tx>:

void lora_tx(uint8_t tx_data[], uint8_t data_len)
{
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	000a      	movs	r2, r1
 8003a96:	1cfb      	adds	r3, r7, #3
 8003a98:	701a      	strb	r2, [r3, #0]

	while (HAL_GPIO_ReadPin(SX_BUSY_GPIO_Port, SX_BUSY_Pin) == GPIO_PIN_SET);
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	23a0      	movs	r3, #160	@ 0xa0
 8003aa2:	05db      	lsls	r3, r3, #23
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f002 fac4 	bl	8006034 <HAL_GPIO_ReadPin>
 8003aac:	0003      	movs	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d0f4      	beq.n	8003a9c <lora_tx+0x10>

	sx126x_status_t status = sx126x_write_buffer(NULL, 0, tx_data, data_len);
 8003ab2:	250f      	movs	r5, #15
 8003ab4:	197c      	adds	r4, r7, r5
 8003ab6:	1cfb      	adds	r3, r7, #3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	2100      	movs	r1, #0
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f008 fdef 	bl	800c6a2 <sx126x_write_buffer>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003ac8:	197b      	adds	r3, r7, r5
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <lora_tx+0x4c>
		printf("Failed to write to buffer\n");
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <lora_tx+0x78>)
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f00a f8c4 	bl	800dc60 <puts>
	}

	// Start transmission
	status = sx126x_set_tx(NULL, SX126X_MAX_TIMEOUT_IN_MS);
 8003ad8:	250f      	movs	r5, #15
 8003ada:	197c      	adds	r4, r7, r5
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <lora_tx+0x7c>)
 8003ade:	0019      	movs	r1, r3
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f008 fc9b 	bl	800c41c <sx126x_set_tx>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	7023      	strb	r3, [r4, #0]

	if (status != SX126X_STATUS_OK)
 8003aea:	197b      	adds	r3, r7, r5
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <lora_tx+0x6e>
	{
		printf("Failed to start transmission\n");
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <lora_tx+0x80>)
 8003af4:	0018      	movs	r0, r3
 8003af6:	f00a f8b3 	bl	800dc60 <puts>
	}

}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bdb0      	pop	{r4, r5, r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	080118a4 	.word	0x080118a4
 8003b08:	0003ffff 	.word	0x0003ffff
 8003b0c:	080118c0 	.word	0x080118c0

08003b10 <process_received_message>:

void process_received_message(uint8_t *message, size_t message_len)
{
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b0c6      	sub	sp, #280	@ 0x118
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	// Verify that the message length is at least 16 bytes (for IV) + 16 bytes (minimum ciphertext)
	if (message_len < 32)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b1f      	cmp	r3, #31
 8003b1e:	d804      	bhi.n	8003b2a <process_received_message+0x1a>
	{
		printf("Received message too short!\n");
 8003b20:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <process_received_message+0xa4>)
 8003b22:	0018      	movs	r0, r3
 8003b24:	f00a f89c 	bl	800dc60 <puts>
		return;
 8003b28:	e040      	b.n	8003bac <process_received_message+0x9c>
	}

	// The expected message length is 80 bytes (16 IV + 64 cyphertext)
	if (message_len != CYPHERTEXT_LENGTH + 16)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b50      	cmp	r3, #80	@ 0x50
 8003b2e:	d006      	beq.n	8003b3e <process_received_message+0x2e>
	{
		printf("Unexpected message length: %u bytes\n", (unsigned)message_len);
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <process_received_message+0xa8>)
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f00a f82c 	bl	800db94 <iprintf>
		return;
 8003b3c:	e036      	b.n	8003bac <process_received_message+0x9c>
	}

	uint8_t iv[16]; // To hold IV
	memcpy(iv, message, 16); // Extract the IV (first 16 bytes)
 8003b3e:	2584      	movs	r5, #132	@ 0x84
 8003b40:	006d      	lsls	r5, r5, #1
 8003b42:	197a      	adds	r2, r7, r5
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0010      	movs	r0, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	f00a fa6d 	bl	800e02c <memcpy>

	uint8_t ciphertext[CYPHERTEXT_LENGTH]; // To hold cyphertext
	memcpy(ciphertext, message + 16, CYPHERTEXT_LENGTH); // Extract the ciphertext (remaining 64 bytes)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3310      	adds	r3, #16
 8003b56:	24c8      	movs	r4, #200	@ 0xc8
 8003b58:	193a      	adds	r2, r7, r4
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	2340      	movs	r3, #64	@ 0x40
 8003b60:	001a      	movs	r2, r3
 8003b62:	f00a fa63 	bl	800e02c <memcpy>
	}
	printf("\n");*/

	// Initialize the AES context with the key and received IV.
	struct AES_ctx ctx;
	AES_init_ctx_iv(&ctx, encryption_decryption_key, iv);
 8003b66:	197a      	adds	r2, r7, r5
 8003b68:	4914      	ldr	r1, [pc, #80]	@ (8003bbc <process_received_message+0xac>)
 8003b6a:	2508      	movs	r5, #8
 8003b6c:	197b      	adds	r3, r7, r5
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fe ff74 	bl	8002a5c <AES_init_ctx_iv>

	// Decrypt "ciphertext"
	AES_CBC_decrypt_buffer(&ctx, ciphertext, sizeof(ciphertext));
 8003b74:	1939      	adds	r1, r7, r4
 8003b76:	197b      	adds	r3, r7, r5
 8003b78:	2240      	movs	r2, #64	@ 0x40
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff fea3 	bl	80038c6 <AES_CBC_decrypt_buffer>

	// "cyphertext" is now decrypted - print
	//printf("Decrypted text: %s\n", ciphertext);

	ciphertext[sizeof(ciphertext) - 1] = '\0'; // Ensure null termination
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	223f      	movs	r2, #63	@ 0x3f
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

    // Extract the number received using sscanf.
    static int extracted_number;
    if (sscanf((char *)ciphertext, "DualCast_Command_Value: %d", &extracted_number) == 1)
 8003b88:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc0 <process_received_message+0xb0>)
 8003b8a:	490e      	ldr	r1, [pc, #56]	@ (8003bc4 <process_received_message+0xb4>)
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f00a f8a4 	bl	800dcdc <siscanf>
 8003b94:	0003      	movs	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <process_received_message+0x96>
    {
        command_received = extracted_number;
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <process_received_message+0xb0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <process_received_message+0xb8>)
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e002      	b.n	8003bac <process_received_message+0x9c>
    }
    else
    {
    	command_received = 0;
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <process_received_message+0xb8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
    }
}
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b046      	add	sp, #280	@ 0x118
 8003bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	080118e0 	.word	0x080118e0
 8003bb8:	080118fc 	.word	0x080118fc
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000218 	.word	0x20000218
 8003bc4:	08011924 	.word	0x08011924
 8003bc8:	20000418 	.word	0x20000418

08003bcc <encrypt_and_transmit>:

void encrypt_and_transmit(uint8_t plaintext[])
{
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b0db      	sub	sp, #364	@ 0x16c
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	set_lora_tx_mode(); // Call once to set TX parameters
 8003bd4:	f7ff ff1a 	bl	8003a0c <set_lora_tx_mode>

	uint8_t buffer[CYPHERTEXT_LENGTH]; // Padded to 64 bytes (must be multiple of 16)
	memcpy(buffer, plaintext, sizeof(buffer)); // Copy the 64 bytes into buffer
 8003bd8:	2494      	movs	r4, #148	@ 0x94
 8003bda:	0064      	lsls	r4, r4, #1
 8003bdc:	193a      	adds	r2, r7, r4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0010      	movs	r0, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	2340      	movs	r3, #64	@ 0x40
 8003be6:	001a      	movs	r2, r3
 8003be8:	f00a fa20 	bl	800e02c <memcpy>

	uint8_t iv[16]; // To hold IV
	generate_random_iv(iv, sizeof(iv)); // Generate random IV into iv[16]
 8003bec:	258c      	movs	r5, #140	@ 0x8c
 8003bee:	006d      	lsls	r5, r5, #1
 8003bf0:	197b      	adds	r3, r7, r5
 8003bf2:	2110      	movs	r1, #16
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff fe9f 	bl	8003938 <generate_random_iv>
		printf("%02X ", iv[i]);
	}
	printf("\n");*/

	struct AES_ctx ctx;
	AES_init_ctx_iv(&ctx, encryption_decryption_key, iv); // Initialize AES context with key and IV
 8003bfa:	197a      	adds	r2, r7, r5
 8003bfc:	4915      	ldr	r1, [pc, #84]	@ (8003c54 <encrypt_and_transmit+0x88>)
 8003bfe:	2658      	movs	r6, #88	@ 0x58
 8003c00:	19bb      	adds	r3, r7, r6
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7fe ff2a 	bl	8002a5c <AES_init_ctx_iv>

	AES_CBC_encrypt_buffer(&ctx, buffer, sizeof(buffer)); // Encrypt buffer
 8003c08:	1939      	adds	r1, r7, r4
 8003c0a:	19bb      	adds	r3, r7, r6
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7ff fe2a 	bl	8003868 <AES_CBC_encrypt_buffer>

	uint8_t message[16 + CYPHERTEXT_LENGTH]; // New buffer to send
	memcpy(message, iv, 16); // First 16 bytes are IV
 8003c14:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <encrypt_and_transmit+0x8c>)
 8003c16:	22b4      	movs	r2, #180	@ 0xb4
 8003c18:	0052      	lsls	r2, r2, #1
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	19da      	adds	r2, r3, r7
 8003c1e:	197b      	adds	r3, r7, r5
 8003c20:	0010      	movs	r0, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	2310      	movs	r3, #16
 8003c26:	001a      	movs	r2, r3
 8003c28:	f00a fa00 	bl	800e02c <memcpy>
	memcpy(message + 16, buffer, CYPHERTEXT_LENGTH); // Next 64 are the cyphertext
 8003c2c:	2508      	movs	r5, #8
 8003c2e:	197b      	adds	r3, r7, r5
 8003c30:	3310      	adds	r3, #16
 8003c32:	193a      	adds	r2, r7, r4
 8003c34:	0018      	movs	r0, r3
 8003c36:	0011      	movs	r1, r2
 8003c38:	2340      	movs	r3, #64	@ 0x40
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	f00a f9f6 	bl	800e02c <memcpy>
	{
		printf("%02X ", message[i]);
	}
	printf("\n");*/

	lora_tx(message, sizeof(message));
 8003c40:	197b      	adds	r3, r7, r5
 8003c42:	2150      	movs	r1, #80	@ 0x50
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7ff ff21 	bl	8003a8c <lora_tx>
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b05b      	add	sp, #364	@ 0x16c
 8003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	20000000 	.word	0x20000000
 8003c58:	fffffea0 	.word	0xfffffea0

08003c5c <output_to_binary>:

void output_to_binary(uint8_t command_received)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	1dfb      	adds	r3, r7, #7
 8003c66:	701a      	strb	r2, [r3, #0]
	if (command_received > 31)
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b1f      	cmp	r3, #31
 8003c6e:	d83f      	bhi.n	8003cf0 <output_to_binary+0x94>
		return;

    // IO1 corresponds to Bit 0
    HAL_GPIO_WritePin(IO1_GPIO_Port, IO1_Pin,
        (command_received & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 0b00000001 & command_received = 0 or not 0
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2201      	movs	r2, #1
 8003c76:	4013      	ands	r3, r2
 8003c78:	b2da      	uxtb	r2, r3
    HAL_GPIO_WritePin(IO1_GPIO_Port, IO1_Pin,
 8003c7a:	23a0      	movs	r3, #160	@ 0xa0
 8003c7c:	05db      	lsls	r3, r3, #23
 8003c7e:	2108      	movs	r1, #8
 8003c80:	0018      	movs	r0, r3
 8003c82:	f002 f9f4 	bl	800606e <HAL_GPIO_WritePin>

    // IO2 corresponds to Bit 1
    HAL_GPIO_WritePin(IO2_GPIO_Port, IO2_Pin,
        (command_received & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 0b00000010 & command_received = 0 or not 0
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	105b      	asrs	r3, r3, #1
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2201      	movs	r2, #1
 8003c90:	4013      	ands	r3, r2
 8003c92:	b2da      	uxtb	r2, r3
    HAL_GPIO_WritePin(IO2_GPIO_Port, IO2_Pin,
 8003c94:	23a0      	movs	r3, #160	@ 0xa0
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	2110      	movs	r1, #16
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f002 f9e7 	bl	800606e <HAL_GPIO_WritePin>

    // IO3 corresponds to Bit 2
    HAL_GPIO_WritePin(IO3_GPIO_Port, IO3_Pin,
        (command_received & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 0b00000100 & command_received = 0 or not 0
 8003ca0:	1dfb      	adds	r3, r7, #7
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	109b      	asrs	r3, r3, #2
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	b2da      	uxtb	r2, r3
    HAL_GPIO_WritePin(IO3_GPIO_Port, IO3_Pin,
 8003cae:	23a0      	movs	r3, #160	@ 0xa0
 8003cb0:	05db      	lsls	r3, r3, #23
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f002 f9da 	bl	800606e <HAL_GPIO_WritePin>

    // IO4 corresponds to Bit 3
    HAL_GPIO_WritePin(IO4_GPIO_Port, IO4_Pin,
        (command_received & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 0b00001000 & command_received = 0 or not 0
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	10db      	asrs	r3, r3, #3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
    HAL_GPIO_WritePin(IO4_GPIO_Port, IO4_Pin,
 8003cc8:	23a0      	movs	r3, #160	@ 0xa0
 8003cca:	05db      	lsls	r3, r3, #23
 8003ccc:	2140      	movs	r1, #64	@ 0x40
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f002 f9cd 	bl	800606e <HAL_GPIO_WritePin>

    // IO5 corresponds to Bit 4
    HAL_GPIO_WritePin(IO5_GPIO_Port, IO5_Pin,
        (command_received & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // 0b00010000 & command_received = 0 or not 0
 8003cd4:	1dfb      	adds	r3, r7, #7
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	111b      	asrs	r3, r3, #4
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	b2da      	uxtb	r2, r3
    HAL_GPIO_WritePin(IO5_GPIO_Port, IO5_Pin,
 8003ce2:	23a0      	movs	r3, #160	@ 0xa0
 8003ce4:	05db      	lsls	r3, r3, #23
 8003ce6:	2180      	movs	r1, #128	@ 0x80
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f002 f9c0 	bl	800606e <HAL_GPIO_WritePin>
 8003cee:	e000      	b.n	8003cf2 <output_to_binary+0x96>
		return;
 8003cf0:	46c0      	nop			@ (mov r8, r8)
}
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <reset_gpios>:

void reset_gpios(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IO1_GPIO_Port, IO1_Pin, GPIO_PIN_RESET);
 8003cfc:	23a0      	movs	r3, #160	@ 0xa0
 8003cfe:	05db      	lsls	r3, r3, #23
 8003d00:	2200      	movs	r2, #0
 8003d02:	2108      	movs	r1, #8
 8003d04:	0018      	movs	r0, r3
 8003d06:	f002 f9b2 	bl	800606e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO2_GPIO_Port, IO2_Pin, GPIO_PIN_RESET);
 8003d0a:	23a0      	movs	r3, #160	@ 0xa0
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2110      	movs	r1, #16
 8003d12:	0018      	movs	r0, r3
 8003d14:	f002 f9ab 	bl	800606e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO3_GPIO_Port, IO3_Pin, GPIO_PIN_RESET);
 8003d18:	23a0      	movs	r3, #160	@ 0xa0
 8003d1a:	05db      	lsls	r3, r3, #23
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2120      	movs	r1, #32
 8003d20:	0018      	movs	r0, r3
 8003d22:	f002 f9a4 	bl	800606e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO4_GPIO_Port, IO4_Pin, GPIO_PIN_RESET);
 8003d26:	23a0      	movs	r3, #160	@ 0xa0
 8003d28:	05db      	lsls	r3, r3, #23
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2140      	movs	r1, #64	@ 0x40
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f002 f99d 	bl	800606e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO5_GPIO_Port, IO5_Pin, GPIO_PIN_RESET);
 8003d34:	23a0      	movs	r3, #160	@ 0xa0
 8003d36:	05db      	lsls	r3, r3, #23
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	@ 0x80
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f002 f996 	bl	800606e <HAL_GPIO_WritePin>
}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4a:	b0d5      	sub	sp, #340	@ 0x154
 8003d4c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d4e:	f001 fa70 	bl	8005232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d52:	f000 fb77 	bl	8004444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d56:	f000 fd71 	bl	800483c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003d5a:	f000 fc37 	bl	80045cc <MX_I2C1_Init>
  MX_ADC1_Init();
 8003d5e:	f000 fbc9 	bl	80044f4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003d62:	f000 fc73 	bl	800464c <MX_SPI1_Init>
  MX_TIM3_Init();
 8003d66:	f000 fcaf 	bl	80046c8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003d6a:	f000 fd19 	bl	80047a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


	// Init LoRa
	sx126x_mod_params_lora_t lora_mod_params = {
 8003d6e:	23f4      	movs	r3, #244	@ 0xf4
 8003d70:	2018      	movs	r0, #24
 8003d72:	181b      	adds	r3, r3, r0
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	4aed      	ldr	r2, [pc, #948]	@ (800412c <main+0x3e4>)
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	601a      	str	r2, [r3, #0]
			.cr = SX126X_LORA_CR_4_5,
			.ldro = 0,
	};

	// Preamble length updated to 12 symbols
	sx126x_pkt_params_lora_t lora_pkt_params = {
 8003d7c:	23ec      	movs	r3, #236	@ 0xec
 8003d7e:	181b      	adds	r3, r3, r0
 8003d80:	19db      	adds	r3, r3, r7
 8003d82:	4aeb      	ldr	r2, [pc, #940]	@ (8004130 <main+0x3e8>)
 8003d84:	6811      	ldr	r1, [r2, #0]
 8003d86:	6019      	str	r1, [r3, #0]
 8003d88:	8892      	ldrh	r2, [r2, #4]
 8003d8a:	809a      	strh	r2, [r3, #4]
			.crc_is_on = true,
			.invert_iq_is_on = false,
	};

	// Define the PA configuration parameters
	sx126x_pa_cfg_params_t pa_config = {
 8003d8c:	23e8      	movs	r3, #232	@ 0xe8
 8003d8e:	181b      	adds	r3, r3, r0
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	4ae8      	ldr	r2, [pc, #928]	@ (8004134 <main+0x3ec>)
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	601a      	str	r2, [r3, #0]
			.hp_max = 0x07,             // Maximum output power
			.device_sel = 0x00, // Select SX1262-specific PA configuration
			.pa_lut = 0x01              // Default LUT (Look-Up Table)
	};

	sx126x_hal_reset(NULL);
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f009 f8c3 	bl	800cf24 <sx126x_hal_reset>

	while (HAL_GPIO_ReadPin(SX_BUSY_GPIO_Port, SX_BUSY_Pin) == GPIO_PIN_SET);
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	2380      	movs	r3, #128	@ 0x80
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	23a0      	movs	r3, #160	@ 0xa0
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f002 f942 	bl	8006034 <HAL_GPIO_ReadPin>
 8003db0:	0003      	movs	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d0f4      	beq.n	8003da0 <main+0x58>

	sx126x_status_t status = sx126x_init_retention_list(NULL);
 8003db6:	2508      	movs	r5, #8
 8003db8:	35ff      	adds	r5, #255	@ 0xff
 8003dba:	2618      	movs	r6, #24
 8003dbc:	19ab      	adds	r3, r5, r6
 8003dbe:	19dc      	adds	r4, r3, r7
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f009 f843 	bl	800ce4c <sx126x_init_retention_list>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003dca:	19ab      	adds	r3, r5, r6
 8003dcc:	19db      	adds	r3, r3, r7
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <main+0x94>
		printf("Failed to set packet type\n");
 8003dd4:	4bd8      	ldr	r3, [pc, #864]	@ (8004138 <main+0x3f0>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f009 ff42 	bl	800dc60 <puts>
	}

	status = sx126x_set_reg_mode(NULL, SX126X_REG_MODE_LDO);
 8003ddc:	2508      	movs	r5, #8
 8003dde:	35ff      	adds	r5, #255	@ 0xff
 8003de0:	2618      	movs	r6, #24
 8003de2:	19ab      	adds	r3, r5, r6
 8003de4:	19dc      	adds	r4, r3, r7
 8003de6:	2100      	movs	r1, #0
 8003de8:	2000      	movs	r0, #0
 8003dea:	f008 fb99 	bl	800c520 <sx126x_set_reg_mode>
 8003dee:	0003      	movs	r3, r0
 8003df0:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003df2:	19ab      	adds	r3, r5, r6
 8003df4:	19db      	adds	r3, r3, r7
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <main+0xbc>
		printf("Failed to set reg mode\n");
 8003dfc:	4bcf      	ldr	r3, [pc, #828]	@ (800413c <main+0x3f4>)
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f009 ff2e 	bl	800dc60 <puts>
	}

	//sx126x_set_dio2_as_rf_sw_ctrl(NULL, 1);
	//sx126x_set_dio3_as_tcxo_ctrl

	status = sx126x_cal(NULL, SX126X_CAL_ALL);
 8003e04:	2508      	movs	r5, #8
 8003e06:	35ff      	adds	r5, #255	@ 0xff
 8003e08:	2618      	movs	r6, #24
 8003e0a:	19ab      	adds	r3, r5, r6
 8003e0c:	19dc      	adds	r4, r3, r7
 8003e0e:	217f      	movs	r1, #127	@ 0x7f
 8003e10:	2000      	movs	r0, #0
 8003e12:	f008 fba1 	bl	800c558 <sx126x_cal>
 8003e16:	0003      	movs	r3, r0
 8003e18:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003e1a:	19ab      	adds	r3, r5, r6
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <main+0xe4>
		printf("Failed to calibrate\n");
 8003e24:	4bc6      	ldr	r3, [pc, #792]	@ (8004140 <main+0x3f8>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f009 ff1a 	bl	800dc60 <puts>
	}

	status = sx126x_set_standby(NULL, SX126X_STANDBY_CFG_RC);
 8003e2c:	2508      	movs	r5, #8
 8003e2e:	35ff      	adds	r5, #255	@ 0xff
 8003e30:	2618      	movs	r6, #24
 8003e32:	19ab      	adds	r3, r5, r6
 8003e34:	19dc      	adds	r4, r3, r7
 8003e36:	2100      	movs	r1, #0
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f008 fad3 	bl	800c3e4 <sx126x_set_standby>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003e42:	19ab      	adds	r3, r5, r6
 8003e44:	19db      	adds	r3, r3, r7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <main+0x10c>
		printf("Failed to set standby\n");
 8003e4c:	4bbd      	ldr	r3, [pc, #756]	@ (8004144 <main+0x3fc>)
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f009 ff06 	bl	800dc60 <puts>
	}

	status = sx126x_set_pkt_type(NULL, SX126X_PKT_TYPE_LORA);
 8003e54:	2508      	movs	r5, #8
 8003e56:	35ff      	adds	r5, #255	@ 0xff
 8003e58:	2618      	movs	r6, #24
 8003e5a:	19ab      	adds	r3, r5, r6
 8003e5c:	19dc      	adds	r4, r3, r7
 8003e5e:	2101      	movs	r1, #1
 8003e60:	2000      	movs	r0, #0
 8003e62:	f008 fd26 	bl	800c8b2 <sx126x_set_pkt_type>
 8003e66:	0003      	movs	r3, r0
 8003e68:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003e6a:	19ab      	adds	r3, r5, r6
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <main+0x134>
		printf("Failed to set packet type\n");
 8003e74:	4bb0      	ldr	r3, [pc, #704]	@ (8004138 <main+0x3f0>)
 8003e76:	0018      	movs	r0, r3
 8003e78:	f009 fef2 	bl	800dc60 <puts>
	}

	status = sx126x_set_rf_freq(NULL, 915000000);
 8003e7c:	2508      	movs	r5, #8
 8003e7e:	35ff      	adds	r5, #255	@ 0xff
 8003e80:	2618      	movs	r6, #24
 8003e82:	19ab      	adds	r3, r5, r6
 8003e84:	19dc      	adds	r4, r3, r7
 8003e86:	4bb0      	ldr	r3, [pc, #704]	@ (8004148 <main+0x400>)
 8003e88:	0019      	movs	r1, r3
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f008 fcd2 	bl	800c834 <sx126x_set_rf_freq>
 8003e90:	0003      	movs	r3, r0
 8003e92:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003e94:	19ab      	adds	r3, r5, r6
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <main+0x15e>
		printf("Failed to set frequency?\n");
 8003e9e:	4bab      	ldr	r3, [pc, #684]	@ (800414c <main+0x404>)
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f009 fedd 	bl	800dc60 <puts>
	}

	status = sx126x_set_pa_cfg(NULL, &pa_config);
 8003ea6:	2508      	movs	r5, #8
 8003ea8:	35ff      	adds	r5, #255	@ 0xff
 8003eaa:	2618      	movs	r6, #24
 8003eac:	19ab      	adds	r3, r5, r6
 8003eae:	19dc      	adds	r4, r3, r7
 8003eb0:	23e8      	movs	r3, #232	@ 0xe8
 8003eb2:	199b      	adds	r3, r3, r6
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f008 fb69 	bl	800c590 <sx126x_set_pa_cfg>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003ec2:	19ab      	adds	r3, r5, r6
 8003ec4:	19db      	adds	r3, r3, r7
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <main+0x18c>
		printf("Failed to set pa configuration\n");
 8003ecc:	4ba0      	ldr	r3, [pc, #640]	@ (8004150 <main+0x408>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f009 fec6 	bl	800dc60 <puts>
	}

	//sx126x_set_rx_tx_fallback_mode
	//sx126x_cfg_rx_boosted

	status = sx126x_set_lora_mod_params(NULL, &lora_mod_params);
 8003ed4:	2508      	movs	r5, #8
 8003ed6:	35ff      	adds	r5, #255	@ 0xff
 8003ed8:	2618      	movs	r6, #24
 8003eda:	19ab      	adds	r3, r5, r6
 8003edc:	19dc      	adds	r4, r3, r7
 8003ede:	23f4      	movs	r3, #244	@ 0xf4
 8003ee0:	199b      	adds	r3, r3, r6
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f008 fd24 	bl	800c934 <sx126x_set_lora_mod_params>
 8003eec:	0003      	movs	r3, r0
 8003eee:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003ef0:	19ab      	adds	r3, r5, r6
 8003ef2:	19db      	adds	r3, r3, r7
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <main+0x1ba>
		printf("Failed to set lora parameters\n");
 8003efa:	4b96      	ldr	r3, [pc, #600]	@ (8004154 <main+0x40c>)
 8003efc:	0018      	movs	r0, r3
 8003efe:	f009 feaf 	bl	800dc60 <puts>
	}

	status = sx126x_set_lora_pkt_params(NULL, &lora_pkt_params);
 8003f02:	2508      	movs	r5, #8
 8003f04:	35ff      	adds	r5, #255	@ 0xff
 8003f06:	2618      	movs	r6, #24
 8003f08:	19ab      	adds	r3, r5, r6
 8003f0a:	19dc      	adds	r4, r3, r7
 8003f0c:	23ec      	movs	r3, #236	@ 0xec
 8003f0e:	199b      	adds	r3, r3, r6
 8003f10:	19db      	adds	r3, r3, r7
 8003f12:	0019      	movs	r1, r3
 8003f14:	2000      	movs	r0, #0
 8003f16:	f008 fd4b 	bl	800c9b0 <sx126x_set_lora_pkt_params>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003f1e:	19ab      	adds	r3, r5, r6
 8003f20:	19db      	adds	r3, r3, r7
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <main+0x1e8>
		printf("Failed to set lora packet parameters\n");
 8003f28:	4b8b      	ldr	r3, [pc, #556]	@ (8004158 <main+0x410>)
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f009 fe98 	bl	800dc60 <puts>
	}

	status = sx126x_set_dio_irq_params(
 8003f30:	2508      	movs	r5, #8
 8003f32:	35ff      	adds	r5, #255	@ 0xff
 8003f34:	2618      	movs	r6, #24
 8003f36:	19ab      	adds	r3, r5, r6
 8003f38:	19dc      	adds	r4, r3, r7
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2202      	movs	r2, #2
 8003f42:	2142      	movs	r1, #66	@ 0x42
 8003f44:	2000      	movs	r0, #0
 8003f46:	f008 fbfd 	bl	800c744 <sx126x_set_dio_irq_params>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	7023      	strb	r3, [r4, #0]
			SX126X_IRQ_RX_DONE,              // Map RX_DONE to DIO1
			SX126X_IRQ_NONE,                 // No IRQs mapped to DIO2
			SX126X_IRQ_NONE                  // No IRQs mapped to DIO3
	);

	if (status != SX126X_STATUS_OK) {
 8003f4e:	19ab      	adds	r3, r5, r6
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <main+0x218>
		printf("Failed to set DIO IRQ parameters\n");
 8003f58:	4b80      	ldr	r3, [pc, #512]	@ (800415c <main+0x414>)
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f009 fe80 	bl	800dc60 <puts>
	}

	status = sx126x_set_lora_sync_word(NULL, 0x62);
 8003f60:	2508      	movs	r5, #8
 8003f62:	35ff      	adds	r5, #255	@ 0xff
 8003f64:	2618      	movs	r6, #24
 8003f66:	19ab      	adds	r3, r5, r6
 8003f68:	19dc      	adds	r4, r3, r7
 8003f6a:	2162      	movs	r1, #98	@ 0x62
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f008 fe63 	bl	800cc38 <sx126x_set_lora_sync_word>
 8003f72:	0003      	movs	r3, r0
 8003f74:	7023      	strb	r3, [r4, #0]
	if (status != SX126X_STATUS_OK) {
 8003f76:	19ab      	adds	r3, r5, r6
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <main+0x240>
		printf("Failed to set LoRa sync word\n");
 8003f80:	4b77      	ldr	r3, [pc, #476]	@ (8004160 <main+0x418>)
 8003f82:	0018      	movs	r0, r3
 8003f84:	f009 fe6c 	bl	800dc60 <puts>
	// End of init LoRa



	// Init BME280 atmospheric sensor
	struct bme280_dev dev = {0};
 8003f88:	25a8      	movs	r5, #168	@ 0xa8
 8003f8a:	2618      	movs	r6, #24
 8003f8c:	19ab      	adds	r3, r5, r6
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	0018      	movs	r0, r3
 8003f92:	2340      	movs	r3, #64	@ 0x40
 8003f94:	001a      	movs	r2, r3
 8003f96:	2100      	movs	r1, #0
 8003f98:	f009 ffb6 	bl	800df08 <memset>
	struct bme280_settings settings = {0};
 8003f9c:	23a0      	movs	r3, #160	@ 0xa0
 8003f9e:	199b      	adds	r3, r3, r6
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	2305      	movs	r3, #5
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f009 ffad 	bl	800df08 <memset>
	struct bme280_data comp_data = {0};
 8003fae:	2388      	movs	r3, #136	@ 0x88
 8003fb0:	199b      	adds	r3, r3, r6
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	2318      	movs	r3, #24
 8003fb8:	001a      	movs	r2, r3
 8003fba:	2100      	movs	r1, #0
 8003fbc:	f009 ffa4 	bl	800df08 <memset>
	int8_t rslt;
	uint32_t period;

	// Initialize the BME280 interface
	rslt = bme280_interface_selection(&dev, BME280_I2C_INTF);
 8003fc0:	238f      	movs	r3, #143	@ 0x8f
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	18fc      	adds	r4, r7, r3
 8003fc6:	19aa      	adds	r2, r5, r6
 8003fc8:	19d3      	adds	r3, r2, r7
 8003fca:	2101      	movs	r1, #1
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f008 f9b1 	bl	800c334 <bme280_interface_selection>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	7023      	strb	r3, [r4, #0]
	if (rslt != BME280_OK)
 8003fd6:	238f      	movs	r3, #143	@ 0x8f
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <main+0x2a4>
	{
		printf("BME280 interface selection failed! Exiting task.\n");
 8003fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <main+0x41c>)
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f009 fe3a 	bl	800dc60 <puts>
	}

	// Initialize the BME280 sensor
	rslt = bme280_init(&dev);
 8003fec:	258f      	movs	r5, #143	@ 0x8f
 8003fee:	006d      	lsls	r5, r5, #1
 8003ff0:	197c      	adds	r4, r7, r5
 8003ff2:	23a8      	movs	r3, #168	@ 0xa8
 8003ff4:	2218      	movs	r2, #24
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	19db      	adds	r3, r3, r7
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f006 fd68 	bl	800aad0 <bme280_init>
 8004000:	0003      	movs	r3, r0
 8004002:	7023      	strb	r3, [r4, #0]
	if (rslt != BME280_OK)
 8004004:	197b      	adds	r3, r7, r5
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	b25b      	sxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <main+0x2ce>
	{
		printf("BME280 initialization failed! Exiting task.\n");
 800400e:	4b56      	ldr	r3, [pc, #344]	@ (8004168 <main+0x420>)
 8004010:	0018      	movs	r0, r3
 8004012:	f009 fe25 	bl	800dc60 <puts>
	}

	// Set desired configurations
	settings.filter = BME280_FILTER_COEFF_2;
 8004016:	21a0      	movs	r1, #160	@ 0xa0
 8004018:	2018      	movs	r0, #24
 800401a:	180b      	adds	r3, r1, r0
 800401c:	19db      	adds	r3, r3, r7
 800401e:	2201      	movs	r2, #1
 8004020:	70da      	strb	r2, [r3, #3]
	settings.osr_h = BME280_OVERSAMPLING_4X;  // Humidity
 8004022:	180b      	adds	r3, r1, r0
 8004024:	19db      	adds	r3, r3, r7
 8004026:	2203      	movs	r2, #3
 8004028:	709a      	strb	r2, [r3, #2]
	settings.osr_p = BME280_OVERSAMPLING_4X;  // Pressure
 800402a:	180b      	adds	r3, r1, r0
 800402c:	19db      	adds	r3, r3, r7
 800402e:	2203      	movs	r2, #3
 8004030:	701a      	strb	r2, [r3, #0]
	settings.osr_t = BME280_OVERSAMPLING_4X;  // Temperature
 8004032:	180b      	adds	r3, r1, r0
 8004034:	19db      	adds	r3, r3, r7
 8004036:	2203      	movs	r2, #3
 8004038:	705a      	strb	r2, [r3, #1]
	settings.standby_time = BME280_STANDBY_TIME_0_5_MS;
 800403a:	180b      	adds	r3, r1, r0
 800403c:	19db      	adds	r3, r3, r7
 800403e:	2200      	movs	r2, #0
 8004040:	711a      	strb	r2, [r3, #4]

	rslt = bme280_set_sensor_settings(BME280_SEL_ALL_SETTINGS, &settings, &dev);
 8004042:	258f      	movs	r5, #143	@ 0x8f
 8004044:	006d      	lsls	r5, r5, #1
 8004046:	197c      	adds	r4, r7, r5
 8004048:	23a8      	movs	r3, #168	@ 0xa8
 800404a:	181b      	adds	r3, r3, r0
 800404c:	19da      	adds	r2, r3, r7
 800404e:	180b      	adds	r3, r1, r0
 8004050:	19db      	adds	r3, r3, r7
 8004052:	0019      	movs	r1, r3
 8004054:	201f      	movs	r0, #31
 8004056:	f006 fe42 	bl	800acde <bme280_set_sensor_settings>
 800405a:	0003      	movs	r3, r0
 800405c:	7023      	strb	r3, [r4, #0]
	if (rslt != BME280_OK)
 800405e:	197b      	adds	r3, r7, r5
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b25b      	sxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <main+0x328>
	{
		printf("Failed to set BME280 sensor settings! Exiting task.\n");
 8004068:	4b40      	ldr	r3, [pc, #256]	@ (800416c <main+0x424>)
 800406a:	0018      	movs	r0, r3
 800406c:	f009 fdf8 	bl	800dc60 <puts>
	}

	// Set the sensor to normal power mode
	rslt = bme280_set_sensor_mode(BME280_POWERMODE_NORMAL, &dev);
 8004070:	258f      	movs	r5, #143	@ 0x8f
 8004072:	006d      	lsls	r5, r5, #1
 8004074:	197c      	adds	r4, r7, r5
 8004076:	23a8      	movs	r3, #168	@ 0xa8
 8004078:	2218      	movs	r2, #24
 800407a:	189b      	adds	r3, r3, r2
 800407c:	19db      	adds	r3, r3, r7
 800407e:	0019      	movs	r1, r3
 8004080:	2003      	movs	r0, #3
 8004082:	f006 fe93 	bl	800adac <bme280_set_sensor_mode>
 8004086:	0003      	movs	r3, r0
 8004088:	7023      	strb	r3, [r4, #0]
	if (rslt != BME280_OK)
 800408a:	197b      	adds	r3, r7, r5
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	b25b      	sxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <main+0x354>
	{
		printf("Failed to set BME280 sensor mode! Exiting task.\n");
 8004094:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <main+0x428>)
 8004096:	0018      	movs	r0, r3
 8004098:	f009 fde2 	bl	800dc60 <puts>
	}

	// Calculate the measurement delay
	rslt = bme280_cal_meas_delay(&period, &settings);
 800409c:	258f      	movs	r5, #143	@ 0x8f
 800409e:	006d      	lsls	r5, r5, #1
 80040a0:	197c      	adds	r4, r7, r5
 80040a2:	23a0      	movs	r3, #160	@ 0xa0
 80040a4:	2118      	movs	r1, #24
 80040a6:	185b      	adds	r3, r3, r1
 80040a8:	19da      	adds	r2, r3, r7
 80040aa:	2384      	movs	r3, #132	@ 0x84
 80040ac:	185b      	adds	r3, r3, r1
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f006 ffe8 	bl	800b088 <bme280_cal_meas_delay>
 80040b8:	0003      	movs	r3, r0
 80040ba:	7023      	strb	r3, [r4, #0]
	if (rslt != BME280_OK)
 80040bc:	197b      	adds	r3, r7, r5
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b25b      	sxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <main+0x386>
	{
		printf("Failed to calculate measurement delay! Exiting task.\n");
 80040c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <main+0x42c>)
 80040c8:	0018      	movs	r0, r3
 80040ca:	f009 fdc9 	bl	800dc60 <puts>
	}

	printf("Measurement time: %lu us\n", (long unsigned int)period);
 80040ce:	2384      	movs	r3, #132	@ 0x84
 80040d0:	2418      	movs	r4, #24
 80040d2:	191b      	adds	r3, r3, r4
 80040d4:	19db      	adds	r3, r3, r7
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b27      	ldr	r3, [pc, #156]	@ (8004178 <main+0x430>)
 80040da:	0011      	movs	r1, r2
 80040dc:	0018      	movs	r0, r3
 80040de:	f009 fd59 	bl	800db94 <iprintf>

	uint32_t last_wake_time = HAL_GetTick();
 80040e2:	f001 f917 	bl	8005314 <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	2286      	movs	r2, #134	@ 0x86
 80040ea:	0052      	lsls	r2, r2, #1
 80040ec:	1912      	adds	r2, r2, r4
 80040ee:	19d2      	adds	r2, r2, r7
 80040f0:	6013      	str	r3, [r2, #0]
	// End of init BME280 atmospheric sensor

	uint32_t time_since_received = HAL_GetTick();
 80040f2:	f001 f90f 	bl	8005314 <HAL_GetTick>
 80040f6:	0003      	movs	r3, r0
 80040f8:	2284      	movs	r2, #132	@ 0x84
 80040fa:	0052      	lsls	r2, r2, #1
 80040fc:	1912      	adds	r2, r2, r4
 80040fe:	19d2      	adds	r2, r2, r7
 8004100:	6013      	str	r3, [r2, #0]
	static bool gpios_reset = true;

	set_lora_rx_mode(); // Call once to begin receiving LoRa messages on EXTI8
 8004102:	f7ff fc41 	bl	8003988 <set_lora_rx_mode>


	char sensor_data[CYPHERTEXT_LENGTH - 9] = {0};
 8004106:	234c      	movs	r3, #76	@ 0x4c
 8004108:	191b      	adds	r3, r3, r4
 800410a:	19db      	adds	r3, r3, r7
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	3304      	adds	r3, #4
 8004112:	2233      	movs	r2, #51	@ 0x33
 8004114:	2100      	movs	r1, #0
 8004116:	0018      	movs	r0, r3
 8004118:	f009 fef6 	bl	800df08 <memset>
	char command_str[9]; // "Cmd: " + 4 (int)
	char receipt[CYPHERTEXT_LENGTH] = {0};
 800411c:	4b17      	ldr	r3, [pc, #92]	@ (800417c <main+0x434>)
 800411e:	2288      	movs	r2, #136	@ 0x88
 8004120:	0052      	lsls	r2, r2, #1
 8004122:	189b      	adds	r3, r3, r2
 8004124:	2218      	movs	r2, #24
 8004126:	4694      	mov	ip, r2
 8004128:	e02a      	b.n	8004180 <main+0x438>
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	08011bc0 	.word	0x08011bc0
 8004130:	08011bc4 	.word	0x08011bc4
 8004134:	08011bcc 	.word	0x08011bcc
 8004138:	08011940 	.word	0x08011940
 800413c:	0801195c 	.word	0x0801195c
 8004140:	08011974 	.word	0x08011974
 8004144:	08011988 	.word	0x08011988
 8004148:	3689cac0 	.word	0x3689cac0
 800414c:	080119a0 	.word	0x080119a0
 8004150:	080119bc 	.word	0x080119bc
 8004154:	080119dc 	.word	0x080119dc
 8004158:	080119fc 	.word	0x080119fc
 800415c:	08011a24 	.word	0x08011a24
 8004160:	08011a48 	.word	0x08011a48
 8004164:	08011a68 	.word	0x08011a68
 8004168:	08011a9c 	.word	0x08011a9c
 800416c:	08011ac8 	.word	0x08011ac8
 8004170:	08011afc 	.word	0x08011afc
 8004174:	08011b2c 	.word	0x08011b2c
 8004178:	08011b64 	.word	0x08011b64
 800417c:	fffffef0 	.word	0xfffffef0
 8004180:	44bc      	add	ip, r7
 8004182:	4463      	add	r3, ip
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	223c      	movs	r2, #60	@ 0x3c
 800418c:	2100      	movs	r1, #0
 800418e:	0018      	movs	r0, r3
 8004190:	f009 feba 	bl	800df08 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{

		HAL_GPIO_TogglePin(BLINK_GPIO_Port, BLINK_Pin); // Toggle LED
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	015b      	lsls	r3, r3, #5
 8004198:	4a9b      	ldr	r2, [pc, #620]	@ (8004408 <main+0x6c0>)
 800419a:	0019      	movs	r1, r3
 800419c:	0010      	movs	r0, r2
 800419e:	f001 ff83 	bl	80060a8 <HAL_GPIO_TogglePin>

		// On valid LoRa receive
		if (command_received != 0)
 80041a2:	4b9a      	ldr	r3, [pc, #616]	@ (800440c <main+0x6c4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d039      	beq.n	800421e <main+0x4d6>
		{
			output_to_binary(command_received); // Set the GPIOs to match the binary number
 80041aa:	4b98      	ldr	r3, [pc, #608]	@ (800440c <main+0x6c4>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fd54 	bl	8003c5c <output_to_binary>

			// Format all the data into one receipt
			snprintf(command_str, sizeof(command_str), "Cmd: %d", command_received);
 80041b4:	4b95      	ldr	r3, [pc, #596]	@ (800440c <main+0x6c4>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	4a95      	ldr	r2, [pc, #596]	@ (8004410 <main+0x6c8>)
 80041ba:	2440      	movs	r4, #64	@ 0x40
 80041bc:	2518      	movs	r5, #24
 80041be:	1961      	adds	r1, r4, r5
 80041c0:	19c8      	adds	r0, r1, r7
 80041c2:	2109      	movs	r1, #9
 80041c4:	f009 fd56 	bl	800dc74 <sniprintf>
			snprintf(receipt, sizeof(receipt), "%s, %s", command_str, sensor_data);
 80041c8:	1963      	adds	r3, r4, r5
 80041ca:	19d9      	adds	r1, r3, r7
 80041cc:	4a91      	ldr	r2, [pc, #580]	@ (8004414 <main+0x6cc>)
 80041ce:	002c      	movs	r4, r5
 80041d0:	1938      	adds	r0, r7, r4
 80041d2:	234c      	movs	r3, #76	@ 0x4c
 80041d4:	191b      	adds	r3, r3, r4
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	000b      	movs	r3, r1
 80041dc:	2140      	movs	r1, #64	@ 0x40
 80041de:	f009 fd49 	bl	800dc74 <sniprintf>

			HAL_Delay(475); // Wait for transmitter to be ready to receive
 80041e2:	23dc      	movs	r3, #220	@ 0xdc
 80041e4:	33ff      	adds	r3, #255	@ 0xff
 80041e6:	0018      	movs	r0, r3
 80041e8:	f001 f89e 	bl	8005328 <HAL_Delay>

			encrypt_and_transmit((uint8_t *)receipt);
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff fcec 	bl	8003bcc <encrypt_and_transmit>
			HAL_Delay(475); // Delay to allow time to transmit receipt
 80041f4:	23dc      	movs	r3, #220	@ 0xdc
 80041f6:	33ff      	adds	r3, #255	@ 0xff
 80041f8:	0018      	movs	r0, r3
 80041fa:	f001 f895 	bl	8005328 <HAL_Delay>
			set_lora_rx_mode();
 80041fe:	f7ff fbc3 	bl	8003988 <set_lora_rx_mode>

			time_since_received = HAL_GetTick(); // Record time
 8004202:	f001 f887 	bl	8005314 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	2284      	movs	r2, #132	@ 0x84
 800420a:	0052      	lsls	r2, r2, #1
 800420c:	1912      	adds	r2, r2, r4
 800420e:	19d2      	adds	r2, r2, r7
 8004210:	6013      	str	r3, [r2, #0]
			gpios_reset = false; // To only reset GPIOs once per receiving something
 8004212:	4b81      	ldr	r3, [pc, #516]	@ (8004418 <main+0x6d0>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]

			command_received = 0;
 8004218:	4b7c      	ldr	r3, [pc, #496]	@ (800440c <main+0x6c4>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
		}
		// End of on LoRa receive

		// Binary output GPIOs will stay HIGH for 100ms then go back LOW
		if ((HAL_GetTick() - time_since_received) > 100 && !gpios_reset)
 800421e:	f001 f879 	bl	8005314 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	2384      	movs	r3, #132	@ 0x84
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2118      	movs	r1, #24
 800422a:	185b      	adds	r3, r3, r1
 800422c:	19db      	adds	r3, r3, r7
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d90b      	bls.n	800424e <main+0x506>
 8004236:	4b78      	ldr	r3, [pc, #480]	@ (8004418 <main+0x6d0>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	4053      	eors	r3, r2
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <main+0x506>
		{
			reset_gpios(); // Set them all back to LOW
 8004244:	f7ff fd58 	bl	8003cf8 <reset_gpios>
			gpios_reset = true;
 8004248:	4b73      	ldr	r3, [pc, #460]	@ (8004418 <main+0x6d0>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
		}

		// Take BME280 reading
		uint32_t current_time = HAL_GetTick();
 800424e:	f001 f861 	bl	8005314 <HAL_GetTick>
 8004252:	0003      	movs	r3, r0
 8004254:	218c      	movs	r1, #140	@ 0x8c
 8004256:	0049      	lsls	r1, r1, #1
 8004258:	187a      	adds	r2, r7, r1
 800425a:	6013      	str	r3, [r2, #0]
		if ((current_time - last_wake_time) < (period / 1000)) // Wait for BME280 sensor data to be ready
 800425c:	187b      	adds	r3, r7, r1
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2586      	movs	r5, #134	@ 0x86
 8004262:	006d      	lsls	r5, r5, #1
 8004264:	2118      	movs	r1, #24
 8004266:	1868      	adds	r0, r5, r1
 8004268:	19c3      	adds	r3, r0, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1ad4      	subs	r4, r2, r3
 800426e:	2684      	movs	r6, #132	@ 0x84
 8004270:	1872      	adds	r2, r6, r1
 8004272:	19d3      	adds	r3, r2, r7
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	22fa      	movs	r2, #250	@ 0xfa
 8004278:	0091      	lsls	r1, r2, #2
 800427a:	0018      	movs	r0, r3
 800427c:	f7fb ff60 	bl	8000140 <__udivsi3>
 8004280:	0003      	movs	r3, r0
 8004282:	429c      	cmp	r4, r3
 8004284:	d216      	bcs.n	80042b4 <main+0x56c>
		{
			HAL_Delay((period / 1000) - (current_time - last_wake_time));
 8004286:	2418      	movs	r4, #24
 8004288:	1932      	adds	r2, r6, r4
 800428a:	19d3      	adds	r3, r2, r7
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	22fa      	movs	r2, #250	@ 0xfa
 8004290:	0091      	lsls	r1, r2, #2
 8004292:	0018      	movs	r0, r3
 8004294:	f7fb ff54 	bl	8000140 <__udivsi3>
 8004298:	0003      	movs	r3, r0
 800429a:	0019      	movs	r1, r3
 800429c:	192a      	adds	r2, r5, r4
 800429e:	19d3      	adds	r3, r2, r7
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	238c      	movs	r3, #140	@ 0x8c
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	18cb      	adds	r3, r1, r3
 80042ae:	0018      	movs	r0, r3
 80042b0:	f001 f83a 	bl	8005328 <HAL_Delay>
		}
		last_wake_time = HAL_GetTick();
 80042b4:	f001 f82e 	bl	8005314 <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	2286      	movs	r2, #134	@ 0x86
 80042bc:	0052      	lsls	r2, r2, #1
 80042be:	2118      	movs	r1, #24
 80042c0:	1852      	adds	r2, r2, r1
 80042c2:	19d2      	adds	r2, r2, r7
 80042c4:	6013      	str	r3, [r2, #0]

		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev); // Get data
 80042c6:	268f      	movs	r6, #143	@ 0x8f
 80042c8:	0076      	lsls	r6, r6, #1
 80042ca:	19bc      	adds	r4, r7, r6
 80042cc:	23a8      	movs	r3, #168	@ 0xa8
 80042ce:	185b      	adds	r3, r3, r1
 80042d0:	19da      	adds	r2, r3, r7
 80042d2:	2588      	movs	r5, #136	@ 0x88
 80042d4:	186b      	adds	r3, r5, r1
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	0019      	movs	r1, r3
 80042da:	2007      	movs	r0, #7
 80042dc:	f006 fe23 	bl	800af26 <bme280_get_sensor_data>
 80042e0:	0003      	movs	r3, r0
 80042e2:	7023      	strb	r3, [r4, #0]

		if (rslt == BME280_OK)
 80042e4:	19bb      	adds	r3, r7, r6
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d000      	beq.n	80042f0 <main+0x5a8>
 80042ee:	e086      	b.n	80043fe <main+0x6b6>
			// Print data using floating-point formatting
			//printf("Temperature: %.2f C\n", comp_data.temperature);
			//printf("Pressure: %.2f raw\n", comp_data.pressure);
			//printf("Humidity: %.2f %%RH\n", comp_data.humidity);

			float sea_level_pressure = 101325.0; // Reference pressure in Pa
 80042f0:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <main+0x6d4>)
 80042f2:	26fc      	movs	r6, #252	@ 0xfc
 80042f4:	2118      	movs	r1, #24
 80042f6:	1872      	adds	r2, r6, r1
 80042f8:	19d2      	adds	r2, r2, r7
 80042fa:	6013      	str	r3, [r2, #0]
			float altitude = 44330.0 * (1.0 - pow((float)comp_data.pressure / sea_level_pressure, 0.1903));
 80042fc:	002c      	movs	r4, r5
 80042fe:	000d      	movs	r5, r1
 8004300:	1963      	adds	r3, r4, r5
 8004302:	19db      	adds	r3, r3, r7
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0010      	movs	r0, r2
 800430a:	0019      	movs	r1, r3
 800430c:	f7fe fa28 	bl	8002760 <__aeabi_d2f>
 8004310:	1c03      	adds	r3, r0, #0
 8004312:	1972      	adds	r2, r6, r5
 8004314:	19d2      	adds	r2, r2, r7
 8004316:	6811      	ldr	r1, [r2, #0]
 8004318:	1c18      	adds	r0, r3, #0
 800431a:	f7fc f9fd 	bl	8000718 <__aeabi_fdiv>
 800431e:	1c03      	adds	r3, r0, #0
 8004320:	1c18      	adds	r0, r3, #0
 8004322:	f7fe f9d5 	bl	80026d0 <__aeabi_f2d>
 8004326:	4a3e      	ldr	r2, [pc, #248]	@ (8004420 <main+0x6d8>)
 8004328:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <main+0x6dc>)
 800432a:	f00c fb69 	bl	8010a00 <pow>
 800432e:	0002      	movs	r2, r0
 8004330:	000b      	movs	r3, r1
 8004332:	2000      	movs	r0, #0
 8004334:	493c      	ldr	r1, [pc, #240]	@ (8004428 <main+0x6e0>)
 8004336:	f7fd fd7f 	bl	8001e38 <__aeabi_dsub>
 800433a:	0002      	movs	r2, r0
 800433c:	000b      	movs	r3, r1
 800433e:	0010      	movs	r0, r2
 8004340:	0019      	movs	r1, r3
 8004342:	2200      	movs	r2, #0
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <main+0x6e4>)
 8004346:	f7fd faaf 	bl	80018a8 <__aeabi_dmul>
 800434a:	0002      	movs	r2, r0
 800434c:	000b      	movs	r3, r1
 800434e:	0010      	movs	r0, r2
 8004350:	0019      	movs	r1, r3
 8004352:	f7fe fa05 	bl	8002760 <__aeabi_d2f>
 8004356:	1c03      	adds	r3, r0, #0
 8004358:	22f8      	movs	r2, #248	@ 0xf8
 800435a:	0028      	movs	r0, r5
 800435c:	1812      	adds	r2, r2, r0
 800435e:	19d1      	adds	r1, r2, r7
 8004360:	600b      	str	r3, [r1, #0]
			//printf("Altitude: %.2f m\n", altitude);

			snprintf((char *)sensor_data, sizeof(sensor_data), "T:%.2fC / %.2fF, P:%.2fhPa, H:%.2f%%, Alt:%.2fm",
 8004362:	0026      	movs	r6, r4
 8004364:	1833      	adds	r3, r6, r0
 8004366:	19db      	adds	r3, r3, r7
 8004368:	689c      	ldr	r4, [r3, #8]
 800436a:	68dd      	ldr	r5, [r3, #12]
					comp_data.temperature, ((comp_data.temperature * 1.8) + 32), (comp_data.pressure / 100), comp_data.humidity, altitude);
 800436c:	1833      	adds	r3, r6, r0
 800436e:	19db      	adds	r3, r3, r7
 8004370:	6898      	ldr	r0, [r3, #8]
 8004372:	68d9      	ldr	r1, [r3, #12]
 8004374:	4a2e      	ldr	r2, [pc, #184]	@ (8004430 <main+0x6e8>)
 8004376:	4b2f      	ldr	r3, [pc, #188]	@ (8004434 <main+0x6ec>)
 8004378:	f7fd fa96 	bl	80018a8 <__aeabi_dmul>
 800437c:	0002      	movs	r2, r0
 800437e:	000b      	movs	r3, r1
 8004380:	0010      	movs	r0, r2
 8004382:	0019      	movs	r1, r3
			snprintf((char *)sensor_data, sizeof(sensor_data), "T:%.2fC / %.2fF, P:%.2fhPa, H:%.2f%%, Alt:%.2fm",
 8004384:	2200      	movs	r2, #0
 8004386:	4b2c      	ldr	r3, [pc, #176]	@ (8004438 <main+0x6f0>)
 8004388:	f7fc fae6 	bl	8000958 <__aeabi_dadd>
 800438c:	0002      	movs	r2, r0
 800438e:	000b      	movs	r3, r1
 8004390:	613a      	str	r2, [r7, #16]
 8004392:	617b      	str	r3, [r7, #20]
					comp_data.temperature, ((comp_data.temperature * 1.8) + 32), (comp_data.pressure / 100), comp_data.humidity, altitude);
 8004394:	2018      	movs	r0, #24
 8004396:	1833      	adds	r3, r6, r0
 8004398:	19db      	adds	r3, r3, r7
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
			snprintf((char *)sensor_data, sizeof(sensor_data), "T:%.2fC / %.2fF, P:%.2fhPa, H:%.2f%%, Alt:%.2fm",
 800439e:	2200      	movs	r2, #0
 80043a0:	4b26      	ldr	r3, [pc, #152]	@ (800443c <main+0x6f4>)
 80043a2:	f7fc fe3d 	bl	8001020 <__aeabi_ddiv>
 80043a6:	0002      	movs	r2, r0
 80043a8:	000b      	movs	r3, r1
 80043aa:	60ba      	str	r2, [r7, #8]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	2018      	movs	r0, #24
 80043b0:	1833      	adds	r3, r6, r0
 80043b2:	19db      	adds	r3, r3, r7
 80043b4:	6919      	ldr	r1, [r3, #16]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	23f8      	movs	r3, #248	@ 0xf8
 80043be:	0006      	movs	r6, r0
 80043c0:	181b      	adds	r3, r3, r0
 80043c2:	19db      	adds	r3, r3, r7
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f7fe f983 	bl	80026d0 <__aeabi_f2d>
 80043ca:	0002      	movs	r2, r0
 80043cc:	000b      	movs	r3, r1
 80043ce:	491c      	ldr	r1, [pc, #112]	@ (8004440 <main+0x6f8>)
 80043d0:	204c      	movs	r0, #76	@ 0x4c
 80043d2:	1980      	adds	r0, r0, r6
 80043d4:	19c0      	adds	r0, r0, r7
 80043d6:	9208      	str	r2, [sp, #32]
 80043d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	9206      	str	r2, [sp, #24]
 80043e0:	9307      	str	r3, [sp, #28]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	9204      	str	r2, [sp, #16]
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	9202      	str	r2, [sp, #8]
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	9400      	str	r4, [sp, #0]
 80043f4:	9501      	str	r5, [sp, #4]
 80043f6:	000a      	movs	r2, r1
 80043f8:	2137      	movs	r1, #55	@ 0x37
 80043fa:	f009 fc3b 	bl	800dc74 <sniprintf>
		}
		// End of take BME280 reading

		HAL_Delay(250);
 80043fe:	20fa      	movs	r0, #250	@ 0xfa
 8004400:	f000 ff92 	bl	8005328 <HAL_Delay>
	{
 8004404:	e6c6      	b.n	8004194 <main+0x44c>
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	50000400 	.word	0x50000400
 800440c:	20000418 	.word	0x20000418
 8004410:	08011b80 	.word	0x08011b80
 8004414:	08011b88 	.word	0x08011b88
 8004418:	20000010 	.word	0x20000010
 800441c:	47c5e680 	.word	0x47c5e680
 8004420:	1a36e2eb 	.word	0x1a36e2eb
 8004424:	3fc85bc0 	.word	0x3fc85bc0
 8004428:	3ff00000 	.word	0x3ff00000
 800442c:	40e5a540 	.word	0x40e5a540
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	3ffccccc 	.word	0x3ffccccc
 8004438:	40400000 	.word	0x40400000
 800443c:	40590000 	.word	0x40590000
 8004440:	08011b90 	.word	0x08011b90

08004444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b099      	sub	sp, #100	@ 0x64
 8004448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800444a:	2414      	movs	r4, #20
 800444c:	193b      	adds	r3, r7, r4
 800444e:	0018      	movs	r0, r3
 8004450:	234c      	movs	r3, #76	@ 0x4c
 8004452:	001a      	movs	r2, r3
 8004454:	2100      	movs	r1, #0
 8004456:	f009 fd57 	bl	800df08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	0018      	movs	r0, r3
 800445e:	2310      	movs	r3, #16
 8004460:	001a      	movs	r2, r3
 8004462:	2100      	movs	r1, #0
 8004464:	f009 fd50 	bl	800df08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	0018      	movs	r0, r3
 800446e:	f002 fc97 	bl	8006da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004472:	193b      	adds	r3, r7, r4
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004478:	193b      	adds	r3, r7, r4
 800447a:	2280      	movs	r2, #128	@ 0x80
 800447c:	0252      	lsls	r2, r2, #9
 800447e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004480:	0021      	movs	r1, r4
 8004482:	187b      	adds	r3, r7, r1
 8004484:	2202      	movs	r2, #2
 8004486:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004488:	187b      	adds	r3, r7, r1
 800448a:	2203      	movs	r2, #3
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800448e:	187b      	adds	r3, r7, r1
 8004490:	2200      	movs	r2, #0
 8004492:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 14;
 8004494:	187b      	adds	r3, r7, r1
 8004496:	220e      	movs	r2, #14
 8004498:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800449a:	187b      	adds	r3, r7, r1
 800449c:	2280      	movs	r2, #128	@ 0x80
 800449e:	0292      	lsls	r2, r2, #10
 80044a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	2280      	movs	r2, #128	@ 0x80
 80044a6:	0492      	lsls	r2, r2, #18
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	2280      	movs	r2, #128	@ 0x80
 80044ae:	0592      	lsls	r2, r2, #22
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	0018      	movs	r0, r3
 80044b6:	f002 fcdf 	bl	8006e78 <HAL_RCC_OscConfig>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d001      	beq.n	80044c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80044be:	f000 fae5 	bl	8004a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	2207      	movs	r2, #7
 80044c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	2203      	movs	r2, #3
 80044cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	2200      	movs	r2, #0
 80044d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044da:	1d3b      	adds	r3, r7, #4
 80044dc:	2102      	movs	r1, #2
 80044de:	0018      	movs	r0, r3
 80044e0:	f003 f8f4 	bl	80076cc <HAL_RCC_ClockConfig>
 80044e4:	1e03      	subs	r3, r0, #0
 80044e6:	d001      	beq.n	80044ec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80044e8:	f000 fad0 	bl	8004a8c <Error_Handler>
  }
}
 80044ec:	46c0      	nop			@ (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b019      	add	sp, #100	@ 0x64
 80044f2:	bd90      	pop	{r4, r7, pc}

080044f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	0018      	movs	r0, r3
 80044fe:	230c      	movs	r3, #12
 8004500:	001a      	movs	r2, r3
 8004502:	2100      	movs	r1, #0
 8004504:	f009 fd00 	bl	800df08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004508:	4b2d      	ldr	r3, [pc, #180]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800450a:	4a2e      	ldr	r2, [pc, #184]	@ (80045c4 <MX_ADC1_Init+0xd0>)
 800450c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800450e:	4b2c      	ldr	r3, [pc, #176]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004510:	22c0      	movs	r2, #192	@ 0xc0
 8004512:	0612      	lsls	r2, r2, #24
 8004514:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004516:	4b2a      	ldr	r3, [pc, #168]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800451c:	4b28      	ldr	r3, [pc, #160]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800451e:	2200      	movs	r2, #0
 8004520:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004522:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004524:	2200      	movs	r2, #0
 8004526:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004528:	4b25      	ldr	r3, [pc, #148]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800452a:	2204      	movs	r2, #4
 800452c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800452e:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004530:	2200      	movs	r2, #0
 8004532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004534:	4b22      	ldr	r3, [pc, #136]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004536:	2200      	movs	r2, #0
 8004538:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800453a:	4b21      	ldr	r3, [pc, #132]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800453c:	2200      	movs	r2, #0
 800453e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004540:	4b1f      	ldr	r3, [pc, #124]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004542:	2201      	movs	r2, #1
 8004544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004546:	4b1e      	ldr	r3, [pc, #120]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004548:	2220      	movs	r2, #32
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800454e:	4b1c      	ldr	r3, [pc, #112]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004550:	2200      	movs	r2, #0
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004554:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800455a:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800455c:	222c      	movs	r2, #44	@ 0x2c
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8004568:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800456a:	2207      	movs	r2, #7
 800456c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800456e:	4b14      	ldr	r3, [pc, #80]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004570:	2200      	movs	r2, #0
 8004572:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004574:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004576:	223c      	movs	r2, #60	@ 0x3c
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800457c:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 800457e:	2200      	movs	r2, #0
 8004580:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004582:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 8004584:	0018      	movs	r0, r3
 8004586:	f000 ffef 	bl	8005568 <HAL_ADC_Init>
 800458a:	1e03      	subs	r3, r0, #0
 800458c:	d001      	beq.n	8004592 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800458e:	f000 fa7d 	bl	8004a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	4a0c      	ldr	r2, [pc, #48]	@ (80045c8 <MX_ADC1_Init+0xd4>)
 8004596:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004598:	1d3b      	adds	r3, r7, #4
 800459a:	2200      	movs	r2, #0
 800459c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045a4:	1d3a      	adds	r2, r7, #4
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <MX_ADC1_Init+0xcc>)
 80045a8:	0011      	movs	r1, r2
 80045aa:	0018      	movs	r0, r3
 80045ac:	f001 f984 	bl	80058b8 <HAL_ADC_ConfigChannel>
 80045b0:	1e03      	subs	r3, r0, #0
 80045b2:	d001      	beq.n	80045b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80045b4:	f000 fa6a 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045b8:	46c0      	nop			@ (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2000021c 	.word	0x2000021c
 80045c4:	40012400 	.word	0x40012400
 80045c8:	10000010 	.word	0x10000010

080045cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <MX_I2C1_Init+0x78>)
 80045d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10606DA4;
 80045d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <MX_I2C1_Init+0x7c>)
 80045da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80045dc:	4b18      	ldr	r3, [pc, #96]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045e2:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045e8:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045f4:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <MX_I2C1_Init+0x74>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004600:	4b0f      	ldr	r3, [pc, #60]	@ (8004640 <MX_I2C1_Init+0x74>)
 8004602:	2200      	movs	r2, #0
 8004604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <MX_I2C1_Init+0x74>)
 8004608:	0018      	movs	r0, r3
 800460a:	f001 fda7 	bl	800615c <HAL_I2C_Init>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d001      	beq.n	8004616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004612:	f000 fa3b 	bl	8004a8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <MX_I2C1_Init+0x74>)
 8004618:	2100      	movs	r1, #0
 800461a:	0018      	movs	r0, r3
 800461c:	f002 fb28 	bl	8006c70 <HAL_I2CEx_ConfigAnalogFilter>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d001      	beq.n	8004628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004624:	f000 fa32 	bl	8004a8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004628:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <MX_I2C1_Init+0x74>)
 800462a:	2100      	movs	r1, #0
 800462c:	0018      	movs	r0, r3
 800462e:	f002 fb6b 	bl	8006d08 <HAL_I2CEx_ConfigDigitalFilter>
 8004632:	1e03      	subs	r3, r0, #0
 8004634:	d001      	beq.n	800463a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004636:	f000 fa29 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000280 	.word	0x20000280
 8004644:	40005400 	.word	0x40005400
 8004648:	10606da4 	.word	0x10606da4

0800464c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004650:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004652:	4a1c      	ldr	r2, [pc, #112]	@ (80046c4 <MX_SPI1_Init+0x78>)
 8004654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004656:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004658:	2282      	movs	r2, #130	@ 0x82
 800465a:	0052      	lsls	r2, r2, #1
 800465c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800465e:	4b18      	ldr	r3, [pc, #96]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004664:	4b16      	ldr	r3, [pc, #88]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004666:	22e0      	movs	r2, #224	@ 0xe0
 8004668:	00d2      	lsls	r2, r2, #3
 800466a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800466c:	4b14      	ldr	r3, [pc, #80]	@ (80046c0 <MX_SPI1_Init+0x74>)
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004672:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004674:	2200      	movs	r2, #0
 8004676:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004678:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <MX_SPI1_Init+0x74>)
 800467a:	2280      	movs	r2, #128	@ 0x80
 800467c:	0092      	lsls	r2, r2, #2
 800467e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004680:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004682:	2208      	movs	r2, #8
 8004684:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004686:	4b0e      	ldr	r3, [pc, #56]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004688:	2200      	movs	r2, #0
 800468a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <MX_SPI1_Init+0x74>)
 800468e:	2200      	movs	r2, #0
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004692:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <MX_SPI1_Init+0x74>)
 8004694:	2200      	movs	r2, #0
 8004696:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004698:	4b09      	ldr	r3, [pc, #36]	@ (80046c0 <MX_SPI1_Init+0x74>)
 800469a:	2207      	movs	r2, #7
 800469c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800469e:	4b08      	ldr	r3, [pc, #32]	@ (80046c0 <MX_SPI1_Init+0x74>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <MX_SPI1_Init+0x74>)
 80046a6:	2208      	movs	r2, #8
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <MX_SPI1_Init+0x74>)
 80046ac:	0018      	movs	r0, r3
 80046ae:	f004 fa53 	bl	8008b58 <HAL_SPI_Init>
 80046b2:	1e03      	subs	r3, r0, #0
 80046b4:	d001      	beq.n	80046ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80046b6:	f000 f9e9 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200002d4 	.word	0x200002d4
 80046c4:	40013000 	.word	0x40013000

080046c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	@ 0x28
 80046cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ce:	231c      	movs	r3, #28
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	0018      	movs	r0, r3
 80046d4:	230c      	movs	r3, #12
 80046d6:	001a      	movs	r2, r3
 80046d8:	2100      	movs	r1, #0
 80046da:	f009 fc15 	bl	800df08 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046de:	003b      	movs	r3, r7
 80046e0:	0018      	movs	r0, r3
 80046e2:	231c      	movs	r3, #28
 80046e4:	001a      	movs	r2, r3
 80046e6:	2100      	movs	r1, #0
 80046e8:	f009 fc0e 	bl	800df08 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046ec:	4b29      	ldr	r3, [pc, #164]	@ (8004794 <MX_TIM3_Init+0xcc>)
 80046ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004798 <MX_TIM3_Init+0xd0>)
 80046f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046f2:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <MX_TIM3_Init+0xcc>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f8:	4b26      	ldr	r3, [pc, #152]	@ (8004794 <MX_TIM3_Init+0xcc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80046fe:	4b25      	ldr	r3, [pc, #148]	@ (8004794 <MX_TIM3_Init+0xcc>)
 8004700:	4a26      	ldr	r2, [pc, #152]	@ (800479c <MX_TIM3_Init+0xd4>)
 8004702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004704:	4b23      	ldr	r3, [pc, #140]	@ (8004794 <MX_TIM3_Init+0xcc>)
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800470a:	4b22      	ldr	r3, [pc, #136]	@ (8004794 <MX_TIM3_Init+0xcc>)
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <MX_TIM3_Init+0xcc>)
 8004712:	0018      	movs	r0, r3
 8004714:	f004 ff86 	bl	8009624 <HAL_TIM_PWM_Init>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d001      	beq.n	8004720 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800471c:	f000 f9b6 	bl	8004a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004720:	211c      	movs	r1, #28
 8004722:	187b      	adds	r3, r7, r1
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004728:	187b      	adds	r3, r7, r1
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800472e:	187a      	adds	r2, r7, r1
 8004730:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <MX_TIM3_Init+0xcc>)
 8004732:	0011      	movs	r1, r2
 8004734:	0018      	movs	r0, r3
 8004736:	f005 fbe7 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 800473a:	1e03      	subs	r3, r0, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800473e:	f000 f9a5 	bl	8004a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004742:	003b      	movs	r3, r7
 8004744:	2260      	movs	r2, #96	@ 0x60
 8004746:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004748:	003b      	movs	r3, r7
 800474a:	2200      	movs	r2, #0
 800474c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800474e:	003b      	movs	r3, r7
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004754:	003b      	movs	r3, r7
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800475a:	0039      	movs	r1, r7
 800475c:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <MX_TIM3_Init+0xcc>)
 800475e:	2208      	movs	r2, #8
 8004760:	0018      	movs	r0, r3
 8004762:	f004 ffb7 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800476a:	f000 f98f 	bl	8004a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800476e:	0039      	movs	r1, r7
 8004770:	4b08      	ldr	r3, [pc, #32]	@ (8004794 <MX_TIM3_Init+0xcc>)
 8004772:	220c      	movs	r2, #12
 8004774:	0018      	movs	r0, r3
 8004776:	f004 ffad 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d001      	beq.n	8004782 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800477e:	f000 f985 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004782:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <MX_TIM3_Init+0xcc>)
 8004784:	0018      	movs	r0, r3
 8004786:	f000 faf5 	bl	8004d74 <HAL_TIM_MspPostInit>

}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b00a      	add	sp, #40	@ 0x28
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	20000338 	.word	0x20000338
 8004798:	40000400 	.word	0x40000400
 800479c:	0000ffff 	.word	0x0000ffff

080047a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047a4:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047a6:	4a24      	ldr	r2, [pc, #144]	@ (8004838 <MX_USART3_UART_Init+0x98>)
 80047a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80047aa:	4b22      	ldr	r3, [pc, #136]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047ac:	22e1      	movs	r2, #225	@ 0xe1
 80047ae:	0252      	lsls	r2, r2, #9
 80047b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047b2:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047be:	4b1d      	ldr	r3, [pc, #116]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80047c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047c6:	220c      	movs	r2, #12
 80047c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d0:	4b18      	ldr	r3, [pc, #96]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047d6:	4b17      	ldr	r3, [pc, #92]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047d8:	2200      	movs	r2, #0
 80047da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047dc:	4b15      	ldr	r3, [pc, #84]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047de:	2200      	movs	r2, #0
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80047e8:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047ea:	0018      	movs	r0, r3
 80047ec:	f005 fbfa 	bl	8009fe4 <HAL_UART_Init>
 80047f0:	1e03      	subs	r3, r0, #0
 80047f2:	d001      	beq.n	80047f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80047f4:	f000 f94a 	bl	8004a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 80047fa:	2100      	movs	r1, #0
 80047fc:	0018      	movs	r0, r3
 80047fe:	f006 f887 	bl	800a910 <HAL_UARTEx_SetTxFifoThreshold>
 8004802:	1e03      	subs	r3, r0, #0
 8004804:	d001      	beq.n	800480a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004806:	f000 f941 	bl	8004a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800480a:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 800480c:	2100      	movs	r1, #0
 800480e:	0018      	movs	r0, r3
 8004810:	f006 f8be 	bl	800a990 <HAL_UARTEx_SetRxFifoThreshold>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004818:	f000 f938 	bl	8004a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <MX_USART3_UART_Init+0x94>)
 800481e:	0018      	movs	r0, r3
 8004820:	f006 f83c 	bl	800a89c <HAL_UARTEx_DisableFifoMode>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d001      	beq.n	800482c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004828:	f000 f930 	bl	8004a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800482c:	46c0      	nop			@ (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	20000384 	.word	0x20000384
 8004838:	40004800 	.word	0x40004800

0800483c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b08b      	sub	sp, #44	@ 0x2c
 8004840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004842:	2414      	movs	r4, #20
 8004844:	193b      	adds	r3, r7, r4
 8004846:	0018      	movs	r0, r3
 8004848:	2314      	movs	r3, #20
 800484a:	001a      	movs	r2, r3
 800484c:	2100      	movs	r1, #0
 800484e:	f009 fb5b 	bl	800df08 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	4b8a      	ldr	r3, [pc, #552]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004856:	4b89      	ldr	r3, [pc, #548]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004858:	2104      	movs	r1, #4
 800485a:	430a      	orrs	r2, r1
 800485c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800485e:	4b87      	ldr	r3, [pc, #540]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004862:	2204      	movs	r2, #4
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800486a:	4b84      	ldr	r3, [pc, #528]	@ (8004a7c <MX_GPIO_Init+0x240>)
 800486c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800486e:	4b83      	ldr	r3, [pc, #524]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004870:	2120      	movs	r1, #32
 8004872:	430a      	orrs	r2, r1
 8004874:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004876:	4b81      	ldr	r3, [pc, #516]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	2220      	movs	r2, #32
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004882:	4b7e      	ldr	r3, [pc, #504]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004884:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004886:	4b7d      	ldr	r3, [pc, #500]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004888:	2101      	movs	r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800488e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a7c <MX_GPIO_Init+0x240>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800489a:	4b78      	ldr	r3, [pc, #480]	@ (8004a7c <MX_GPIO_Init+0x240>)
 800489c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800489e:	4b77      	ldr	r3, [pc, #476]	@ (8004a7c <MX_GPIO_Init+0x240>)
 80048a0:	2102      	movs	r1, #2
 80048a2:	430a      	orrs	r2, r1
 80048a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80048a6:	4b75      	ldr	r3, [pc, #468]	@ (8004a7c <MX_GPIO_Init+0x240>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048aa:	2202      	movs	r2, #2
 80048ac:	4013      	ands	r3, r2
 80048ae:	607b      	str	r3, [r7, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO1_Pin|IO2_Pin|IO3_Pin|IO4_Pin
 80048b2:	23a0      	movs	r3, #160	@ 0xa0
 80048b4:	05db      	lsls	r3, r3, #23
 80048b6:	2200      	movs	r2, #0
 80048b8:	21f8      	movs	r1, #248	@ 0xf8
 80048ba:	0018      	movs	r0, r3
 80048bc:	f001 fbd7 	bl	800606e <HAL_GPIO_WritePin>
                          |IO5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLINK_Pin|BME_ADR_Pin|SX_CS_Pin|SX_NRST_Pin
 80048c0:	496f      	ldr	r1, [pc, #444]	@ (8004a80 <MX_GPIO_Init+0x244>)
 80048c2:	4b70      	ldr	r3, [pc, #448]	@ (8004a84 <MX_GPIO_Init+0x248>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 fbd1 	bl	800606e <HAL_GPIO_WritePin>
                          |DIO2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_SET);
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	019b      	lsls	r3, r3, #6
 80048d0:	486c      	ldr	r0, [pc, #432]	@ (8004a84 <MX_GPIO_Init+0x248>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	0019      	movs	r1, r3
 80048d6:	f001 fbca 	bl	800606e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANT_SW_GPIO_Port, ANT_SW_Pin, GPIO_PIN_SET);
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	0059      	lsls	r1, r3, #1
 80048de:	23a0      	movs	r3, #160	@ 0xa0
 80048e0:	05db      	lsls	r3, r3, #23
 80048e2:	2201      	movs	r2, #1
 80048e4:	0018      	movs	r0, r3
 80048e6:	f001 fbc2 	bl	800606e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 80048ea:	193b      	adds	r3, r7, r4
 80048ec:	2280      	movs	r2, #128	@ 0x80
 80048ee:	0192      	lsls	r2, r2, #6
 80048f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048f2:	193b      	adds	r3, r7, r4
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f8:	193b      	adds	r3, r7, r4
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 80048fe:	193b      	adds	r3, r7, r4
 8004900:	4a61      	ldr	r2, [pc, #388]	@ (8004a88 <MX_GPIO_Init+0x24c>)
 8004902:	0019      	movs	r1, r3
 8004904:	0010      	movs	r0, r2
 8004906:	f001 fa21 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : IO1_Pin IO2_Pin IO4_Pin IO5_Pin */
  GPIO_InitStruct.Pin = IO1_Pin|IO2_Pin|IO4_Pin|IO5_Pin;
 800490a:	193b      	adds	r3, r7, r4
 800490c:	22d8      	movs	r2, #216	@ 0xd8
 800490e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004910:	193b      	adds	r3, r7, r4
 8004912:	2201      	movs	r2, #1
 8004914:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	193b      	adds	r3, r7, r4
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800491c:	193b      	adds	r3, r7, r4
 800491e:	2201      	movs	r2, #1
 8004920:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004922:	193a      	adds	r2, r7, r4
 8004924:	23a0      	movs	r3, #160	@ 0xa0
 8004926:	05db      	lsls	r3, r3, #23
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f001 fa0e 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : IO3_Pin ANT_SW_Pin */
  GPIO_InitStruct.Pin = IO3_Pin|ANT_SW_Pin;
 8004930:	0021      	movs	r1, r4
 8004932:	187b      	adds	r3, r7, r1
 8004934:	2290      	movs	r2, #144	@ 0x90
 8004936:	0052      	lsls	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800493a:	000c      	movs	r4, r1
 800493c:	193b      	adds	r3, r7, r4
 800493e:	2201      	movs	r2, #1
 8004940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	193b      	adds	r3, r7, r4
 8004944:	2200      	movs	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004948:	193b      	adds	r3, r7, r4
 800494a:	2200      	movs	r2, #0
 800494c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494e:	193a      	adds	r2, r7, r4
 8004950:	23a0      	movs	r3, #160	@ 0xa0
 8004952:	05db      	lsls	r3, r3, #23
 8004954:	0011      	movs	r1, r2
 8004956:	0018      	movs	r0, r3
 8004958:	f001 f9f8 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800495c:	193b      	adds	r3, r7, r4
 800495e:	2204      	movs	r2, #4
 8004960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004962:	193b      	adds	r3, r7, r4
 8004964:	2200      	movs	r2, #0
 8004966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004968:	193b      	adds	r3, r7, r4
 800496a:	2202      	movs	r2, #2
 800496c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800496e:	193b      	adds	r3, r7, r4
 8004970:	4a44      	ldr	r2, [pc, #272]	@ (8004a84 <MX_GPIO_Init+0x248>)
 8004972:	0019      	movs	r1, r3
 8004974:	0010      	movs	r0, r2
 8004976:	f001 f9e9 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLINK_Pin */
  GPIO_InitStruct.Pin = BLINK_Pin;
 800497a:	0021      	movs	r1, r4
 800497c:	187b      	adds	r3, r7, r1
 800497e:	2280      	movs	r2, #128	@ 0x80
 8004980:	0152      	lsls	r2, r2, #5
 8004982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004984:	000c      	movs	r4, r1
 8004986:	193b      	adds	r3, r7, r4
 8004988:	2201      	movs	r2, #1
 800498a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	193b      	adds	r3, r7, r4
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004992:	193b      	adds	r3, r7, r4
 8004994:	2201      	movs	r2, #1
 8004996:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BLINK_GPIO_Port, &GPIO_InitStruct);
 8004998:	193b      	adds	r3, r7, r4
 800499a:	4a3a      	ldr	r2, [pc, #232]	@ (8004a84 <MX_GPIO_Init+0x248>)
 800499c:	0019      	movs	r1, r3
 800499e:	0010      	movs	r0, r2
 80049a0:	f001 f9d4 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : XSHUT_Pin BME_ADR_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin|BME_ADR_Pin;
 80049a4:	0021      	movs	r1, r4
 80049a6:	187b      	adds	r3, r7, r1
 80049a8:	22a0      	movs	r2, #160	@ 0xa0
 80049aa:	0212      	lsls	r2, r2, #8
 80049ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ae:	000c      	movs	r4, r1
 80049b0:	193b      	adds	r3, r7, r4
 80049b2:	2201      	movs	r2, #1
 80049b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049bc:	193b      	adds	r3, r7, r4
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c2:	193b      	adds	r3, r7, r4
 80049c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a84 <MX_GPIO_Init+0x248>)
 80049c6:	0019      	movs	r1, r3
 80049c8:	0010      	movs	r0, r2
 80049ca:	f001 f9bf 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VL_INT_Pin */
  GPIO_InitStruct.Pin = VL_INT_Pin;
 80049ce:	0021      	movs	r1, r4
 80049d0:	187b      	adds	r3, r7, r1
 80049d2:	2280      	movs	r2, #128	@ 0x80
 80049d4:	01d2      	lsls	r2, r2, #7
 80049d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d8:	000c      	movs	r4, r1
 80049da:	193b      	adds	r3, r7, r4
 80049dc:	2200      	movs	r2, #0
 80049de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	193b      	adds	r3, r7, r4
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 80049e6:	193b      	adds	r3, r7, r4
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <MX_GPIO_Init+0x248>)
 80049ea:	0019      	movs	r1, r3
 80049ec:	0010      	movs	r0, r2
 80049ee:	f001 f9ad 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	2280      	movs	r2, #128	@ 0x80
 80049f6:	0212      	lsls	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	2200      	movs	r2, #0
 8004a04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004a06:	193a      	adds	r2, r7, r4
 8004a08:	23a0      	movs	r3, #160	@ 0xa0
 8004a0a:	05db      	lsls	r3, r3, #23
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f001 f99c 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_CS_Pin SX_NRST_Pin DIO2_Pin */
  GPIO_InitStruct.Pin = SX_CS_Pin|SX_NRST_Pin|DIO2_Pin;
 8004a14:	0021      	movs	r1, r4
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	22b0      	movs	r2, #176	@ 0xb0
 8004a1a:	0092      	lsls	r2, r2, #2
 8004a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a1e:	000c      	movs	r4, r1
 8004a20:	193b      	adds	r3, r7, r4
 8004a22:	2201      	movs	r2, #1
 8004a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2c:	193b      	adds	r3, r7, r4
 8004a2e:	2203      	movs	r2, #3
 8004a30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a32:	193b      	adds	r3, r7, r4
 8004a34:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <MX_GPIO_Init+0x248>)
 8004a36:	0019      	movs	r1, r3
 8004a38:	0010      	movs	r0, r2
 8004a3a:	f001 f987 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 8004a3e:	0021      	movs	r1, r4
 8004a40:	187b      	adds	r3, r7, r1
 8004a42:	2280      	movs	r2, #128	@ 0x80
 8004a44:	0052      	lsls	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a48:	187b      	adds	r3, r7, r1
 8004a4a:	2288      	movs	r2, #136	@ 0x88
 8004a4c:	0352      	lsls	r2, r2, #13
 8004a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8004a56:	187b      	adds	r3, r7, r1
 8004a58:	4a0a      	ldr	r2, [pc, #40]	@ (8004a84 <MX_GPIO_Init+0x248>)
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	0010      	movs	r0, r2
 8004a5e:	f001 f975 	bl	8005d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004a62:	2200      	movs	r2, #0
 8004a64:	2100      	movs	r1, #0
 8004a66:	2007      	movs	r0, #7
 8004a68:	f001 f93e 	bl	8005ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004a6c:	2007      	movs	r0, #7
 8004a6e:	f001 f950 	bl	8005d12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b00b      	add	sp, #44	@ 0x2c
 8004a78:	bd90      	pop	{r4, r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	000092c0 	.word	0x000092c0
 8004a84:	50000400 	.word	0x50000400
 8004a88:	50000800 	.word	0x50000800

08004a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a90:	b672      	cpsid	i
}
 8004a92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004a94:	46c0      	nop			@ (mov r8, r8)
 8004a96:	e7fd      	b.n	8004a94 <Error_Handler+0x8>

08004a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <HAL_MspInit+0x44>)
 8004aa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004adc <HAL_MspInit+0x44>)
 8004aa4:	2180      	movs	r1, #128	@ 0x80
 8004aa6:	0549      	lsls	r1, r1, #21
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aac:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <HAL_MspInit+0x44>)
 8004aae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ab0:	2380      	movs	r3, #128	@ 0x80
 8004ab2:	055b      	lsls	r3, r3, #21
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aba:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <HAL_MspInit+0x44>)
 8004abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004abe:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <HAL_MspInit+0x44>)
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_MspInit+0x44>)
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	2201      	movs	r2, #1
 8004acc:	4013      	ands	r3, r2
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	40021000 	.word	0x40021000

08004ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b09b      	sub	sp, #108	@ 0x6c
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae8:	2354      	movs	r3, #84	@ 0x54
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	0018      	movs	r0, r3
 8004aee:	2314      	movs	r3, #20
 8004af0:	001a      	movs	r2, r3
 8004af2:	2100      	movs	r1, #0
 8004af4:	f009 fa08 	bl	800df08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004af8:	2410      	movs	r4, #16
 8004afa:	193b      	adds	r3, r7, r4
 8004afc:	0018      	movs	r0, r3
 8004afe:	2344      	movs	r3, #68	@ 0x44
 8004b00:	001a      	movs	r2, r3
 8004b02:	2100      	movs	r1, #0
 8004b04:	f009 fa00 	bl	800df08 <memset>
  if(hadc->Instance==ADC1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a20      	ldr	r2, [pc, #128]	@ (8004b90 <HAL_ADC_MspInit+0xb0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d139      	bne.n	8004b86 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b12:	193b      	adds	r3, r7, r4
 8004b14:	2280      	movs	r2, #128	@ 0x80
 8004b16:	01d2      	lsls	r2, r2, #7
 8004b18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004b1a:	193b      	adds	r3, r7, r4
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b20:	193b      	adds	r3, r7, r4
 8004b22:	0018      	movs	r0, r3
 8004b24:	f002 ffe8 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004b2c:	f7ff ffae 	bl	8004a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b30:	4b18      	ldr	r3, [pc, #96]	@ (8004b94 <HAL_ADC_MspInit+0xb4>)
 8004b32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b34:	4b17      	ldr	r3, [pc, #92]	@ (8004b94 <HAL_ADC_MspInit+0xb4>)
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	0349      	lsls	r1, r1, #13
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <HAL_ADC_MspInit+0xb4>)
 8004b40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b42:	2380      	movs	r3, #128	@ 0x80
 8004b44:	035b      	lsls	r3, r3, #13
 8004b46:	4013      	ands	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4c:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <HAL_ADC_MspInit+0xb4>)
 8004b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b50:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_ADC_MspInit+0xb4>)
 8004b52:	2101      	movs	r1, #1
 8004b54:	430a      	orrs	r2, r1
 8004b56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b58:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <HAL_ADC_MspInit+0xb4>)
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b64:	2154      	movs	r1, #84	@ 0x54
 8004b66:	187b      	adds	r3, r7, r1
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	2200      	movs	r2, #0
 8004b76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b78:	187a      	adds	r2, r7, r1
 8004b7a:	23a0      	movs	r3, #160	@ 0xa0
 8004b7c:	05db      	lsls	r3, r3, #23
 8004b7e:	0011      	movs	r1, r2
 8004b80:	0018      	movs	r0, r3
 8004b82:	f001 f8e3 	bl	8005d4c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b01b      	add	sp, #108	@ 0x6c
 8004b8c:	bd90      	pop	{r4, r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	40012400 	.word	0x40012400
 8004b94:	40021000 	.word	0x40021000

08004b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b09b      	sub	sp, #108	@ 0x6c
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba0:	2354      	movs	r3, #84	@ 0x54
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	2314      	movs	r3, #20
 8004ba8:	001a      	movs	r2, r3
 8004baa:	2100      	movs	r1, #0
 8004bac:	f009 f9ac 	bl	800df08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bb0:	2410      	movs	r4, #16
 8004bb2:	193b      	adds	r3, r7, r4
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	2344      	movs	r3, #68	@ 0x44
 8004bb8:	001a      	movs	r2, r3
 8004bba:	2100      	movs	r1, #0
 8004bbc:	f009 f9a4 	bl	800df08 <memset>
  if(hi2c->Instance==I2C1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <HAL_I2C_MspInit+0xbc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d13f      	bne.n	8004c4a <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	2220      	movs	r2, #32
 8004bce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004bd0:	193b      	adds	r3, r7, r4
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bd6:	193b      	adds	r3, r7, r4
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f002 ff8d 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8004bde:	1e03      	subs	r3, r0, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004be2:	f7ff ff53 	bl	8004a8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c58 <HAL_I2C_MspInit+0xc0>)
 8004be8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <HAL_I2C_MspInit+0xc0>)
 8004bec:	2101      	movs	r1, #1
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004bf2:	4b19      	ldr	r3, [pc, #100]	@ (8004c58 <HAL_I2C_MspInit+0xc0>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004bfe:	2154      	movs	r1, #84	@ 0x54
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	22c0      	movs	r2, #192	@ 0xc0
 8004c04:	00d2      	lsls	r2, r2, #3
 8004c06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c08:	187b      	adds	r3, r7, r1
 8004c0a:	2212      	movs	r2, #18
 8004c0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	187b      	adds	r3, r7, r1
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	2200      	movs	r2, #0
 8004c18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c20:	187a      	adds	r2, r7, r1
 8004c22:	23a0      	movs	r3, #160	@ 0xa0
 8004c24:	05db      	lsls	r3, r3, #23
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f001 f88f 	bl	8005d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <HAL_I2C_MspInit+0xc0>)
 8004c30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_I2C_MspInit+0xc0>)
 8004c34:	2180      	movs	r1, #128	@ 0x80
 8004c36:	0389      	lsls	r1, r1, #14
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <HAL_I2C_MspInit+0xc0>)
 8004c3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	039b      	lsls	r3, r3, #14
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b01b      	add	sp, #108	@ 0x6c
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	40005400 	.word	0x40005400
 8004c58:	40021000 	.word	0x40021000

08004c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b08b      	sub	sp, #44	@ 0x2c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c64:	2414      	movs	r4, #20
 8004c66:	193b      	adds	r3, r7, r4
 8004c68:	0018      	movs	r0, r3
 8004c6a:	2314      	movs	r3, #20
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f009 f94a 	bl	800df08 <memset>
  if(hspi->Instance==SPI1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <HAL_SPI_MspInit+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d151      	bne.n	8004d22 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c82:	4b2b      	ldr	r3, [pc, #172]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004c84:	2180      	movs	r1, #128	@ 0x80
 8004c86:	0149      	lsls	r1, r1, #5
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c8c:	4b28      	ldr	r3, [pc, #160]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004c8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	015b      	lsls	r3, r3, #5
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c9a:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c9e:	4b24      	ldr	r3, [pc, #144]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004ca6:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004caa:	2201      	movs	r2, #1
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004cb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004cb8:	2102      	movs	r1, #2
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d30 <HAL_SPI_MspInit+0xd4>)
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	2202      	movs	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd6:	193b      	adds	r3, r7, r4
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cdc:	193b      	adds	r3, r7, r4
 8004cde:	2200      	movs	r2, #0
 8004ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce8:	193a      	adds	r2, r7, r4
 8004cea:	23a0      	movs	r3, #160	@ 0xa0
 8004cec:	05db      	lsls	r3, r3, #23
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f001 f82b 	bl	8005d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004cf6:	0021      	movs	r1, r4
 8004cf8:	187b      	adds	r3, r7, r1
 8004cfa:	2230      	movs	r2, #48	@ 0x30
 8004cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfe:	187b      	adds	r3, r7, r1
 8004d00:	2202      	movs	r2, #2
 8004d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	2205      	movs	r2, #5
 8004d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	4a06      	ldr	r2, [pc, #24]	@ (8004d34 <HAL_SPI_MspInit+0xd8>)
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	0010      	movs	r0, r2
 8004d1e:	f001 f815 	bl	8005d4c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b00b      	add	sp, #44	@ 0x2c
 8004d28:	bd90      	pop	{r4, r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	40013000 	.word	0x40013000
 8004d30:	40021000 	.word	0x40021000
 8004d34:	50000400 	.word	0x50000400

08004d38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <HAL_TIM_PWM_MspInit+0x34>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10b      	bne.n	8004d62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_TIM_PWM_MspInit+0x38>)
 8004d4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d4e:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <HAL_TIM_PWM_MspInit+0x38>)
 8004d50:	2102      	movs	r1, #2
 8004d52:	430a      	orrs	r2, r1
 8004d54:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_TIM_PWM_MspInit+0x38>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40021000 	.word	0x40021000

08004d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b089      	sub	sp, #36	@ 0x24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	240c      	movs	r4, #12
 8004d7e:	193b      	adds	r3, r7, r4
 8004d80:	0018      	movs	r0, r3
 8004d82:	2314      	movs	r3, #20
 8004d84:	001a      	movs	r2, r3
 8004d86:	2100      	movs	r1, #0
 8004d88:	f009 f8be 	bl	800df08 <memset>
  if(htim->Instance==TIM3)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a14      	ldr	r2, [pc, #80]	@ (8004de4 <HAL_TIM_MspPostInit+0x70>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d121      	bne.n	8004dda <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_TIM_MspPostInit+0x74>)
 8004d98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d9a:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <HAL_TIM_MspPostInit+0x74>)
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004da2:	4b11      	ldr	r3, [pc, #68]	@ (8004de8 <HAL_TIM_MspPostInit+0x74>)
 8004da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da6:	2202      	movs	r2, #2
 8004da8:	4013      	ands	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dae:	0021      	movs	r1, r4
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	2203      	movs	r2, #3
 8004db4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2202      	movs	r2, #2
 8004dba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	2202      	movs	r2, #2
 8004dcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	4a06      	ldr	r2, [pc, #24]	@ (8004dec <HAL_TIM_MspPostInit+0x78>)
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	0010      	movs	r0, r2
 8004dd6:	f000 ffb9 	bl	8005d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b009      	add	sp, #36	@ 0x24
 8004de0:	bd90      	pop	{r4, r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40021000 	.word	0x40021000
 8004dec:	50000400 	.word	0x50000400

08004df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b09b      	sub	sp, #108	@ 0x6c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df8:	2354      	movs	r3, #84	@ 0x54
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	2314      	movs	r3, #20
 8004e00:	001a      	movs	r2, r3
 8004e02:	2100      	movs	r1, #0
 8004e04:	f009 f880 	bl	800df08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e08:	2410      	movs	r4, #16
 8004e0a:	193b      	adds	r3, r7, r4
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	2344      	movs	r3, #68	@ 0x44
 8004e10:	001a      	movs	r2, r3
 8004e12:	2100      	movs	r1, #0
 8004e14:	f009 f878 	bl	800df08 <memset>
  if(huart->Instance==USART3)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a21      	ldr	r2, [pc, #132]	@ (8004ea4 <HAL_UART_MspInit+0xb4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d13c      	bne.n	8004e9c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004e22:	193b      	adds	r3, r7, r4
 8004e24:	2280      	movs	r2, #128	@ 0x80
 8004e26:	0252      	lsls	r2, r2, #9
 8004e28:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f002 fe63 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8004e32:	1e03      	subs	r3, r0, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_UART_MspInit+0x4a>
    {
      Error_Handler();
 8004e36:	f7ff fe29 	bl	8004a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <HAL_UART_MspInit+0xb8>)
 8004e3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <HAL_UART_MspInit+0xb8>)
 8004e40:	2180      	movs	r1, #128	@ 0x80
 8004e42:	02c9      	lsls	r1, r1, #11
 8004e44:	430a      	orrs	r2, r1
 8004e46:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e48:	4b17      	ldr	r3, [pc, #92]	@ (8004ea8 <HAL_UART_MspInit+0xb8>)
 8004e4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	02db      	lsls	r3, r3, #11
 8004e50:	4013      	ands	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e56:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <HAL_UART_MspInit+0xb8>)
 8004e58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ea8 <HAL_UART_MspInit+0xb8>)
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e62:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <HAL_UART_MspInit+0xb8>)
 8004e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e6e:	2154      	movs	r1, #84	@ 0x54
 8004e70:	187b      	adds	r3, r7, r1
 8004e72:	22c0      	movs	r2, #192	@ 0xc0
 8004e74:	0112      	lsls	r2, r2, #4
 8004e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	187b      	adds	r3, r7, r1
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e84:	187b      	adds	r3, r7, r1
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	2207      	movs	r2, #7
 8004e8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	4a06      	ldr	r2, [pc, #24]	@ (8004eac <HAL_UART_MspInit+0xbc>)
 8004e94:	0019      	movs	r1, r3
 8004e96:	0010      	movs	r0, r2
 8004e98:	f000 ff58 	bl	8005d4c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b01b      	add	sp, #108	@ 0x6c
 8004ea2:	bd90      	pop	{r4, r7, pc}
 8004ea4:	40004800 	.word	0x40004800
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	50000400 	.word	0x50000400

08004eb0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	e7fd      	b.n	8004eb4 <NMI_Handler+0x4>

08004eb8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	e7fd      	b.n	8004ebc <HardFault_Handler+0x4>

08004ec0 <SVC_Handler>:

/**
 * @brief This function handles System service call via SVC instruction.
 */
void SVC_Handler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8004ed8:	f000 fa0c 	bl	80052f4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8004edc:	46c0      	nop			@ (mov r8, r8)
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <EXTI4_15_IRQHandler>:

/**
 * @brief This function handles EXTI line 4 to 15 interrupts.
 */
void EXTI4_15_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_15_IRQn 0 */
	sx126x_rx_buffer_status_t rx_status;
	sx126x_pkt_status_lora_t pkt_status;

	// Get RX buffer status
	if (sx126x_get_rx_buffer_status(NULL, &rx_status) != SX126X_STATUS_OK)
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	0019      	movs	r1, r3
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f007 fdd8 	bl	800caa4 <sx126x_get_rx_buffer_status>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d016      	beq.n	8004f26 <EXTI4_15_IRQHandler+0x42>
	{
		printf("Failed to get RX buffer status\n");
 8004ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff8 <EXTI4_15_IRQHandler+0x114>)
 8004efa:	0018      	movs	r0, r3
 8004efc:	f008 feb0 	bl	800dc60 <puts>

		// Re-init RX to try again
		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear buffer
 8004f00:	4b3e      	ldr	r3, [pc, #248]	@ (8004ffc <EXTI4_15_IRQHandler+0x118>)
 8004f02:	2250      	movs	r2, #80	@ 0x50
 8004f04:	2100      	movs	r1, #0
 8004f06:	0018      	movs	r0, r3
 8004f08:	f008 fffe 	bl	800df08 <memset>
		sx126x_clear_irq_status(NULL, SX126X_IRQ_RX_DONE); // Clear IRQ
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f007 fc6c 	bl	800c7ec <sx126x_clear_irq_status>
		sx126x_cfg_rx_boosted(NULL, true); // Increase sensitivity
 8004f14:	2101      	movs	r1, #1
 8004f16:	2000      	movs	r0, #0
 8004f18:	f007 fe66 	bl	800cbe8 <sx126x_cfg_rx_boosted>
		sx126x_set_rx(NULL, SX126X_RX_SINGLE_MODE);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f007 fabd 	bl	800c49e <sx126x_set_rx>
 8004f24:	e05e      	b.n	8004fe4 <EXTI4_15_IRQHandler+0x100>
	}
	else if (rx_status.pld_len_in_bytes != CYPHERTEXT_LENGTH + 16)
 8004f26:	1d3b      	adds	r3, r7, #4
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b50      	cmp	r3, #80	@ 0x50
 8004f2c:	d016      	beq.n	8004f5c <EXTI4_15_IRQHandler+0x78>
	{
		printf("Payload size exceeds buffer size\n");
 8004f2e:	4b34      	ldr	r3, [pc, #208]	@ (8005000 <EXTI4_15_IRQHandler+0x11c>)
 8004f30:	0018      	movs	r0, r3
 8004f32:	f008 fe95 	bl	800dc60 <puts>

		// Re-init RX to try again
		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear buffer
 8004f36:	4b31      	ldr	r3, [pc, #196]	@ (8004ffc <EXTI4_15_IRQHandler+0x118>)
 8004f38:	2250      	movs	r2, #80	@ 0x50
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f008 ffe3 	bl	800df08 <memset>
		sx126x_clear_irq_status(NULL, SX126X_IRQ_RX_DONE); // Clear IRQ
 8004f42:	2102      	movs	r1, #2
 8004f44:	2000      	movs	r0, #0
 8004f46:	f007 fc51 	bl	800c7ec <sx126x_clear_irq_status>
		sx126x_cfg_rx_boosted(NULL, true); // Increase sensitivity
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f007 fe4b 	bl	800cbe8 <sx126x_cfg_rx_boosted>
		sx126x_set_rx(NULL, SX126X_RX_SINGLE_MODE);
 8004f52:	2100      	movs	r1, #0
 8004f54:	2000      	movs	r0, #0
 8004f56:	f007 faa2 	bl	800c49e <sx126x_set_rx>
 8004f5a:	e043      	b.n	8004fe4 <EXTI4_15_IRQHandler+0x100>
	}
	else if (sx126x_read_buffer(NULL, rx_status.buffer_start_pointer, rx_buffer, rx_status.pld_len_in_bytes) != SX126X_STATUS_OK)
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	7859      	ldrb	r1, [r3, #1]
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	4a25      	ldr	r2, [pc, #148]	@ (8004ffc <EXTI4_15_IRQHandler+0x118>)
 8004f66:	2000      	movs	r0, #0
 8004f68:	f007 fbc2 	bl	800c6f0 <sx126x_read_buffer>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d016      	beq.n	8004f9e <EXTI4_15_IRQHandler+0xba>
	{
		printf("Failed to read RX buffer\n");
 8004f70:	4b24      	ldr	r3, [pc, #144]	@ (8005004 <EXTI4_15_IRQHandler+0x120>)
 8004f72:	0018      	movs	r0, r3
 8004f74:	f008 fe74 	bl	800dc60 <puts>

		// Re-init RX to try again
		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear buffer
 8004f78:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <EXTI4_15_IRQHandler+0x118>)
 8004f7a:	2250      	movs	r2, #80	@ 0x50
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f008 ffc2 	bl	800df08 <memset>
		sx126x_clear_irq_status(NULL, SX126X_IRQ_RX_DONE); // Clear IRQ
 8004f84:	2102      	movs	r1, #2
 8004f86:	2000      	movs	r0, #0
 8004f88:	f007 fc30 	bl	800c7ec <sx126x_clear_irq_status>
		sx126x_cfg_rx_boosted(NULL, true); // Increase sensitivity
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f007 fe2a 	bl	800cbe8 <sx126x_cfg_rx_boosted>
		sx126x_set_rx(NULL, SX126X_RX_SINGLE_MODE);
 8004f94:	2100      	movs	r1, #0
 8004f96:	2000      	movs	r0, #0
 8004f98:	f007 fa81 	bl	800c49e <sx126x_set_rx>
 8004f9c:	e022      	b.n	8004fe4 <EXTI4_15_IRQHandler+0x100>
	}
	else
	{
		// Process received data
		process_received_message(rx_buffer, rx_status.pld_len_in_bytes); // Decrypt and extract the text
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <EXTI4_15_IRQHandler+0x118>)
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7fe fdb1 	bl	8003b10 <process_received_message>

		if (sx126x_get_lora_pkt_status(NULL, &pkt_status) == SX126X_STATUS_OK)
 8004fae:	003b      	movs	r3, r7
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f007 fda2 	bl	800cafc <sx126x_get_lora_pkt_status>
		{
			//printf("RSSI: %i dBm, SNR: %i dB\n", pkt_status.rssi_pkt_in_dbm, pkt_status.snr_pkt_in_db);
		}

		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear buffer
 8004fb8:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <EXTI4_15_IRQHandler+0x118>)
 8004fba:	2250      	movs	r2, #80	@ 0x50
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f008 ffa2 	bl	800df08 <memset>
		sx126x_clear_irq_status(NULL, SX126X_IRQ_RX_DONE); // Clear IRQ
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f007 fc10 	bl	800c7ec <sx126x_clear_irq_status>

		if (command_received == 0) // Invalid / wrong key
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <EXTI4_15_IRQHandler+0x124>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <EXTI4_15_IRQHandler+0x100>
		{
			// Re-init RX to try again
			sx126x_cfg_rx_boosted(NULL, true); // Increase sensitivity
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f007 fe06 	bl	800cbe8 <sx126x_cfg_rx_boosted>
			sx126x_set_rx(NULL, SX126X_RX_SINGLE_MODE);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f007 fa5d 	bl	800c49e <sx126x_set_rx>
		}

	}

	/* USER CODE END EXTI4_15_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8004fe4:	2380      	movs	r3, #128	@ 0x80
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f001 f879 	bl	80060e0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_15_IRQn 1 */

	/* USER CODE END EXTI4_15_IRQn 1 */
}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b002      	add	sp, #8
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	08011bd0 	.word	0x08011bd0
 8004ffc:	2000041c 	.word	0x2000041c
 8005000:	08011bf0 	.word	0x08011bf0
 8005004:	08011c14 	.word	0x08011c14
 8005008:	20000418 	.word	0x20000418

0800500c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  return 1;
 8005010:	2301      	movs	r3, #1
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_kill>:

int _kill(int pid, int sig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005022:	f008 ffcb 	bl	800dfbc <__errno>
 8005026:	0003      	movs	r3, r0
 8005028:	2216      	movs	r2, #22
 800502a:	601a      	str	r2, [r3, #0]
  return -1;
 800502c:	2301      	movs	r3, #1
 800502e:	425b      	negs	r3, r3
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b002      	add	sp, #8
 8005036:	bd80      	pop	{r7, pc}

08005038 <_exit>:

void _exit (int status)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005040:	2301      	movs	r3, #1
 8005042:	425a      	negs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0011      	movs	r1, r2
 8005048:	0018      	movs	r0, r3
 800504a:	f7ff ffe5 	bl	8005018 <_kill>
  while (1) {}    /* Make sure we hang here */
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	e7fd      	b.n	800504e <_exit+0x16>

08005052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e00a      	b.n	800507a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005064:	e000      	b.n	8005068 <_read+0x16>
 8005066:	bf00      	nop
 8005068:	0001      	movs	r1, r0
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	60ba      	str	r2, [r7, #8]
 8005070:	b2ca      	uxtb	r2, r1
 8005072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	3301      	adds	r3, #1
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	dbf0      	blt.n	8005064 <_read+0x12>
  }

  return len;
 8005082:	687b      	ldr	r3, [r7, #4]
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b006      	add	sp, #24
 800508a:	bd80      	pop	{r7, pc}

0800508c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e009      	b.n	80050b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	60ba      	str	r2, [r7, #8]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	0018      	movs	r0, r3
 80050a8:	e000      	b.n	80050ac <_write+0x20>
 80050aa:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3301      	adds	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	dbf1      	blt.n	800509e <_write+0x12>
  }
  return len;
 80050ba:	687b      	ldr	r3, [r7, #4]
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b006      	add	sp, #24
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_close>:

int _close(int file)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050cc:	2301      	movs	r3, #1
 80050ce:	425b      	negs	r3, r3
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2280      	movs	r2, #128	@ 0x80
 80050e6:	0192      	lsls	r2, r2, #6
 80050e8:	605a      	str	r2, [r3, #4]
  return 0;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_isatty>:

int _isatty(int file)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80050fc:	2301      	movs	r3, #1
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b002      	add	sp, #8
 8005104:	bd80      	pop	{r7, pc}

08005106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}

0800511c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005124:	4a14      	ldr	r2, [pc, #80]	@ (8005178 <_sbrk+0x5c>)
 8005126:	4b15      	ldr	r3, [pc, #84]	@ (800517c <_sbrk+0x60>)
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005130:	4b13      	ldr	r3, [pc, #76]	@ (8005180 <_sbrk+0x64>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005138:	4b11      	ldr	r3, [pc, #68]	@ (8005180 <_sbrk+0x64>)
 800513a:	4a12      	ldr	r2, [pc, #72]	@ (8005184 <_sbrk+0x68>)
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <_sbrk+0x64>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800514c:	f008 ff36 	bl	800dfbc <__errno>
 8005150:	0003      	movs	r3, r0
 8005152:	220c      	movs	r2, #12
 8005154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005156:	2301      	movs	r3, #1
 8005158:	425b      	negs	r3, r3
 800515a:	e009      	b.n	8005170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800515c:	4b08      	ldr	r3, [pc, #32]	@ (8005180 <_sbrk+0x64>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005162:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <_sbrk+0x64>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	18d2      	adds	r2, r2, r3
 800516a:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <_sbrk+0x64>)
 800516c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b006      	add	sp, #24
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20008000 	.word	0x20008000
 800517c:	00000400 	.word	0x00000400
 8005180:	2000046c 	.word	0x2000046c
 8005184:	200005c8 	.word	0x200005c8

08005188 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800518e:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <SystemInit+0x50>)
 8005190:	2280      	movs	r2, #128	@ 0x80
 8005192:	0512      	lsls	r2, r2, #20
 8005194:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8005196:	4a11      	ldr	r2, [pc, #68]	@ (80051dc <SystemInit+0x54>)
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	58d3      	ldr	r3, [r2, r3]
 800519c:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800519e:	4b0f      	ldr	r3, [pc, #60]	@ (80051dc <SystemInit+0x54>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	025b      	lsls	r3, r3, #9
 80051aa:	4013      	ands	r3, r2
 80051ac:	d010      	beq.n	80051d0 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	22ff      	movs	r2, #255	@ 0xff
 80051b2:	4013      	ands	r3, r2
 80051b4:	2bcc      	cmp	r3, #204	@ 0xcc
 80051b6:	d00b      	beq.n	80051d0 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	22ff      	movs	r2, #255	@ 0xff
 80051bc:	4013      	ands	r3, r2
 80051be:	2baa      	cmp	r3, #170	@ 0xaa
 80051c0:	d006      	beq.n	80051d0 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <SystemInit+0x54>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <SystemInit+0x54>)
 80051c8:	2180      	movs	r1, #128	@ 0x80
 80051ca:	02c9      	lsls	r1, r1, #11
 80051cc:	430a      	orrs	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80051d0:	46c0      	nop			@ (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	e000ed00 	.word	0xe000ed00
 80051dc:	40022000 	.word	0x40022000

080051e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051e0:	480d      	ldr	r0, [pc, #52]	@ (8005218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80051e4:	f7ff ffd0 	bl	8005188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051e8:	480c      	ldr	r0, [pc, #48]	@ (800521c <LoopForever+0x6>)
  ldr r1, =_edata
 80051ea:	490d      	ldr	r1, [pc, #52]	@ (8005220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005224 <LoopForever+0xe>)
  movs r3, #0
 80051ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f0:	e002      	b.n	80051f8 <LoopCopyDataInit>

080051f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051f6:	3304      	adds	r3, #4

080051f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051fc:	d3f9      	bcc.n	80051f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005200:	4c0a      	ldr	r4, [pc, #40]	@ (800522c <LoopForever+0x16>)
  movs r3, #0
 8005202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005204:	e001      	b.n	800520a <LoopFillZerobss>

08005206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005208:	3204      	adds	r2, #4

0800520a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800520a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800520c:	d3fb      	bcc.n	8005206 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800520e:	f008 fedb 	bl	800dfc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005212:	f7fe fd99 	bl	8003d48 <main>

08005216 <LoopForever>:

LoopForever:
  b LoopForever
 8005216:	e7fe      	b.n	8005216 <LoopForever>
  ldr   r0, =_estack
 8005218:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800521c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005220:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005224:	080126c8 	.word	0x080126c8
  ldr r2, =_sbss
 8005228:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800522c:	200005c4 	.word	0x200005c4

08005230 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005230:	e7fe      	b.n	8005230 <ADC_COMP1_2_IRQHandler>

08005232 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005238:	1dfb      	adds	r3, r7, #7
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800523e:	2003      	movs	r0, #3
 8005240:	f000 f80e 	bl	8005260 <HAL_InitTick>
 8005244:	1e03      	subs	r3, r0, #0
 8005246:	d003      	beq.n	8005250 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005248:	1dfb      	adds	r3, r7, #7
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e001      	b.n	8005254 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005250:	f7ff fc22 	bl	8004a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	781b      	ldrb	r3, [r3, #0]
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b002      	add	sp, #8
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005268:	230f      	movs	r3, #15
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005270:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <HAL_InitTick+0x88>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02b      	beq.n	80052d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005278:	4b1c      	ldr	r3, [pc, #112]	@ (80052ec <HAL_InitTick+0x8c>)
 800527a:	681c      	ldr	r4, [r3, #0]
 800527c:	4b1a      	ldr	r3, [pc, #104]	@ (80052e8 <HAL_InitTick+0x88>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0019      	movs	r1, r3
 8005282:	23fa      	movs	r3, #250	@ 0xfa
 8005284:	0098      	lsls	r0, r3, #2
 8005286:	f7fa ff5b 	bl	8000140 <__udivsi3>
 800528a:	0003      	movs	r3, r0
 800528c:	0019      	movs	r1, r3
 800528e:	0020      	movs	r0, r4
 8005290:	f7fa ff56 	bl	8000140 <__udivsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	0018      	movs	r0, r3
 8005298:	f000 fd4b 	bl	8005d32 <HAL_SYSTICK_Config>
 800529c:	1e03      	subs	r3, r0, #0
 800529e:	d112      	bne.n	80052c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d80a      	bhi.n	80052bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	2301      	movs	r3, #1
 80052aa:	425b      	negs	r3, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 fd1a 	bl	8005ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <HAL_InitTick+0x90>)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e00d      	b.n	80052d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80052bc:	230f      	movs	r3, #15
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e008      	b.n	80052d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052c6:	230f      	movs	r3, #15
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	2201      	movs	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e003      	b.n	80052d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052d0:	230f      	movs	r3, #15
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80052d8:	230f      	movs	r3, #15
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	781b      	ldrb	r3, [r3, #0]
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b005      	add	sp, #20
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	2000001c 	.word	0x2000001c
 80052ec:	20000014 	.word	0x20000014
 80052f0:	20000018 	.word	0x20000018

080052f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052f8:	4b04      	ldr	r3, [pc, #16]	@ (800530c <HAL_IncTick+0x18>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <HAL_IncTick+0x1c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	18d2      	adds	r2, r2, r3
 8005302:	4b02      	ldr	r3, [pc, #8]	@ (800530c <HAL_IncTick+0x18>)
 8005304:	601a      	str	r2, [r3, #0]
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000470 	.word	0x20000470
 8005310:	2000001c 	.word	0x2000001c

08005314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  return uwTick;
 8005318:	4b02      	ldr	r3, [pc, #8]	@ (8005324 <HAL_GetTick+0x10>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	20000470 	.word	0x20000470

08005328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005330:	f7ff fff0 	bl	8005314 <HAL_GetTick>
 8005334:	0003      	movs	r3, r0
 8005336:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	d004      	beq.n	800534c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005342:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <HAL_Delay+0x40>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	18d3      	adds	r3, r2, r3
 800534a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800534c:	46c0      	nop			@ (mov r8, r8)
 800534e:	f7ff ffe1 	bl	8005314 <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	429a      	cmp	r2, r3
 800535c:	d8f7      	bhi.n	800534e <HAL_Delay+0x26>
  {
  }
}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	46c0      	nop			@ (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b004      	add	sp, #16
 8005366:	bd80      	pop	{r7, pc}
 8005368:	2000001c 	.word	0x2000001c

0800536c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a05      	ldr	r2, [pc, #20]	@ (8005390 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800537c:	401a      	ands	r2, r3
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	46bd      	mov	sp, r7
 800538a:	b002      	add	sp, #8
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	fe3fffff 	.word	0xfe3fffff

08005394 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	23e0      	movs	r3, #224	@ 0xe0
 80053a2:	045b      	lsls	r3, r3, #17
 80053a4:	4013      	ands	r3, r2
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b002      	add	sp, #8
 80053ac:	bd80      	pop	{r7, pc}

080053ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	2104      	movs	r1, #4
 80053c2:	400a      	ands	r2, r1
 80053c4:	2107      	movs	r1, #7
 80053c6:	4091      	lsls	r1, r2
 80053c8:	000a      	movs	r2, r1
 80053ca:	43d2      	mvns	r2, r2
 80053cc:	401a      	ands	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2104      	movs	r1, #4
 80053d2:	400b      	ands	r3, r1
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4099      	lsls	r1, r3
 80053d8:	000b      	movs	r3, r1
 80053da:	431a      	orrs	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80053e0:	46c0      	nop			@ (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b004      	add	sp, #16
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	2104      	movs	r1, #4
 80053fa:	400a      	ands	r2, r1
 80053fc:	2107      	movs	r1, #7
 80053fe:	4091      	lsls	r1, r2
 8005400:	000a      	movs	r2, r1
 8005402:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2104      	movs	r1, #4
 8005408:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800540a:	40da      	lsrs	r2, r3
 800540c:	0013      	movs	r3, r2
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b002      	add	sp, #8
 8005414:	bd80      	pop	{r7, pc}

08005416 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	211f      	movs	r1, #31
 800542a:	400a      	ands	r2, r1
 800542c:	210f      	movs	r1, #15
 800542e:	4091      	lsls	r1, r2
 8005430:	000a      	movs	r2, r1
 8005432:	43d2      	mvns	r2, r2
 8005434:	401a      	ands	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	0e9b      	lsrs	r3, r3, #26
 800543a:	210f      	movs	r1, #15
 800543c:	4019      	ands	r1, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	201f      	movs	r0, #31
 8005442:	4003      	ands	r3, r0
 8005444:	4099      	lsls	r1, r3
 8005446:	000b      	movs	r3, r1
 8005448:	431a      	orrs	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	46bd      	mov	sp, r7
 8005452:	b004      	add	sp, #16
 8005454:	bd80      	pop	{r7, pc}

08005456 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	025b      	lsls	r3, r3, #9
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005470:	46c0      	nop			@ (mov r8, r8)
 8005472:	46bd      	mov	sp, r7
 8005474:	b002      	add	sp, #8
 8005476:	bd80      	pop	{r7, pc}

08005478 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	0252      	lsls	r2, r2, #9
 800548a:	0a52      	lsrs	r2, r2, #9
 800548c:	43d2      	mvns	r2, r2
 800548e:	401a      	ands	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005494:	46c0      	nop			@ (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}

0800549c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	0212      	lsls	r2, r2, #8
 80054b0:	43d2      	mvns	r2, r2
 80054b2:	401a      	ands	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	400b      	ands	r3, r1
 80054bc:	4904      	ldr	r1, [pc, #16]	@ (80054d0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80054be:	400b      	ands	r3, r1
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b004      	add	sp, #16
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	7fffff00 	.word	0x7fffff00

080054d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a05      	ldr	r2, [pc, #20]	@ (80054f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	2280      	movs	r2, #128	@ 0x80
 80054e6:	0552      	lsls	r2, r2, #21
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b002      	add	sp, #8
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	6fffffe8 	.word	0x6fffffe8

080054fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	055b      	lsls	r3, r3, #21
 800550c:	401a      	ands	r2, r3
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	055b      	lsls	r3, r3, #21
 8005512:	429a      	cmp	r2, r3
 8005514:	d101      	bne.n	800551a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800551a:	2300      	movs	r3, #0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b002      	add	sp, #8
 8005522:	bd80      	pop	{r7, pc}

08005524 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2201      	movs	r2, #1
 8005532:	4013      	ands	r3, r2
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <LL_ADC_IsEnabled+0x18>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <LL_ADC_IsEnabled+0x1a>
 800553c:	2300      	movs	r3, #0
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b002      	add	sp, #8
 8005544:	bd80      	pop	{r7, pc}

08005546 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2204      	movs	r2, #4
 8005554:	4013      	ands	r3, r2
 8005556:	2b04      	cmp	r3, #4
 8005558:	d101      	bne.n	800555e <LL_ADC_REG_IsConversionOngoing+0x18>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800555e:	2300      	movs	r3, #0
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005570:	231f      	movs	r3, #31
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e17f      	b.n	800588e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff faa1 	bl	8004ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2254      	movs	r2, #84	@ 0x54
 80055a8:	2100      	movs	r1, #0
 80055aa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff ffa3 	bl	80054fc <LL_ADC_IsInternalRegulatorEnabled>
 80055b6:	1e03      	subs	r3, r0, #0
 80055b8:	d115      	bne.n	80055e6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	0018      	movs	r0, r3
 80055c0:	f7ff ff88 	bl	80054d4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055c4:	4bb4      	ldr	r3, [pc, #720]	@ (8005898 <HAL_ADC_Init+0x330>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	49b4      	ldr	r1, [pc, #720]	@ (800589c <HAL_ADC_Init+0x334>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7fa fdb8 	bl	8000140 <__udivsi3>
 80055d0:	0003      	movs	r3, r0
 80055d2:	3301      	adds	r3, #1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055d8:	e002      	b.n	80055e0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3b01      	subs	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f9      	bne.n	80055da <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7ff ff86 	bl	80054fc <LL_ADC_IsInternalRegulatorEnabled>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d10f      	bne.n	8005614 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	2210      	movs	r2, #16
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005604:	2201      	movs	r2, #1
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800560c:	231f      	movs	r3, #31
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff ff94 	bl	8005546 <LL_ADC_REG_IsConversionOngoing>
 800561e:	0003      	movs	r3, r0
 8005620:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	2210      	movs	r2, #16
 8005628:	4013      	ands	r3, r2
 800562a:	d000      	beq.n	800562e <HAL_ADC_Init+0xc6>
 800562c:	e122      	b.n	8005874 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d000      	beq.n	8005636 <HAL_ADC_Init+0xce>
 8005634:	e11e      	b.n	8005874 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	4a99      	ldr	r2, [pc, #612]	@ (80058a0 <HAL_ADC_Init+0x338>)
 800563c:	4013      	ands	r3, r2
 800563e:	2202      	movs	r2, #2
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0018      	movs	r0, r3
 800564c:	f7ff ff6a 	bl	8005524 <LL_ADC_IsEnabled>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d000      	beq.n	8005656 <HAL_ADC_Init+0xee>
 8005654:	e0ad      	b.n	80057b2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	7e1b      	ldrb	r3, [r3, #24]
 800565e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005660:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	7e5b      	ldrb	r3, [r3, #25]
 8005666:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005668:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7e9b      	ldrb	r3, [r3, #26]
 800566e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005670:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_ADC_Init+0x118>
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	e000      	b.n	8005682 <HAL_ADC_Init+0x11a>
 8005680:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005682:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005688:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da04      	bge.n	800569c <HAL_ADC_Init+0x134>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	e001      	b.n	80056a0 <HAL_ADC_Init+0x138>
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80056a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	212c      	movs	r1, #44	@ 0x2c
 80056a6:	5c5b      	ldrb	r3, [r3, r1]
 80056a8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80056aa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	5c9b      	ldrb	r3, [r3, r2]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d115      	bne.n	80056e8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7e9b      	ldrb	r3, [r3, #26]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	0252      	lsls	r2, r2, #9
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e00b      	b.n	80056e8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	2220      	movs	r2, #32
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e0:	2201      	movs	r2, #1
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056f4:	23e0      	movs	r3, #224	@ 0xe0
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056fe:	4313      	orrs	r3, r2
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a65      	ldr	r2, [pc, #404]	@ (80058a4 <HAL_ADC_Init+0x33c>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0f9b      	lsrs	r3, r3, #30
 8005722:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005728:	4313      	orrs	r3, r2
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	223c      	movs	r2, #60	@ 0x3c
 8005734:	5c9b      	ldrb	r3, [r3, r2]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d111      	bne.n	800575e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0f9b      	lsrs	r3, r3, #30
 8005740:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005746:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800574c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005752:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	2201      	movs	r2, #1
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	4a50      	ldr	r2, [pc, #320]	@ (80058a8 <HAL_ADC_Init+0x340>)
 8005766:	4013      	ands	r3, r2
 8005768:	0019      	movs	r1, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	430a      	orrs	r2, r1
 8005772:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	23c0      	movs	r3, #192	@ 0xc0
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	429a      	cmp	r2, r3
 800577e:	d018      	beq.n	80057b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	05db      	lsls	r3, r3, #23
 8005788:	429a      	cmp	r2, r3
 800578a:	d012      	beq.n	80057b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	429a      	cmp	r2, r3
 8005796:	d00c      	beq.n	80057b2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005798:	4b44      	ldr	r3, [pc, #272]	@ (80058ac <HAL_ADC_Init+0x344>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a44      	ldr	r2, [pc, #272]	@ (80058b0 <HAL_ADC_Init+0x348>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	23f0      	movs	r3, #240	@ 0xf0
 80057a8:	039b      	lsls	r3, r3, #14
 80057aa:	401a      	ands	r2, r3
 80057ac:	4b3f      	ldr	r3, [pc, #252]	@ (80058ac <HAL_ADC_Init+0x344>)
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ba:	001a      	movs	r2, r3
 80057bc:	2100      	movs	r1, #0
 80057be:	f7ff fdf6 	bl	80053ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	493a      	ldr	r1, [pc, #232]	@ (80058b4 <HAL_ADC_Init+0x34c>)
 80057cc:	001a      	movs	r2, r3
 80057ce:	f7ff fdee 	bl	80053ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2110      	movs	r1, #16
 80057e6:	4249      	negs	r1, r1
 80057e8:	430a      	orrs	r2, r1
 80057ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80057ec:	e018      	b.n	8005820 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	039b      	lsls	r3, r3, #14
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d112      	bne.n	8005820 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	3b01      	subs	r3, #1
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	221c      	movs	r2, #28
 800580a:	4013      	ands	r3, r2
 800580c:	2210      	movs	r2, #16
 800580e:	4252      	negs	r2, r2
 8005810:	409a      	lsls	r2, r3
 8005812:	0011      	movs	r1, r2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2100      	movs	r1, #0
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fdde 	bl	80053e8 <LL_ADC_GetSamplingTimeCommonChannels>
 800582c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005832:	429a      	cmp	r2, r3
 8005834:	d10b      	bne.n	800584e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005840:	2203      	movs	r2, #3
 8005842:	4393      	bics	r3, r2
 8005844:	2201      	movs	r2, #1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800584c:	e01c      	b.n	8005888 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	2212      	movs	r2, #18
 8005854:	4393      	bics	r3, r2
 8005856:	2210      	movs	r2, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005862:	2201      	movs	r2, #1
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800586a:	231f      	movs	r3, #31
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005872:	e009      	b.n	8005888 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	2210      	movs	r2, #16
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005880:	231f      	movs	r3, #31
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005888:	231f      	movs	r3, #31
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b008      	add	sp, #32
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	20000014 	.word	0x20000014
 800589c:	00030d40 	.word	0x00030d40
 80058a0:	fffffefd 	.word	0xfffffefd
 80058a4:	ffde0201 	.word	0xffde0201
 80058a8:	1ffffc02 	.word	0x1ffffc02
 80058ac:	40012708 	.word	0x40012708
 80058b0:	ffc3ffff 	.word	0xffc3ffff
 80058b4:	7fffff04 	.word	0x7fffff04

080058b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b08b      	sub	sp, #44	@ 0x2c
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058c2:	2327      	movs	r3, #39	@ 0x27
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2254      	movs	r2, #84	@ 0x54
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x24>
 80058d8:	2302      	movs	r3, #2
 80058da:	e141      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x2a8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2254      	movs	r2, #84	@ 0x54
 80058e0:	2101      	movs	r1, #1
 80058e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff fe2c 	bl	8005546 <LL_ADC_REG_IsConversionOngoing>
 80058ee:	1e03      	subs	r3, r0, #0
 80058f0:	d000      	beq.n	80058f4 <HAL_ADC_ConfigChannel+0x3c>
 80058f2:	e124      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d100      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x46>
 80058fc:	e0d8      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	2380      	movs	r3, #128	@ 0x80
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	429a      	cmp	r2, r3
 8005908:	d004      	beq.n	8005914 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800590e:	4a96      	ldr	r2, [pc, #600]	@ (8005b68 <HAL_ADC_ConfigChannel+0x2b0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	0019      	movs	r1, r3
 800591e:	0010      	movs	r0, r2
 8005920:	f7ff fd99 	bl	8005456 <LL_ADC_REG_SetSequencerChAdd>
 8005924:	e060      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	211f      	movs	r1, #31
 8005930:	400b      	ands	r3, r1
 8005932:	210f      	movs	r1, #15
 8005934:	4099      	lsls	r1, r3
 8005936:	000b      	movs	r3, r1
 8005938:	43db      	mvns	r3, r3
 800593a:	4013      	ands	r3, r2
 800593c:	001c      	movs	r4, r3
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	025b      	lsls	r3, r3, #9
 8005944:	0a5b      	lsrs	r3, r3, #9
 8005946:	d105      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x9c>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	0e9b      	lsrs	r3, r3, #26
 800594e:	221f      	movs	r2, #31
 8005950:	401a      	ands	r2, r3
 8005952:	e02e      	b.n	80059b2 <HAL_ADC_ConfigChannel+0xfa>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800595a:	231f      	movs	r3, #31
 800595c:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e00e      	b.n	8005988 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2201      	movs	r2, #1
 8005974:	4013      	ands	r3, r2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
    s--;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3b01      	subs	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ed      	bne.n	800596a <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	409a      	lsls	r2, r3
 8005994:	0013      	movs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
  return result;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 80059a2:	2320      	movs	r3, #32
 80059a4:	e004      	b.n	80059b0 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 80059a6:	69f8      	ldr	r0, [r7, #28]
 80059a8:	f7fa fd7e 	bl	80004a8 <__clzsi2>
 80059ac:	0003      	movs	r3, r0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	001a      	movs	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	211f      	movs	r1, #31
 80059b8:	400b      	ands	r3, r1
 80059ba:	409a      	lsls	r2, r3
 80059bc:	0013      	movs	r3, r2
 80059be:	0022      	movs	r2, r4
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d808      	bhi.n	80059e8 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	001a      	movs	r2, r3
 80059e4:	f7ff fd17 	bl	8005416 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	001a      	movs	r2, r3
 80059f6:	f7ff fd51 	bl	800549c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db00      	blt.n	8005a04 <HAL_ADC_ConfigChannel+0x14c>
 8005a02:	e0a6      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a04:	4b59      	ldr	r3, [pc, #356]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff fcc4 	bl	8005394 <LL_ADC_GetCommonPathInternalCh>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a56      	ldr	r2, [pc, #344]	@ (8005b70 <HAL_ADC_ConfigChannel+0x2b8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d122      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a22:	d11d      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2280      	movs	r2, #128	@ 0x80
 8005a28:	0412      	lsls	r2, r2, #16
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005a2e:	0019      	movs	r1, r3
 8005a30:	0010      	movs	r0, r2
 8005a32:	f7ff fc9b 	bl	800536c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a36:	4b4f      	ldr	r3, [pc, #316]	@ (8005b74 <HAL_ADC_ConfigChannel+0x2bc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	494f      	ldr	r1, [pc, #316]	@ (8005b78 <HAL_ADC_ConfigChannel+0x2c0>)
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f7fa fb7f 	bl	8000140 <__udivsi3>
 8005a42:	0003      	movs	r3, r0
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	0013      	movs	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a50:	e002      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f9      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a5e:	e078      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a45      	ldr	r2, [pc, #276]	@ (8005b7c <HAL_ADC_ConfigChannel+0x2c4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d10e      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a6a:	6a3a      	ldr	r2, [r7, #32]
 8005a6c:	2380      	movs	r3, #128	@ 0x80
 8005a6e:	045b      	lsls	r3, r3, #17
 8005a70:	4013      	ands	r3, r2
 8005a72:	d109      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2280      	movs	r2, #128	@ 0x80
 8005a78:	0452      	lsls	r2, r2, #17
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005a7e:	0019      	movs	r1, r3
 8005a80:	0010      	movs	r0, r2
 8005a82:	f7ff fc73 	bl	800536c <LL_ADC_SetCommonPathInternalCh>
 8005a86:	e064      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b80 <HAL_ADC_ConfigChannel+0x2c8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d15f      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	2380      	movs	r3, #128	@ 0x80
 8005a96:	03db      	lsls	r3, r3, #15
 8005a98:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005a9a:	d15a      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2280      	movs	r2, #128	@ 0x80
 8005aa0:	03d2      	lsls	r2, r2, #15
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	4a31      	ldr	r2, [pc, #196]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	0010      	movs	r0, r2
 8005aaa:	f7ff fc5f 	bl	800536c <LL_ADC_SetCommonPathInternalCh>
 8005aae:	e050      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	2380      	movs	r3, #128	@ 0x80
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d004      	beq.n	8005ac6 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005ac0:	4a29      	ldr	r2, [pc, #164]	@ (8005b68 <HAL_ADC_ConfigChannel+0x2b0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d107      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	0019      	movs	r1, r3
 8005ad0:	0010      	movs	r0, r2
 8005ad2:	f7ff fcd1 	bl	8005478 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da39      	bge.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ade:	4b23      	ldr	r3, [pc, #140]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff fc57 	bl	8005394 <LL_ADC_GetCommonPathInternalCh>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a20      	ldr	r2, [pc, #128]	@ (8005b70 <HAL_ADC_ConfigChannel+0x2b8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d108      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	4a23      	ldr	r2, [pc, #140]	@ (8005b84 <HAL_ADC_ConfigChannel+0x2cc>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	4a1c      	ldr	r2, [pc, #112]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005afc:	0019      	movs	r1, r3
 8005afe:	0010      	movs	r0, r2
 8005b00:	f7ff fc34 	bl	800536c <LL_ADC_SetCommonPathInternalCh>
 8005b04:	e025      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <HAL_ADC_ConfigChannel+0x2c4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <HAL_ADC_ConfigChannel+0x2d0>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005b18:	0019      	movs	r1, r3
 8005b1a:	0010      	movs	r0, r2
 8005b1c:	f7ff fc26 	bl	800536c <LL_ADC_SetCommonPathInternalCh>
 8005b20:	e017      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <HAL_ADC_ConfigChannel+0x2c8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d112      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <HAL_ADC_ConfigChannel+0x2d4>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	4a0e      	ldr	r2, [pc, #56]	@ (8005b6c <HAL_ADC_ConfigChannel+0x2b4>)
 8005b34:	0019      	movs	r1, r3
 8005b36:	0010      	movs	r0, r2
 8005b38:	f7ff fc18 	bl	800536c <LL_ADC_SetCommonPathInternalCh>
 8005b3c:	e009      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b42:	2220      	movs	r2, #32
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005b4a:	2327      	movs	r3, #39	@ 0x27
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2254      	movs	r2, #84	@ 0x54
 8005b56:	2100      	movs	r1, #0
 8005b58:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005b5a:	2327      	movs	r3, #39	@ 0x27
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	781b      	ldrb	r3, [r3, #0]
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b00b      	add	sp, #44	@ 0x2c
 8005b66:	bd90      	pop	{r4, r7, pc}
 8005b68:	80000004 	.word	0x80000004
 8005b6c:	40012708 	.word	0x40012708
 8005b70:	ac000800 	.word	0xac000800
 8005b74:	20000014 	.word	0x20000014
 8005b78:	00030d40 	.word	0x00030d40
 8005b7c:	b4002000 	.word	0xb4002000
 8005b80:	b0001000 	.word	0xb0001000
 8005b84:	ff7fffff 	.word	0xff7fffff
 8005b88:	feffffff 	.word	0xfeffffff
 8005b8c:	ffbfffff 	.word	0xffbfffff

08005b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	0002      	movs	r2, r0
 8005b98:	1dfb      	adds	r3, r7, #7
 8005b9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba2:	d809      	bhi.n	8005bb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	001a      	movs	r2, r3
 8005baa:	231f      	movs	r3, #31
 8005bac:	401a      	ands	r2, r3
 8005bae:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <__NVIC_EnableIRQ+0x30>)
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4091      	lsls	r1, r2
 8005bb4:	000a      	movs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	0002      	movs	r2, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	1dfb      	adds	r3, r7, #7
 8005bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005bd2:	1dfb      	adds	r3, r7, #7
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd8:	d828      	bhi.n	8005c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005bda:	4a2f      	ldr	r2, [pc, #188]	@ (8005c98 <__NVIC_SetPriority+0xd4>)
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b25b      	sxtb	r3, r3
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	33c0      	adds	r3, #192	@ 0xc0
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	589b      	ldr	r3, [r3, r2]
 8005bea:	1dfa      	adds	r2, r7, #7
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	0011      	movs	r1, r2
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	400a      	ands	r2, r1
 8005bf4:	00d2      	lsls	r2, r2, #3
 8005bf6:	21ff      	movs	r1, #255	@ 0xff
 8005bf8:	4091      	lsls	r1, r2
 8005bfa:	000a      	movs	r2, r1
 8005bfc:	43d2      	mvns	r2, r2
 8005bfe:	401a      	ands	r2, r3
 8005c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	019b      	lsls	r3, r3, #6
 8005c06:	22ff      	movs	r2, #255	@ 0xff
 8005c08:	401a      	ands	r2, r3
 8005c0a:	1dfb      	adds	r3, r7, #7
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	2303      	movs	r3, #3
 8005c12:	4003      	ands	r3, r0
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c18:	481f      	ldr	r0, [pc, #124]	@ (8005c98 <__NVIC_SetPriority+0xd4>)
 8005c1a:	1dfb      	adds	r3, r7, #7
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	430a      	orrs	r2, r1
 8005c24:	33c0      	adds	r3, #192	@ 0xc0
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005c2a:	e031      	b.n	8005c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c9c <__NVIC_SetPriority+0xd8>)
 8005c2e:	1dfb      	adds	r3, r7, #7
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	0019      	movs	r1, r3
 8005c34:	230f      	movs	r3, #15
 8005c36:	400b      	ands	r3, r1
 8005c38:	3b08      	subs	r3, #8
 8005c3a:	089b      	lsrs	r3, r3, #2
 8005c3c:	3306      	adds	r3, #6
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	18d3      	adds	r3, r2, r3
 8005c42:	3304      	adds	r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	1dfa      	adds	r2, r7, #7
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	0011      	movs	r1, r2
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	400a      	ands	r2, r1
 8005c50:	00d2      	lsls	r2, r2, #3
 8005c52:	21ff      	movs	r1, #255	@ 0xff
 8005c54:	4091      	lsls	r1, r2
 8005c56:	000a      	movs	r2, r1
 8005c58:	43d2      	mvns	r2, r2
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	22ff      	movs	r2, #255	@ 0xff
 8005c64:	401a      	ands	r2, r3
 8005c66:	1dfb      	adds	r3, r7, #7
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	4003      	ands	r3, r0
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c74:	4809      	ldr	r0, [pc, #36]	@ (8005c9c <__NVIC_SetPriority+0xd8>)
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	001c      	movs	r4, r3
 8005c7c:	230f      	movs	r3, #15
 8005c7e:	4023      	ands	r3, r4
 8005c80:	3b08      	subs	r3, #8
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	430a      	orrs	r2, r1
 8005c86:	3306      	adds	r3, #6
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	18c3      	adds	r3, r0, r3
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	46c0      	nop			@ (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b003      	add	sp, #12
 8005c96:	bd90      	pop	{r4, r7, pc}
 8005c98:	e000e100 	.word	0xe000e100
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1e5a      	subs	r2, r3, #1
 8005cac:	2380      	movs	r3, #128	@ 0x80
 8005cae:	045b      	lsls	r3, r3, #17
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d301      	bcc.n	8005cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e010      	b.n	8005cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <SysTick_Config+0x44>)
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	3a01      	subs	r2, #1
 8005cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	425b      	negs	r3, r3
 8005cc4:	2103      	movs	r1, #3
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7ff ff7c 	bl	8005bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ccc:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <SysTick_Config+0x44>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cd2:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <SysTick_Config+0x44>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	0018      	movs	r0, r3
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b002      	add	sp, #8
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	e000e010 	.word	0xe000e010

08005ce8 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	210f      	movs	r1, #15
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	1c02      	adds	r2, r0, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b25b      	sxtb	r3, r3
 8005d02:	0011      	movs	r1, r2
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7ff ff5d 	bl	8005bc4 <__NVIC_SetPriority>
}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b004      	add	sp, #16
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	0002      	movs	r2, r0
 8005d1a:	1dfb      	adds	r3, r7, #7
 8005d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d1e:	1dfb      	adds	r3, r7, #7
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff ff33 	bl	8005b90 <__NVIC_EnableIRQ>
}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b002      	add	sp, #8
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7ff ffaf 	bl	8005ca0 <SysTick_Config>
 8005d42:	0003      	movs	r3, r0
}
 8005d44:	0018      	movs	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d5a:	e153      	b.n	8006004 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2101      	movs	r1, #1
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4091      	lsls	r1, r2
 8005d66:	000a      	movs	r2, r1
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d100      	bne.n	8005d74 <HAL_GPIO_Init+0x28>
 8005d72:	e144      	b.n	8005ffe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d005      	beq.n	8005d8c <HAL_GPIO_Init+0x40>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2203      	movs	r2, #3
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d130      	bne.n	8005dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	2203      	movs	r2, #3
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	0013      	movs	r3, r2
 8005d9c:	43da      	mvns	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4013      	ands	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	409a      	lsls	r2, r3
 8005dae:	0013      	movs	r3, r2
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	0013      	movs	r3, r2
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	2201      	movs	r2, #1
 8005dda:	401a      	ands	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	409a      	lsls	r2, r3
 8005de0:	0013      	movs	r3, r2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2203      	movs	r2, #3
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d017      	beq.n	8005e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	2203      	movs	r2, #3
 8005e06:	409a      	lsls	r2, r3
 8005e08:	0013      	movs	r3, r2
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	0013      	movs	r3, r2
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d123      	bne.n	8005e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	08da      	lsrs	r2, r3, #3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3208      	adds	r2, #8
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	58d3      	ldr	r3, [r2, r3]
 8005e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2207      	movs	r2, #7
 8005e48:	4013      	ands	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	220f      	movs	r2, #15
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	0013      	movs	r3, r2
 8005e52:	43da      	mvns	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4013      	ands	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2107      	movs	r1, #7
 8005e62:	400b      	ands	r3, r1
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	409a      	lsls	r2, r3
 8005e68:	0013      	movs	r3, r2
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	08da      	lsrs	r2, r3, #3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3208      	adds	r2, #8
 8005e78:	0092      	lsls	r2, r2, #2
 8005e7a:	6939      	ldr	r1, [r7, #16]
 8005e7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	2203      	movs	r2, #3
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	0013      	movs	r3, r2
 8005e8e:	43da      	mvns	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	401a      	ands	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	0013      	movs	r3, r2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	23c0      	movs	r3, #192	@ 0xc0
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d100      	bne.n	8005ec0 <HAL_GPIO_Init+0x174>
 8005ebe:	e09e      	b.n	8005ffe <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005ec0:	4a56      	ldr	r2, [pc, #344]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	3318      	adds	r3, #24
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	589b      	ldr	r3, [r3, r2]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	220f      	movs	r2, #15
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	0013      	movs	r3, r2
 8005edc:	43da      	mvns	r2, r3
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	23a0      	movs	r3, #160	@ 0xa0
 8005ee8:	05db      	lsls	r3, r3, #23
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d01f      	beq.n	8005f2e <HAL_GPIO_Init+0x1e2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8006020 <HAL_GPIO_Init+0x2d4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d019      	beq.n	8005f2a <HAL_GPIO_Init+0x1de>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8006024 <HAL_GPIO_Init+0x2d8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_GPIO_Init+0x1da>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a49      	ldr	r2, [pc, #292]	@ (8006028 <HAL_GPIO_Init+0x2dc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00d      	beq.n	8005f22 <HAL_GPIO_Init+0x1d6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a48      	ldr	r2, [pc, #288]	@ (800602c <HAL_GPIO_Init+0x2e0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <HAL_GPIO_Init+0x1d2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a47      	ldr	r2, [pc, #284]	@ (8006030 <HAL_GPIO_Init+0x2e4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <HAL_GPIO_Init+0x1ce>
 8005f16:	2305      	movs	r3, #5
 8005f18:	e00a      	b.n	8005f30 <HAL_GPIO_Init+0x1e4>
 8005f1a:	2306      	movs	r3, #6
 8005f1c:	e008      	b.n	8005f30 <HAL_GPIO_Init+0x1e4>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	e006      	b.n	8005f30 <HAL_GPIO_Init+0x1e4>
 8005f22:	2303      	movs	r3, #3
 8005f24:	e004      	b.n	8005f30 <HAL_GPIO_Init+0x1e4>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e002      	b.n	8005f30 <HAL_GPIO_Init+0x1e4>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_GPIO_Init+0x1e4>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	2103      	movs	r1, #3
 8005f34:	400a      	ands	r2, r1
 8005f36:	00d2      	lsls	r2, r2, #3
 8005f38:	4093      	lsls	r3, r2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005f40:	4936      	ldr	r1, [pc, #216]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	089b      	lsrs	r3, r3, #2
 8005f46:	3318      	adds	r3, #24
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f4e:	4b33      	ldr	r3, [pc, #204]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	43da      	mvns	r2, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	2380      	movs	r3, #128	@ 0x80
 8005f64:	035b      	lsls	r3, r3, #13
 8005f66:	4013      	ands	r3, r2
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f72:	4b2a      	ldr	r3, [pc, #168]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005f78:	4b28      	ldr	r3, [pc, #160]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	43da      	mvns	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	2380      	movs	r3, #128	@ 0x80
 8005f8e:	039b      	lsls	r3, r3, #14
 8005f90:	4013      	ands	r3, r2
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005fa4:	2384      	movs	r3, #132	@ 0x84
 8005fa6:	58d3      	ldr	r3, [r2, r3]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	43da      	mvns	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	2380      	movs	r3, #128	@ 0x80
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fc8:	4914      	ldr	r1, [pc, #80]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005fca:	2284      	movs	r2, #132	@ 0x84
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005fd0:	4a12      	ldr	r2, [pc, #72]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005fd2:	2380      	movs	r3, #128	@ 0x80
 8005fd4:	58d3      	ldr	r3, [r2, r3]
 8005fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	2380      	movs	r3, #128	@ 0x80
 8005fe8:	025b      	lsls	r3, r3, #9
 8005fea:	4013      	ands	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ff6:	4909      	ldr	r1, [pc, #36]	@ (800601c <HAL_GPIO_Init+0x2d0>)
 8005ff8:	2280      	movs	r2, #128	@ 0x80
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	40da      	lsrs	r2, r3
 800600c:	1e13      	subs	r3, r2, #0
 800600e:	d000      	beq.n	8006012 <HAL_GPIO_Init+0x2c6>
 8006010:	e6a4      	b.n	8005d5c <HAL_GPIO_Init+0x10>
  }
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	46c0      	nop			@ (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b006      	add	sp, #24
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40021800 	.word	0x40021800
 8006020:	50000400 	.word	0x50000400
 8006024:	50000800 	.word	0x50000800
 8006028:	50000c00 	.word	0x50000c00
 800602c:	50001000 	.word	0x50001000
 8006030:	50001400 	.word	0x50001400

08006034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	000a      	movs	r2, r1
 800603e:	1cbb      	adds	r3, r7, #2
 8006040:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	1cba      	adds	r2, r7, #2
 8006048:	8812      	ldrh	r2, [r2, #0]
 800604a:	4013      	ands	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800604e:	230f      	movs	r3, #15
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e003      	b.n	8006060 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006058:	230f      	movs	r3, #15
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006060:	230f      	movs	r3, #15
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	781b      	ldrb	r3, [r3, #0]
}
 8006066:	0018      	movs	r0, r3
 8006068:	46bd      	mov	sp, r7
 800606a:	b004      	add	sp, #16
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	0008      	movs	r0, r1
 8006078:	0011      	movs	r1, r2
 800607a:	1cbb      	adds	r3, r7, #2
 800607c:	1c02      	adds	r2, r0, #0
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	1c7b      	adds	r3, r7, #1
 8006082:	1c0a      	adds	r2, r1, #0
 8006084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006086:	1c7b      	adds	r3, r7, #1
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800608e:	1cbb      	adds	r3, r7, #2
 8006090:	881a      	ldrh	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006096:	e003      	b.n	80060a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006098:	1cbb      	adds	r3, r7, #2
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060a0:	46c0      	nop			@ (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b002      	add	sp, #8
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	000a      	movs	r2, r1
 80060b2:	1cbb      	adds	r3, r7, #2
 80060b4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060bc:	1cbb      	adds	r3, r7, #2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4013      	ands	r3, r2
 80060c4:	041a      	lsls	r2, r3, #16
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	1cb9      	adds	r1, r7, #2
 80060cc:	8809      	ldrh	r1, [r1, #0]
 80060ce:	400b      	ands	r3, r1
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	619a      	str	r2, [r3, #24]
}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	46bd      	mov	sp, r7
 80060da:	b004      	add	sp, #16
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	0002      	movs	r2, r0
 80060e8:	1dbb      	adds	r3, r7, #6
 80060ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80060ec:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	1dba      	adds	r2, r7, #6
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	4013      	ands	r3, r2
 80060f6:	d008      	beq.n	800610a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80060f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80060fa:	1dba      	adds	r2, r7, #6
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006100:	1dbb      	adds	r3, r7, #6
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	0018      	movs	r0, r3
 8006106:	f000 f815 	bl	8006134 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800610a:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	1dba      	adds	r2, r7, #6
 8006110:	8812      	ldrh	r2, [r2, #0]
 8006112:	4013      	ands	r3, r2
 8006114:	d008      	beq.n	8006128 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006116:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006118:	1dba      	adds	r2, r7, #6
 800611a:	8812      	ldrh	r2, [r2, #0]
 800611c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800611e:	1dbb      	adds	r3, r7, #6
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	0018      	movs	r0, r3
 8006124:	f000 f810 	bl	8006148 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006128:	46c0      	nop			@ (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40021800 	.word	0x40021800

08006134 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	0002      	movs	r2, r0
 800613c:	1dbb      	adds	r3, r7, #6
 800613e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006140:	46c0      	nop			@ (mov r8, r8)
 8006142:	46bd      	mov	sp, r7
 8006144:	b002      	add	sp, #8
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	0002      	movs	r2, r0
 8006150:	1dbb      	adds	r3, r7, #6
 8006152:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006154:	46c0      	nop			@ (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e08f      	b.n	800628e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2241      	movs	r2, #65	@ 0x41
 8006172:	5c9b      	ldrb	r3, [r3, r2]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d107      	bne.n	800618a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2240      	movs	r2, #64	@ 0x40
 800617e:	2100      	movs	r1, #0
 8006180:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0018      	movs	r0, r3
 8006186:	f7fe fd07 	bl	8004b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2241      	movs	r2, #65	@ 0x41
 800618e:	2124      	movs	r1, #36	@ 0x24
 8006190:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2101      	movs	r1, #1
 800619e:	438a      	bics	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	493b      	ldr	r1, [pc, #236]	@ (8006298 <HAL_I2C_Init+0x13c>)
 80061ac:	400a      	ands	r2, r1
 80061ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4938      	ldr	r1, [pc, #224]	@ (800629c <HAL_I2C_Init+0x140>)
 80061bc:	400a      	ands	r2, r1
 80061be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d108      	bne.n	80061da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2180      	movs	r1, #128	@ 0x80
 80061d2:	0209      	lsls	r1, r1, #8
 80061d4:	430a      	orrs	r2, r1
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	e007      	b.n	80061ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2184      	movs	r1, #132	@ 0x84
 80061e4:	0209      	lsls	r1, r1, #8
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d109      	bne.n	8006206 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2180      	movs	r1, #128	@ 0x80
 80061fe:	0109      	lsls	r1, r1, #4
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	e007      	b.n	8006216 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4923      	ldr	r1, [pc, #140]	@ (80062a0 <HAL_I2C_Init+0x144>)
 8006212:	400a      	ands	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4920      	ldr	r1, [pc, #128]	@ (80062a4 <HAL_I2C_Init+0x148>)
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	491a      	ldr	r1, [pc, #104]	@ (800629c <HAL_I2C_Init+0x140>)
 8006232:	400a      	ands	r2, r1
 8006234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	431a      	orrs	r2, r3
 8006240:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69d9      	ldr	r1, [r3, #28]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2101      	movs	r1, #1
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2241      	movs	r2, #65	@ 0x41
 800627a:	2120      	movs	r1, #32
 800627c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2242      	movs	r2, #66	@ 0x42
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b002      	add	sp, #8
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			@ (mov r8, r8)
 8006298:	f0ffffff 	.word	0xf0ffffff
 800629c:	ffff7fff 	.word	0xffff7fff
 80062a0:	fffff7ff 	.word	0xfffff7ff
 80062a4:	02008000 	.word	0x02008000

080062a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b089      	sub	sp, #36	@ 0x24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	0008      	movs	r0, r1
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	0019      	movs	r1, r3
 80062b6:	230a      	movs	r3, #10
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	1c02      	adds	r2, r0, #0
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	2308      	movs	r3, #8
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	1c0a      	adds	r2, r1, #0
 80062c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2241      	movs	r2, #65	@ 0x41
 80062ca:	5c9b      	ldrb	r3, [r3, r2]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d000      	beq.n	80062d4 <HAL_I2C_Master_Transmit+0x2c>
 80062d2:	e0e7      	b.n	80064a4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2240      	movs	r2, #64	@ 0x40
 80062d8:	5c9b      	ldrb	r3, [r3, r2]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_I2C_Master_Transmit+0x3a>
 80062de:	2302      	movs	r3, #2
 80062e0:	e0e1      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1fe>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2240      	movs	r2, #64	@ 0x40
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062ea:	f7ff f813 	bl	8005314 <HAL_GetTick>
 80062ee:	0003      	movs	r3, r0
 80062f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062f2:	2380      	movs	r3, #128	@ 0x80
 80062f4:	0219      	lsls	r1, r3, #8
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2319      	movs	r3, #25
 80062fe:	2201      	movs	r2, #1
 8006300:	f000 fa04 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 8006304:	1e03      	subs	r3, r0, #0
 8006306:	d001      	beq.n	800630c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0cc      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2241      	movs	r2, #65	@ 0x41
 8006310:	2121      	movs	r1, #33	@ 0x21
 8006312:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2242      	movs	r2, #66	@ 0x42
 8006318:	2110      	movs	r1, #16
 800631a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2208      	movs	r2, #8
 800632c:	18ba      	adds	r2, r7, r2
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2bff      	cmp	r3, #255	@ 0xff
 8006340:	d911      	bls.n	8006366 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	@ 0xff
 8006346:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634c:	b2da      	uxtb	r2, r3
 800634e:	2380      	movs	r3, #128	@ 0x80
 8006350:	045c      	lsls	r4, r3, #17
 8006352:	230a      	movs	r3, #10
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	8819      	ldrh	r1, [r3, #0]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	4b55      	ldr	r3, [pc, #340]	@ (80064b0 <HAL_I2C_Master_Transmit+0x208>)
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	0023      	movs	r3, r4
 8006360:	f000 fc4c 	bl	8006bfc <I2C_TransferConfig>
 8006364:	e075      	b.n	8006452 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006374:	b2da      	uxtb	r2, r3
 8006376:	2380      	movs	r3, #128	@ 0x80
 8006378:	049c      	lsls	r4, r3, #18
 800637a:	230a      	movs	r3, #10
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	8819      	ldrh	r1, [r3, #0]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	4b4b      	ldr	r3, [pc, #300]	@ (80064b0 <HAL_I2C_Master_Transmit+0x208>)
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	0023      	movs	r3, r4
 8006388:	f000 fc38 	bl	8006bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800638c:	e061      	b.n	8006452 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 fa11 	bl	80067bc <I2C_WaitOnTXISFlagUntilTimeout>
 800639a:	1e03      	subs	r3, r0, #0
 800639c:	d001      	beq.n	80063a2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e081      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d03a      	beq.n	8006452 <HAL_I2C_Master_Transmit+0x1aa>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d136      	bne.n	8006452 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	0013      	movs	r3, r2
 80063ee:	2200      	movs	r2, #0
 80063f0:	2180      	movs	r1, #128	@ 0x80
 80063f2:	f000 f98b 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d001      	beq.n	80063fe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e053      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	2bff      	cmp	r3, #255	@ 0xff
 8006406:	d911      	bls.n	800642c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	22ff      	movs	r2, #255	@ 0xff
 800640c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006412:	b2da      	uxtb	r2, r3
 8006414:	2380      	movs	r3, #128	@ 0x80
 8006416:	045c      	lsls	r4, r3, #17
 8006418:	230a      	movs	r3, #10
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	8819      	ldrh	r1, [r3, #0]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	0023      	movs	r3, r4
 8006426:	f000 fbe9 	bl	8006bfc <I2C_TransferConfig>
 800642a:	e012      	b.n	8006452 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643a:	b2da      	uxtb	r2, r3
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	049c      	lsls	r4, r3, #18
 8006440:	230a      	movs	r3, #10
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	8819      	ldrh	r1, [r3, #0]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	2300      	movs	r3, #0
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	0023      	movs	r3, r4
 800644e:	f000 fbd5 	bl	8006bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d198      	bne.n	800638e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	0018      	movs	r0, r3
 8006464:	f000 f9f0 	bl	8006848 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006468:	1e03      	subs	r3, r0, #0
 800646a:	d001      	beq.n	8006470 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e01a      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2220      	movs	r2, #32
 8006476:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	490c      	ldr	r1, [pc, #48]	@ (80064b4 <HAL_I2C_Master_Transmit+0x20c>)
 8006484:	400a      	ands	r2, r1
 8006486:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2241      	movs	r2, #65	@ 0x41
 800648c:	2120      	movs	r1, #32
 800648e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2242      	movs	r2, #66	@ 0x42
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2240      	movs	r2, #64	@ 0x40
 800649c:	2100      	movs	r1, #0
 800649e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e000      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b007      	add	sp, #28
 80064ac:	bd90      	pop	{r4, r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	80002000 	.word	0x80002000
 80064b4:	fe00e800 	.word	0xfe00e800

080064b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b089      	sub	sp, #36	@ 0x24
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	0008      	movs	r0, r1
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	0019      	movs	r1, r3
 80064c6:	230a      	movs	r3, #10
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	1c02      	adds	r2, r0, #0
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	2308      	movs	r3, #8
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	1c0a      	adds	r2, r1, #0
 80064d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2241      	movs	r2, #65	@ 0x41
 80064da:	5c9b      	ldrb	r3, [r3, r2]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d000      	beq.n	80064e4 <HAL_I2C_Master_Receive+0x2c>
 80064e2:	e0e8      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2240      	movs	r2, #64	@ 0x40
 80064e8:	5c9b      	ldrb	r3, [r3, r2]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_I2C_Master_Receive+0x3a>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e0e2      	b.n	80066b8 <HAL_I2C_Master_Receive+0x200>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2240      	movs	r2, #64	@ 0x40
 80064f6:	2101      	movs	r1, #1
 80064f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064fa:	f7fe ff0b 	bl	8005314 <HAL_GetTick>
 80064fe:	0003      	movs	r3, r0
 8006500:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	0219      	lsls	r1, r3, #8
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2319      	movs	r3, #25
 800650e:	2201      	movs	r2, #1
 8006510:	f000 f8fc 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 8006514:	1e03      	subs	r3, r0, #0
 8006516:	d001      	beq.n	800651c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0cd      	b.n	80066b8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2241      	movs	r2, #65	@ 0x41
 8006520:	2122      	movs	r1, #34	@ 0x22
 8006522:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2242      	movs	r2, #66	@ 0x42
 8006528:	2110      	movs	r1, #16
 800652a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2208      	movs	r2, #8
 800653c:	18ba      	adds	r2, r7, r2
 800653e:	8812      	ldrh	r2, [r2, #0]
 8006540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2bff      	cmp	r3, #255	@ 0xff
 8006550:	d911      	bls.n	8006576 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	22ff      	movs	r2, #255	@ 0xff
 8006556:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655c:	b2da      	uxtb	r2, r3
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	045c      	lsls	r4, r3, #17
 8006562:	230a      	movs	r3, #10
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	8819      	ldrh	r1, [r3, #0]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	4b55      	ldr	r3, [pc, #340]	@ (80066c0 <HAL_I2C_Master_Receive+0x208>)
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	0023      	movs	r3, r4
 8006570:	f000 fb44 	bl	8006bfc <I2C_TransferConfig>
 8006574:	e076      	b.n	8006664 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006584:	b2da      	uxtb	r2, r3
 8006586:	2380      	movs	r3, #128	@ 0x80
 8006588:	049c      	lsls	r4, r3, #18
 800658a:	230a      	movs	r3, #10
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	8819      	ldrh	r1, [r3, #0]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	4b4b      	ldr	r3, [pc, #300]	@ (80066c0 <HAL_I2C_Master_Receive+0x208>)
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	0023      	movs	r3, r4
 8006598:	f000 fb30 	bl	8006bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800659c:	e062      	b.n	8006664 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f000 f993 	bl	80068d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e082      	b.n	80066b8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d03a      	beq.n	8006664 <HAL_I2C_Master_Receive+0x1ac>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d136      	bne.n	8006664 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	0013      	movs	r3, r2
 8006600:	2200      	movs	r2, #0
 8006602:	2180      	movs	r1, #128	@ 0x80
 8006604:	f000 f882 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 8006608:	1e03      	subs	r3, r0, #0
 800660a:	d001      	beq.n	8006610 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e053      	b.n	80066b8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	2bff      	cmp	r3, #255	@ 0xff
 8006618:	d911      	bls.n	800663e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22ff      	movs	r2, #255	@ 0xff
 800661e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006624:	b2da      	uxtb	r2, r3
 8006626:	2380      	movs	r3, #128	@ 0x80
 8006628:	045c      	lsls	r4, r3, #17
 800662a:	230a      	movs	r3, #10
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	8819      	ldrh	r1, [r3, #0]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	0023      	movs	r3, r4
 8006638:	f000 fae0 	bl	8006bfc <I2C_TransferConfig>
 800663c:	e012      	b.n	8006664 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664c:	b2da      	uxtb	r2, r3
 800664e:	2380      	movs	r3, #128	@ 0x80
 8006650:	049c      	lsls	r4, r3, #18
 8006652:	230a      	movs	r3, #10
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	8819      	ldrh	r1, [r3, #0]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	2300      	movs	r3, #0
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	0023      	movs	r3, r4
 8006660:	f000 facc 	bl	8006bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d197      	bne.n	800659e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f8e7 	bl	8006848 <I2C_WaitOnSTOPFlagUntilTimeout>
 800667a:	1e03      	subs	r3, r0, #0
 800667c:	d001      	beq.n	8006682 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e01a      	b.n	80066b8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2220      	movs	r2, #32
 8006688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	490b      	ldr	r1, [pc, #44]	@ (80066c4 <HAL_I2C_Master_Receive+0x20c>)
 8006696:	400a      	ands	r2, r1
 8006698:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2241      	movs	r2, #65	@ 0x41
 800669e:	2120      	movs	r1, #32
 80066a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2242      	movs	r2, #66	@ 0x42
 80066a6:	2100      	movs	r1, #0
 80066a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2240      	movs	r2, #64	@ 0x40
 80066ae:	2100      	movs	r1, #0
 80066b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e000      	b.n	80066b8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
  }
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b007      	add	sp, #28
 80066be:	bd90      	pop	{r4, r7, pc}
 80066c0:	80002400 	.word	0x80002400
 80066c4:	fe00e800 	.word	0xfe00e800

080066c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2202      	movs	r2, #2
 80066d8:	4013      	ands	r3, r2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d103      	bne.n	80066e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2201      	movs	r2, #1
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d007      	beq.n	8006704 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2101      	movs	r1, #1
 8006700:	430a      	orrs	r2, r1
 8006702:	619a      	str	r2, [r3, #24]
  }
}
 8006704:	46c0      	nop			@ (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}

0800670c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	1dfb      	adds	r3, r7, #7
 800671a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800671c:	e03a      	b.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	0018      	movs	r0, r3
 8006726:	f000 f971 	bl	8006a0c <I2C_IsErrorOccurred>
 800672a:	1e03      	subs	r3, r0, #0
 800672c:	d001      	beq.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e040      	b.n	80067b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	d02d      	beq.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006738:	f7fe fdec 	bl	8005314 <HAL_GetTick>
 800673c:	0002      	movs	r2, r0
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d302      	bcc.n	800674e <I2C_WaitOnFlagUntilTimeout+0x42>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d122      	bne.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	425a      	negs	r2, r3
 800675e:	4153      	adcs	r3, r2
 8006760:	b2db      	uxtb	r3, r3
 8006762:	001a      	movs	r2, r3
 8006764:	1dfb      	adds	r3, r7, #7
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d113      	bne.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006770:	2220      	movs	r2, #32
 8006772:	431a      	orrs	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2241      	movs	r2, #65	@ 0x41
 800677c:	2120      	movs	r1, #32
 800677e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2242      	movs	r2, #66	@ 0x42
 8006784:	2100      	movs	r1, #0
 8006786:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2240      	movs	r2, #64	@ 0x40
 800678c:	2100      	movs	r1, #0
 800678e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e00f      	b.n	80067b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4013      	ands	r3, r2
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	425a      	negs	r2, r3
 80067a4:	4153      	adcs	r3, r2
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	001a      	movs	r2, r3
 80067aa:	1dfb      	adds	r3, r7, #7
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d0b5      	beq.n	800671e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b004      	add	sp, #16
 80067ba:	bd80      	pop	{r7, pc}

080067bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067c8:	e032      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 f91b 	bl	8006a0c <I2C_IsErrorOccurred>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d001      	beq.n	80067de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e030      	b.n	8006840 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	3301      	adds	r3, #1
 80067e2:	d025      	beq.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e4:	f7fe fd96 	bl	8005314 <HAL_GetTick>
 80067e8:	0002      	movs	r2, r0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d11a      	bne.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2202      	movs	r2, #2
 8006802:	4013      	ands	r3, r2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d013      	beq.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680c:	2220      	movs	r2, #32
 800680e:	431a      	orrs	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2241      	movs	r2, #65	@ 0x41
 8006818:	2120      	movs	r1, #32
 800681a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2242      	movs	r2, #66	@ 0x42
 8006820:	2100      	movs	r1, #0
 8006822:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2240      	movs	r2, #64	@ 0x40
 8006828:	2100      	movs	r1, #0
 800682a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e007      	b.n	8006840 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2202      	movs	r2, #2
 8006838:	4013      	ands	r3, r2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d1c5      	bne.n	80067ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b004      	add	sp, #16
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006854:	e02f      	b.n	80068b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	0018      	movs	r0, r3
 800685e:	f000 f8d5 	bl	8006a0c <I2C_IsErrorOccurred>
 8006862:	1e03      	subs	r3, r0, #0
 8006864:	d001      	beq.n	800686a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e02d      	b.n	80068c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686a:	f7fe fd53 	bl	8005314 <HAL_GetTick>
 800686e:	0002      	movs	r2, r0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11a      	bne.n	80068b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2220      	movs	r2, #32
 8006888:	4013      	ands	r3, r2
 800688a:	2b20      	cmp	r3, #32
 800688c:	d013      	beq.n	80068b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	2220      	movs	r2, #32
 8006894:	431a      	orrs	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2241      	movs	r2, #65	@ 0x41
 800689e:	2120      	movs	r1, #32
 80068a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2242      	movs	r2, #66	@ 0x42
 80068a6:	2100      	movs	r1, #0
 80068a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2240      	movs	r2, #64	@ 0x40
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e007      	b.n	80068c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2220      	movs	r2, #32
 80068be:	4013      	ands	r3, r2
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d1c8      	bne.n	8006856 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	0018      	movs	r0, r3
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b004      	add	sp, #16
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2317      	movs	r3, #23
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	2200      	movs	r2, #0
 80068e2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80068e4:	e07b      	b.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f000 f88d 	bl	8006a0c <I2C_IsErrorOccurred>
 80068f2:	1e03      	subs	r3, r0, #0
 80068f4:	d003      	beq.n	80068fe <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80068f6:	2317      	movs	r3, #23
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2220      	movs	r2, #32
 8006906:	4013      	ands	r3, r2
 8006908:	2b20      	cmp	r3, #32
 800690a:	d140      	bne.n	800698e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800690c:	2117      	movs	r1, #23
 800690e:	187b      	adds	r3, r7, r1
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d13b      	bne.n	800698e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2204      	movs	r2, #4
 800691e:	4013      	ands	r3, r2
 8006920:	2b04      	cmp	r3, #4
 8006922:	d106      	bne.n	8006932 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800692c:	187b      	adds	r3, r7, r1
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	2210      	movs	r2, #16
 800693a:	4013      	ands	r3, r2
 800693c:	2b10      	cmp	r3, #16
 800693e:	d123      	bne.n	8006988 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2210      	movs	r2, #16
 8006946:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2204      	movs	r2, #4
 800694c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2220      	movs	r2, #32
 8006954:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4929      	ldr	r1, [pc, #164]	@ (8006a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8006962:	400a      	ands	r2, r1
 8006964:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2241      	movs	r2, #65	@ 0x41
 800696a:	2120      	movs	r1, #32
 800696c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2242      	movs	r2, #66	@ 0x42
 8006972:	2100      	movs	r1, #0
 8006974:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2240      	movs	r2, #64	@ 0x40
 800697a:	2100      	movs	r1, #0
 800697c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800697e:	2317      	movs	r3, #23
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	e002      	b.n	800698e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800698e:	f7fe fcc1 	bl	8005314 <HAL_GetTick>
 8006992:	0002      	movs	r2, r0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d11c      	bne.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80069a4:	2017      	movs	r0, #23
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d117      	bne.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2204      	movs	r2, #4
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d010      	beq.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c0:	2220      	movs	r2, #32
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2241      	movs	r2, #65	@ 0x41
 80069cc:	2120      	movs	r1, #32
 80069ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2240      	movs	r2, #64	@ 0x40
 80069d4:	2100      	movs	r1, #0
 80069d6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80069d8:	183b      	adds	r3, r7, r0
 80069da:	2201      	movs	r2, #1
 80069dc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2204      	movs	r2, #4
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d005      	beq.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80069ec:	2317      	movs	r3, #23
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d100      	bne.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80069f6:	e776      	b.n	80068e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80069f8:	2317      	movs	r3, #23
 80069fa:	18fb      	adds	r3, r7, r3
 80069fc:	781b      	ldrb	r3, [r3, #0]
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b006      	add	sp, #24
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	fe00e800 	.word	0xfe00e800

08006a0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	@ 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a18:	2327      	movs	r3, #39	@ 0x27
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2210      	movs	r2, #16
 8006a34:	4013      	ands	r3, r2
 8006a36:	d100      	bne.n	8006a3a <I2C_IsErrorOccurred+0x2e>
 8006a38:	e079      	b.n	8006b2e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a42:	e057      	b.n	8006af4 <I2C_IsErrorOccurred+0xe8>
 8006a44:	2227      	movs	r2, #39	@ 0x27
 8006a46:	18bb      	adds	r3, r7, r2
 8006a48:	18ba      	adds	r2, r7, r2
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	3301      	adds	r3, #1
 8006a52:	d04f      	beq.n	8006af4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a54:	f7fe fc5e 	bl	8005314 <HAL_GetTick>
 8006a58:	0002      	movs	r2, r0
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d302      	bcc.n	8006a6a <I2C_IsErrorOccurred+0x5e>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d144      	bne.n	8006af4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	01db      	lsls	r3, r3, #7
 8006a74:	4013      	ands	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a78:	2013      	movs	r0, #19
 8006a7a:	183b      	adds	r3, r7, r0
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	2142      	movs	r1, #66	@ 0x42
 8006a80:	5c52      	ldrb	r2, [r2, r1]
 8006a82:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	2380      	movs	r3, #128	@ 0x80
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	401a      	ands	r2, r3
 8006a90:	2380      	movs	r3, #128	@ 0x80
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d126      	bne.n	8006ae6 <I2C_IsErrorOccurred+0xda>
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	2380      	movs	r3, #128	@ 0x80
 8006a9c:	01db      	lsls	r3, r3, #7
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d021      	beq.n	8006ae6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006aa2:	183b      	adds	r3, r7, r0
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d01d      	beq.n	8006ae6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2180      	movs	r1, #128	@ 0x80
 8006ab6:	01c9      	lsls	r1, r1, #7
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006abc:	f7fe fc2a 	bl	8005314 <HAL_GetTick>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac4:	e00f      	b.n	8006ae6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ac6:	f7fe fc25 	bl	8005314 <HAL_GetTick>
 8006aca:	0002      	movs	r2, r0
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b19      	cmp	r3, #25
 8006ad2:	d908      	bls.n	8006ae6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006adc:	2327      	movs	r3, #39	@ 0x27
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]

              break;
 8006ae4:	e006      	b.n	8006af4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2220      	movs	r2, #32
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d1e8      	bne.n	8006ac6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2220      	movs	r2, #32
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d004      	beq.n	8006b0c <I2C_IsErrorOccurred+0x100>
 8006b02:	2327      	movs	r3, #39	@ 0x27
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d09b      	beq.n	8006a44 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b0c:	2327      	movs	r3, #39	@ 0x27
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	2204      	movs	r2, #4
 8006b22:	4313      	orrs	r3, r2
 8006b24:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b26:	2327      	movs	r3, #39	@ 0x27
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	2380      	movs	r3, #128	@ 0x80
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d00c      	beq.n	8006b5a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	2201      	movs	r2, #1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2280      	movs	r2, #128	@ 0x80
 8006b4e:	0052      	lsls	r2, r2, #1
 8006b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b52:	2327      	movs	r3, #39	@ 0x27
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	2380      	movs	r3, #128	@ 0x80
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	4013      	ands	r3, r2
 8006b62:	d00c      	beq.n	8006b7e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2208      	movs	r2, #8
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2280      	movs	r2, #128	@ 0x80
 8006b72:	00d2      	lsls	r2, r2, #3
 8006b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b76:	2327      	movs	r3, #39	@ 0x27
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	2380      	movs	r3, #128	@ 0x80
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4013      	ands	r3, r2
 8006b86:	d00c      	beq.n	8006ba2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2280      	movs	r2, #128	@ 0x80
 8006b96:	0092      	lsls	r2, r2, #2
 8006b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b9a:	2327      	movs	r3, #39	@ 0x27
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006ba2:	2327      	movs	r3, #39	@ 0x27
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01d      	beq.n	8006be8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7ff fd8a 	bl	80066c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	490e      	ldr	r1, [pc, #56]	@ (8006bf8 <I2C_IsErrorOccurred+0x1ec>)
 8006bc0:	400a      	ands	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2241      	movs	r2, #65	@ 0x41
 8006bd4:	2120      	movs	r1, #32
 8006bd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2242      	movs	r2, #66	@ 0x42
 8006bdc:	2100      	movs	r1, #0
 8006bde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2240      	movs	r2, #64	@ 0x40
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006be8:	2327      	movs	r3, #39	@ 0x27
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	781b      	ldrb	r3, [r3, #0]
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b00a      	add	sp, #40	@ 0x28
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	46c0      	nop			@ (mov r8, r8)
 8006bf8:	fe00e800 	.word	0xfe00e800

08006bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	0008      	movs	r0, r1
 8006c06:	0011      	movs	r1, r2
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	240a      	movs	r4, #10
 8006c0c:	193b      	adds	r3, r7, r4
 8006c0e:	1c02      	adds	r2, r0, #0
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	2009      	movs	r0, #9
 8006c14:	183b      	adds	r3, r7, r0
 8006c16:	1c0a      	adds	r2, r1, #0
 8006c18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c1a:	193b      	adds	r3, r7, r4
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	059b      	lsls	r3, r3, #22
 8006c20:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c22:	183b      	adds	r3, r7, r0
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	0419      	lsls	r1, r3, #16
 8006c28:	23ff      	movs	r3, #255	@ 0xff
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c2e:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	4313      	orrs	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	085b      	lsrs	r3, r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c46:	0d51      	lsrs	r1, r2, #21
 8006c48:	2280      	movs	r2, #128	@ 0x80
 8006c4a:	00d2      	lsls	r2, r2, #3
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	4907      	ldr	r1, [pc, #28]	@ (8006c6c <I2C_TransferConfig+0x70>)
 8006c50:	430a      	orrs	r2, r1
 8006c52:	43d2      	mvns	r2, r2
 8006c54:	401a      	ands	r2, r3
 8006c56:	0011      	movs	r1, r2
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b007      	add	sp, #28
 8006c68:	bd90      	pop	{r4, r7, pc}
 8006c6a:	46c0      	nop			@ (mov r8, r8)
 8006c6c:	03ff63ff 	.word	0x03ff63ff

08006c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2241      	movs	r2, #65	@ 0x41
 8006c7e:	5c9b      	ldrb	r3, [r3, r2]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d138      	bne.n	8006cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2240      	movs	r2, #64	@ 0x40
 8006c8a:	5c9b      	ldrb	r3, [r3, r2]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e032      	b.n	8006cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2240      	movs	r2, #64	@ 0x40
 8006c98:	2101      	movs	r1, #1
 8006c9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2241      	movs	r2, #65	@ 0x41
 8006ca0:	2124      	movs	r1, #36	@ 0x24
 8006ca2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2101      	movs	r1, #1
 8006cb0:	438a      	bics	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4911      	ldr	r1, [pc, #68]	@ (8006d04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2101      	movs	r1, #1
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2241      	movs	r2, #65	@ 0x41
 8006ce8:	2120      	movs	r1, #32
 8006cea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2240      	movs	r2, #64	@ 0x40
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b002      	add	sp, #8
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	ffffefff 	.word	0xffffefff

08006d08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2241      	movs	r2, #65	@ 0x41
 8006d16:	5c9b      	ldrb	r3, [r3, r2]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d139      	bne.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2240      	movs	r2, #64	@ 0x40
 8006d22:	5c9b      	ldrb	r3, [r3, r2]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e033      	b.n	8006d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2240      	movs	r2, #64	@ 0x40
 8006d30:	2101      	movs	r1, #1
 8006d32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2241      	movs	r2, #65	@ 0x41
 8006d38:	2124      	movs	r1, #36	@ 0x24
 8006d3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2101      	movs	r1, #1
 8006d48:	438a      	bics	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a11      	ldr	r2, [pc, #68]	@ (8006d9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2101      	movs	r1, #1
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2241      	movs	r2, #65	@ 0x41
 8006d82:	2120      	movs	r1, #32
 8006d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2240      	movs	r2, #64	@ 0x40
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
  }
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b004      	add	sp, #16
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	fffff0ff 	.word	0xfffff0ff

08006da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	2380      	movs	r3, #128	@ 0x80
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d137      	bne.n	8006e22 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006db2:	4b27      	ldr	r3, [pc, #156]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	23c0      	movs	r3, #192	@ 0xc0
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	401a      	ands	r2, r3
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d040      	beq.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dc4:	4b22      	ldr	r3, [pc, #136]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	@ (8006e54 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006dca:	401a      	ands	r2, r3
 8006dcc:	4b20      	ldr	r3, [pc, #128]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006dce:	2180      	movs	r1, #128	@ 0x80
 8006dd0:	0089      	lsls	r1, r1, #2
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	@ (8006e58 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2232      	movs	r2, #50	@ 0x32
 8006ddc:	4353      	muls	r3, r2
 8006dde:	491f      	ldr	r1, [pc, #124]	@ (8006e5c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7f9 f9ad 	bl	8000140 <__udivsi3>
 8006de6:	0003      	movs	r3, r0
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dec:	e002      	b.n	8006df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006df4:	4b16      	ldr	r3, [pc, #88]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006df6:	695a      	ldr	r2, [r3, #20]
 8006df8:	2380      	movs	r3, #128	@ 0x80
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	401a      	ands	r2, r3
 8006dfe:	2380      	movs	r3, #128	@ 0x80
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d102      	bne.n	8006e0c <HAL_PWREx_ControlVoltageScaling+0x6c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f0      	bne.n	8006dee <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e0c:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	401a      	ands	r2, r3
 8006e16:	2380      	movs	r3, #128	@ 0x80
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d113      	bne.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e012      	b.n	8006e48 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e22:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	23c0      	movs	r3, #192	@ 0xc0
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	2380      	movs	r3, #128	@ 0x80
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d008      	beq.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a06      	ldr	r2, [pc, #24]	@ (8006e54 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006e3e:	2180      	movs	r1, #128	@ 0x80
 8006e40:	00c9      	lsls	r1, r1, #3
 8006e42:	430a      	orrs	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	0018      	movs	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	b004      	add	sp, #16
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40007000 	.word	0x40007000
 8006e54:	fffff9ff 	.word	0xfffff9ff
 8006e58:	20000014 	.word	0x20000014
 8006e5c:	000f4240 	.word	0x000f4240

08006e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006e64:	4b03      	ldr	r3, [pc, #12]	@ (8006e74 <HAL_PWREx_GetVoltageRange+0x14>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	23c0      	movs	r3, #192	@ 0xc0
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4013      	ands	r3, r2
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40007000 	.word	0x40007000

08006e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e78:	b5b0      	push	{r4, r5, r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e80:	4bc9      	ldr	r3, [pc, #804]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2238      	movs	r2, #56	@ 0x38
 8006e86:	4013      	ands	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e8a:	4bc7      	ldr	r3, [pc, #796]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	4013      	ands	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2210      	movs	r2, #16
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d100      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x28>
 8006e9e:	e0ef      	b.n	8007080 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x3e>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b18      	cmp	r3, #24
 8006eaa:	d000      	beq.n	8006eae <HAL_RCC_OscConfig+0x36>
 8006eac:	e093      	b.n	8006fd6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d000      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x3e>
 8006eb4:	e08f      	b.n	8006fd6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eb6:	4bbc      	ldr	r3, [pc, #752]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d006      	beq.n	8006ece <HAL_RCC_OscConfig+0x56>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f000 fbf2 	bl	80076b2 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ed2:	4bb5      	ldr	r3, [pc, #724]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2108      	movs	r1, #8
 8006ed8:	400b      	ands	r3, r1
 8006eda:	d004      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x6e>
 8006edc:	4bb2      	ldr	r3, [pc, #712]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	21f0      	movs	r1, #240	@ 0xf0
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCC_OscConfig+0x7a>
 8006ee6:	49b0      	ldr	r1, [pc, #704]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006ee8:	2394      	movs	r3, #148	@ 0x94
 8006eea:	58cb      	ldr	r3, [r1, r3]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	21f0      	movs	r1, #240	@ 0xf0
 8006ef0:	400b      	ands	r3, r1
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d225      	bcs.n	8006f42 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 fd90 	bl	8007a20 <RCC_SetFlashLatencyFromMSIRange>
 8006f00:	1e03      	subs	r3, r0, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f000 fbd4 	bl	80076b2 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4ba6      	ldr	r3, [pc, #664]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f10:	2108      	movs	r1, #8
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	4ba4      	ldr	r3, [pc, #656]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	22f0      	movs	r2, #240	@ 0xf0
 8006f1c:	4393      	bics	r3, r2
 8006f1e:	0019      	movs	r1, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f24:	4ba0      	ldr	r3, [pc, #640]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f26:	430a      	orrs	r2, r1
 8006f28:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f2a:	4b9f      	ldr	r3, [pc, #636]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4a9f      	ldr	r2, [pc, #636]	@ (80071ac <HAL_RCC_OscConfig+0x334>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	0019      	movs	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	021a      	lsls	r2, r3, #8
 8006f3a:	4b9b      	ldr	r3, [pc, #620]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	e027      	b.n	8006f92 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f42:	4b99      	ldr	r3, [pc, #612]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b98      	ldr	r3, [pc, #608]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f48:	2108      	movs	r1, #8
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	4b96      	ldr	r3, [pc, #600]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22f0      	movs	r2, #240	@ 0xf0
 8006f54:	4393      	bics	r3, r2
 8006f56:	0019      	movs	r1, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f5c:	4b92      	ldr	r3, [pc, #584]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f62:	4b91      	ldr	r3, [pc, #580]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	4a91      	ldr	r2, [pc, #580]	@ (80071ac <HAL_RCC_OscConfig+0x334>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	021a      	lsls	r2, r3, #8
 8006f72:	4b8d      	ldr	r3, [pc, #564]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f82:	0018      	movs	r0, r3
 8006f84:	f000 fd4c 	bl	8007a20 <RCC_SetFlashLatencyFromMSIRange>
 8006f88:	1e03      	subs	r3, r0, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f000 fb90 	bl	80076b2 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f92:	f000 fc87 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 8006f96:	0001      	movs	r1, r0
 8006f98:	4b83      	ldr	r3, [pc, #524]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	220f      	movs	r2, #15
 8006fa0:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fa2:	4a83      	ldr	r2, [pc, #524]	@ (80071b0 <HAL_RCC_OscConfig+0x338>)
 8006fa4:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fa6:	001a      	movs	r2, r3
 8006fa8:	231f      	movs	r3, #31
 8006faa:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006fac:	000a      	movs	r2, r1
 8006fae:	40da      	lsrs	r2, r3
 8006fb0:	4b80      	ldr	r3, [pc, #512]	@ (80071b4 <HAL_RCC_OscConfig+0x33c>)
 8006fb2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fb4:	4b80      	ldr	r3, [pc, #512]	@ (80071b8 <HAL_RCC_OscConfig+0x340>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	250f      	movs	r5, #15
 8006fba:	197c      	adds	r4, r7, r5
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7fe f94f 	bl	8005260 <HAL_InitTick>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006fc6:	197b      	adds	r3, r7, r5
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d057      	beq.n	800707e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8006fce:	197b      	adds	r3, r7, r5
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	f000 fb6e 	bl	80076b2 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d035      	beq.n	800704a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fde:	4b72      	ldr	r3, [pc, #456]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b71      	ldr	r3, [pc, #452]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fea:	f7fe f993 	bl	8005314 <HAL_GetTick>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ff2:	e009      	b.n	8007008 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006ff4:	f7fe f98e 	bl	8005314 <HAL_GetTick>
 8006ff8:	0002      	movs	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d902      	bls.n	8007008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	f000 fb55 	bl	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007008:	4b67      	ldr	r3, [pc, #412]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2202      	movs	r2, #2
 800700e:	4013      	ands	r3, r2
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007012:	4b65      	ldr	r3, [pc, #404]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b64      	ldr	r3, [pc, #400]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007018:	2108      	movs	r1, #8
 800701a:	430a      	orrs	r2, r1
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	4b62      	ldr	r3, [pc, #392]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	22f0      	movs	r2, #240	@ 0xf0
 8007024:	4393      	bics	r3, r2
 8007026:	0019      	movs	r1, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800702c:	4b5e      	ldr	r3, [pc, #376]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 800702e:	430a      	orrs	r2, r1
 8007030:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007032:	4b5d      	ldr	r3, [pc, #372]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <HAL_RCC_OscConfig+0x334>)
 8007038:	4013      	ands	r3, r2
 800703a:	0019      	movs	r1, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	021a      	lsls	r2, r3, #8
 8007042:	4b59      	ldr	r3, [pc, #356]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	e01a      	b.n	8007080 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800704a:	4b57      	ldr	r3, [pc, #348]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b56      	ldr	r3, [pc, #344]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007050:	2101      	movs	r1, #1
 8007052:	438a      	bics	r2, r1
 8007054:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007056:	f7fe f95d 	bl	8005314 <HAL_GetTick>
 800705a:	0003      	movs	r3, r0
 800705c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007060:	f7fe f958 	bl	8005314 <HAL_GetTick>
 8007064:	0002      	movs	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e31f      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007072:	4b4d      	ldr	r3, [pc, #308]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2202      	movs	r2, #2
 8007078:	4013      	ands	r3, r2
 800707a:	d1f1      	bne.n	8007060 <HAL_RCC_OscConfig+0x1e8>
 800707c:	e000      	b.n	8007080 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800707e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	4013      	ands	r3, r2
 8007088:	d100      	bne.n	800708c <HAL_RCC_OscConfig+0x214>
 800708a:	e065      	b.n	8007158 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b10      	cmp	r3, #16
 8007090:	d005      	beq.n	800709e <HAL_RCC_OscConfig+0x226>
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b18      	cmp	r3, #24
 8007096:	d10e      	bne.n	80070b6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d10b      	bne.n	80070b6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709e:	4b42      	ldr	r3, [pc, #264]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	4013      	ands	r3, r2
 80070a8:	d055      	beq.n	8007156 <HAL_RCC_OscConfig+0x2de>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d151      	bne.n	8007156 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e2fd      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	2380      	movs	r3, #128	@ 0x80
 80070bc:	025b      	lsls	r3, r3, #9
 80070be:	429a      	cmp	r2, r3
 80070c0:	d107      	bne.n	80070d2 <HAL_RCC_OscConfig+0x25a>
 80070c2:	4b39      	ldr	r3, [pc, #228]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b38      	ldr	r3, [pc, #224]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070c8:	2180      	movs	r1, #128	@ 0x80
 80070ca:	0249      	lsls	r1, r1, #9
 80070cc:	430a      	orrs	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e013      	b.n	80070fa <HAL_RCC_OscConfig+0x282>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	23a0      	movs	r3, #160	@ 0xa0
 80070d8:	02db      	lsls	r3, r3, #11
 80070da:	429a      	cmp	r2, r3
 80070dc:	d107      	bne.n	80070ee <HAL_RCC_OscConfig+0x276>
 80070de:	4b32      	ldr	r3, [pc, #200]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b31      	ldr	r3, [pc, #196]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070e4:	21a0      	movs	r1, #160	@ 0xa0
 80070e6:	02c9      	lsls	r1, r1, #11
 80070e8:	430a      	orrs	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e005      	b.n	80070fa <HAL_RCC_OscConfig+0x282>
 80070ee:	4b2e      	ldr	r3, [pc, #184]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4b2d      	ldr	r3, [pc, #180]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80070f4:	4931      	ldr	r1, [pc, #196]	@ (80071bc <HAL_RCC_OscConfig+0x344>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d014      	beq.n	800712c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007102:	f7fe f907 	bl	8005314 <HAL_GetTick>
 8007106:	0003      	movs	r3, r0
 8007108:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800710c:	f7fe f902 	bl	8005314 <HAL_GetTick>
 8007110:	0002      	movs	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b64      	cmp	r3, #100	@ 0x64
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e2c9      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800711e:	4b22      	ldr	r3, [pc, #136]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	2380      	movs	r3, #128	@ 0x80
 8007124:	029b      	lsls	r3, r3, #10
 8007126:	4013      	ands	r3, r2
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x294>
 800712a:	e015      	b.n	8007158 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fe f8f2 	bl	8005314 <HAL_GetTick>
 8007130:	0003      	movs	r3, r0
 8007132:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007136:	f7fe f8ed 	bl	8005314 <HAL_GetTick>
 800713a:	0002      	movs	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b64      	cmp	r3, #100	@ 0x64
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e2b4      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007148:	4b17      	ldr	r3, [pc, #92]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	2380      	movs	r3, #128	@ 0x80
 800714e:	029b      	lsls	r3, r3, #10
 8007150:	4013      	ands	r3, r2
 8007152:	d1f0      	bne.n	8007136 <HAL_RCC_OscConfig+0x2be>
 8007154:	e000      	b.n	8007158 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007156:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2202      	movs	r2, #2
 800715e:	4013      	ands	r3, r2
 8007160:	d100      	bne.n	8007164 <HAL_RCC_OscConfig+0x2ec>
 8007162:	e074      	b.n	800724e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b08      	cmp	r3, #8
 8007168:	d005      	beq.n	8007176 <HAL_RCC_OscConfig+0x2fe>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b18      	cmp	r3, #24
 800716e:	d129      	bne.n	80071c4 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d126      	bne.n	80071c4 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007176:	4b0c      	ldr	r3, [pc, #48]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	2380      	movs	r3, #128	@ 0x80
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4013      	ands	r3, r2
 8007180:	d005      	beq.n	800718e <HAL_RCC_OscConfig+0x316>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e291      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4a0b      	ldr	r2, [pc, #44]	@ (80071c0 <HAL_RCC_OscConfig+0x348>)
 8007194:	4013      	ands	r3, r2
 8007196:	0019      	movs	r1, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	061a      	lsls	r2, r3, #24
 800719e:	4b02      	ldr	r3, [pc, #8]	@ (80071a8 <HAL_RCC_OscConfig+0x330>)
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a4:	e053      	b.n	800724e <HAL_RCC_OscConfig+0x3d6>
 80071a6:	46c0      	nop			@ (mov r8, r8)
 80071a8:	40021000 	.word	0x40021000
 80071ac:	ffff00ff 	.word	0xffff00ff
 80071b0:	0801215c 	.word	0x0801215c
 80071b4:	20000014 	.word	0x20000014
 80071b8:	20000018 	.word	0x20000018
 80071bc:	fffaffff 	.word	0xfffaffff
 80071c0:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d026      	beq.n	800721a <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071cc:	4bc7      	ldr	r3, [pc, #796]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4bc6      	ldr	r3, [pc, #792]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80071d2:	2180      	movs	r1, #128	@ 0x80
 80071d4:	0049      	lsls	r1, r1, #1
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fe f89b 	bl	8005314 <HAL_GetTick>
 80071de:	0003      	movs	r3, r0
 80071e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80071e4:	f7fe f896 	bl	8005314 <HAL_GetTick>
 80071e8:	0002      	movs	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e25d      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f6:	4bbd      	ldr	r3, [pc, #756]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	2380      	movs	r3, #128	@ 0x80
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4013      	ands	r3, r2
 8007200:	d0f0      	beq.n	80071e4 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007202:	4bba      	ldr	r3, [pc, #744]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	4aba      	ldr	r2, [pc, #744]	@ (80074f0 <HAL_RCC_OscConfig+0x678>)
 8007208:	4013      	ands	r3, r2
 800720a:	0019      	movs	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	061a      	lsls	r2, r3, #24
 8007212:	4bb6      	ldr	r3, [pc, #728]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007214:	430a      	orrs	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	e019      	b.n	800724e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800721a:	4bb4      	ldr	r3, [pc, #720]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4bb3      	ldr	r3, [pc, #716]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007220:	49b4      	ldr	r1, [pc, #720]	@ (80074f4 <HAL_RCC_OscConfig+0x67c>)
 8007222:	400a      	ands	r2, r1
 8007224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007226:	f7fe f875 	bl	8005314 <HAL_GetTick>
 800722a:	0003      	movs	r3, r0
 800722c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007230:	f7fe f870 	bl	8005314 <HAL_GetTick>
 8007234:	0002      	movs	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e237      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007242:	4baa      	ldr	r3, [pc, #680]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	2380      	movs	r3, #128	@ 0x80
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4013      	ands	r3, r2
 800724c:	d1f0      	bne.n	8007230 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2208      	movs	r2, #8
 8007254:	4013      	ands	r3, r2
 8007256:	d051      	beq.n	80072fc <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d031      	beq.n	80072c4 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8007268:	4aa0      	ldr	r2, [pc, #640]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800726a:	2394      	movs	r3, #148	@ 0x94
 800726c:	58d3      	ldr	r3, [r2, r3]
 800726e:	499f      	ldr	r1, [pc, #636]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007270:	2204      	movs	r2, #4
 8007272:	4393      	bics	r3, r2
 8007274:	2294      	movs	r2, #148	@ 0x94
 8007276:	508b      	str	r3, [r1, r2]
 8007278:	e007      	b.n	800728a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800727a:	4a9c      	ldr	r2, [pc, #624]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800727c:	2394      	movs	r3, #148	@ 0x94
 800727e:	58d3      	ldr	r3, [r2, r3]
 8007280:	499a      	ldr	r1, [pc, #616]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007282:	2204      	movs	r2, #4
 8007284:	4313      	orrs	r3, r2
 8007286:	2294      	movs	r2, #148	@ 0x94
 8007288:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728a:	4a98      	ldr	r2, [pc, #608]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800728c:	2394      	movs	r3, #148	@ 0x94
 800728e:	58d3      	ldr	r3, [r2, r3]
 8007290:	4996      	ldr	r1, [pc, #600]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007292:	2201      	movs	r2, #1
 8007294:	4313      	orrs	r3, r2
 8007296:	2294      	movs	r2, #148	@ 0x94
 8007298:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729a:	f7fe f83b 	bl	8005314 <HAL_GetTick>
 800729e:	0003      	movs	r3, r0
 80072a0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a4:	f7fe f836 	bl	8005314 <HAL_GetTick>
 80072a8:	0002      	movs	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b11      	cmp	r3, #17
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e1fd      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072b6:	4a8d      	ldr	r2, [pc, #564]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80072b8:	2394      	movs	r3, #148	@ 0x94
 80072ba:	58d3      	ldr	r3, [r2, r3]
 80072bc:	2202      	movs	r2, #2
 80072be:	4013      	ands	r3, r2
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCC_OscConfig+0x42c>
 80072c2:	e01b      	b.n	80072fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c4:	4a89      	ldr	r2, [pc, #548]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80072c6:	2394      	movs	r3, #148	@ 0x94
 80072c8:	58d3      	ldr	r3, [r2, r3]
 80072ca:	4988      	ldr	r1, [pc, #544]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	4393      	bics	r3, r2
 80072d0:	2294      	movs	r2, #148	@ 0x94
 80072d2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fe f81e 	bl	8005314 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072de:	f7fe f819 	bl	8005314 <HAL_GetTick>
 80072e2:	0002      	movs	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b11      	cmp	r3, #17
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e1e0      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072f0:	4a7e      	ldr	r2, [pc, #504]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80072f2:	2394      	movs	r3, #148	@ 0x94
 80072f4:	58d3      	ldr	r3, [r2, r3]
 80072f6:	2202      	movs	r2, #2
 80072f8:	4013      	ands	r3, r2
 80072fa:	d1f0      	bne.n	80072de <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2204      	movs	r2, #4
 8007302:	4013      	ands	r3, r2
 8007304:	d100      	bne.n	8007308 <HAL_RCC_OscConfig+0x490>
 8007306:	e10d      	b.n	8007524 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007308:	201f      	movs	r0, #31
 800730a:	183b      	adds	r3, r7, r0
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8007310:	4b76      	ldr	r3, [pc, #472]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007312:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007314:	2380      	movs	r3, #128	@ 0x80
 8007316:	055b      	lsls	r3, r3, #21
 8007318:	4013      	ands	r3, r2
 800731a:	d110      	bne.n	800733e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800731c:	4b73      	ldr	r3, [pc, #460]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800731e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007320:	4b72      	ldr	r3, [pc, #456]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007322:	2180      	movs	r1, #128	@ 0x80
 8007324:	0549      	lsls	r1, r1, #21
 8007326:	430a      	orrs	r2, r1
 8007328:	659a      	str	r2, [r3, #88]	@ 0x58
 800732a:	4b70      	ldr	r3, [pc, #448]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800732c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800732e:	2380      	movs	r3, #128	@ 0x80
 8007330:	055b      	lsls	r3, r3, #21
 8007332:	4013      	ands	r3, r2
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007338:	183b      	adds	r3, r7, r0
 800733a:	2201      	movs	r2, #1
 800733c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800733e:	4b6e      	ldr	r3, [pc, #440]	@ (80074f8 <HAL_RCC_OscConfig+0x680>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	2380      	movs	r3, #128	@ 0x80
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4013      	ands	r3, r2
 8007348:	d11a      	bne.n	8007380 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800734a:	4b6b      	ldr	r3, [pc, #428]	@ (80074f8 <HAL_RCC_OscConfig+0x680>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b6a      	ldr	r3, [pc, #424]	@ (80074f8 <HAL_RCC_OscConfig+0x680>)
 8007350:	2180      	movs	r1, #128	@ 0x80
 8007352:	0049      	lsls	r1, r1, #1
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007358:	f7fd ffdc 	bl	8005314 <HAL_GetTick>
 800735c:	0003      	movs	r3, r0
 800735e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fd ffd7 	bl	8005314 <HAL_GetTick>
 8007366:	0002      	movs	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e19e      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007374:	4b60      	ldr	r3, [pc, #384]	@ (80074f8 <HAL_RCC_OscConfig+0x680>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	2380      	movs	r3, #128	@ 0x80
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	4013      	ands	r3, r2
 800737e:	d0f0      	beq.n	8007362 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2201      	movs	r2, #1
 8007386:	4013      	ands	r3, r2
 8007388:	d01e      	beq.n	80073c8 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2204      	movs	r2, #4
 8007390:	4013      	ands	r3, r2
 8007392:	d010      	beq.n	80073b6 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007394:	4a55      	ldr	r2, [pc, #340]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007396:	2390      	movs	r3, #144	@ 0x90
 8007398:	58d3      	ldr	r3, [r2, r3]
 800739a:	4954      	ldr	r1, [pc, #336]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800739c:	2204      	movs	r2, #4
 800739e:	4313      	orrs	r3, r2
 80073a0:	2290      	movs	r2, #144	@ 0x90
 80073a2:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073a4:	4a51      	ldr	r2, [pc, #324]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073a6:	2390      	movs	r3, #144	@ 0x90
 80073a8:	58d3      	ldr	r3, [r2, r3]
 80073aa:	4950      	ldr	r1, [pc, #320]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	4313      	orrs	r3, r2
 80073b0:	2290      	movs	r2, #144	@ 0x90
 80073b2:	508b      	str	r3, [r1, r2]
 80073b4:	e018      	b.n	80073e8 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073b6:	4a4d      	ldr	r2, [pc, #308]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073b8:	2390      	movs	r3, #144	@ 0x90
 80073ba:	58d3      	ldr	r3, [r2, r3]
 80073bc:	494b      	ldr	r1, [pc, #300]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073be:	2201      	movs	r2, #1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	2290      	movs	r2, #144	@ 0x90
 80073c4:	508b      	str	r3, [r1, r2]
 80073c6:	e00f      	b.n	80073e8 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073c8:	4a48      	ldr	r2, [pc, #288]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073ca:	2390      	movs	r3, #144	@ 0x90
 80073cc:	58d3      	ldr	r3, [r2, r3]
 80073ce:	4947      	ldr	r1, [pc, #284]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	4393      	bics	r3, r2
 80073d4:	2290      	movs	r2, #144	@ 0x90
 80073d6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073d8:	4a44      	ldr	r2, [pc, #272]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073da:	2390      	movs	r3, #144	@ 0x90
 80073dc:	58d3      	ldr	r3, [r2, r3]
 80073de:	4943      	ldr	r1, [pc, #268]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80073e0:	2204      	movs	r2, #4
 80073e2:	4393      	bics	r3, r2
 80073e4:	2290      	movs	r2, #144	@ 0x90
 80073e6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d04f      	beq.n	8007490 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f0:	f7fd ff90 	bl	8005314 <HAL_GetTick>
 80073f4:	0003      	movs	r3, r0
 80073f6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073f8:	e009      	b.n	800740e <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fd ff8b 	bl	8005314 <HAL_GetTick>
 80073fe:	0002      	movs	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	4a3d      	ldr	r2, [pc, #244]	@ (80074fc <HAL_RCC_OscConfig+0x684>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e151      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800740e:	4a37      	ldr	r2, [pc, #220]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007410:	2390      	movs	r3, #144	@ 0x90
 8007412:	58d3      	ldr	r3, [r2, r3]
 8007414:	2202      	movs	r2, #2
 8007416:	4013      	ands	r3, r2
 8007418:	d0ef      	beq.n	80073fa <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2280      	movs	r2, #128	@ 0x80
 8007420:	4013      	ands	r3, r2
 8007422:	d01a      	beq.n	800745a <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007424:	4a31      	ldr	r2, [pc, #196]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007426:	2390      	movs	r3, #144	@ 0x90
 8007428:	58d3      	ldr	r3, [r2, r3]
 800742a:	4930      	ldr	r1, [pc, #192]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800742c:	2280      	movs	r2, #128	@ 0x80
 800742e:	4313      	orrs	r3, r2
 8007430:	2290      	movs	r2, #144	@ 0x90
 8007432:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007434:	e009      	b.n	800744a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fd ff6d 	bl	8005314 <HAL_GetTick>
 800743a:	0002      	movs	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	4a2e      	ldr	r2, [pc, #184]	@ (80074fc <HAL_RCC_OscConfig+0x684>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e133      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800744a:	4a28      	ldr	r2, [pc, #160]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800744c:	2390      	movs	r3, #144	@ 0x90
 800744e:	58d2      	ldr	r2, [r2, r3]
 8007450:	2380      	movs	r3, #128	@ 0x80
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	4013      	ands	r3, r2
 8007456:	d0ee      	beq.n	8007436 <HAL_RCC_OscConfig+0x5be>
 8007458:	e059      	b.n	800750e <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800745a:	4a24      	ldr	r2, [pc, #144]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 800745c:	2390      	movs	r3, #144	@ 0x90
 800745e:	58d3      	ldr	r3, [r2, r3]
 8007460:	4922      	ldr	r1, [pc, #136]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007462:	2280      	movs	r2, #128	@ 0x80
 8007464:	4393      	bics	r3, r2
 8007466:	2290      	movs	r2, #144	@ 0x90
 8007468:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800746a:	e009      	b.n	8007480 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746c:	f7fd ff52 	bl	8005314 <HAL_GetTick>
 8007470:	0002      	movs	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	4a21      	ldr	r2, [pc, #132]	@ (80074fc <HAL_RCC_OscConfig+0x684>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e118      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007480:	4a1a      	ldr	r2, [pc, #104]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 8007482:	2390      	movs	r3, #144	@ 0x90
 8007484:	58d2      	ldr	r2, [r2, r3]
 8007486:	2380      	movs	r3, #128	@ 0x80
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	4013      	ands	r3, r2
 800748c:	d1ee      	bne.n	800746c <HAL_RCC_OscConfig+0x5f4>
 800748e:	e03e      	b.n	800750e <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007490:	f7fd ff40 	bl	8005314 <HAL_GetTick>
 8007494:	0003      	movs	r3, r0
 8007496:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007498:	e009      	b.n	80074ae <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749a:	f7fd ff3b 	bl	8005314 <HAL_GetTick>
 800749e:	0002      	movs	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <HAL_RCC_OscConfig+0x684>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e101      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074ae:	4a0f      	ldr	r2, [pc, #60]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80074b0:	2390      	movs	r3, #144	@ 0x90
 80074b2:	58d3      	ldr	r3, [r2, r3]
 80074b4:	2202      	movs	r2, #2
 80074b6:	4013      	ands	r3, r2
 80074b8:	d1ef      	bne.n	800749a <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80074ba:	4a0c      	ldr	r2, [pc, #48]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80074bc:	2390      	movs	r3, #144	@ 0x90
 80074be:	58d3      	ldr	r3, [r2, r3]
 80074c0:	2280      	movs	r2, #128	@ 0x80
 80074c2:	4013      	ands	r3, r2
 80074c4:	d023      	beq.n	800750e <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074c6:	4a09      	ldr	r2, [pc, #36]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80074c8:	2390      	movs	r3, #144	@ 0x90
 80074ca:	58d3      	ldr	r3, [r2, r3]
 80074cc:	4907      	ldr	r1, [pc, #28]	@ (80074ec <HAL_RCC_OscConfig+0x674>)
 80074ce:	2280      	movs	r2, #128	@ 0x80
 80074d0:	4393      	bics	r3, r2
 80074d2:	2290      	movs	r2, #144	@ 0x90
 80074d4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074d6:	e013      	b.n	8007500 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d8:	f7fd ff1c 	bl	8005314 <HAL_GetTick>
 80074dc:	0002      	movs	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	4a06      	ldr	r2, [pc, #24]	@ (80074fc <HAL_RCC_OscConfig+0x684>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d90b      	bls.n	8007500 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e0e2      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
 80074ec:	40021000 	.word	0x40021000
 80074f0:	80ffffff 	.word	0x80ffffff
 80074f4:	fffffeff 	.word	0xfffffeff
 80074f8:	40007000 	.word	0x40007000
 80074fc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007500:	4a6e      	ldr	r2, [pc, #440]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007502:	2390      	movs	r3, #144	@ 0x90
 8007504:	58d2      	ldr	r2, [r2, r3]
 8007506:	2380      	movs	r3, #128	@ 0x80
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	4013      	ands	r3, r2
 800750c:	d1e4      	bne.n	80074d8 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800750e:	231f      	movs	r3, #31
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d105      	bne.n	8007524 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007518:	4b68      	ldr	r3, [pc, #416]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800751a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800751c:	4b67      	ldr	r3, [pc, #412]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800751e:	4968      	ldr	r1, [pc, #416]	@ (80076c0 <HAL_RCC_OscConfig+0x848>)
 8007520:	400a      	ands	r2, r1
 8007522:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2220      	movs	r2, #32
 800752a:	4013      	ands	r3, r2
 800752c:	d03c      	beq.n	80075a8 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01c      	beq.n	8007570 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007536:	4a61      	ldr	r2, [pc, #388]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007538:	2398      	movs	r3, #152	@ 0x98
 800753a:	58d3      	ldr	r3, [r2, r3]
 800753c:	495f      	ldr	r1, [pc, #380]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800753e:	2201      	movs	r2, #1
 8007540:	4313      	orrs	r3, r2
 8007542:	2298      	movs	r2, #152	@ 0x98
 8007544:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007546:	f7fd fee5 	bl	8005314 <HAL_GetTick>
 800754a:	0003      	movs	r3, r0
 800754c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007550:	f7fd fee0 	bl	8005314 <HAL_GetTick>
 8007554:	0002      	movs	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e0a7      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007562:	4a56      	ldr	r2, [pc, #344]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007564:	2398      	movs	r3, #152	@ 0x98
 8007566:	58d3      	ldr	r3, [r2, r3]
 8007568:	2202      	movs	r2, #2
 800756a:	4013      	ands	r3, r2
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0x6d8>
 800756e:	e01b      	b.n	80075a8 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007570:	4a52      	ldr	r2, [pc, #328]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007572:	2398      	movs	r3, #152	@ 0x98
 8007574:	58d3      	ldr	r3, [r2, r3]
 8007576:	4951      	ldr	r1, [pc, #324]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007578:	2201      	movs	r2, #1
 800757a:	4393      	bics	r3, r2
 800757c:	2298      	movs	r2, #152	@ 0x98
 800757e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007580:	f7fd fec8 	bl	8005314 <HAL_GetTick>
 8007584:	0003      	movs	r3, r0
 8007586:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8007588:	e008      	b.n	800759c <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800758a:	f7fd fec3 	bl	8005314 <HAL_GetTick>
 800758e:	0002      	movs	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e08a      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800759c:	4a47      	ldr	r2, [pc, #284]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800759e:	2398      	movs	r3, #152	@ 0x98
 80075a0:	58d3      	ldr	r3, [r2, r3]
 80075a2:	2202      	movs	r2, #2
 80075a4:	4013      	ands	r3, r2
 80075a6:	d1f0      	bne.n	800758a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d100      	bne.n	80075b2 <HAL_RCC_OscConfig+0x73a>
 80075b0:	e07e      	b.n	80076b0 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075b2:	4b42      	ldr	r3, [pc, #264]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2238      	movs	r2, #56	@ 0x38
 80075b8:	4013      	ands	r3, r2
 80075ba:	2b18      	cmp	r3, #24
 80075bc:	d100      	bne.n	80075c0 <HAL_RCC_OscConfig+0x748>
 80075be:	e075      	b.n	80076ac <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d156      	bne.n	8007676 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c8:	4b3c      	ldr	r3, [pc, #240]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4b3b      	ldr	r3, [pc, #236]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 80075ce:	493d      	ldr	r1, [pc, #244]	@ (80076c4 <HAL_RCC_OscConfig+0x84c>)
 80075d0:	400a      	ands	r2, r1
 80075d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d4:	f7fd fe9e 	bl	8005314 <HAL_GetTick>
 80075d8:	0003      	movs	r3, r0
 80075da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075de:	f7fd fe99 	bl	8005314 <HAL_GetTick>
 80075e2:	0002      	movs	r2, r0
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e060      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075f0:	4b32      	ldr	r3, [pc, #200]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	2380      	movs	r3, #128	@ 0x80
 80075f6:	049b      	lsls	r3, r3, #18
 80075f8:	4013      	ands	r3, r2
 80075fa:	d1f0      	bne.n	80075de <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075fc:	4b2f      	ldr	r3, [pc, #188]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4a31      	ldr	r2, [pc, #196]	@ (80076c8 <HAL_RCC_OscConfig+0x850>)
 8007602:	4013      	ands	r3, r2
 8007604:	0019      	movs	r1, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007628:	431a      	orrs	r2, r3
 800762a:	4b24      	ldr	r3, [pc, #144]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800762c:	430a      	orrs	r2, r1
 800762e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8007630:	4b22      	ldr	r3, [pc, #136]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	4b21      	ldr	r3, [pc, #132]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007636:	2180      	movs	r1, #128	@ 0x80
 8007638:	0549      	lsls	r1, r1, #21
 800763a:	430a      	orrs	r2, r1
 800763c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800763e:	4b1f      	ldr	r3, [pc, #124]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b1e      	ldr	r3, [pc, #120]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007644:	2180      	movs	r1, #128	@ 0x80
 8007646:	0449      	lsls	r1, r1, #17
 8007648:	430a      	orrs	r2, r1
 800764a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fd fe62 	bl	8005314 <HAL_GetTick>
 8007650:	0003      	movs	r3, r0
 8007652:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007656:	f7fd fe5d 	bl	8005314 <HAL_GetTick>
 800765a:	0002      	movs	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e024      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007668:	4b14      	ldr	r3, [pc, #80]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	2380      	movs	r3, #128	@ 0x80
 800766e:	049b      	lsls	r3, r3, #18
 8007670:	4013      	ands	r3, r2
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x7de>
 8007674:	e01c      	b.n	80076b0 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007676:	4b11      	ldr	r3, [pc, #68]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b10      	ldr	r3, [pc, #64]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 800767c:	4911      	ldr	r1, [pc, #68]	@ (80076c4 <HAL_RCC_OscConfig+0x84c>)
 800767e:	400a      	ands	r2, r1
 8007680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007682:	f7fd fe47 	bl	8005314 <HAL_GetTick>
 8007686:	0003      	movs	r3, r0
 8007688:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768c:	f7fd fe42 	bl	8005314 <HAL_GetTick>
 8007690:	0002      	movs	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e009      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800769e:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <HAL_RCC_OscConfig+0x844>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	049b      	lsls	r3, r3, #18
 80076a6:	4013      	ands	r3, r2
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x814>
 80076aa:	e001      	b.n	80076b0 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	0018      	movs	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b008      	add	sp, #32
 80076b8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	40021000 	.word	0x40021000
 80076c0:	efffffff 	.word	0xefffffff
 80076c4:	feffffff 	.word	0xfeffffff
 80076c8:	11c1808c 	.word	0x11c1808c

080076cc <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80076cc:	b5b0      	push	{r4, r5, r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2207      	movs	r2, #7
 80076dc:	4013      	ands	r3, r2
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d911      	bls.n	8007708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e4:	4b68      	ldr	r3, [pc, #416]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2207      	movs	r2, #7
 80076ea:	4393      	bics	r3, r2
 80076ec:	0019      	movs	r1, r3
 80076ee:	4b66      	ldr	r3, [pc, #408]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f6:	4b64      	ldr	r3, [pc, #400]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2207      	movs	r2, #7
 80076fc:	4013      	ands	r3, r2
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0bb      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2201      	movs	r2, #1
 800770e:	4013      	ands	r3, r2
 8007710:	d100      	bne.n	8007714 <HAL_RCC_ClockConfig+0x48>
 8007712:	e064      	b.n	80077de <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d107      	bne.n	800772c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771c:	4b5b      	ldr	r3, [pc, #364]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	2380      	movs	r3, #128	@ 0x80
 8007722:	049b      	lsls	r3, r3, #18
 8007724:	4013      	ands	r3, r2
 8007726:	d138      	bne.n	800779a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0a9      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d107      	bne.n	8007744 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007734:	4b55      	ldr	r3, [pc, #340]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	2380      	movs	r3, #128	@ 0x80
 800773a:	029b      	lsls	r3, r3, #10
 800773c:	4013      	ands	r3, r2
 800773e:	d12c      	bne.n	800779a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e09d      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d106      	bne.n	800775a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800774c:	4b4f      	ldr	r3, [pc, #316]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2202      	movs	r2, #2
 8007752:	4013      	ands	r3, r2
 8007754:	d121      	bne.n	800779a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e092      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d107      	bne.n	8007772 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007762:	4b4a      	ldr	r3, [pc, #296]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	2380      	movs	r3, #128	@ 0x80
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4013      	ands	r3, r2
 800776c:	d115      	bne.n	800779a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e086      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b04      	cmp	r3, #4
 8007778:	d107      	bne.n	800778a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800777a:	4a44      	ldr	r2, [pc, #272]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 800777c:	2394      	movs	r3, #148	@ 0x94
 800777e:	58d3      	ldr	r3, [r2, r3]
 8007780:	2202      	movs	r2, #2
 8007782:	4013      	ands	r3, r2
 8007784:	d109      	bne.n	800779a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e07a      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800778a:	4a40      	ldr	r2, [pc, #256]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 800778c:	2390      	movs	r3, #144	@ 0x90
 800778e:	58d3      	ldr	r3, [r2, r3]
 8007790:	2202      	movs	r2, #2
 8007792:	4013      	ands	r3, r2
 8007794:	d101      	bne.n	800779a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e072      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800779a:	4b3c      	ldr	r3, [pc, #240]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2207      	movs	r2, #7
 80077a0:	4393      	bics	r3, r2
 80077a2:	0019      	movs	r1, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	4b38      	ldr	r3, [pc, #224]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 80077aa:	430a      	orrs	r2, r1
 80077ac:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077ae:	f7fd fdb1 	bl	8005314 <HAL_GetTick>
 80077b2:	0003      	movs	r3, r0
 80077b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b6:	e009      	b.n	80077cc <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b8:	f7fd fdac 	bl	8005314 <HAL_GetTick>
 80077bc:	0002      	movs	r2, r0
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	4a33      	ldr	r2, [pc, #204]	@ (8007890 <HAL_RCC_ClockConfig+0x1c4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e059      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077cc:	4b2f      	ldr	r3, [pc, #188]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2238      	movs	r2, #56	@ 0x38
 80077d2:	401a      	ands	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	429a      	cmp	r2, r3
 80077dc:	d1ec      	bne.n	80077b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2202      	movs	r2, #2
 80077e4:	4013      	ands	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b28      	ldr	r3, [pc, #160]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	4a29      	ldr	r2, [pc, #164]	@ (8007894 <HAL_RCC_ClockConfig+0x1c8>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	0019      	movs	r1, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	4b25      	ldr	r3, [pc, #148]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077fc:	4b22      	ldr	r3, [pc, #136]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2207      	movs	r2, #7
 8007802:	4013      	ands	r3, r2
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d211      	bcs.n	800782e <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780a:	4b1f      	ldr	r3, [pc, #124]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2207      	movs	r2, #7
 8007810:	4393      	bics	r3, r2
 8007812:	0019      	movs	r1, r3
 8007814:	4b1c      	ldr	r3, [pc, #112]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800781c:	4b1a      	ldr	r3, [pc, #104]	@ (8007888 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2207      	movs	r2, #7
 8007822:	4013      	ands	r3, r2
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d001      	beq.n	800782e <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e028      	b.n	8007880 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2204      	movs	r2, #4
 8007834:	4013      	ands	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	4a16      	ldr	r2, [pc, #88]	@ (8007898 <HAL_RCC_ClockConfig+0x1cc>)
 800783e:	4013      	ands	r3, r2
 8007840:	0019      	movs	r1, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	4b11      	ldr	r3, [pc, #68]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800784c:	f000 f82a 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 8007850:	0001      	movs	r1, r0
 8007852:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <HAL_RCC_ClockConfig+0x1c0>)
 8007854:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	220f      	movs	r2, #15
 800785a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800785c:	4a0f      	ldr	r2, [pc, #60]	@ (800789c <HAL_RCC_ClockConfig+0x1d0>)
 800785e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007860:	001a      	movs	r2, r3
 8007862:	231f      	movs	r3, #31
 8007864:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007866:	000a      	movs	r2, r1
 8007868:	40da      	lsrs	r2, r3
 800786a:	4b0d      	ldr	r3, [pc, #52]	@ (80078a0 <HAL_RCC_ClockConfig+0x1d4>)
 800786c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800786e:	250b      	movs	r5, #11
 8007870:	197c      	adds	r4, r7, r5
 8007872:	2003      	movs	r0, #3
 8007874:	f7fd fcf4 	bl	8005260 <HAL_InitTick>
 8007878:	0003      	movs	r3, r0
 800787a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 800787c:	197b      	adds	r3, r7, r5
 800787e:	781b      	ldrb	r3, [r3, #0]
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b004      	add	sp, #16
 8007886:	bdb0      	pop	{r4, r5, r7, pc}
 8007888:	40022000 	.word	0x40022000
 800788c:	40021000 	.word	0x40021000
 8007890:	00001388 	.word	0x00001388
 8007894:	fffff0ff 	.word	0xfffff0ff
 8007898:	ffff8fff 	.word	0xffff8fff
 800789c:	0801215c 	.word	0x0801215c
 80078a0:	20000014 	.word	0x20000014

080078a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08a      	sub	sp, #40	@ 0x28
 80078a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078b2:	4b46      	ldr	r3, [pc, #280]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2238      	movs	r2, #56	@ 0x38
 80078b8:	4013      	ands	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078bc:	4b43      	ldr	r3, [pc, #268]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2203      	movs	r2, #3
 80078c2:	4013      	ands	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_GetSysClockFreq+0x34>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b18      	cmp	r3, #24
 80078d0:	d125      	bne.n	800791e <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d122      	bne.n	800791e <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078d8:	4b3c      	ldr	r3, [pc, #240]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2208      	movs	r2, #8
 80078de:	4013      	ands	r3, r2
 80078e0:	d107      	bne.n	80078f2 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80078e2:	4a3a      	ldr	r2, [pc, #232]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 80078e4:	2394      	movs	r3, #148	@ 0x94
 80078e6:	58d3      	ldr	r3, [r2, r3]
 80078e8:	0a1b      	lsrs	r3, r3, #8
 80078ea:	220f      	movs	r2, #15
 80078ec:	4013      	ands	r3, r2
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80078f0:	e005      	b.n	80078fe <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078f2:	4b36      	ldr	r3, [pc, #216]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	091b      	lsrs	r3, r3, #4
 80078f8:	220f      	movs	r2, #15
 80078fa:	4013      	ands	r3, r2
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	2b0b      	cmp	r3, #11
 8007902:	d901      	bls.n	8007908 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8007908:	4b31      	ldr	r3, [pc, #196]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800790a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790c:	0092      	lsls	r2, r2, #2
 800790e:	58d3      	ldr	r3, [r2, r3]
 8007910:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11b      	bne.n	8007950 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800791c:	e018      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b08      	cmp	r3, #8
 8007922:	d102      	bne.n	800792a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007924:	4b2b      	ldr	r3, [pc, #172]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x130>)
 8007926:	623b      	str	r3, [r7, #32]
 8007928:	e012      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b10      	cmp	r3, #16
 800792e:	d102      	bne.n	8007936 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007930:	4b29      	ldr	r3, [pc, #164]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x134>)
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	e00c      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b20      	cmp	r3, #32
 800793a:	d103      	bne.n	8007944 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800793c:	23fa      	movs	r3, #250	@ 0xfa
 800793e:	01db      	lsls	r3, r3, #7
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e005      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b28      	cmp	r3, #40	@ 0x28
 8007948:	d102      	bne.n	8007950 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800794a:	2380      	movs	r3, #128	@ 0x80
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b18      	cmp	r3, #24
 8007954:	d135      	bne.n	80079c2 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007956:	4b1d      	ldr	r3, [pc, #116]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2203      	movs	r2, #3
 800795c:	4013      	ands	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007960:	4b1a      	ldr	r3, [pc, #104]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	2207      	movs	r2, #7
 8007968:	4013      	ands	r3, r2
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d003      	beq.n	800797c <HAL_RCC_GetSysClockFreq+0xd8>
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b03      	cmp	r3, #3
 8007978:	d003      	beq.n	8007982 <HAL_RCC_GetSysClockFreq+0xde>
 800797a:	e005      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 800797c:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x130>)
 800797e:	61fb      	str	r3, [r7, #28]
        break;
 8007980:	e005      	b.n	800798e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8007982:	4b15      	ldr	r3, [pc, #84]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x134>)
 8007984:	61fb      	str	r3, [r7, #28]
        break;
 8007986:	e002      	b.n	800798e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	61fb      	str	r3, [r7, #28]
        break;
 800798c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800798e:	4b0f      	ldr	r3, [pc, #60]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	227f      	movs	r2, #127	@ 0x7f
 8007996:	4013      	ands	r3, r2
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	4353      	muls	r3, r2
 800799c:	68f9      	ldr	r1, [r7, #12]
 800799e:	0018      	movs	r0, r3
 80079a0:	f7f8 fbce 	bl	8000140 <__udivsi3>
 80079a4:	0003      	movs	r3, r0
 80079a6:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80079a8:	4b08      	ldr	r3, [pc, #32]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x128>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	0f5b      	lsrs	r3, r3, #29
 80079ae:	2207      	movs	r2, #7
 80079b0:	4013      	ands	r3, r2
 80079b2:	3301      	adds	r3, #1
 80079b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7f8 fbc1 	bl	8000140 <__udivsi3>
 80079be:	0003      	movs	r3, r0
 80079c0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80079c2:	6a3b      	ldr	r3, [r7, #32]
}
 80079c4:	0018      	movs	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b00a      	add	sp, #40	@ 0x28
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40021000 	.word	0x40021000
 80079d0:	08012174 	.word	0x08012174
 80079d4:	00f42400 	.word	0x00f42400
 80079d8:	007a1200 	.word	0x007a1200

080079dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079e0:	4b02      	ldr	r3, [pc, #8]	@ (80079ec <HAL_RCC_GetHCLKFreq+0x10>)
 80079e2:	681b      	ldr	r3, [r3, #0]
}
 80079e4:	0018      	movs	r0, r3
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	46c0      	nop			@ (mov r8, r8)
 80079ec:	20000014 	.word	0x20000014

080079f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80079f4:	f7ff fff2 	bl	80079dc <HAL_RCC_GetHCLKFreq>
 80079f8:	0001      	movs	r1, r0
 80079fa:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	0b1b      	lsrs	r3, r3, #12
 8007a00:	2207      	movs	r2, #7
 8007a02:	4013      	ands	r3, r2
 8007a04:	4a05      	ldr	r2, [pc, #20]	@ (8007a1c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	001a      	movs	r2, r3
 8007a0a:	231f      	movs	r3, #31
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	40d9      	lsrs	r1, r3
 8007a10:	000b      	movs	r3, r1
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	0801216c 	.word	0x0801216c

08007a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	055b      	lsls	r3, r3, #21
 8007a34:	4013      	ands	r3, r2
 8007a36:	d004      	beq.n	8007a42 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a38:	f7ff fa12 	bl	8006e60 <HAL_PWREx_GetVoltageRange>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e017      	b.n	8007a72 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a42:	4b2a      	ldr	r3, [pc, #168]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a46:	4b29      	ldr	r3, [pc, #164]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a48:	2180      	movs	r1, #128	@ 0x80
 8007a4a:	0549      	lsls	r1, r1, #21
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a50:	4b26      	ldr	r3, [pc, #152]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a54:	2380      	movs	r3, #128	@ 0x80
 8007a56:	055b      	lsls	r3, r3, #21
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a5e:	f7ff f9ff 	bl	8006e60 <HAL_PWREx_GetVoltageRange>
 8007a62:	0003      	movs	r3, r0
 8007a64:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a66:	4b21      	ldr	r3, [pc, #132]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a6a:	4b20      	ldr	r3, [pc, #128]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007a6c:	4920      	ldr	r1, [pc, #128]	@ (8007af0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8007a6e:	400a      	ands	r2, r1
 8007a70:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	2380      	movs	r3, #128	@ 0x80
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d111      	bne.n	8007aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b80      	cmp	r3, #128	@ 0x80
 8007a80:	d91c      	bls.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a86:	d902      	bls.n	8007a8e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a88:	2302      	movs	r3, #2
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	e016      	b.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b90      	cmp	r3, #144	@ 0x90
 8007a92:	d902      	bls.n	8007a9a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a94:	2301      	movs	r3, #1
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	e010      	b.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	613b      	str	r3, [r7, #16]
 8007a9e:	e00d      	b.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007aa4:	d902      	bls.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	e007      	b.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b70      	cmp	r3, #112	@ 0x70
 8007ab0:	d102      	bne.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	e001      	b.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007abc:	4b0d      	ldr	r3, [pc, #52]	@ (8007af4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	4393      	bics	r3, r2
 8007ac4:	0019      	movs	r1, r3
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007ace:	4b09      	ldr	r3, [pc, #36]	@ (8007af4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2207      	movs	r2, #7
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d001      	beq.n	8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	b006      	add	sp, #24
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	40021000 	.word	0x40021000
 8007af0:	efffffff 	.word	0xefffffff
 8007af4:	40022000 	.word	0x40022000

08007af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b00:	2313      	movs	r3, #19
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b08:	2312      	movs	r3, #18
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	2380      	movs	r3, #128	@ 0x80
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007b1c:	e0b7      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b1e:	2011      	movs	r0, #17
 8007b20:	183b      	adds	r3, r7, r0
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b26:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b2a:	2380      	movs	r3, #128	@ 0x80
 8007b2c:	055b      	lsls	r3, r3, #21
 8007b2e:	4013      	ands	r3, r2
 8007b30:	d110      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b32:	4b49      	ldr	r3, [pc, #292]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b36:	4b48      	ldr	r3, [pc, #288]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b38:	2180      	movs	r1, #128	@ 0x80
 8007b3a:	0549      	lsls	r1, r1, #21
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b40:	4b45      	ldr	r3, [pc, #276]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b44:	2380      	movs	r3, #128	@ 0x80
 8007b46:	055b      	lsls	r3, r3, #21
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b4e:	183b      	adds	r3, r7, r0
 8007b50:	2201      	movs	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b54:	4b41      	ldr	r3, [pc, #260]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4b40      	ldr	r3, [pc, #256]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b5a:	2180      	movs	r1, #128	@ 0x80
 8007b5c:	0049      	lsls	r1, r1, #1
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b62:	f7fd fbd7 	bl	8005314 <HAL_GetTick>
 8007b66:	0003      	movs	r3, r0
 8007b68:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b6a:	e00b      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b6c:	f7fd fbd2 	bl	8005314 <HAL_GetTick>
 8007b70:	0002      	movs	r2, r0
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d904      	bls.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007b7a:	2313      	movs	r3, #19
 8007b7c:	18fb      	adds	r3, r7, r3
 8007b7e:	2203      	movs	r2, #3
 8007b80:	701a      	strb	r2, [r3, #0]
        break;
 8007b82:	e005      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b84:	4b35      	ldr	r3, [pc, #212]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	2380      	movs	r3, #128	@ 0x80
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d0ed      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007b90:	2313      	movs	r3, #19
 8007b92:	18fb      	adds	r3, r7, r3
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d168      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9c:	2390      	movs	r3, #144	@ 0x90
 8007b9e:	58d2      	ldr	r2, [r2, r3]
 8007ba0:	23c0      	movs	r3, #192	@ 0xc0
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d01f      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d01a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bb8:	4a27      	ldr	r2, [pc, #156]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bba:	2390      	movs	r3, #144	@ 0x90
 8007bbc:	58d3      	ldr	r3, [r2, r3]
 8007bbe:	4a28      	ldr	r2, [pc, #160]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bc4:	4a24      	ldr	r2, [pc, #144]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc6:	2390      	movs	r3, #144	@ 0x90
 8007bc8:	58d3      	ldr	r3, [r2, r3]
 8007bca:	4923      	ldr	r1, [pc, #140]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bcc:	2280      	movs	r2, #128	@ 0x80
 8007bce:	0252      	lsls	r2, r2, #9
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	2290      	movs	r2, #144	@ 0x90
 8007bd4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bd6:	4a20      	ldr	r2, [pc, #128]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bd8:	2390      	movs	r3, #144	@ 0x90
 8007bda:	58d3      	ldr	r3, [r2, r3]
 8007bdc:	491e      	ldr	r1, [pc, #120]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bde:	4a21      	ldr	r2, [pc, #132]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	2290      	movs	r2, #144	@ 0x90
 8007be4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007be6:	491c      	ldr	r1, [pc, #112]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007be8:	2290      	movs	r2, #144	@ 0x90
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	d017      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf6:	f7fd fb8d 	bl	8005314 <HAL_GetTick>
 8007bfa:	0003      	movs	r3, r0
 8007bfc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bfe:	e00c      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c00:	f7fd fb88 	bl	8005314 <HAL_GetTick>
 8007c04:	0002      	movs	r2, r0
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	4a17      	ldr	r2, [pc, #92]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d904      	bls.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8007c10:	2313      	movs	r3, #19
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	2203      	movs	r2, #3
 8007c16:	701a      	strb	r2, [r3, #0]
            break;
 8007c18:	e005      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c1c:	2390      	movs	r3, #144	@ 0x90
 8007c1e:	58d3      	ldr	r3, [r2, r3]
 8007c20:	2202      	movs	r2, #2
 8007c22:	4013      	ands	r3, r2
 8007c24:	d0ec      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8007c26:	2313      	movs	r3, #19
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c30:	4a09      	ldr	r2, [pc, #36]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c32:	2390      	movs	r3, #144	@ 0x90
 8007c34:	58d3      	ldr	r3, [r2, r3]
 8007c36:	4a0a      	ldr	r2, [pc, #40]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c38:	401a      	ands	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	4906      	ldr	r1, [pc, #24]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	2290      	movs	r2, #144	@ 0x90
 8007c44:	508b      	str	r3, [r1, r2]
 8007c46:	e017      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c48:	2312      	movs	r3, #18
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	2213      	movs	r2, #19
 8007c4e:	18ba      	adds	r2, r7, r2
 8007c50:	7812      	ldrb	r2, [r2, #0]
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e010      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	40007000 	.word	0x40007000
 8007c60:	fffffcff 	.word	0xfffffcff
 8007c64:	fffeffff 	.word	0xfffeffff
 8007c68:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	2312      	movs	r3, #18
 8007c6e:	18fb      	adds	r3, r7, r3
 8007c70:	2213      	movs	r2, #19
 8007c72:	18ba      	adds	r2, r7, r2
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c78:	2311      	movs	r3, #17
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d105      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c82:	4ba4      	ldr	r3, [pc, #656]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c86:	4ba3      	ldr	r3, [pc, #652]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c88:	49a3      	ldr	r1, [pc, #652]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007c8a:	400a      	ands	r2, r1
 8007c8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2201      	movs	r2, #1
 8007c94:	4013      	ands	r3, r2
 8007c96:	d00b      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c98:	4a9e      	ldr	r2, [pc, #632]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c9a:	2388      	movs	r3, #136	@ 0x88
 8007c9c:	58d3      	ldr	r3, [r2, r3]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	4393      	bics	r3, r2
 8007ca2:	001a      	movs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	499a      	ldr	r1, [pc, #616]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	2288      	movs	r2, #136	@ 0x88
 8007cae:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d00b      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cba:	4a96      	ldr	r2, [pc, #600]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cbc:	2388      	movs	r3, #136	@ 0x88
 8007cbe:	58d3      	ldr	r3, [r2, r3]
 8007cc0:	220c      	movs	r2, #12
 8007cc2:	4393      	bics	r3, r2
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	4992      	ldr	r1, [pc, #584]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	2288      	movs	r2, #136	@ 0x88
 8007cd0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d00a      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cdc:	4a8d      	ldr	r2, [pc, #564]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cde:	2388      	movs	r3, #136	@ 0x88
 8007ce0:	58d3      	ldr	r3, [r2, r3]
 8007ce2:	4a8e      	ldr	r2, [pc, #568]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007ce4:	401a      	ands	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	498a      	ldr	r1, [pc, #552]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	2288      	movs	r2, #136	@ 0x88
 8007cf0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007cfc:	4a85      	ldr	r2, [pc, #532]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cfe:	2388      	movs	r3, #136	@ 0x88
 8007d00:	58d3      	ldr	r3, [r2, r3]
 8007d02:	4a87      	ldr	r2, [pc, #540]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007d04:	401a      	ands	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	4982      	ldr	r1, [pc, #520]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	2288      	movs	r2, #136	@ 0x88
 8007d10:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2204      	movs	r2, #4
 8007d18:	4013      	ands	r3, r2
 8007d1a:	d00b      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007d1c:	4a7d      	ldr	r2, [pc, #500]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d1e:	2388      	movs	r3, #136	@ 0x88
 8007d20:	58d3      	ldr	r3, [r2, r3]
 8007d22:	22c0      	movs	r2, #192	@ 0xc0
 8007d24:	4393      	bics	r3, r2
 8007d26:	001a      	movs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4979      	ldr	r1, [pc, #484]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	2288      	movs	r2, #136	@ 0x88
 8007d32:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	d00a      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d3e:	4a75      	ldr	r2, [pc, #468]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d40:	2388      	movs	r3, #136	@ 0x88
 8007d42:	58d3      	ldr	r3, [r2, r3]
 8007d44:	4a77      	ldr	r2, [pc, #476]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d46:	401a      	ands	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	4971      	ldr	r1, [pc, #452]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	2288      	movs	r2, #136	@ 0x88
 8007d52:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2240      	movs	r2, #64	@ 0x40
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d00a      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d60:	2388      	movs	r3, #136	@ 0x88
 8007d62:	58d3      	ldr	r3, [r2, r3]
 8007d64:	4a70      	ldr	r2, [pc, #448]	@ (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8007d66:	401a      	ands	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	4969      	ldr	r1, [pc, #420]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	2288      	movs	r2, #136	@ 0x88
 8007d72:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2280      	movs	r2, #128	@ 0x80
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	d00a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d7e:	4a65      	ldr	r2, [pc, #404]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d80:	2388      	movs	r3, #136	@ 0x88
 8007d82:	58d3      	ldr	r3, [r2, r3]
 8007d84:	4a69      	ldr	r2, [pc, #420]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007d86:	401a      	ands	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	4961      	ldr	r1, [pc, #388]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	2288      	movs	r2, #136	@ 0x88
 8007d92:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	2380      	movs	r3, #128	@ 0x80
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	d00a      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007da0:	4a5c      	ldr	r2, [pc, #368]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007da2:	2388      	movs	r3, #136	@ 0x88
 8007da4:	58d3      	ldr	r3, [r2, r3]
 8007da6:	4a62      	ldr	r2, [pc, #392]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007da8:	401a      	ands	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dae:	4959      	ldr	r1, [pc, #356]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	2288      	movs	r2, #136	@ 0x88
 8007db4:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	2380      	movs	r3, #128	@ 0x80
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007dc2:	4a54      	ldr	r2, [pc, #336]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dc4:	2388      	movs	r3, #136	@ 0x88
 8007dc6:	58d3      	ldr	r3, [r2, r3]
 8007dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8007dca:	401a      	ands	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	4950      	ldr	r1, [pc, #320]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	2288      	movs	r2, #136	@ 0x88
 8007dd6:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	2380      	movs	r3, #128	@ 0x80
 8007dde:	01db      	lsls	r3, r3, #7
 8007de0:	4013      	ands	r3, r2
 8007de2:	d017      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007de8:	2380      	movs	r3, #128	@ 0x80
 8007dea:	055b      	lsls	r3, r3, #21
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d106      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007df0:	4b48      	ldr	r3, [pc, #288]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	4b47      	ldr	r3, [pc, #284]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007df6:	2180      	movs	r1, #128	@ 0x80
 8007df8:	0249      	lsls	r1, r1, #9
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dfe:	4a45      	ldr	r2, [pc, #276]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e00:	2388      	movs	r3, #136	@ 0x88
 8007e02:	58d3      	ldr	r3, [r2, r3]
 8007e04:	4a4c      	ldr	r2, [pc, #304]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8007e06:	401a      	ands	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0c:	4941      	ldr	r1, [pc, #260]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	2288      	movs	r2, #136	@ 0x88
 8007e12:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	2380      	movs	r3, #128	@ 0x80
 8007e1a:	015b      	lsls	r3, r3, #5
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	d017      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e24:	2380      	movs	r3, #128	@ 0x80
 8007e26:	051b      	lsls	r3, r3, #20
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e2c:	4b39      	ldr	r3, [pc, #228]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	4b38      	ldr	r3, [pc, #224]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e32:	2180      	movs	r1, #128	@ 0x80
 8007e34:	0449      	lsls	r1, r1, #17
 8007e36:	430a      	orrs	r2, r1
 8007e38:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e3a:	4a36      	ldr	r2, [pc, #216]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e3c:	2388      	movs	r3, #136	@ 0x88
 8007e3e:	58d3      	ldr	r3, [r2, r3]
 8007e40:	4a3e      	ldr	r2, [pc, #248]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e42:	401a      	ands	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e48:	4932      	ldr	r1, [pc, #200]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	2288      	movs	r2, #136	@ 0x88
 8007e4e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	2380      	movs	r3, #128	@ 0x80
 8007e56:	019b      	lsls	r3, r3, #6
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d017      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e60:	2380      	movs	r3, #128	@ 0x80
 8007e62:	051b      	lsls	r3, r3, #20
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d106      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e68:	4b2a      	ldr	r3, [pc, #168]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	4b29      	ldr	r3, [pc, #164]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e6e:	2180      	movs	r1, #128	@ 0x80
 8007e70:	0449      	lsls	r1, r1, #17
 8007e72:	430a      	orrs	r2, r1
 8007e74:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e76:	4a27      	ldr	r2, [pc, #156]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e78:	2388      	movs	r3, #136	@ 0x88
 8007e7a:	58d3      	ldr	r3, [r2, r3]
 8007e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e7e:	401a      	ands	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e84:	4923      	ldr	r1, [pc, #140]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	2288      	movs	r2, #136	@ 0x88
 8007e8a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	2380      	movs	r3, #128	@ 0x80
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4013      	ands	r3, r2
 8007e96:	d017      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9c:	2380      	movs	r3, #128	@ 0x80
 8007e9e:	045b      	lsls	r3, r3, #17
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d106      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eaa:	2180      	movs	r1, #128	@ 0x80
 8007eac:	0449      	lsls	r1, r1, #17
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007eb2:	4a18      	ldr	r2, [pc, #96]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007eb4:	2388      	movs	r3, #136	@ 0x88
 8007eb6:	58d3      	ldr	r3, [r2, r3]
 8007eb8:	4a21      	ldr	r2, [pc, #132]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007eba:	401a      	ands	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4914      	ldr	r1, [pc, #80]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	2288      	movs	r2, #136	@ 0x88
 8007ec6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	2380      	movs	r3, #128	@ 0x80
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d017      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ed8:	2380      	movs	r3, #128	@ 0x80
 8007eda:	049b      	lsls	r3, r3, #18
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d106      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ee6:	2180      	movs	r1, #128	@ 0x80
 8007ee8:	0449      	lsls	r1, r1, #17
 8007eea:	430a      	orrs	r2, r1
 8007eec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007eee:	4a09      	ldr	r2, [pc, #36]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ef0:	2388      	movs	r3, #136	@ 0x88
 8007ef2:	58d3      	ldr	r3, [r2, r3]
 8007ef4:	4a12      	ldr	r2, [pc, #72]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efc:	4905      	ldr	r1, [pc, #20]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	2288      	movs	r2, #136	@ 0x88
 8007f02:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007f04:	2312      	movs	r3, #18
 8007f06:	18fb      	adds	r3, r7, r3
 8007f08:	781b      	ldrb	r3, [r3, #0]
}
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b006      	add	sp, #24
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	46c0      	nop			@ (mov r8, r8)
 8007f14:	40021000 	.word	0x40021000
 8007f18:	efffffff 	.word	0xefffffff
 8007f1c:	fffff3ff 	.word	0xfffff3ff
 8007f20:	fffffcff 	.word	0xfffffcff
 8007f24:	ffffcfff 	.word	0xffffcfff
 8007f28:	fffcffff 	.word	0xfffcffff
 8007f2c:	fff3ffff 	.word	0xfff3ffff
 8007f30:	ffcfffff 	.word	0xffcfffff
 8007f34:	ff3fffff 	.word	0xff3fffff
 8007f38:	cfffffff 	.word	0xcfffffff
 8007f3c:	f3ffffff 	.word	0xf3ffffff
 8007f40:	feffffff 	.word	0xfeffffff

08007f44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b089      	sub	sp, #36	@ 0x24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	2380      	movs	r3, #128	@ 0x80
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d154      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007f5a:	4ad5      	ldr	r2, [pc, #852]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f5c:	2390      	movs	r3, #144	@ 0x90
 8007f5e:	58d2      	ldr	r2, [r2, r3]
 8007f60:	23c0      	movs	r3, #192	@ 0xc0
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4013      	ands	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	23c0      	movs	r3, #192	@ 0xc0
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d039      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	23c0      	movs	r3, #192	@ 0xc0
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007f7c:	f000 fd1a 	bl	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	2380      	movs	r3, #128	@ 0x80
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d006      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	2380      	movs	r3, #128	@ 0x80
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d00f      	beq.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8007f94:	f000 fd0e 	bl	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f98:	4ac5      	ldr	r2, [pc, #788]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f9a:	2390      	movs	r3, #144	@ 0x90
 8007f9c:	58d3      	ldr	r3, [r2, r3]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d001      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007fa6:	f000 fd07 	bl	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007faa:	2380      	movs	r3, #128	@ 0x80
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	61fb      	str	r3, [r7, #28]
        break;
 8007fb0:	f000 fd02 	bl	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007fb4:	4abe      	ldr	r2, [pc, #760]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fb6:	2394      	movs	r3, #148	@ 0x94
 8007fb8:	58d3      	ldr	r3, [r2, r3]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d001      	beq.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8007fc2:	f000 fcfb 	bl	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007fc6:	4aba      	ldr	r2, [pc, #744]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fc8:	2394      	movs	r3, #148	@ 0x94
 8007fca:	58d3      	ldr	r3, [r2, r3]
 8007fcc:	2204      	movs	r2, #4
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d103      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8007fd4:	23fa      	movs	r3, #250	@ 0xfa
 8007fd6:	61fb      	str	r3, [r7, #28]
        break;
 8007fd8:	f000 fcf0 	bl	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8007fdc:	23fa      	movs	r3, #250	@ 0xfa
 8007fde:	01db      	lsls	r3, r3, #7
 8007fe0:	61fb      	str	r3, [r7, #28]
        break;
 8007fe2:	f000 fceb 	bl	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fe6:	4bb2      	ldr	r3, [pc, #712]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	2380      	movs	r3, #128	@ 0x80
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	401a      	ands	r2, r3
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d001      	beq.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007ff8:	f000 fce2 	bl	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8007ffc:	4bad      	ldr	r3, [pc, #692]	@ (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007ffe:	61fb      	str	r3, [r7, #28]
        break;
 8008000:	f000 fcde 	bl	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	2380      	movs	r3, #128	@ 0x80
 8008008:	029b      	lsls	r3, r3, #10
 800800a:	429a      	cmp	r2, r3
 800800c:	d100      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800800e:	e11a      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	2380      	movs	r3, #128	@ 0x80
 8008014:	029b      	lsls	r3, r3, #10
 8008016:	429a      	cmp	r2, r3
 8008018:	d901      	bls.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800801a:	f000 fcd3 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	2380      	movs	r3, #128	@ 0x80
 8008022:	025b      	lsls	r3, r3, #9
 8008024:	429a      	cmp	r2, r3
 8008026:	d100      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008028:	e10d      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	025b      	lsls	r3, r3, #9
 8008030:	429a      	cmp	r2, r3
 8008032:	d901      	bls.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008034:	f000 fcc6 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	2380      	movs	r3, #128	@ 0x80
 800803c:	01db      	lsls	r3, r3, #7
 800803e:	429a      	cmp	r2, r3
 8008040:	d100      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008042:	e1eb      	b.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	2380      	movs	r3, #128	@ 0x80
 8008048:	01db      	lsls	r3, r3, #7
 800804a:	429a      	cmp	r2, r3
 800804c:	d901      	bls.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800804e:	f000 fcb9 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	2380      	movs	r3, #128	@ 0x80
 8008056:	019b      	lsls	r3, r3, #6
 8008058:	429a      	cmp	r2, r3
 800805a:	d101      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800805c:	f000 fc50 	bl	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	2380      	movs	r3, #128	@ 0x80
 8008064:	019b      	lsls	r3, r3, #6
 8008066:	429a      	cmp	r2, r3
 8008068:	d901      	bls.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800806a:	f000 fcab 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	015b      	lsls	r3, r3, #5
 8008074:	429a      	cmp	r2, r3
 8008076:	d101      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008078:	f000 fbe2 	bl	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	2380      	movs	r3, #128	@ 0x80
 8008080:	015b      	lsls	r3, r3, #5
 8008082:	429a      	cmp	r2, r3
 8008084:	d901      	bls.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008086:	f000 fc9d 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	2380      	movs	r3, #128	@ 0x80
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	429a      	cmp	r2, r3
 8008092:	d101      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008094:	f000 fba9 	bl	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	2380      	movs	r3, #128	@ 0x80
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	429a      	cmp	r2, r3
 80080a0:	d901      	bls.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80080a2:	f000 fc8f 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	2380      	movs	r3, #128	@ 0x80
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d101      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80080b0:	f000 fb70 	bl	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d901      	bls.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80080be:	f000 fc81 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	2380      	movs	r3, #128	@ 0x80
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d100      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80080cc:	e305      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	2380      	movs	r3, #128	@ 0x80
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d901      	bls.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80080d8:	f000 fc74 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	2380      	movs	r3, #128	@ 0x80
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d100      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80080e6:	e29b      	b.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	2380      	movs	r3, #128	@ 0x80
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d901      	bls.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80080f2:	f000 fc67 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b80      	cmp	r3, #128	@ 0x80
 80080fa:	d100      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80080fc:	e22f      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b80      	cmp	r3, #128	@ 0x80
 8008102:	d901      	bls.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008104:	f000 fc5e 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b20      	cmp	r3, #32
 800810c:	d80f      	bhi.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8008114:	f000 fc56 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b20      	cmp	r3, #32
 800811c:	d901      	bls.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800811e:	f000 fc51 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	009a      	lsls	r2, r3, #2
 8008126:	4b64      	ldr	r3, [pc, #400]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8008128:	18d3      	adds	r3, r2, r3
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	469f      	mov	pc, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b40      	cmp	r3, #64	@ 0x40
 8008132:	d100      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008134:	e1df      	b.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8008136:	f000 fc45 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800813a:	4a5d      	ldr	r2, [pc, #372]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800813c:	2388      	movs	r3, #136	@ 0x88
 800813e:	58d3      	ldr	r3, [r2, r3]
 8008140:	2203      	movs	r2, #3
 8008142:	4013      	ands	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b03      	cmp	r3, #3
 800814a:	d025      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b03      	cmp	r3, #3
 8008150:	d82d      	bhi.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d013      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d827      	bhi.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d005      	beq.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800816a:	e020      	b.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800816c:	f7ff fc40 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 8008170:	0003      	movs	r3, r0
 8008172:	61fb      	str	r3, [r7, #28]
            break;
 8008174:	e022      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8008176:	f7ff fb95 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 800817a:	0003      	movs	r3, r0
 800817c:	61fb      	str	r3, [r7, #28]
            break;
 800817e:	e01d      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008180:	4b4b      	ldr	r3, [pc, #300]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	2380      	movs	r3, #128	@ 0x80
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	401a      	ands	r2, r3
 800818a:	2380      	movs	r3, #128	@ 0x80
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	429a      	cmp	r2, r3
 8008190:	d110      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8008192:	4b4a      	ldr	r3, [pc, #296]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8008194:	61fb      	str	r3, [r7, #28]
            break;
 8008196:	e00d      	b.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008198:	4a45      	ldr	r2, [pc, #276]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800819a:	2390      	movs	r3, #144	@ 0x90
 800819c:	58d3      	ldr	r3, [r2, r3]
 800819e:	2202      	movs	r2, #2
 80081a0:	4013      	ands	r3, r2
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d109      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 80081a6:	2380      	movs	r3, #128	@ 0x80
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	61fb      	str	r3, [r7, #28]
            break;
 80081ac:	e005      	b.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	f000 fc09 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80081b4:	46c0      	nop			@ (mov r8, r8)
 80081b6:	f000 fc06 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80081ba:	46c0      	nop			@ (mov r8, r8)
        break;
 80081bc:	f000 fc03 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80081c0:	4a3b      	ldr	r2, [pc, #236]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081c2:	2388      	movs	r3, #136	@ 0x88
 80081c4:	58d3      	ldr	r3, [r2, r3]
 80081c6:	220c      	movs	r2, #12
 80081c8:	4013      	ands	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b0c      	cmp	r3, #12
 80081d0:	d025      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b0c      	cmp	r3, #12
 80081d6:	d82d      	bhi.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b08      	cmp	r3, #8
 80081dc:	d013      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d827      	bhi.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d005      	beq.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80081f0:	e020      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80081f2:	f7ff fbfd 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 80081f6:	0003      	movs	r3, r0
 80081f8:	61fb      	str	r3, [r7, #28]
            break;
 80081fa:	e022      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80081fc:	f7ff fb52 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 8008200:	0003      	movs	r3, r0
 8008202:	61fb      	str	r3, [r7, #28]
            break;
 8008204:	e01d      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008206:	4b2a      	ldr	r3, [pc, #168]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	2380      	movs	r3, #128	@ 0x80
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	401a      	ands	r2, r3
 8008210:	2380      	movs	r3, #128	@ 0x80
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	429a      	cmp	r2, r3
 8008216:	d110      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8008218:	4b28      	ldr	r3, [pc, #160]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800821a:	61fb      	str	r3, [r7, #28]
            break;
 800821c:	e00d      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800821e:	4a24      	ldr	r2, [pc, #144]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008220:	2390      	movs	r3, #144	@ 0x90
 8008222:	58d3      	ldr	r3, [r2, r3]
 8008224:	2202      	movs	r2, #2
 8008226:	4013      	ands	r3, r2
 8008228:	2b02      	cmp	r3, #2
 800822a:	d109      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 800822c:	2380      	movs	r3, #128	@ 0x80
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	61fb      	str	r3, [r7, #28]
            break;
 8008232:	e005      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8008234:	46c0      	nop			@ (mov r8, r8)
 8008236:	f000 fbc6 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800823a:	46c0      	nop			@ (mov r8, r8)
 800823c:	f000 fbc3 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008240:	46c0      	nop			@ (mov r8, r8)
        break;
 8008242:	f000 fbc0 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008246:	f7ff fbd3 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 800824a:	0003      	movs	r3, r0
 800824c:	61fb      	str	r3, [r7, #28]
        break;
 800824e:	f000 fbba 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008252:	4a17      	ldr	r2, [pc, #92]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008254:	2388      	movs	r3, #136	@ 0x88
 8008256:	58d2      	ldr	r2, [r2, r3]
 8008258:	23c0      	movs	r3, #192	@ 0xc0
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	4013      	ands	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	23c0      	movs	r3, #192	@ 0xc0
 8008264:	011b      	lsls	r3, r3, #4
 8008266:	429a      	cmp	r2, r3
 8008268:	d036      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	23c0      	movs	r3, #192	@ 0xc0
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	429a      	cmp	r2, r3
 8008272:	d83c      	bhi.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	2380      	movs	r3, #128	@ 0x80
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	429a      	cmp	r2, r3
 800827c:	d020      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	2380      	movs	r3, #128	@ 0x80
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	429a      	cmp	r2, r3
 8008286:	d832      	bhi.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	2380      	movs	r3, #128	@ 0x80
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	429a      	cmp	r2, r3
 8008296:	d005      	beq.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8008298:	e029      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800829a:	f7ff fba9 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 800829e:	0003      	movs	r3, r0
 80082a0:	61fb      	str	r3, [r7, #28]
            break;
 80082a2:	e02b      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80082a4:	f7ff fafe 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 80082a8:	0003      	movs	r3, r0
 80082aa:	61fb      	str	r3, [r7, #28]
            break;
 80082ac:	e026      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	40021000 	.word	0x40021000
 80082b4:	0003d090 	.word	0x0003d090
 80082b8:	080121a4 	.word	0x080121a4
 80082bc:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082c0:	4bbb      	ldr	r3, [pc, #748]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	2380      	movs	r3, #128	@ 0x80
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	401a      	ands	r2, r3
 80082ca:	2380      	movs	r3, #128	@ 0x80
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d110      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80082d2:	4bb8      	ldr	r3, [pc, #736]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80082d4:	61fb      	str	r3, [r7, #28]
            break;
 80082d6:	e00d      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082d8:	4ab5      	ldr	r2, [pc, #724]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082da:	2390      	movs	r3, #144	@ 0x90
 80082dc:	58d3      	ldr	r3, [r2, r3]
 80082de:	2202      	movs	r2, #2
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d109      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80082e6:	2380      	movs	r3, #128	@ 0x80
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	61fb      	str	r3, [r7, #28]
            break;
 80082ec:	e005      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80082ee:	46c0      	nop			@ (mov r8, r8)
 80082f0:	f000 fb69 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082f4:	46c0      	nop			@ (mov r8, r8)
 80082f6:	f000 fb66 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082fa:	46c0      	nop			@ (mov r8, r8)
        break;
 80082fc:	f000 fb63 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8008300:	4aab      	ldr	r2, [pc, #684]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008302:	2388      	movs	r3, #136	@ 0x88
 8008304:	58d2      	ldr	r2, [r2, r3]
 8008306:	23c0      	movs	r3, #192	@ 0xc0
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4013      	ands	r3, r2
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	23c0      	movs	r3, #192	@ 0xc0
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	429a      	cmp	r2, r3
 8008316:	d02d      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	23c0      	movs	r3, #192	@ 0xc0
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	429a      	cmp	r2, r3
 8008320:	d833      	bhi.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	2380      	movs	r3, #128	@ 0x80
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	429a      	cmp	r2, r3
 800832a:	d017      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	2380      	movs	r3, #128	@ 0x80
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	429a      	cmp	r2, r3
 8008334:	d829      	bhi.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	2380      	movs	r3, #128	@ 0x80
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	429a      	cmp	r2, r3
 8008344:	d005      	beq.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8008346:	e020      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008348:	f7ff fb52 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 800834c:	0003      	movs	r3, r0
 800834e:	61fb      	str	r3, [r7, #28]
            break;
 8008350:	e022      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8008352:	f7ff faa7 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 8008356:	0003      	movs	r3, r0
 8008358:	61fb      	str	r3, [r7, #28]
            break;
 800835a:	e01d      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800835c:	4b94      	ldr	r3, [pc, #592]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	2380      	movs	r3, #128	@ 0x80
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	401a      	ands	r2, r3
 8008366:	2380      	movs	r3, #128	@ 0x80
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	429a      	cmp	r2, r3
 800836c:	d110      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 800836e:	4b91      	ldr	r3, [pc, #580]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008370:	61fb      	str	r3, [r7, #28]
            break;
 8008372:	e00d      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008374:	4a8e      	ldr	r2, [pc, #568]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008376:	2390      	movs	r3, #144	@ 0x90
 8008378:	58d3      	ldr	r3, [r2, r3]
 800837a:	2202      	movs	r2, #2
 800837c:	4013      	ands	r3, r2
 800837e:	2b02      	cmp	r3, #2
 8008380:	d109      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8008382:	2380      	movs	r3, #128	@ 0x80
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	61fb      	str	r3, [r7, #28]
            break;
 8008388:	e005      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	f000 fb1b 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008390:	46c0      	nop			@ (mov r8, r8)
 8008392:	f000 fb18 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008396:	46c0      	nop			@ (mov r8, r8)
        break;
 8008398:	f000 fb15 	bl	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 800839c:	4a84      	ldr	r2, [pc, #528]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800839e:	2388      	movs	r3, #136	@ 0x88
 80083a0:	58d3      	ldr	r3, [r2, r3]
 80083a2:	22c0      	movs	r2, #192	@ 0xc0
 80083a4:	4013      	ands	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80083ac:	d025      	beq.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b2:	d82d      	bhi.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b80      	cmp	r3, #128	@ 0x80
 80083b8:	d013      	beq.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b80      	cmp	r3, #128	@ 0x80
 80083be:	d827      	bhi.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b40      	cmp	r3, #64	@ 0x40
 80083ca:	d005      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80083cc:	e020      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80083ce:	f7ff fb0f 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 80083d2:	0003      	movs	r3, r0
 80083d4:	61fb      	str	r3, [r7, #28]
            break;
 80083d6:	e020      	b.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80083d8:	f7ff fa64 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 80083dc:	0003      	movs	r3, r0
 80083de:	61fb      	str	r3, [r7, #28]
            break;
 80083e0:	e01b      	b.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083e2:	4b73      	ldr	r3, [pc, #460]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	2380      	movs	r3, #128	@ 0x80
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	401a      	ands	r2, r3
 80083ec:	2380      	movs	r3, #128	@ 0x80
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d10f      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 80083f4:	4b6f      	ldr	r3, [pc, #444]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80083f6:	61fb      	str	r3, [r7, #28]
            break;
 80083f8:	e00c      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80083fa:	4a6d      	ldr	r2, [pc, #436]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083fc:	2390      	movs	r3, #144	@ 0x90
 80083fe:	58d3      	ldr	r3, [r2, r3]
 8008400:	2202      	movs	r2, #2
 8008402:	4013      	ands	r3, r2
 8008404:	2b02      	cmp	r3, #2
 8008406:	d107      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8008408:	2380      	movs	r3, #128	@ 0x80
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	61fb      	str	r3, [r7, #28]
            break;
 800840e:	e003      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8008410:	46c0      	nop			@ (mov r8, r8)
 8008412:	e2d8      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008414:	46c0      	nop			@ (mov r8, r8)
 8008416:	e2d6      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008418:	46c0      	nop			@ (mov r8, r8)
        break;
 800841a:	e2d4      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800841c:	4a64      	ldr	r2, [pc, #400]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800841e:	2388      	movs	r3, #136	@ 0x88
 8008420:	58d2      	ldr	r2, [r2, r3]
 8008422:	23c0      	movs	r3, #192	@ 0xc0
 8008424:	059b      	lsls	r3, r3, #22
 8008426:	4013      	ands	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	2380      	movs	r3, #128	@ 0x80
 800842e:	059b      	lsls	r3, r3, #22
 8008430:	429a      	cmp	r2, r3
 8008432:	d012      	beq.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	2380      	movs	r3, #128	@ 0x80
 8008438:	059b      	lsls	r3, r3, #22
 800843a:	429a      	cmp	r2, r3
 800843c:	d825      	bhi.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	2380      	movs	r3, #128	@ 0x80
 8008448:	055b      	lsls	r3, r3, #21
 800844a:	429a      	cmp	r2, r3
 800844c:	d014      	beq.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 800844e:	e01c      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8008450:	f7ff fa28 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 8008454:	0003      	movs	r3, r0
 8008456:	61fb      	str	r3, [r7, #28]
            break;
 8008458:	e018      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800845a:	4b55      	ldr	r3, [pc, #340]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	2380      	movs	r3, #128	@ 0x80
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	401a      	ands	r2, r3
 8008464:	2380      	movs	r3, #128	@ 0x80
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	429a      	cmp	r2, r3
 800846a:	d102      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 800846c:	4b51      	ldr	r3, [pc, #324]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800846e:	61fb      	str	r3, [r7, #28]
            break;
 8008470:	e00c      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
            break;
 8008476:	e009      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008478:	2408      	movs	r4, #8
 800847a:	193b      	adds	r3, r7, r4
 800847c:	0018      	movs	r0, r3
 800847e:	f000 faad 	bl	80089dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8008482:	193b      	adds	r3, r7, r4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	61fb      	str	r3, [r7, #28]
            break;
 8008488:	e000      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 800848a:	46c0      	nop			@ (mov r8, r8)
        break;
 800848c:	e29b      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800848e:	4a48      	ldr	r2, [pc, #288]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008490:	2388      	movs	r3, #136	@ 0x88
 8008492:	58d2      	ldr	r2, [r2, r3]
 8008494:	23c0      	movs	r3, #192	@ 0xc0
 8008496:	019b      	lsls	r3, r3, #6
 8008498:	4013      	ands	r3, r2
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	2380      	movs	r3, #128	@ 0x80
 80084a0:	019b      	lsls	r3, r3, #6
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d017      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	2380      	movs	r3, #128	@ 0x80
 80084aa:	019b      	lsls	r3, r3, #6
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d81e      	bhi.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	2380      	movs	r3, #128	@ 0x80
 80084ba:	015b      	lsls	r3, r3, #5
 80084bc:	429a      	cmp	r2, r3
 80084be:	d005      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80084c0:	e015      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80084c2:	f7ff fa95 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 80084c6:	0003      	movs	r3, r0
 80084c8:	61fb      	str	r3, [r7, #28]
            break;
 80084ca:	e013      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80084cc:	f7ff f9ea 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 80084d0:	0003      	movs	r3, r0
 80084d2:	61fb      	str	r3, [r7, #28]
            break;
 80084d4:	e00e      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084d6:	4b36      	ldr	r3, [pc, #216]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	2380      	movs	r3, #128	@ 0x80
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	401a      	ands	r2, r3
 80084e0:	2380      	movs	r3, #128	@ 0x80
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d104      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80084e8:	4b32      	ldr	r3, [pc, #200]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80084ea:	61fb      	str	r3, [r7, #28]
            break;
 80084ec:	e001      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80084ee:	46c0      	nop			@ (mov r8, r8)
 80084f0:	e269      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80084f2:	46c0      	nop			@ (mov r8, r8)
        break;
 80084f4:	e267      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80084f6:	4a2e      	ldr	r2, [pc, #184]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084f8:	2388      	movs	r3, #136	@ 0x88
 80084fa:	58d2      	ldr	r2, [r2, r3]
 80084fc:	23c0      	movs	r3, #192	@ 0xc0
 80084fe:	029b      	lsls	r3, r3, #10
 8008500:	4013      	ands	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	2380      	movs	r3, #128	@ 0x80
 8008508:	029b      	lsls	r3, r3, #10
 800850a:	429a      	cmp	r2, r3
 800850c:	d017      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	2380      	movs	r3, #128	@ 0x80
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	429a      	cmp	r2, r3
 8008516:	d81e      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	2380      	movs	r3, #128	@ 0x80
 8008522:	025b      	lsls	r3, r3, #9
 8008524:	429a      	cmp	r2, r3
 8008526:	d005      	beq.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8008528:	e015      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 800852a:	f7ff fa61 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 800852e:	0003      	movs	r3, r0
 8008530:	61fb      	str	r3, [r7, #28]
            break;
 8008532:	e013      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8008534:	f7ff f9b6 	bl	80078a4 <HAL_RCC_GetSysClockFreq>
 8008538:	0003      	movs	r3, r0
 800853a:	61fb      	str	r3, [r7, #28]
            break;
 800853c:	e00e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800853e:	4b1c      	ldr	r3, [pc, #112]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	2380      	movs	r3, #128	@ 0x80
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	401a      	ands	r2, r3
 8008548:	2380      	movs	r3, #128	@ 0x80
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	429a      	cmp	r2, r3
 800854e:	d104      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8008550:	4b18      	ldr	r3, [pc, #96]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008552:	61fb      	str	r3, [r7, #28]
            break;
 8008554:	e001      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8008556:	46c0      	nop			@ (mov r8, r8)
 8008558:	e235      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800855a:	46c0      	nop			@ (mov r8, r8)
        break;
 800855c:	e233      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800855e:	4a14      	ldr	r2, [pc, #80]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008560:	2388      	movs	r3, #136	@ 0x88
 8008562:	58d2      	ldr	r2, [r2, r3]
 8008564:	23c0      	movs	r3, #192	@ 0xc0
 8008566:	031b      	lsls	r3, r3, #12
 8008568:	4013      	ands	r3, r2
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	23c0      	movs	r3, #192	@ 0xc0
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	429a      	cmp	r2, r3
 8008574:	d041      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	23c0      	movs	r3, #192	@ 0xc0
 800857a:	031b      	lsls	r3, r3, #12
 800857c:	429a      	cmp	r2, r3
 800857e:	d847      	bhi.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	2380      	movs	r3, #128	@ 0x80
 8008584:	031b      	lsls	r3, r3, #12
 8008586:	429a      	cmp	r2, r3
 8008588:	d02b      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	2380      	movs	r3, #128	@ 0x80
 800858e:	031b      	lsls	r3, r3, #12
 8008590:	429a      	cmp	r2, r3
 8008592:	d83d      	bhi.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	2380      	movs	r3, #128	@ 0x80
 800859e:	02db      	lsls	r3, r3, #11
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d009      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80085a4:	e034      	b.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80085a6:	f7ff fa23 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 80085aa:	0003      	movs	r3, r0
 80085ac:	61fb      	str	r3, [r7, #28]
            break;
 80085ae:	e036      	b.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80085b0:	40021000 	.word	0x40021000
 80085b4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085b8:	4abd      	ldr	r2, [pc, #756]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085ba:	2394      	movs	r3, #148	@ 0x94
 80085bc:	58d3      	ldr	r3, [r2, r3]
 80085be:	2202      	movs	r2, #2
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d126      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80085c6:	4aba      	ldr	r2, [pc, #744]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085c8:	2394      	movs	r3, #148	@ 0x94
 80085ca:	58d3      	ldr	r3, [r2, r3]
 80085cc:	2204      	movs	r2, #4
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d102      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80085d4:	23fa      	movs	r3, #250	@ 0xfa
 80085d6:	61fb      	str	r3, [r7, #28]
            break;
 80085d8:	e01c      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80085da:	23fa      	movs	r3, #250	@ 0xfa
 80085dc:	01db      	lsls	r3, r3, #7
 80085de:	61fb      	str	r3, [r7, #28]
            break;
 80085e0:	e018      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085e2:	4bb3      	ldr	r3, [pc, #716]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	2380      	movs	r3, #128	@ 0x80
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	401a      	ands	r2, r3
 80085ec:	2380      	movs	r3, #128	@ 0x80
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d111      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 80085f4:	4baf      	ldr	r3, [pc, #700]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80085f6:	61fb      	str	r3, [r7, #28]
            break;
 80085f8:	e00e      	b.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085fa:	4aad      	ldr	r2, [pc, #692]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085fc:	2390      	movs	r3, #144	@ 0x90
 80085fe:	58d3      	ldr	r3, [r2, r3]
 8008600:	2202      	movs	r2, #2
 8008602:	4013      	ands	r3, r2
 8008604:	2b02      	cmp	r3, #2
 8008606:	d109      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8008608:	2380      	movs	r3, #128	@ 0x80
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	61fb      	str	r3, [r7, #28]
            break;
 800860e:	e005      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8008610:	46c0      	nop			@ (mov r8, r8)
 8008612:	e1d8      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008614:	46c0      	nop			@ (mov r8, r8)
 8008616:	e1d6      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008618:	46c0      	nop			@ (mov r8, r8)
 800861a:	e1d4      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800861c:	46c0      	nop			@ (mov r8, r8)
        break;
 800861e:	e1d2      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008620:	4aa3      	ldr	r2, [pc, #652]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008622:	2388      	movs	r3, #136	@ 0x88
 8008624:	58d2      	ldr	r2, [r2, r3]
 8008626:	23c0      	movs	r3, #192	@ 0xc0
 8008628:	039b      	lsls	r3, r3, #14
 800862a:	4013      	ands	r3, r2
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	23c0      	movs	r3, #192	@ 0xc0
 8008632:	039b      	lsls	r3, r3, #14
 8008634:	429a      	cmp	r2, r3
 8008636:	d03d      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	23c0      	movs	r3, #192	@ 0xc0
 800863c:	039b      	lsls	r3, r3, #14
 800863e:	429a      	cmp	r2, r3
 8008640:	d843      	bhi.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	2380      	movs	r3, #128	@ 0x80
 8008646:	039b      	lsls	r3, r3, #14
 8008648:	429a      	cmp	r2, r3
 800864a:	d027      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	2380      	movs	r3, #128	@ 0x80
 8008650:	039b      	lsls	r3, r3, #14
 8008652:	429a      	cmp	r2, r3
 8008654:	d839      	bhi.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	2380      	movs	r3, #128	@ 0x80
 8008660:	035b      	lsls	r3, r3, #13
 8008662:	429a      	cmp	r2, r3
 8008664:	d005      	beq.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8008666:	e030      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008668:	f7ff f9c2 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 800866c:	0003      	movs	r3, r0
 800866e:	61fb      	str	r3, [r7, #28]
            break;
 8008670:	e032      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008672:	4a8f      	ldr	r2, [pc, #572]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008674:	2394      	movs	r3, #148	@ 0x94
 8008676:	58d3      	ldr	r3, [r2, r3]
 8008678:	2202      	movs	r2, #2
 800867a:	4013      	ands	r3, r2
 800867c:	2b02      	cmp	r3, #2
 800867e:	d126      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008680:	4a8b      	ldr	r2, [pc, #556]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008682:	2394      	movs	r3, #148	@ 0x94
 8008684:	58d3      	ldr	r3, [r2, r3]
 8008686:	2204      	movs	r2, #4
 8008688:	4013      	ands	r3, r2
 800868a:	2b04      	cmp	r3, #4
 800868c:	d102      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 800868e:	23fa      	movs	r3, #250	@ 0xfa
 8008690:	61fb      	str	r3, [r7, #28]
            break;
 8008692:	e01c      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8008694:	23fa      	movs	r3, #250	@ 0xfa
 8008696:	01db      	lsls	r3, r3, #7
 8008698:	61fb      	str	r3, [r7, #28]
            break;
 800869a:	e018      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800869c:	4b84      	ldr	r3, [pc, #528]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	2380      	movs	r3, #128	@ 0x80
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	401a      	ands	r2, r3
 80086a6:	2380      	movs	r3, #128	@ 0x80
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d111      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80086ae:	4b81      	ldr	r3, [pc, #516]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80086b0:	61fb      	str	r3, [r7, #28]
            break;
 80086b2:	e00e      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086b4:	4a7e      	ldr	r2, [pc, #504]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086b6:	2390      	movs	r3, #144	@ 0x90
 80086b8:	58d3      	ldr	r3, [r2, r3]
 80086ba:	2202      	movs	r2, #2
 80086bc:	4013      	ands	r3, r2
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d109      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80086c2:	2380      	movs	r3, #128	@ 0x80
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	61fb      	str	r3, [r7, #28]
            break;
 80086c8:	e005      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	e17b      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086ce:	46c0      	nop			@ (mov r8, r8)
 80086d0:	e179      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086d2:	46c0      	nop			@ (mov r8, r8)
 80086d4:	e177      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086d6:	46c0      	nop			@ (mov r8, r8)
        break;
 80086d8:	e175      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80086da:	4a75      	ldr	r2, [pc, #468]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086dc:	2388      	movs	r3, #136	@ 0x88
 80086de:	58d2      	ldr	r2, [r2, r3]
 80086e0:	23c0      	movs	r3, #192	@ 0xc0
 80086e2:	041b      	lsls	r3, r3, #16
 80086e4:	4013      	ands	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	23c0      	movs	r3, #192	@ 0xc0
 80086ec:	041b      	lsls	r3, r3, #16
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d03d      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	23c0      	movs	r3, #192	@ 0xc0
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d843      	bhi.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	2380      	movs	r3, #128	@ 0x80
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	429a      	cmp	r2, r3
 8008704:	d027      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	2380      	movs	r3, #128	@ 0x80
 800870a:	041b      	lsls	r3, r3, #16
 800870c:	429a      	cmp	r2, r3
 800870e:	d839      	bhi.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	2380      	movs	r3, #128	@ 0x80
 800871a:	03db      	lsls	r3, r3, #15
 800871c:	429a      	cmp	r2, r3
 800871e:	d005      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8008720:	e030      	b.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008722:	f7ff f965 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 8008726:	0003      	movs	r3, r0
 8008728:	61fb      	str	r3, [r7, #28]
            break;
 800872a:	e032      	b.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800872c:	4a60      	ldr	r2, [pc, #384]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800872e:	2394      	movs	r3, #148	@ 0x94
 8008730:	58d3      	ldr	r3, [r2, r3]
 8008732:	2202      	movs	r2, #2
 8008734:	4013      	ands	r3, r2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d126      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800873a:	4a5d      	ldr	r2, [pc, #372]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800873c:	2394      	movs	r3, #148	@ 0x94
 800873e:	58d3      	ldr	r3, [r2, r3]
 8008740:	2204      	movs	r2, #4
 8008742:	4013      	ands	r3, r2
 8008744:	2b04      	cmp	r3, #4
 8008746:	d102      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8008748:	23fa      	movs	r3, #250	@ 0xfa
 800874a:	61fb      	str	r3, [r7, #28]
            break;
 800874c:	e01c      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 800874e:	23fa      	movs	r3, #250	@ 0xfa
 8008750:	01db      	lsls	r3, r3, #7
 8008752:	61fb      	str	r3, [r7, #28]
            break;
 8008754:	e018      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008756:	4b56      	ldr	r3, [pc, #344]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	2380      	movs	r3, #128	@ 0x80
 800875c:	00db      	lsls	r3, r3, #3
 800875e:	401a      	ands	r2, r3
 8008760:	2380      	movs	r3, #128	@ 0x80
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	429a      	cmp	r2, r3
 8008766:	d111      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8008768:	4b52      	ldr	r3, [pc, #328]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800876a:	61fb      	str	r3, [r7, #28]
            break;
 800876c:	e00e      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800876e:	4a50      	ldr	r2, [pc, #320]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008770:	2390      	movs	r3, #144	@ 0x90
 8008772:	58d3      	ldr	r3, [r2, r3]
 8008774:	2202      	movs	r2, #2
 8008776:	4013      	ands	r3, r2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d109      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 800877c:	2380      	movs	r3, #128	@ 0x80
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	61fb      	str	r3, [r7, #28]
            break;
 8008782:	e005      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8008784:	46c0      	nop			@ (mov r8, r8)
 8008786:	e11e      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008788:	46c0      	nop			@ (mov r8, r8)
 800878a:	e11c      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800878c:	46c0      	nop			@ (mov r8, r8)
 800878e:	e11a      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008790:	46c0      	nop			@ (mov r8, r8)
        break;
 8008792:	e118      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8008794:	4a46      	ldr	r2, [pc, #280]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008796:	2388      	movs	r3, #136	@ 0x88
 8008798:	58d2      	ldr	r2, [r2, r3]
 800879a:	2380      	movs	r3, #128	@ 0x80
 800879c:	045b      	lsls	r3, r3, #17
 800879e:	4013      	ands	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	2380      	movs	r3, #128	@ 0x80
 80087ac:	045b      	lsls	r3, r3, #17
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d011      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80087b2:	e019      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80087b4:	4b3e      	ldr	r3, [pc, #248]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	23e0      	movs	r3, #224	@ 0xe0
 80087ba:	01db      	lsls	r3, r3, #7
 80087bc:	4013      	ands	r3, r2
 80087be:	d104      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80087c0:	f7ff f916 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 80087c4:	0003      	movs	r3, r0
 80087c6:	61fb      	str	r3, [r7, #28]
            break;
 80087c8:	e00e      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80087ca:	f7ff f911 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 80087ce:	0003      	movs	r3, r0
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	61fb      	str	r3, [r7, #28]
            break;
 80087d4:	e008      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80087d6:	2408      	movs	r4, #8
 80087d8:	193b      	adds	r3, r7, r4
 80087da:	0018      	movs	r0, r3
 80087dc:	f000 f8fe 	bl	80089dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80087e0:	193b      	adds	r3, r7, r4
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	61fb      	str	r3, [r7, #28]
            break;
 80087e6:	46c0      	nop			@ (mov r8, r8)
        break;
 80087e8:	e0ed      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80087ea:	4a31      	ldr	r2, [pc, #196]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087ec:	2388      	movs	r3, #136	@ 0x88
 80087ee:	58d2      	ldr	r2, [r2, r3]
 80087f0:	2380      	movs	r3, #128	@ 0x80
 80087f2:	049b      	lsls	r3, r3, #18
 80087f4:	4013      	ands	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	2380      	movs	r3, #128	@ 0x80
 8008802:	049b      	lsls	r3, r3, #18
 8008804:	429a      	cmp	r2, r3
 8008806:	d011      	beq.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8008808:	e019      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800880a:	4b29      	ldr	r3, [pc, #164]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	23e0      	movs	r3, #224	@ 0xe0
 8008810:	01db      	lsls	r3, r3, #7
 8008812:	4013      	ands	r3, r2
 8008814:	d104      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8008816:	f7ff f8eb 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 800881a:	0003      	movs	r3, r0
 800881c:	61fb      	str	r3, [r7, #28]
            break;
 800881e:	e00e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8008820:	f7ff f8e6 	bl	80079f0 <HAL_RCC_GetPCLK1Freq>
 8008824:	0003      	movs	r3, r0
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
            break;
 800882a:	e008      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800882c:	2408      	movs	r4, #8
 800882e:	193b      	adds	r3, r7, r4
 8008830:	0018      	movs	r0, r3
 8008832:	f000 f8d3 	bl	80089dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008836:	193b      	adds	r3, r7, r4
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	61fb      	str	r3, [r7, #28]
            break;
 800883c:	46c0      	nop			@ (mov r8, r8)
        break;
 800883e:	e0c2      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008840:	4a1b      	ldr	r2, [pc, #108]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008842:	2388      	movs	r3, #136	@ 0x88
 8008844:	58d2      	ldr	r2, [r2, r3]
 8008846:	23c0      	movs	r3, #192	@ 0xc0
 8008848:	051b      	lsls	r3, r3, #20
 800884a:	4013      	ands	r3, r2
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	23c0      	movs	r3, #192	@ 0xc0
 8008852:	051b      	lsls	r3, r3, #20
 8008854:	429a      	cmp	r2, r3
 8008856:	d017      	beq.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	23c0      	movs	r3, #192	@ 0xc0
 800885c:	051b      	lsls	r3, r3, #20
 800885e:	429a      	cmp	r2, r3
 8008860:	d84a      	bhi.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	2380      	movs	r3, #128	@ 0x80
 8008866:	051b      	lsls	r3, r3, #20
 8008868:	429a      	cmp	r2, r3
 800886a:	d039      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	2380      	movs	r3, #128	@ 0x80
 8008870:	051b      	lsls	r3, r3, #20
 8008872:	429a      	cmp	r2, r3
 8008874:	d840      	bhi.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d03a      	beq.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	2380      	movs	r3, #128	@ 0x80
 8008880:	04db      	lsls	r3, r3, #19
 8008882:	429a      	cmp	r2, r3
 8008884:	d003      	beq.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8008886:	e037      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8008888:	4b0b      	ldr	r3, [pc, #44]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800888a:	61fb      	str	r3, [r7, #28]
            break;
 800888c:	e037      	b.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800888e:	4b08      	ldr	r3, [pc, #32]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2202      	movs	r2, #2
 8008894:	4013      	ands	r3, r2
 8008896:	2b02      	cmp	r3, #2
 8008898:	d130      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800889a:	4b05      	ldr	r3, [pc, #20]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2208      	movs	r2, #8
 80088a0:	4013      	ands	r3, r2
 80088a2:	d00b      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80088a4:	4b02      	ldr	r3, [pc, #8]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	091b      	lsrs	r3, r3, #4
 80088aa:	220f      	movs	r2, #15
 80088ac:	4013      	ands	r3, r2
 80088ae:	e00b      	b.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80088b0:	40021000 	.word	0x40021000
 80088b4:	00f42400 	.word	0x00f42400
 80088b8:	02dc6c00 	.word	0x02dc6c00
 80088bc:	4a44      	ldr	r2, [pc, #272]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088be:	2394      	movs	r3, #148	@ 0x94
 80088c0:	58d3      	ldr	r3, [r2, r3]
 80088c2:	0a1b      	lsrs	r3, r3, #8
 80088c4:	220f      	movs	r2, #15
 80088c6:	4013      	ands	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b0b      	cmp	r3, #11
 80088ce:	d901      	bls.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80088d0:	230b      	movs	r3, #11
 80088d2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80088d4:	4b3f      	ldr	r3, [pc, #252]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	0092      	lsls	r2, r2, #2
 80088da:	58d3      	ldr	r3, [r2, r3]
 80088dc:	61fb      	str	r3, [r7, #28]
            break;
 80088de:	e00d      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80088e0:	2408      	movs	r4, #8
 80088e2:	193b      	adds	r3, r7, r4
 80088e4:	0018      	movs	r0, r3
 80088e6:	f000 f879 	bl	80089dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	61fb      	str	r3, [r7, #28]
            break;
 80088f0:	e005      	b.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
            break;
 80088f6:	e002      	b.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80088f8:	46c0      	nop			@ (mov r8, r8)
 80088fa:	e064      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80088fc:	46c0      	nop			@ (mov r8, r8)
        break;
 80088fe:	e062      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008900:	4a33      	ldr	r2, [pc, #204]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008902:	2388      	movs	r3, #136	@ 0x88
 8008904:	58d2      	ldr	r2, [r2, r3]
 8008906:	23c0      	movs	r3, #192	@ 0xc0
 8008908:	051b      	lsls	r3, r3, #20
 800890a:	4013      	ands	r3, r2
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	23c0      	movs	r3, #192	@ 0xc0
 8008912:	051b      	lsls	r3, r3, #20
 8008914:	429a      	cmp	r2, r3
 8008916:	d017      	beq.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	23c0      	movs	r3, #192	@ 0xc0
 800891c:	051b      	lsls	r3, r3, #20
 800891e:	429a      	cmp	r2, r3
 8008920:	d844      	bhi.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	2380      	movs	r3, #128	@ 0x80
 8008926:	051b      	lsls	r3, r3, #20
 8008928:	429a      	cmp	r2, r3
 800892a:	d033      	beq.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	2380      	movs	r3, #128	@ 0x80
 8008930:	051b      	lsls	r3, r3, #20
 8008932:	429a      	cmp	r2, r3
 8008934:	d83a      	bhi.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d034      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	2380      	movs	r3, #128	@ 0x80
 8008940:	04db      	lsls	r3, r3, #19
 8008942:	429a      	cmp	r2, r3
 8008944:	d003      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8008946:	e031      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8008948:	4b23      	ldr	r3, [pc, #140]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800894a:	61fb      	str	r3, [r7, #28]
            break;
 800894c:	e031      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800894e:	4b20      	ldr	r3, [pc, #128]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2202      	movs	r2, #2
 8008954:	4013      	ands	r3, r2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d12a      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800895a:	4b1d      	ldr	r3, [pc, #116]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2208      	movs	r2, #8
 8008960:	4013      	ands	r3, r2
 8008962:	d005      	beq.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8008964:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	091b      	lsrs	r3, r3, #4
 800896a:	220f      	movs	r2, #15
 800896c:	4013      	ands	r3, r2
 800896e:	e005      	b.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8008970:	4a17      	ldr	r2, [pc, #92]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8008972:	2394      	movs	r3, #148	@ 0x94
 8008974:	58d3      	ldr	r3, [r2, r3]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	220f      	movs	r2, #15
 800897a:	4013      	ands	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2b0b      	cmp	r3, #11
 8008982:	d901      	bls.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8008984:	230b      	movs	r3, #11
 8008986:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8008988:	4b12      	ldr	r3, [pc, #72]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	58d3      	ldr	r3, [r2, r3]
 8008990:	61fb      	str	r3, [r7, #28]
            break;
 8008992:	e00d      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008994:	2408      	movs	r4, #8
 8008996:	193b      	adds	r3, r7, r4
 8008998:	0018      	movs	r0, r3
 800899a:	f000 f81f 	bl	80089dc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800899e:	193b      	adds	r3, r7, r4
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	61fb      	str	r3, [r7, #28]
            break;
 80089a4:	e005      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
            break;
 80089aa:	e002      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80089ac:	46c0      	nop			@ (mov r8, r8)
 80089ae:	e00a      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80089b0:	46c0      	nop			@ (mov r8, r8)
        break;
 80089b2:	e008      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089b4:	46c0      	nop			@ (mov r8, r8)
 80089b6:	e006      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089b8:	46c0      	nop			@ (mov r8, r8)
 80089ba:	e004      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089bc:	46c0      	nop			@ (mov r8, r8)
 80089be:	e002      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089c0:	46c0      	nop			@ (mov r8, r8)
 80089c2:	e000      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80089c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80089c6:	69fb      	ldr	r3, [r7, #28]
}
 80089c8:	0018      	movs	r0, r3
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b009      	add	sp, #36	@ 0x24
 80089ce:	bd90      	pop	{r4, r7, pc}
 80089d0:	40021000 	.word	0x40021000
 80089d4:	08012174 	.word	0x08012174
 80089d8:	02dc6c00 	.word	0x02dc6c00

080089dc <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089e4:	4b58      	ldr	r3, [pc, #352]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	227f      	movs	r2, #127	@ 0x7f
 80089ec:	4013      	ands	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80089f0:	4b55      	ldr	r3, [pc, #340]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	2203      	movs	r2, #3
 80089f6:	4013      	ands	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80089fa:	4b53      	ldr	r3, [pc, #332]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	091b      	lsrs	r3, r3, #4
 8008a00:	2207      	movs	r2, #7
 8008a02:	4013      	ands	r3, r2
 8008a04:	3301      	adds	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008a08:	4b4f      	ldr	r3, [pc, #316]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	4013      	ands	r3, r2
 8008a10:	d005      	beq.n	8008a1e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8008a12:	4b4d      	ldr	r3, [pc, #308]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	091b      	lsrs	r3, r3, #4
 8008a18:	220f      	movs	r2, #15
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	e005      	b.n	8008a2a <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8008a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a20:	2394      	movs	r3, #148	@ 0x94
 8008a22:	58d3      	ldr	r3, [r2, r3]
 8008a24:	0a1b      	lsrs	r3, r3, #8
 8008a26:	220f      	movs	r2, #15
 8008a28:	4013      	ands	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	2b0b      	cmp	r3, #11
 8008a30:	d901      	bls.n	8008a36 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8008a32:	230b      	movs	r3, #11
 8008a34:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d020      	beq.n	8008a7e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d827      	bhi.n	8008a92 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d00c      	beq.n	8008a62 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d121      	bne.n	8008a92 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8008a4e:	68f9      	ldr	r1, [r7, #12]
 8008a50:	483e      	ldr	r0, [pc, #248]	@ (8008b4c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8008a52:	f7f7 fb75 	bl	8000140 <__udivsi3>
 8008a56:	0003      	movs	r3, r0
 8008a58:	001a      	movs	r2, r3
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	4353      	muls	r3, r2
 8008a5e:	61fb      	str	r3, [r7, #28]
      break;
 8008a60:	e025      	b.n	8008aae <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a62:	4b3b      	ldr	r3, [pc, #236]	@ (8008b50 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	58d3      	ldr	r3, [r2, r3]
 8008a6a:	68f9      	ldr	r1, [r7, #12]
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f7f7 fb67 	bl	8000140 <__udivsi3>
 8008a72:	0003      	movs	r3, r0
 8008a74:	001a      	movs	r2, r3
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	4353      	muls	r3, r2
 8008a7a:	61fb      	str	r3, [r7, #28]
      break;
 8008a7c:	e017      	b.n	8008aae <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	4834      	ldr	r0, [pc, #208]	@ (8008b54 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8008a82:	f7f7 fb5d 	bl	8000140 <__udivsi3>
 8008a86:	0003      	movs	r3, r0
 8008a88:	001a      	movs	r2, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	4353      	muls	r3, r2
 8008a8e:	61fb      	str	r3, [r7, #28]
      break;
 8008a90:	e00d      	b.n	8008aae <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8008a92:	4b2f      	ldr	r3, [pc, #188]	@ (8008b50 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	58d3      	ldr	r3, [r2, r3]
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7f7 fb4f 	bl	8000140 <__udivsi3>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	001a      	movs	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	4353      	muls	r3, r2
 8008aaa:	61fb      	str	r3, [r7, #28]
      break;
 8008aac:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008aae:	4b26      	ldr	r3, [pc, #152]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	2380      	movs	r3, #128	@ 0x80
 8008ab4:	025b      	lsls	r3, r3, #9
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	d00e      	beq.n	8008ad8 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008aba:	4b23      	ldr	r3, [pc, #140]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008abc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008abe:	0c5b      	lsrs	r3, r3, #17
 8008ac0:	221f      	movs	r2, #31
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	69f8      	ldr	r0, [r7, #28]
 8008aca:	f7f7 fb39 	bl	8000140 <__udivsi3>
 8008ace:	0003      	movs	r3, r0
 8008ad0:	001a      	movs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	e002      	b.n	8008ade <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008ade:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	2380      	movs	r3, #128	@ 0x80
 8008ae4:	045b      	lsls	r3, r3, #17
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d00e      	beq.n	8008b08 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008aea:	4b17      	ldr	r3, [pc, #92]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008aec:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008aee:	0e5b      	lsrs	r3, r3, #25
 8008af0:	2207      	movs	r2, #7
 8008af2:	4013      	ands	r3, r2
 8008af4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008af6:	0019      	movs	r1, r3
 8008af8:	69f8      	ldr	r0, [r7, #28]
 8008afa:	f7f7 fb21 	bl	8000140 <__udivsi3>
 8008afe:	0003      	movs	r3, r0
 8008b00:	001a      	movs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	605a      	str	r2, [r3, #4]
 8008b06:	e002      	b.n	8008b0e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	2380      	movs	r3, #128	@ 0x80
 8008b14:	055b      	lsls	r3, r3, #21
 8008b16:	4013      	ands	r3, r2
 8008b18:	d00e      	beq.n	8008b38 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b48 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008b1e:	0f5b      	lsrs	r3, r3, #29
 8008b20:	2207      	movs	r2, #7
 8008b22:	4013      	ands	r3, r2
 8008b24:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008b26:	0019      	movs	r1, r3
 8008b28:	69f8      	ldr	r0, [r7, #28]
 8008b2a:	f7f7 fb09 	bl	8000140 <__udivsi3>
 8008b2e:	0003      	movs	r3, r0
 8008b30:	001a      	movs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8008b36:	e002      	b.n	8008b3e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	609a      	str	r2, [r3, #8]
}
 8008b3e:	46c0      	nop			@ (mov r8, r8)
 8008b40:	46bd      	mov	sp, r7
 8008b42:	b008      	add	sp, #32
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	40021000 	.word	0x40021000
 8008b4c:	00f42400 	.word	0x00f42400
 8008b50:	08012174 	.word	0x08012174
 8008b54:	007a1200 	.word	0x007a1200

08008b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0a0      	b.n	8008cac <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d109      	bne.n	8008b86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	2382      	movs	r3, #130	@ 0x82
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d009      	beq.n	8008b92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	61da      	str	r2, [r3, #28]
 8008b84:	e005      	b.n	8008b92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	225d      	movs	r2, #93	@ 0x5d
 8008b9c:	5c9b      	ldrb	r3, [r3, r2]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d107      	bne.n	8008bb4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	225c      	movs	r2, #92	@ 0x5c
 8008ba8:	2100      	movs	r1, #0
 8008baa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7fc f854 	bl	8004c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	225d      	movs	r2, #93	@ 0x5d
 8008bb8:	2102      	movs	r1, #2
 8008bba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2140      	movs	r1, #64	@ 0x40
 8008bc8:	438a      	bics	r2, r1
 8008bca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	23e0      	movs	r3, #224	@ 0xe0
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d902      	bls.n	8008bde <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e002      	b.n	8008be4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bde:	2380      	movs	r3, #128	@ 0x80
 8008be0:	015b      	lsls	r3, r3, #5
 8008be2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	23f0      	movs	r3, #240	@ 0xf0
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d008      	beq.n	8008c02 <HAL_SPI_Init+0xaa>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	23e0      	movs	r3, #224	@ 0xe0
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d002      	beq.n	8008c02 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	2382      	movs	r3, #130	@ 0x82
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	401a      	ands	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6899      	ldr	r1, [r3, #8]
 8008c10:	2384      	movs	r3, #132	@ 0x84
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	400b      	ands	r3, r1
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2102      	movs	r1, #2
 8008c1e:	400b      	ands	r3, r1
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	2101      	movs	r1, #1
 8008c28:	400b      	ands	r3, r1
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6999      	ldr	r1, [r3, #24]
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	400b      	ands	r3, r1
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	2138      	movs	r1, #56	@ 0x38
 8008c3e:	400b      	ands	r3, r1
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	2180      	movs	r1, #128	@ 0x80
 8008c48:	400b      	ands	r3, r1
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	0011      	movs	r1, r2
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c52:	2380      	movs	r3, #128	@ 0x80
 8008c54:	019b      	lsls	r3, r3, #6
 8008c56:	401a      	ands	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	2204      	movs	r2, #4
 8008c68:	401a      	ands	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6e:	2110      	movs	r1, #16
 8008c70:	400b      	ands	r3, r1
 8008c72:	431a      	orrs	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	2108      	movs	r1, #8
 8008c7a:	400b      	ands	r3, r1
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68d9      	ldr	r1, [r3, #12]
 8008c82:	23f0      	movs	r3, #240	@ 0xf0
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	400b      	ands	r3, r1
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	2380      	movs	r3, #128	@ 0x80
 8008c90:	015b      	lsls	r3, r3, #5
 8008c92:	401a      	ands	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	225d      	movs	r2, #93	@ 0x5d
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	0018      	movs	r0, r3
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	b004      	add	sp, #16
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	1dbb      	adds	r3, r7, #6
 8008cc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cc4:	231f      	movs	r3, #31
 8008cc6:	18fb      	adds	r3, r7, r3
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	225c      	movs	r2, #92	@ 0x5c
 8008cd0:	5c9b      	ldrb	r3, [r3, r2]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <HAL_SPI_Transmit+0x26>
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e147      	b.n	8008f6a <HAL_SPI_Transmit+0x2b6>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	225c      	movs	r2, #92	@ 0x5c
 8008cde:	2101      	movs	r1, #1
 8008ce0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce2:	f7fc fb17 	bl	8005314 <HAL_GetTick>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008cea:	2316      	movs	r3, #22
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	1dba      	adds	r2, r7, #6
 8008cf0:	8812      	ldrh	r2, [r2, #0]
 8008cf2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	225d      	movs	r2, #93	@ 0x5d
 8008cf8:	5c9b      	ldrb	r3, [r3, r2]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d004      	beq.n	8008d0a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008d00:	231f      	movs	r3, #31
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	2202      	movs	r2, #2
 8008d06:	701a      	strb	r2, [r3, #0]
    goto error;
 8008d08:	e128      	b.n	8008f5c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <HAL_SPI_Transmit+0x64>
 8008d10:	1dbb      	adds	r3, r7, #6
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d104      	bne.n	8008d22 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008d18:	231f      	movs	r3, #31
 8008d1a:	18fb      	adds	r3, r7, r3
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008d20:	e11c      	b.n	8008f5c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	225d      	movs	r2, #93	@ 0x5d
 8008d26:	2103      	movs	r1, #3
 8008d28:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	1dba      	adds	r2, r7, #6
 8008d3a:	8812      	ldrh	r2, [r2, #0]
 8008d3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1dba      	adds	r2, r7, #6
 8008d42:	8812      	ldrh	r2, [r2, #0]
 8008d44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2244      	movs	r2, #68	@ 0x44
 8008d50:	2100      	movs	r1, #0
 8008d52:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2246      	movs	r2, #70	@ 0x46
 8008d58:	2100      	movs	r1, #0
 8008d5a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	2380      	movs	r3, #128	@ 0x80
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d110      	bne.n	8008d96 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2140      	movs	r1, #64	@ 0x40
 8008d80:	438a      	bics	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2180      	movs	r1, #128	@ 0x80
 8008d90:	01c9      	lsls	r1, r1, #7
 8008d92:	430a      	orrs	r2, r1
 8008d94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2240      	movs	r2, #64	@ 0x40
 8008d9e:	4013      	ands	r3, r2
 8008da0:	2b40      	cmp	r3, #64	@ 0x40
 8008da2:	d007      	beq.n	8008db4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2140      	movs	r1, #64	@ 0x40
 8008db0:	430a      	orrs	r2, r1
 8008db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	23e0      	movs	r3, #224	@ 0xe0
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d952      	bls.n	8008e66 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <HAL_SPI_Transmit+0x11e>
 8008dc8:	2316      	movs	r3, #22
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d143      	bne.n	8008e5a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	881a      	ldrh	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de2:	1c9a      	adds	r2, r3, #2
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008df6:	e030      	b.n	8008e5a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d112      	bne.n	8008e2c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0a:	881a      	ldrh	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e16:	1c9a      	adds	r2, r3, #2
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e2a:	e016      	b.n	8008e5a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e2c:	f7fc fa72 	bl	8005314 <HAL_GetTick>
 8008e30:	0002      	movs	r2, r0
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d802      	bhi.n	8008e42 <HAL_SPI_Transmit+0x18e>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	d102      	bne.n	8008e48 <HAL_SPI_Transmit+0x194>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8008e48:	231f      	movs	r3, #31
 8008e4a:	18fb      	adds	r3, r7, r3
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	225d      	movs	r2, #93	@ 0x5d
 8008e54:	2101      	movs	r1, #1
 8008e56:	5499      	strb	r1, [r3, r2]
          goto error;
 8008e58:	e080      	b.n	8008f5c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1c9      	bne.n	8008df8 <HAL_SPI_Transmit+0x144>
 8008e64:	e053      	b.n	8008f0e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <HAL_SPI_Transmit+0x1c4>
 8008e6e:	2316      	movs	r3, #22
 8008e70:	18fb      	adds	r3, r7, r3
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d145      	bne.n	8008f04 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008e9e:	e031      	b.n	8008f04 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d113      	bne.n	8008ed6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	330c      	adds	r3, #12
 8008eb8:	7812      	ldrb	r2, [r2, #0]
 8008eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ed4:	e016      	b.n	8008f04 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ed6:	f7fc fa1d 	bl	8005314 <HAL_GetTick>
 8008eda:	0002      	movs	r2, r0
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d802      	bhi.n	8008eec <HAL_SPI_Transmit+0x238>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	d102      	bne.n	8008ef2 <HAL_SPI_Transmit+0x23e>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d108      	bne.n	8008f04 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8008ef2:	231f      	movs	r3, #31
 8008ef4:	18fb      	adds	r3, r7, r3
 8008ef6:	2203      	movs	r2, #3
 8008ef8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	225d      	movs	r2, #93	@ 0x5d
 8008efe:	2101      	movs	r1, #1
 8008f00:	5499      	strb	r1, [r3, r2]
          goto error;
 8008f02:	e02b      	b.n	8008f5c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1c8      	bne.n	8008ea0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 fb3f 	bl	8009598 <SPI_EndRxTxTransaction>
 8008f1a:	1e03      	subs	r3, r0, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8008f4a:	231f      	movs	r3, #31
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	2201      	movs	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
 8008f52:	e003      	b.n	8008f5c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	225d      	movs	r2, #93	@ 0x5d
 8008f58:	2101      	movs	r1, #1
 8008f5a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	225c      	movs	r2, #92	@ 0x5c
 8008f60:	2100      	movs	r1, #0
 8008f62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008f64:	231f      	movs	r3, #31
 8008f66:	18fb      	adds	r3, r7, r3
 8008f68:	781b      	ldrb	r3, [r3, #0]
}
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	b008      	add	sp, #32
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	@ 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	001a      	movs	r2, r3
 8008f82:	1cbb      	adds	r3, r7, #2
 8008f84:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f86:	2301      	movs	r3, #1
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f8a:	2323      	movs	r3, #35	@ 0x23
 8008f8c:	18fb      	adds	r3, r7, r3
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	225c      	movs	r2, #92	@ 0x5c
 8008f96:	5c9b      	ldrb	r3, [r3, r2]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x2c>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e1c4      	b.n	800932a <HAL_SPI_TransmitReceive+0x3b6>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	225c      	movs	r2, #92	@ 0x5c
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fa8:	f7fc f9b4 	bl	8005314 <HAL_GetTick>
 8008fac:	0003      	movs	r3, r0
 8008fae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fb0:	201b      	movs	r0, #27
 8008fb2:	183b      	adds	r3, r7, r0
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	215d      	movs	r1, #93	@ 0x5d
 8008fb8:	5c52      	ldrb	r2, [r2, r1]
 8008fba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008fc2:	2312      	movs	r3, #18
 8008fc4:	18fb      	adds	r3, r7, r3
 8008fc6:	1cba      	adds	r2, r7, #2
 8008fc8:	8812      	ldrh	r2, [r2, #0]
 8008fca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fcc:	183b      	adds	r3, r7, r0
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d011      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x84>
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	2382      	movs	r3, #130	@ 0x82
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d107      	bne.n	8008fee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <HAL_SPI_TransmitReceive+0x7a>
 8008fe6:	183b      	adds	r3, r7, r0
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d004      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008fee:	2323      	movs	r3, #35	@ 0x23
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ff6:	e191      	b.n	800931c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d006      	beq.n	800900c <HAL_SPI_TransmitReceive+0x98>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_SPI_TransmitReceive+0x98>
 8009004:	1cbb      	adds	r3, r7, #2
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800900c:	2323      	movs	r3, #35	@ 0x23
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2201      	movs	r2, #1
 8009012:	701a      	strb	r2, [r3, #0]
    goto error;
 8009014:	e182      	b.n	800931c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	225d      	movs	r2, #93	@ 0x5d
 800901a:	5c9b      	ldrb	r3, [r3, r2]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b04      	cmp	r3, #4
 8009020:	d003      	beq.n	800902a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	225d      	movs	r2, #93	@ 0x5d
 8009026:	2105      	movs	r1, #5
 8009028:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1cba      	adds	r2, r7, #2
 800903a:	2146      	movs	r1, #70	@ 0x46
 800903c:	8812      	ldrh	r2, [r2, #0]
 800903e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	1cba      	adds	r2, r7, #2
 8009044:	2144      	movs	r1, #68	@ 0x44
 8009046:	8812      	ldrh	r2, [r2, #0]
 8009048:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	1cba      	adds	r2, r7, #2
 8009054:	8812      	ldrh	r2, [r2, #0]
 8009056:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	1cba      	adds	r2, r7, #2
 800905c:	8812      	ldrh	r2, [r2, #0]
 800905e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	23e0      	movs	r3, #224	@ 0xe0
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	429a      	cmp	r2, r3
 8009076:	d908      	bls.n	800908a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	49ac      	ldr	r1, [pc, #688]	@ (8009334 <HAL_SPI_TransmitReceive+0x3c0>)
 8009084:	400a      	ands	r2, r1
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	e008      	b.n	800909c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2180      	movs	r1, #128	@ 0x80
 8009096:	0149      	lsls	r1, r1, #5
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2240      	movs	r2, #64	@ 0x40
 80090a4:	4013      	ands	r3, r2
 80090a6:	2b40      	cmp	r3, #64	@ 0x40
 80090a8:	d007      	beq.n	80090ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2140      	movs	r1, #64	@ 0x40
 80090b6:	430a      	orrs	r2, r1
 80090b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	23e0      	movs	r3, #224	@ 0xe0
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d800      	bhi.n	80090c8 <HAL_SPI_TransmitReceive+0x154>
 80090c6:	e083      	b.n	80091d0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x168>
 80090d0:	2312      	movs	r3, #18
 80090d2:	18fb      	adds	r3, r7, r3
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d000      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x168>
 80090da:	e06d      	b.n	80091b8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	881a      	ldrh	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ec:	1c9a      	adds	r2, r3, #2
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009100:	e05a      	b.n	80091b8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2202      	movs	r2, #2
 800910a:	4013      	ands	r3, r2
 800910c:	2b02      	cmp	r3, #2
 800910e:	d11b      	bne.n	8009148 <HAL_SPI_TransmitReceive+0x1d4>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d016      	beq.n	8009148 <HAL_SPI_TransmitReceive+0x1d4>
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	2b01      	cmp	r3, #1
 800911e:	d113      	bne.n	8009148 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009124:	881a      	ldrh	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009130:	1c9a      	adds	r2, r3, #2
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2201      	movs	r2, #1
 8009150:	4013      	ands	r3, r2
 8009152:	2b01      	cmp	r3, #1
 8009154:	d11c      	bne.n	8009190 <HAL_SPI_TransmitReceive+0x21c>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2246      	movs	r2, #70	@ 0x46
 800915a:	5a9b      	ldrh	r3, [r3, r2]
 800915c:	b29b      	uxth	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d016      	beq.n	8009190 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916c:	b292      	uxth	r2, r2
 800916e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009174:	1c9a      	adds	r2, r3, #2
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2246      	movs	r2, #70	@ 0x46
 800917e:	5a9b      	ldrh	r3, [r3, r2]
 8009180:	b29b      	uxth	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	b299      	uxth	r1, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2246      	movs	r2, #70	@ 0x46
 800918a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800918c:	2301      	movs	r3, #1
 800918e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009190:	f7fc f8c0 	bl	8005314 <HAL_GetTick>
 8009194:	0002      	movs	r2, r0
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800919c:	429a      	cmp	r2, r3
 800919e:	d80b      	bhi.n	80091b8 <HAL_SPI_TransmitReceive+0x244>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	3301      	adds	r3, #1
 80091a4:	d008      	beq.n	80091b8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80091a6:	2323      	movs	r3, #35	@ 0x23
 80091a8:	18fb      	adds	r3, r7, r3
 80091aa:	2203      	movs	r2, #3
 80091ac:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	225d      	movs	r2, #93	@ 0x5d
 80091b2:	2101      	movs	r1, #1
 80091b4:	5499      	strb	r1, [r3, r2]
        goto error;
 80091b6:	e0b1      	b.n	800931c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d19f      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x18e>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2246      	movs	r2, #70	@ 0x46
 80091c6:	5a9b      	ldrh	r3, [r3, r2]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d199      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x18e>
 80091ce:	e089      	b.n	80092e4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <HAL_SPI_TransmitReceive+0x270>
 80091d8:	2312      	movs	r3, #18
 80091da:	18fb      	adds	r3, r7, r3
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d000      	beq.n	80091e4 <HAL_SPI_TransmitReceive+0x270>
 80091e2:	e074      	b.n	80092ce <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	7812      	ldrb	r2, [r2, #0]
 80091f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800920a:	e060      	b.n	80092ce <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2202      	movs	r2, #2
 8009214:	4013      	ands	r3, r2
 8009216:	2b02      	cmp	r3, #2
 8009218:	d11c      	bne.n	8009254 <HAL_SPI_TransmitReceive+0x2e0>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d017      	beq.n	8009254 <HAL_SPI_TransmitReceive+0x2e0>
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	2b01      	cmp	r3, #1
 8009228:	d114      	bne.n	8009254 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	330c      	adds	r3, #12
 8009234:	7812      	ldrb	r2, [r2, #0]
 8009236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009246:	b29b      	uxth	r3, r3
 8009248:	3b01      	subs	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2201      	movs	r2, #1
 800925c:	4013      	ands	r3, r2
 800925e:	2b01      	cmp	r3, #1
 8009260:	d11e      	bne.n	80092a0 <HAL_SPI_TransmitReceive+0x32c>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2246      	movs	r2, #70	@ 0x46
 8009266:	5a9b      	ldrh	r3, [r3, r2]
 8009268:	b29b      	uxth	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d018      	beq.n	80092a0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	001a      	movs	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927a:	7812      	ldrb	r2, [r2, #0]
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2246      	movs	r2, #70	@ 0x46
 800928e:	5a9b      	ldrh	r3, [r3, r2]
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b299      	uxth	r1, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2246      	movs	r2, #70	@ 0x46
 800929a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800929c:	2301      	movs	r3, #1
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092a0:	f7fc f838 	bl	8005314 <HAL_GetTick>
 80092a4:	0002      	movs	r2, r0
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d802      	bhi.n	80092b6 <HAL_SPI_TransmitReceive+0x342>
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	3301      	adds	r3, #1
 80092b4:	d102      	bne.n	80092bc <HAL_SPI_TransmitReceive+0x348>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80092bc:	2323      	movs	r3, #35	@ 0x23
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	2203      	movs	r2, #3
 80092c2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	225d      	movs	r2, #93	@ 0x5d
 80092c8:	2101      	movs	r1, #1
 80092ca:	5499      	strb	r1, [r3, r2]
        goto error;
 80092cc:	e026      	b.n	800931c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d199      	bne.n	800920c <HAL_SPI_TransmitReceive+0x298>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2246      	movs	r2, #70	@ 0x46
 80092dc:	5a9b      	ldrh	r3, [r3, r2]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d193      	bne.n	800920c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	0018      	movs	r0, r3
 80092ec:	f000 f954 	bl	8009598 <SPI_EndRxTxTransaction>
 80092f0:	1e03      	subs	r3, r0, #0
 80092f2:	d006      	beq.n	8009302 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80092f4:	2323      	movs	r3, #35	@ 0x23
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	2201      	movs	r2, #1
 80092fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800930a:	2323      	movs	r3, #35	@ 0x23
 800930c:	18fb      	adds	r3, r7, r3
 800930e:	2201      	movs	r2, #1
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e003      	b.n	800931c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	225d      	movs	r2, #93	@ 0x5d
 8009318:	2101      	movs	r1, #1
 800931a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	225c      	movs	r2, #92	@ 0x5c
 8009320:	2100      	movs	r1, #0
 8009322:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009324:	2323      	movs	r3, #35	@ 0x23
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	781b      	ldrb	r3, [r3, #0]
}
 800932a:	0018      	movs	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	b00a      	add	sp, #40	@ 0x28
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			@ (mov r8, r8)
 8009334:	ffffefff 	.word	0xffffefff

08009338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	1dfb      	adds	r3, r7, #7
 8009346:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009348:	f7fb ffe4 	bl	8005314 <HAL_GetTick>
 800934c:	0002      	movs	r2, r0
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	18d3      	adds	r3, r2, r3
 8009356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009358:	f7fb ffdc 	bl	8005314 <HAL_GetTick>
 800935c:	0003      	movs	r3, r0
 800935e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009360:	4b3a      	ldr	r3, [pc, #232]	@ (800944c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	015b      	lsls	r3, r3, #5
 8009366:	0d1b      	lsrs	r3, r3, #20
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	4353      	muls	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800936e:	e058      	b.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	d055      	beq.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009376:	f7fb ffcd 	bl	8005314 <HAL_GetTick>
 800937a:	0002      	movs	r2, r0
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	429a      	cmp	r2, r3
 8009384:	d902      	bls.n	800938c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d142      	bne.n	8009412 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	21e0      	movs	r1, #224	@ 0xe0
 8009398:	438a      	bics	r2, r1
 800939a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	2382      	movs	r3, #130	@ 0x82
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d113      	bne.n	80093d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	2380      	movs	r3, #128	@ 0x80
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d005      	beq.n	80093c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	2380      	movs	r3, #128	@ 0x80
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	429a      	cmp	r2, r3
 80093be:	d107      	bne.n	80093d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2140      	movs	r1, #64	@ 0x40
 80093cc:	438a      	bics	r2, r1
 80093ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093d4:	2380      	movs	r3, #128	@ 0x80
 80093d6:	019b      	lsls	r3, r3, #6
 80093d8:	429a      	cmp	r2, r3
 80093da:	d110      	bne.n	80093fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	491a      	ldr	r1, [pc, #104]	@ (8009450 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80093e8:	400a      	ands	r2, r1
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2180      	movs	r1, #128	@ 0x80
 80093f8:	0189      	lsls	r1, r1, #6
 80093fa:	430a      	orrs	r2, r1
 80093fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	225d      	movs	r2, #93	@ 0x5d
 8009402:	2101      	movs	r1, #1
 8009404:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	225c      	movs	r2, #92	@ 0x5c
 800940a:	2100      	movs	r1, #0
 800940c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e017      	b.n	8009442 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	3b01      	subs	r3, #1
 8009420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	4013      	ands	r3, r2
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	425a      	negs	r2, r3
 8009432:	4153      	adcs	r3, r2
 8009434:	b2db      	uxtb	r3, r3
 8009436:	001a      	movs	r2, r3
 8009438:	1dfb      	adds	r3, r7, #7
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d197      	bne.n	8009370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	0018      	movs	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	b008      	add	sp, #32
 8009448:	bd80      	pop	{r7, pc}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	20000014 	.word	0x20000014
 8009450:	ffffdfff 	.word	0xffffdfff

08009454 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	@ 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009462:	2317      	movs	r3, #23
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800946a:	f7fb ff53 	bl	8005314 <HAL_GetTick>
 800946e:	0002      	movs	r2, r0
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	18d3      	adds	r3, r2, r3
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800947a:	f7fb ff4b 	bl	8005314 <HAL_GetTick>
 800947e:	0003      	movs	r3, r0
 8009480:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	330c      	adds	r3, #12
 8009488:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800948a:	4b41      	ldr	r3, [pc, #260]	@ (8009590 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	0013      	movs	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	189b      	adds	r3, r3, r2
 8009494:	00da      	lsls	r2, r3, #3
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	0d1b      	lsrs	r3, r3, #20
 800949a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800949c:	4353      	muls	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094a0:	e068      	b.n	8009574 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	23c0      	movs	r3, #192	@ 0xc0
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d10a      	bne.n	80094c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d107      	bne.n	80094c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	2117      	movs	r1, #23
 80094ba:	187b      	adds	r3, r7, r1
 80094bc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094be:	187b      	adds	r3, r7, r1
 80094c0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	d055      	beq.n	8009574 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094c8:	f7fb ff24 	bl	8005314 <HAL_GetTick>
 80094cc:	0002      	movs	r2, r0
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d902      	bls.n	80094de <SPI_WaitFifoStateUntilTimeout+0x8a>
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d142      	bne.n	8009564 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	21e0      	movs	r1, #224	@ 0xe0
 80094ea:	438a      	bics	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	2382      	movs	r3, #130	@ 0x82
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d113      	bne.n	8009522 <SPI_WaitFifoStateUntilTimeout+0xce>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	2380      	movs	r3, #128	@ 0x80
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	429a      	cmp	r2, r3
 8009504:	d005      	beq.n	8009512 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	2380      	movs	r3, #128	@ 0x80
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	429a      	cmp	r2, r3
 8009510:	d107      	bne.n	8009522 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2140      	movs	r1, #64	@ 0x40
 800951e:	438a      	bics	r2, r1
 8009520:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009526:	2380      	movs	r3, #128	@ 0x80
 8009528:	019b      	lsls	r3, r3, #6
 800952a:	429a      	cmp	r2, r3
 800952c:	d110      	bne.n	8009550 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4916      	ldr	r1, [pc, #88]	@ (8009594 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800953a:	400a      	ands	r2, r1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2180      	movs	r1, #128	@ 0x80
 800954a:	0189      	lsls	r1, r1, #6
 800954c:	430a      	orrs	r2, r1
 800954e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	225d      	movs	r2, #93	@ 0x5d
 8009554:	2101      	movs	r1, #1
 8009556:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	225c      	movs	r2, #92	@ 0x5c
 800955c:	2100      	movs	r1, #0
 800955e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e010      	b.n	8009586 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	3b01      	subs	r3, #1
 8009572:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4013      	ands	r3, r2
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d18e      	bne.n	80094a2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	0018      	movs	r0, r3
 8009588:	46bd      	mov	sp, r7
 800958a:	b00a      	add	sp, #40	@ 0x28
 800958c:	bd80      	pop	{r7, pc}
 800958e:	46c0      	nop			@ (mov r8, r8)
 8009590:	20000014 	.word	0x20000014
 8009594:	ffffdfff 	.word	0xffffdfff

08009598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	23c0      	movs	r3, #192	@ 0xc0
 80095a8:	0159      	lsls	r1, r3, #5
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	0013      	movs	r3, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	f7ff ff4e 	bl	8009454 <SPI_WaitFifoStateUntilTimeout>
 80095b8:	1e03      	subs	r3, r0, #0
 80095ba:	d007      	beq.n	80095cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c0:	2220      	movs	r2, #32
 80095c2:	431a      	orrs	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e027      	b.n	800961c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	0013      	movs	r3, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	2180      	movs	r1, #128	@ 0x80
 80095da:	f7ff fead 	bl	8009338 <SPI_WaitFlagStateUntilTimeout>
 80095de:	1e03      	subs	r3, r0, #0
 80095e0:	d007      	beq.n	80095f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095e6:	2220      	movs	r2, #32
 80095e8:	431a      	orrs	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e014      	b.n	800961c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	23c0      	movs	r3, #192	@ 0xc0
 80095f6:	00d9      	lsls	r1, r3, #3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	0013      	movs	r3, r2
 8009600:	2200      	movs	r2, #0
 8009602:	f7ff ff27 	bl	8009454 <SPI_WaitFifoStateUntilTimeout>
 8009606:	1e03      	subs	r3, r0, #0
 8009608:	d007      	beq.n	800961a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800960e:	2220      	movs	r2, #32
 8009610:	431a      	orrs	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e000      	b.n	800961c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	0018      	movs	r0, r3
 800961e:	46bd      	mov	sp, r7
 8009620:	b004      	add	sp, #16
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e04a      	b.n	80096cc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	223d      	movs	r2, #61	@ 0x3d
 800963a:	5c9b      	ldrb	r3, [r3, r2]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d107      	bne.n	8009652 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	223c      	movs	r2, #60	@ 0x3c
 8009646:	2100      	movs	r1, #0
 8009648:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	0018      	movs	r0, r3
 800964e:	f7fb fb73 	bl	8004d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	223d      	movs	r2, #61	@ 0x3d
 8009656:	2102      	movs	r1, #2
 8009658:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3304      	adds	r3, #4
 8009662:	0019      	movs	r1, r3
 8009664:	0010      	movs	r0, r2
 8009666:	f000 f935 	bl	80098d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2248      	movs	r2, #72	@ 0x48
 800966e:	2101      	movs	r1, #1
 8009670:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	223e      	movs	r2, #62	@ 0x3e
 8009676:	2101      	movs	r1, #1
 8009678:	5499      	strb	r1, [r3, r2]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	223f      	movs	r2, #63	@ 0x3f
 800967e:	2101      	movs	r1, #1
 8009680:	5499      	strb	r1, [r3, r2]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2240      	movs	r2, #64	@ 0x40
 8009686:	2101      	movs	r1, #1
 8009688:	5499      	strb	r1, [r3, r2]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2241      	movs	r2, #65	@ 0x41
 800968e:	2101      	movs	r1, #1
 8009690:	5499      	strb	r1, [r3, r2]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2242      	movs	r2, #66	@ 0x42
 8009696:	2101      	movs	r1, #1
 8009698:	5499      	strb	r1, [r3, r2]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2243      	movs	r2, #67	@ 0x43
 800969e:	2101      	movs	r1, #1
 80096a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2244      	movs	r2, #68	@ 0x44
 80096a6:	2101      	movs	r1, #1
 80096a8:	5499      	strb	r1, [r3, r2]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2245      	movs	r2, #69	@ 0x45
 80096ae:	2101      	movs	r1, #1
 80096b0:	5499      	strb	r1, [r3, r2]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2246      	movs	r2, #70	@ 0x46
 80096b6:	2101      	movs	r1, #1
 80096b8:	5499      	strb	r1, [r3, r2]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2247      	movs	r2, #71	@ 0x47
 80096be:	2101      	movs	r1, #1
 80096c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	223d      	movs	r2, #61	@ 0x3d
 80096c6:	2101      	movs	r1, #1
 80096c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	0018      	movs	r0, r3
 80096ce:	46bd      	mov	sp, r7
 80096d0:	b002      	add	sp, #8
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e0:	2317      	movs	r3, #23
 80096e2:	18fb      	adds	r3, r7, r3
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	223c      	movs	r2, #60	@ 0x3c
 80096ec:	5c9b      	ldrb	r3, [r3, r2]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e0e5      	b.n	80098c2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	223c      	movs	r2, #60	@ 0x3c
 80096fa:	2101      	movs	r1, #1
 80096fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b14      	cmp	r3, #20
 8009702:	d900      	bls.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x32>
 8009704:	e0d1      	b.n	80098aa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	009a      	lsls	r2, r3, #2
 800970a:	4b70      	ldr	r3, [pc, #448]	@ (80098cc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800970c:	18d3      	adds	r3, r2, r3
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	0011      	movs	r1, r2
 800971a:	0018      	movs	r0, r3
 800971c:	f000 f958 	bl	80099d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699a      	ldr	r2, [r3, #24]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2108      	movs	r1, #8
 800972c:	430a      	orrs	r2, r1
 800972e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2104      	movs	r1, #4
 800973c:	438a      	bics	r2, r1
 800973e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6999      	ldr	r1, [r3, #24]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	619a      	str	r2, [r3, #24]
      break;
 8009752:	e0af      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	0011      	movs	r1, r2
 800975c:	0018      	movs	r0, r3
 800975e:	f000 f9b7 	bl	8009ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699a      	ldr	r2, [r3, #24]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2180      	movs	r1, #128	@ 0x80
 800976e:	0109      	lsls	r1, r1, #4
 8009770:	430a      	orrs	r2, r1
 8009772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699a      	ldr	r2, [r3, #24]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4954      	ldr	r1, [pc, #336]	@ (80098d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009780:	400a      	ands	r2, r1
 8009782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6999      	ldr	r1, [r3, #24]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	619a      	str	r2, [r3, #24]
      break;
 8009798:	e08c      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	0011      	movs	r1, r2
 80097a2:	0018      	movs	r0, r3
 80097a4:	f000 fa12 	bl	8009bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69da      	ldr	r2, [r3, #28]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2108      	movs	r1, #8
 80097b4:	430a      	orrs	r2, r1
 80097b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	69da      	ldr	r2, [r3, #28]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2104      	movs	r1, #4
 80097c4:	438a      	bics	r2, r1
 80097c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69d9      	ldr	r1, [r3, #28]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	61da      	str	r2, [r3, #28]
      break;
 80097da:	e06b      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	0011      	movs	r1, r2
 80097e4:	0018      	movs	r0, r3
 80097e6:	f000 fa73 	bl	8009cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2180      	movs	r1, #128	@ 0x80
 80097f6:	0109      	lsls	r1, r1, #4
 80097f8:	430a      	orrs	r2, r1
 80097fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69da      	ldr	r2, [r3, #28]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4932      	ldr	r1, [pc, #200]	@ (80098d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009808:	400a      	ands	r2, r1
 800980a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69d9      	ldr	r1, [r3, #28]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	021a      	lsls	r2, r3, #8
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	61da      	str	r2, [r3, #28]
      break;
 8009820:	e048      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	0011      	movs	r1, r2
 800982a:	0018      	movs	r0, r3
 800982c:	f000 fab4 	bl	8009d98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2108      	movs	r1, #8
 800983c:	430a      	orrs	r2, r1
 800983e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2104      	movs	r1, #4
 800984c:	438a      	bics	r2, r1
 800984e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	691a      	ldr	r2, [r3, #16]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009862:	e027      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	0011      	movs	r1, r2
 800986c:	0018      	movs	r0, r3
 800986e:	f000 faed 	bl	8009e4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2180      	movs	r1, #128	@ 0x80
 800987e:	0109      	lsls	r1, r1, #4
 8009880:	430a      	orrs	r2, r1
 8009882:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4910      	ldr	r1, [pc, #64]	@ (80098d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009890:	400a      	ands	r2, r1
 8009892:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	021a      	lsls	r2, r3, #8
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80098a8:	e004      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80098aa:	2317      	movs	r3, #23
 80098ac:	18fb      	adds	r3, r7, r3
 80098ae:	2201      	movs	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
      break;
 80098b2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	223c      	movs	r2, #60	@ 0x3c
 80098b8:	2100      	movs	r1, #0
 80098ba:	5499      	strb	r1, [r3, r2]

  return status;
 80098bc:	2317      	movs	r3, #23
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	781b      	ldrb	r3, [r3, #0]
}
 80098c2:	0018      	movs	r0, r3
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b006      	add	sp, #24
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	08012228 	.word	0x08012228
 80098d0:	fffffbff 	.word	0xfffffbff

080098d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a35      	ldr	r2, [pc, #212]	@ (80099bc <TIM_Base_SetConfig+0xe8>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d008      	beq.n	80098fe <TIM_Base_SetConfig+0x2a>
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	2380      	movs	r3, #128	@ 0x80
 80098f0:	05db      	lsls	r3, r3, #23
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d003      	beq.n	80098fe <TIM_Base_SetConfig+0x2a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a31      	ldr	r2, [pc, #196]	@ (80099c0 <TIM_Base_SetConfig+0xec>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d108      	bne.n	8009910 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2270      	movs	r2, #112	@ 0x70
 8009902:	4393      	bics	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a2a      	ldr	r2, [pc, #168]	@ (80099bc <TIM_Base_SetConfig+0xe8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d010      	beq.n	800993a <TIM_Base_SetConfig+0x66>
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	2380      	movs	r3, #128	@ 0x80
 800991c:	05db      	lsls	r3, r3, #23
 800991e:	429a      	cmp	r2, r3
 8009920:	d00b      	beq.n	800993a <TIM_Base_SetConfig+0x66>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a26      	ldr	r2, [pc, #152]	@ (80099c0 <TIM_Base_SetConfig+0xec>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d007      	beq.n	800993a <TIM_Base_SetConfig+0x66>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a25      	ldr	r2, [pc, #148]	@ (80099c4 <TIM_Base_SetConfig+0xf0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d003      	beq.n	800993a <TIM_Base_SetConfig+0x66>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a24      	ldr	r2, [pc, #144]	@ (80099c8 <TIM_Base_SetConfig+0xf4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d108      	bne.n	800994c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4a23      	ldr	r2, [pc, #140]	@ (80099cc <TIM_Base_SetConfig+0xf8>)
 800993e:	4013      	ands	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2280      	movs	r2, #128	@ 0x80
 8009950:	4393      	bics	r3, r2
 8009952:	001a      	movs	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	4313      	orrs	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a11      	ldr	r2, [pc, #68]	@ (80099bc <TIM_Base_SetConfig+0xe8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d007      	beq.n	800998a <TIM_Base_SetConfig+0xb6>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a11      	ldr	r2, [pc, #68]	@ (80099c4 <TIM_Base_SetConfig+0xf0>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d003      	beq.n	800998a <TIM_Base_SetConfig+0xb6>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a10      	ldr	r2, [pc, #64]	@ (80099c8 <TIM_Base_SetConfig+0xf4>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d103      	bne.n	8009992 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	691a      	ldr	r2, [r3, #16]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2201      	movs	r2, #1
 800999e:	4013      	ands	r3, r2
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d106      	bne.n	80099b2 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2201      	movs	r2, #1
 80099aa:	4393      	bics	r3, r2
 80099ac:	001a      	movs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	611a      	str	r2, [r3, #16]
  }
}
 80099b2:	46c0      	nop			@ (mov r8, r8)
 80099b4:	46bd      	mov	sp, r7
 80099b6:	b004      	add	sp, #16
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	46c0      	nop			@ (mov r8, r8)
 80099bc:	40012c00 	.word	0x40012c00
 80099c0:	40000400 	.word	0x40000400
 80099c4:	40014000 	.word	0x40014000
 80099c8:	40014400 	.word	0x40014400
 80099cc:	fffffcff 	.word	0xfffffcff

080099d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	2201      	movs	r2, #1
 80099e6:	4393      	bics	r3, r2
 80099e8:	001a      	movs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4a2e      	ldr	r2, [pc, #184]	@ (8009ab8 <TIM_OC1_SetConfig+0xe8>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2203      	movs	r2, #3
 8009a06:	4393      	bics	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2202      	movs	r2, #2
 8009a18:	4393      	bics	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a24      	ldr	r2, [pc, #144]	@ (8009abc <TIM_OC1_SetConfig+0xec>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d007      	beq.n	8009a3e <TIM_OC1_SetConfig+0x6e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a23      	ldr	r2, [pc, #140]	@ (8009ac0 <TIM_OC1_SetConfig+0xf0>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC1_SetConfig+0x6e>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a22      	ldr	r2, [pc, #136]	@ (8009ac4 <TIM_OC1_SetConfig+0xf4>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d10c      	bne.n	8009a58 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2208      	movs	r2, #8
 8009a42:	4393      	bics	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2204      	movs	r2, #4
 8009a54:	4393      	bics	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a18      	ldr	r2, [pc, #96]	@ (8009abc <TIM_OC1_SetConfig+0xec>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d007      	beq.n	8009a70 <TIM_OC1_SetConfig+0xa0>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a17      	ldr	r2, [pc, #92]	@ (8009ac0 <TIM_OC1_SetConfig+0xf0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d003      	beq.n	8009a70 <TIM_OC1_SetConfig+0xa0>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a16      	ldr	r2, [pc, #88]	@ (8009ac4 <TIM_OC1_SetConfig+0xf4>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d111      	bne.n	8009a94 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	4a15      	ldr	r2, [pc, #84]	@ (8009ac8 <TIM_OC1_SetConfig+0xf8>)
 8009a74:	4013      	ands	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	4a14      	ldr	r2, [pc, #80]	@ (8009acc <TIM_OC1_SetConfig+0xfc>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	46c0      	nop			@ (mov r8, r8)
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b006      	add	sp, #24
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	46c0      	nop			@ (mov r8, r8)
 8009ab8:	fffeff8f 	.word	0xfffeff8f
 8009abc:	40012c00 	.word	0x40012c00
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	40014400 	.word	0x40014400
 8009ac8:	fffffeff 	.word	0xfffffeff
 8009acc:	fffffdff 	.word	0xfffffdff

08009ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	2210      	movs	r2, #16
 8009ae6:	4393      	bics	r3, r2
 8009ae8:	001a      	movs	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4a2c      	ldr	r2, [pc, #176]	@ (8009bb0 <TIM_OC2_SetConfig+0xe0>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4a2b      	ldr	r2, [pc, #172]	@ (8009bb4 <TIM_OC2_SetConfig+0xe4>)
 8009b06:	4013      	ands	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	4393      	bics	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a22      	ldr	r2, [pc, #136]	@ (8009bb8 <TIM_OC2_SetConfig+0xe8>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d10d      	bne.n	8009b4e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2280      	movs	r2, #128	@ 0x80
 8009b36:	4393      	bics	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	011b      	lsls	r3, r3, #4
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2240      	movs	r2, #64	@ 0x40
 8009b4a:	4393      	bics	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a19      	ldr	r2, [pc, #100]	@ (8009bb8 <TIM_OC2_SetConfig+0xe8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d007      	beq.n	8009b66 <TIM_OC2_SetConfig+0x96>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a18      	ldr	r2, [pc, #96]	@ (8009bbc <TIM_OC2_SetConfig+0xec>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d003      	beq.n	8009b66 <TIM_OC2_SetConfig+0x96>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a17      	ldr	r2, [pc, #92]	@ (8009bc0 <TIM_OC2_SetConfig+0xf0>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d113      	bne.n	8009b8e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	4a16      	ldr	r2, [pc, #88]	@ (8009bc4 <TIM_OC2_SetConfig+0xf4>)
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	4a15      	ldr	r2, [pc, #84]	@ (8009bc8 <TIM_OC2_SetConfig+0xf8>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	621a      	str	r2, [r3, #32]
}
 8009ba8:	46c0      	nop			@ (mov r8, r8)
 8009baa:	46bd      	mov	sp, r7
 8009bac:	b006      	add	sp, #24
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	feff8fff 	.word	0xfeff8fff
 8009bb4:	fffffcff 	.word	0xfffffcff
 8009bb8:	40012c00 	.word	0x40012c00
 8009bbc:	40014000 	.word	0x40014000
 8009bc0:	40014400 	.word	0x40014400
 8009bc4:	fffffbff 	.word	0xfffffbff
 8009bc8:	fffff7ff 	.word	0xfffff7ff

08009bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	4a31      	ldr	r2, [pc, #196]	@ (8009ca8 <TIM_OC3_SetConfig+0xdc>)
 8009be2:	401a      	ands	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8009cac <TIM_OC3_SetConfig+0xe0>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2203      	movs	r2, #3
 8009c00:	4393      	bics	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	4a27      	ldr	r2, [pc, #156]	@ (8009cb0 <TIM_OC3_SetConfig+0xe4>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a23      	ldr	r2, [pc, #140]	@ (8009cb4 <TIM_OC3_SetConfig+0xe8>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d10d      	bne.n	8009c46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	4a22      	ldr	r2, [pc, #136]	@ (8009cb8 <TIM_OC3_SetConfig+0xec>)
 8009c2e:	4013      	ands	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	4a1e      	ldr	r2, [pc, #120]	@ (8009cbc <TIM_OC3_SetConfig+0xf0>)
 8009c42:	4013      	ands	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb4 <TIM_OC3_SetConfig+0xe8>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d007      	beq.n	8009c5e <TIM_OC3_SetConfig+0x92>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc0 <TIM_OC3_SetConfig+0xf4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d003      	beq.n	8009c5e <TIM_OC3_SetConfig+0x92>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc4 <TIM_OC3_SetConfig+0xf8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d113      	bne.n	8009c86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	4a19      	ldr	r2, [pc, #100]	@ (8009cc8 <TIM_OC3_SetConfig+0xfc>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	4a18      	ldr	r2, [pc, #96]	@ (8009ccc <TIM_OC3_SetConfig+0x100>)
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	621a      	str	r2, [r3, #32]
}
 8009ca0:	46c0      	nop			@ (mov r8, r8)
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	b006      	add	sp, #24
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	fffffeff 	.word	0xfffffeff
 8009cac:	fffeff8f 	.word	0xfffeff8f
 8009cb0:	fffffdff 	.word	0xfffffdff
 8009cb4:	40012c00 	.word	0x40012c00
 8009cb8:	fffff7ff 	.word	0xfffff7ff
 8009cbc:	fffffbff 	.word	0xfffffbff
 8009cc0:	40014000 	.word	0x40014000
 8009cc4:	40014400 	.word	0x40014400
 8009cc8:	ffffefff 	.word	0xffffefff
 8009ccc:	ffffdfff 	.word	0xffffdfff

08009cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	4a24      	ldr	r2, [pc, #144]	@ (8009d78 <TIM_OC4_SetConfig+0xa8>)
 8009ce6:	401a      	ands	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4a20      	ldr	r2, [pc, #128]	@ (8009d7c <TIM_OC4_SetConfig+0xac>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4a1f      	ldr	r2, [pc, #124]	@ (8009d80 <TIM_OC4_SetConfig+0xb0>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <TIM_OC4_SetConfig+0xb4>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	031b      	lsls	r3, r3, #12
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a17      	ldr	r2, [pc, #92]	@ (8009d88 <TIM_OC4_SetConfig+0xb8>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d007      	beq.n	8009d40 <TIM_OC4_SetConfig+0x70>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a16      	ldr	r2, [pc, #88]	@ (8009d8c <TIM_OC4_SetConfig+0xbc>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d003      	beq.n	8009d40 <TIM_OC4_SetConfig+0x70>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a15      	ldr	r2, [pc, #84]	@ (8009d90 <TIM_OC4_SetConfig+0xc0>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d109      	bne.n	8009d54 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	4a14      	ldr	r2, [pc, #80]	@ (8009d94 <TIM_OC4_SetConfig+0xc4>)
 8009d44:	4013      	ands	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	019b      	lsls	r3, r3, #6
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	621a      	str	r2, [r3, #32]
}
 8009d6e:	46c0      	nop			@ (mov r8, r8)
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b006      	add	sp, #24
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	46c0      	nop			@ (mov r8, r8)
 8009d78:	ffffefff 	.word	0xffffefff
 8009d7c:	feff8fff 	.word	0xfeff8fff
 8009d80:	fffffcff 	.word	0xfffffcff
 8009d84:	ffffdfff 	.word	0xffffdfff
 8009d88:	40012c00 	.word	0x40012c00
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40014400 	.word	0x40014400
 8009d94:	ffffbfff 	.word	0xffffbfff

08009d98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	4a21      	ldr	r2, [pc, #132]	@ (8009e34 <TIM_OC5_SetConfig+0x9c>)
 8009dae:	401a      	ands	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8009e38 <TIM_OC5_SetConfig+0xa0>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	4a19      	ldr	r2, [pc, #100]	@ (8009e3c <TIM_OC5_SetConfig+0xa4>)
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	041b      	lsls	r3, r3, #16
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a15      	ldr	r2, [pc, #84]	@ (8009e40 <TIM_OC5_SetConfig+0xa8>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d007      	beq.n	8009dfe <TIM_OC5_SetConfig+0x66>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a14      	ldr	r2, [pc, #80]	@ (8009e44 <TIM_OC5_SetConfig+0xac>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_OC5_SetConfig+0x66>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a13      	ldr	r2, [pc, #76]	@ (8009e48 <TIM_OC5_SetConfig+0xb0>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d109      	bne.n	8009e12 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	4a0c      	ldr	r2, [pc, #48]	@ (8009e34 <TIM_OC5_SetConfig+0x9c>)
 8009e02:	4013      	ands	r3, r2
 8009e04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	621a      	str	r2, [r3, #32]
}
 8009e2c:	46c0      	nop			@ (mov r8, r8)
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	b006      	add	sp, #24
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	fffeffff 	.word	0xfffeffff
 8009e38:	fffeff8f 	.word	0xfffeff8f
 8009e3c:	fffdffff 	.word	0xfffdffff
 8009e40:	40012c00 	.word	0x40012c00
 8009e44:	40014000 	.word	0x40014000
 8009e48:	40014400 	.word	0x40014400

08009e4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	4a22      	ldr	r2, [pc, #136]	@ (8009eec <TIM_OC6_SetConfig+0xa0>)
 8009e62:	401a      	ands	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef0 <TIM_OC6_SetConfig+0xa4>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef4 <TIM_OC6_SetConfig+0xa8>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	051b      	lsls	r3, r3, #20
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a16      	ldr	r2, [pc, #88]	@ (8009ef8 <TIM_OC6_SetConfig+0xac>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d007      	beq.n	8009eb4 <TIM_OC6_SetConfig+0x68>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a15      	ldr	r2, [pc, #84]	@ (8009efc <TIM_OC6_SetConfig+0xb0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d003      	beq.n	8009eb4 <TIM_OC6_SetConfig+0x68>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a14      	ldr	r2, [pc, #80]	@ (8009f00 <TIM_OC6_SetConfig+0xb4>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d109      	bne.n	8009ec8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	4a13      	ldr	r2, [pc, #76]	@ (8009f04 <TIM_OC6_SetConfig+0xb8>)
 8009eb8:	4013      	ands	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	029b      	lsls	r3, r3, #10
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	46c0      	nop			@ (mov r8, r8)
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b006      	add	sp, #24
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	46c0      	nop			@ (mov r8, r8)
 8009eec:	ffefffff 	.word	0xffefffff
 8009ef0:	feff8fff 	.word	0xfeff8fff
 8009ef4:	ffdfffff 	.word	0xffdfffff
 8009ef8:	40012c00 	.word	0x40012c00
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40014400 	.word	0x40014400
 8009f04:	fffbffff 	.word	0xfffbffff

08009f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	223c      	movs	r2, #60	@ 0x3c
 8009f16:	5c9b      	ldrb	r3, [r3, r2]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e055      	b.n	8009fcc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	223c      	movs	r2, #60	@ 0x3c
 8009f24:	2101      	movs	r1, #1
 8009f26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	223d      	movs	r2, #61	@ 0x3d
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a23      	ldr	r2, [pc, #140]	@ (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d108      	bne.n	8009f5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4a22      	ldr	r2, [pc, #136]	@ (8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f4e:	4013      	ands	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2270      	movs	r2, #112	@ 0x70
 8009f60:	4393      	bics	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a16      	ldr	r2, [pc, #88]	@ (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d00f      	beq.n	8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	2380      	movs	r3, #128	@ 0x80
 8009f86:	05db      	lsls	r3, r3, #23
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d009      	beq.n	8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a12      	ldr	r2, [pc, #72]	@ (8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d004      	beq.n	8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a11      	ldr	r2, [pc, #68]	@ (8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d10c      	bne.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2280      	movs	r2, #128	@ 0x80
 8009fa4:	4393      	bics	r3, r2
 8009fa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	223d      	movs	r2, #61	@ 0x3d
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	223c      	movs	r2, #60	@ 0x3c
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	0018      	movs	r0, r3
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	b004      	add	sp, #16
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	40012c00 	.word	0x40012c00
 8009fd8:	ff0fffff 	.word	0xff0fffff
 8009fdc:	40000400 	.word	0x40000400
 8009fe0:	40014000 	.word	0x40014000

08009fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e046      	b.n	800a084 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2288      	movs	r2, #136	@ 0x88
 8009ffa:	589b      	ldr	r3, [r3, r2]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d107      	bne.n	800a010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2284      	movs	r2, #132	@ 0x84
 800a004:	2100      	movs	r1, #0
 800a006:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	0018      	movs	r0, r3
 800a00c:	f7fa fef0 	bl	8004df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2288      	movs	r2, #136	@ 0x88
 800a014:	2124      	movs	r1, #36	@ 0x24
 800a016:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2101      	movs	r1, #1
 800a024:	438a      	bics	r2, r1
 800a026:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d003      	beq.n	800a038 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	0018      	movs	r0, r3
 800a034:	f000 f9fe 	bl	800a434 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 f828 	bl	800a090 <UART_SetConfig>
 800a040:	0003      	movs	r3, r0
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e01c      	b.n	800a084 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	490d      	ldr	r1, [pc, #52]	@ (800a08c <HAL_UART_Init+0xa8>)
 800a056:	400a      	ands	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	212a      	movs	r1, #42	@ 0x2a
 800a066:	438a      	bics	r2, r1
 800a068:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2101      	movs	r1, #1
 800a076:	430a      	orrs	r2, r1
 800a078:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 fa8d 	bl	800a59c <UART_CheckIdleState>
 800a082:	0003      	movs	r3, r0
}
 800a084:	0018      	movs	r0, r3
 800a086:	46bd      	mov	sp, r7
 800a088:	b002      	add	sp, #8
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	ffffb7ff 	.word	0xffffb7ff

0800a090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a090:	b5b0      	push	{r4, r5, r7, lr}
 800a092:	b092      	sub	sp, #72	@ 0x48
 800a094:	af00      	add	r7, sp, #0
 800a096:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a098:	231f      	movs	r3, #31
 800a09a:	2220      	movs	r2, #32
 800a09c:	189b      	adds	r3, r3, r2
 800a09e:	19db      	adds	r3, r3, r7
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4ac8      	ldr	r2, [pc, #800]	@ (800a3cc <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4ac1      	ldr	r2, [pc, #772]	@ (800a3d0 <UART_SetConfig+0x340>)
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	0019      	movs	r1, r3
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	4abd      	ldr	r2, [pc, #756]	@ (800a3d4 <UART_SetConfig+0x344>)
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	68d9      	ldr	r1, [r3, #12]
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	0003      	movs	r3, r0
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4ab3      	ldr	r2, [pc, #716]	@ (800a3cc <UART_SetConfig+0x33c>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d00e      	beq.n	800a120 <UART_SetConfig+0x90>
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4ab4      	ldr	r2, [pc, #720]	@ (800a3d8 <UART_SetConfig+0x348>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d009      	beq.n	800a120 <UART_SetConfig+0x90>
 800a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4ab2      	ldr	r2, [pc, #712]	@ (800a3dc <UART_SetConfig+0x34c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d004      	beq.n	800a120 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a11c:	4313      	orrs	r3, r2
 800a11e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	4aae      	ldr	r2, [pc, #696]	@ (800a3e0 <UART_SetConfig+0x350>)
 800a128:	4013      	ands	r3, r2
 800a12a:	0019      	movs	r1, r3
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a132:	430b      	orrs	r3, r1
 800a134:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13c:	220f      	movs	r2, #15
 800a13e:	4393      	bics	r3, r2
 800a140:	0018      	movs	r0, r3
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	0003      	movs	r3, r0
 800a14c:	430b      	orrs	r3, r1
 800a14e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4aa3      	ldr	r2, [pc, #652]	@ (800a3e4 <UART_SetConfig+0x354>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d102      	bne.n	800a160 <UART_SetConfig+0xd0>
 800a15a:	2301      	movs	r3, #1
 800a15c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a15e:	e033      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4aa0      	ldr	r2, [pc, #640]	@ (800a3e8 <UART_SetConfig+0x358>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d102      	bne.n	800a170 <UART_SetConfig+0xe0>
 800a16a:	2302      	movs	r3, #2
 800a16c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a16e:	e02b      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a9d      	ldr	r2, [pc, #628]	@ (800a3ec <UART_SetConfig+0x35c>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d103      	bne.n	800a182 <UART_SetConfig+0xf2>
 800a17a:	2380      	movs	r3, #128	@ 0x80
 800a17c:	025b      	lsls	r3, r3, #9
 800a17e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a180:	e022      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a9a      	ldr	r2, [pc, #616]	@ (800a3f0 <UART_SetConfig+0x360>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d103      	bne.n	800a194 <UART_SetConfig+0x104>
 800a18c:	2380      	movs	r3, #128	@ 0x80
 800a18e:	029b      	lsls	r3, r3, #10
 800a190:	643b      	str	r3, [r7, #64]	@ 0x40
 800a192:	e019      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a8c      	ldr	r2, [pc, #560]	@ (800a3cc <UART_SetConfig+0x33c>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d102      	bne.n	800a1a4 <UART_SetConfig+0x114>
 800a19e:	2310      	movs	r3, #16
 800a1a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1a2:	e011      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a8b      	ldr	r2, [pc, #556]	@ (800a3d8 <UART_SetConfig+0x348>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d102      	bne.n	800a1b4 <UART_SetConfig+0x124>
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1b2:	e009      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a88      	ldr	r2, [pc, #544]	@ (800a3dc <UART_SetConfig+0x34c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d102      	bne.n	800a1c4 <UART_SetConfig+0x134>
 800a1be:	2304      	movs	r3, #4
 800a1c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1c2:	e001      	b.n	800a1c8 <UART_SetConfig+0x138>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a7f      	ldr	r2, [pc, #508]	@ (800a3cc <UART_SetConfig+0x33c>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00a      	beq.n	800a1e8 <UART_SetConfig+0x158>
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a80      	ldr	r2, [pc, #512]	@ (800a3d8 <UART_SetConfig+0x348>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d005      	beq.n	800a1e8 <UART_SetConfig+0x158>
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a7e      	ldr	r2, [pc, #504]	@ (800a3dc <UART_SetConfig+0x34c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d000      	beq.n	800a1e8 <UART_SetConfig+0x158>
 800a1e6:	e06f      	b.n	800a2c8 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a1e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f7fd feaa 	bl	8007f44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d100      	bne.n	800a1fc <UART_SetConfig+0x16c>
 800a1fa:	e103      	b.n	800a404 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a200:	4b7c      	ldr	r3, [pc, #496]	@ (800a3f4 <UART_SetConfig+0x364>)
 800a202:	0052      	lsls	r2, r2, #1
 800a204:	5ad3      	ldrh	r3, [r2, r3]
 800a206:	0019      	movs	r1, r3
 800a208:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a20a:	f7f5 ff99 	bl	8000140 <__udivsi3>
 800a20e:	0003      	movs	r3, r0
 800a210:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	0013      	movs	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	189b      	adds	r3, r3, r2
 800a21c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a21e:	429a      	cmp	r2, r3
 800a220:	d305      	bcc.n	800a22e <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d906      	bls.n	800a23c <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 800a22e:	231f      	movs	r3, #31
 800a230:	2220      	movs	r2, #32
 800a232:	189b      	adds	r3, r3, r2
 800a234:	19db      	adds	r3, r3, r7
 800a236:	2201      	movs	r2, #1
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	e044      	b.n	800a2c6 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	2300      	movs	r3, #0
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a248:	4b6a      	ldr	r3, [pc, #424]	@ (800a3f4 <UART_SetConfig+0x364>)
 800a24a:	0052      	lsls	r2, r2, #1
 800a24c:	5ad3      	ldrh	r3, [r2, r3]
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	69b8      	ldr	r0, [r7, #24]
 800a25a:	69f9      	ldr	r1, [r7, #28]
 800a25c:	f7f6 f942 	bl	80004e4 <__aeabi_uldivmod>
 800a260:	0002      	movs	r2, r0
 800a262:	000b      	movs	r3, r1
 800a264:	0e11      	lsrs	r1, r2, #24
 800a266:	021d      	lsls	r5, r3, #8
 800a268:	430d      	orrs	r5, r1
 800a26a:	0214      	lsls	r4, r2, #8
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	085b      	lsrs	r3, r3, #1
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	68b8      	ldr	r0, [r7, #8]
 800a27a:	68f9      	ldr	r1, [r7, #12]
 800a27c:	1900      	adds	r0, r0, r4
 800a27e:	4169      	adcs	r1, r5
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	603b      	str	r3, [r7, #0]
 800a286:	2300      	movs	r3, #0
 800a288:	607b      	str	r3, [r7, #4]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f7f6 f929 	bl	80004e4 <__aeabi_uldivmod>
 800a292:	0002      	movs	r2, r0
 800a294:	000b      	movs	r3, r1
 800a296:	0013      	movs	r3, r2
 800a298:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a29a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a29c:	23c0      	movs	r3, #192	@ 0xc0
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d309      	bcc.n	800a2b8 <UART_SetConfig+0x228>
 800a2a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2a6:	2380      	movs	r3, #128	@ 0x80
 800a2a8:	035b      	lsls	r3, r3, #13
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d204      	bcs.n	800a2b8 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2b4:	60da      	str	r2, [r3, #12]
 800a2b6:	e006      	b.n	800a2c6 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 800a2b8:	231f      	movs	r3, #31
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	189b      	adds	r3, r3, r2
 800a2be:	19db      	adds	r3, r3, r7
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800a2c4:	e09e      	b.n	800a404 <UART_SetConfig+0x374>
 800a2c6:	e09d      	b.n	800a404 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	2380      	movs	r3, #128	@ 0x80
 800a2ce:	021b      	lsls	r3, r3, #8
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d14c      	bne.n	800a36e <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f7fd fe34 	bl	8007f44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2dc:	0003      	movs	r3, r0
 800a2de:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d100      	bne.n	800a2e8 <UART_SetConfig+0x258>
 800a2e6:	e08d      	b.n	800a404 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2ec:	4b41      	ldr	r3, [pc, #260]	@ (800a3f4 <UART_SetConfig+0x364>)
 800a2ee:	0052      	lsls	r2, r2, #1
 800a2f0:	5ad3      	ldrh	r3, [r2, r3]
 800a2f2:	0019      	movs	r1, r3
 800a2f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2f6:	f7f5 ff23 	bl	8000140 <__udivsi3>
 800a2fa:	0003      	movs	r3, r0
 800a2fc:	005a      	lsls	r2, r3, #1
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	085b      	lsrs	r3, r3, #1
 800a304:	18d2      	adds	r2, r2, r3
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	0019      	movs	r1, r3
 800a30c:	0010      	movs	r0, r2
 800a30e:	f7f5 ff17 	bl	8000140 <__udivsi3>
 800a312:	0003      	movs	r3, r0
 800a314:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a318:	2b0f      	cmp	r3, #15
 800a31a:	d921      	bls.n	800a360 <UART_SetConfig+0x2d0>
 800a31c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a31e:	2380      	movs	r3, #128	@ 0x80
 800a320:	025b      	lsls	r3, r3, #9
 800a322:	429a      	cmp	r2, r3
 800a324:	d21c      	bcs.n	800a360 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a328:	b29a      	uxth	r2, r3
 800a32a:	2012      	movs	r0, #18
 800a32c:	2420      	movs	r4, #32
 800a32e:	1903      	adds	r3, r0, r4
 800a330:	19db      	adds	r3, r3, r7
 800a332:	210f      	movs	r1, #15
 800a334:	438a      	bics	r2, r1
 800a336:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2207      	movs	r2, #7
 800a340:	4013      	ands	r3, r2
 800a342:	b299      	uxth	r1, r3
 800a344:	1903      	adds	r3, r0, r4
 800a346:	19db      	adds	r3, r3, r7
 800a348:	1902      	adds	r2, r0, r4
 800a34a:	19d2      	adds	r2, r2, r7
 800a34c:	8812      	ldrh	r2, [r2, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	1902      	adds	r2, r0, r4
 800a358:	19d2      	adds	r2, r2, r7
 800a35a:	8812      	ldrh	r2, [r2, #0]
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e051      	b.n	800a404 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 800a360:	231f      	movs	r3, #31
 800a362:	2220      	movs	r2, #32
 800a364:	189b      	adds	r3, r3, r2
 800a366:	19db      	adds	r3, r3, r7
 800a368:	2201      	movs	r2, #1
 800a36a:	701a      	strb	r2, [r3, #0]
 800a36c:	e04a      	b.n	800a404 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a36e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a370:	0018      	movs	r0, r3
 800a372:	f7fd fde7 	bl	8007f44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a376:	0003      	movs	r3, r0
 800a378:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d041      	beq.n	800a404 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a384:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f4 <UART_SetConfig+0x364>)
 800a386:	0052      	lsls	r2, r2, #1
 800a388:	5ad3      	ldrh	r3, [r2, r3]
 800a38a:	0019      	movs	r1, r3
 800a38c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a38e:	f7f5 fed7 	bl	8000140 <__udivsi3>
 800a392:	0003      	movs	r3, r0
 800a394:	001a      	movs	r2, r3
 800a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	085b      	lsrs	r3, r3, #1
 800a39c:	18d2      	adds	r2, r2, r3
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	0019      	movs	r1, r3
 800a3a4:	0010      	movs	r0, r2
 800a3a6:	f7f5 fecb 	bl	8000140 <__udivsi3>
 800a3aa:	0003      	movs	r3, r0
 800a3ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b0:	2b0f      	cmp	r3, #15
 800a3b2:	d921      	bls.n	800a3f8 <UART_SetConfig+0x368>
 800a3b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3b6:	2380      	movs	r3, #128	@ 0x80
 800a3b8:	025b      	lsls	r3, r3, #9
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d21c      	bcs.n	800a3f8 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	60da      	str	r2, [r3, #12]
 800a3c8:	e01c      	b.n	800a404 <UART_SetConfig+0x374>
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	40008000 	.word	0x40008000
 800a3d0:	cfff69f3 	.word	0xcfff69f3
 800a3d4:	ffffcfff 	.word	0xffffcfff
 800a3d8:	40008400 	.word	0x40008400
 800a3dc:	40008c00 	.word	0x40008c00
 800a3e0:	11fff4ff 	.word	0x11fff4ff
 800a3e4:	40013800 	.word	0x40013800
 800a3e8:	40004400 	.word	0x40004400
 800a3ec:	40004800 	.word	0x40004800
 800a3f0:	40004c00 	.word	0x40004c00
 800a3f4:	0801227c 	.word	0x0801227c
      }
      else
      {
        ret = HAL_ERROR;
 800a3f8:	231f      	movs	r3, #31
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	189b      	adds	r3, r3, r2
 800a3fe:	19db      	adds	r3, r3, r7
 800a400:	2201      	movs	r2, #1
 800a402:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a406:	226a      	movs	r2, #106	@ 0x6a
 800a408:	2101      	movs	r1, #1
 800a40a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	2268      	movs	r2, #104	@ 0x68
 800a410:	2101      	movs	r1, #1
 800a412:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	2200      	movs	r2, #0
 800a418:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	2200      	movs	r2, #0
 800a41e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a420:	231f      	movs	r3, #31
 800a422:	2220      	movs	r2, #32
 800a424:	189b      	adds	r3, r3, r2
 800a426:	19db      	adds	r3, r3, r7
 800a428:	781b      	ldrb	r3, [r3, #0]
}
 800a42a:	0018      	movs	r0, r3
 800a42c:	46bd      	mov	sp, r7
 800a42e:	b012      	add	sp, #72	@ 0x48
 800a430:	bdb0      	pop	{r4, r5, r7, pc}
 800a432:	46c0      	nop			@ (mov r8, r8)

0800a434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a440:	2208      	movs	r2, #8
 800a442:	4013      	ands	r3, r2
 800a444:	d00b      	beq.n	800a45e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	4a4a      	ldr	r2, [pc, #296]	@ (800a578 <UART_AdvFeatureConfig+0x144>)
 800a44e:	4013      	ands	r3, r2
 800a450:	0019      	movs	r1, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a462:	2201      	movs	r2, #1
 800a464:	4013      	ands	r3, r2
 800a466:	d00b      	beq.n	800a480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	4a43      	ldr	r2, [pc, #268]	@ (800a57c <UART_AdvFeatureConfig+0x148>)
 800a470:	4013      	ands	r3, r2
 800a472:	0019      	movs	r1, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a484:	2202      	movs	r2, #2
 800a486:	4013      	ands	r3, r2
 800a488:	d00b      	beq.n	800a4a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	4a3b      	ldr	r2, [pc, #236]	@ (800a580 <UART_AdvFeatureConfig+0x14c>)
 800a492:	4013      	ands	r3, r2
 800a494:	0019      	movs	r1, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a6:	2204      	movs	r2, #4
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	d00b      	beq.n	800a4c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	4a34      	ldr	r2, [pc, #208]	@ (800a584 <UART_AdvFeatureConfig+0x150>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	0019      	movs	r1, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c8:	2210      	movs	r2, #16
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	d00b      	beq.n	800a4e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	4a2c      	ldr	r2, [pc, #176]	@ (800a588 <UART_AdvFeatureConfig+0x154>)
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	0019      	movs	r1, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	d00b      	beq.n	800a508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	4a25      	ldr	r2, [pc, #148]	@ (800a58c <UART_AdvFeatureConfig+0x158>)
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	0019      	movs	r1, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50c:	2240      	movs	r2, #64	@ 0x40
 800a50e:	4013      	ands	r3, r2
 800a510:	d01d      	beq.n	800a54e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	4a1d      	ldr	r2, [pc, #116]	@ (800a590 <UART_AdvFeatureConfig+0x15c>)
 800a51a:	4013      	ands	r3, r2
 800a51c:	0019      	movs	r1, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a52e:	2380      	movs	r3, #128	@ 0x80
 800a530:	035b      	lsls	r3, r3, #13
 800a532:	429a      	cmp	r2, r3
 800a534:	d10b      	bne.n	800a54e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4a15      	ldr	r2, [pc, #84]	@ (800a594 <UART_AdvFeatureConfig+0x160>)
 800a53e:	4013      	ands	r3, r2
 800a540:	0019      	movs	r1, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a552:	2280      	movs	r2, #128	@ 0x80
 800a554:	4013      	ands	r3, r2
 800a556:	d00b      	beq.n	800a570 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	4a0e      	ldr	r2, [pc, #56]	@ (800a598 <UART_AdvFeatureConfig+0x164>)
 800a560:	4013      	ands	r3, r2
 800a562:	0019      	movs	r1, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }
}
 800a570:	46c0      	nop			@ (mov r8, r8)
 800a572:	46bd      	mov	sp, r7
 800a574:	b002      	add	sp, #8
 800a576:	bd80      	pop	{r7, pc}
 800a578:	ffff7fff 	.word	0xffff7fff
 800a57c:	fffdffff 	.word	0xfffdffff
 800a580:	fffeffff 	.word	0xfffeffff
 800a584:	fffbffff 	.word	0xfffbffff
 800a588:	ffffefff 	.word	0xffffefff
 800a58c:	ffffdfff 	.word	0xffffdfff
 800a590:	ffefffff 	.word	0xffefffff
 800a594:	ff9fffff 	.word	0xff9fffff
 800a598:	fff7ffff 	.word	0xfff7ffff

0800a59c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b092      	sub	sp, #72	@ 0x48
 800a5a0:	af02      	add	r7, sp, #8
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2290      	movs	r2, #144	@ 0x90
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5ac:	f7fa feb2 	bl	8005314 <HAL_GetTick>
 800a5b0:	0003      	movs	r3, r0
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	4013      	ands	r3, r2
 800a5be:	2b08      	cmp	r3, #8
 800a5c0:	d12d      	bne.n	800a61e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c4:	2280      	movs	r2, #128	@ 0x80
 800a5c6:	0391      	lsls	r1, r2, #14
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	4a47      	ldr	r2, [pc, #284]	@ (800a6e8 <UART_CheckIdleState+0x14c>)
 800a5cc:	9200      	str	r2, [sp, #0]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f000 f88e 	bl	800a6f0 <UART_WaitOnFlagUntilTimeout>
 800a5d4:	1e03      	subs	r3, r0, #0
 800a5d6:	d022      	beq.n	800a61e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a5d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	f383 8810 	msr	PRIMASK, r3
}
 800a5ec:	46c0      	nop			@ (mov r8, r8)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2180      	movs	r1, #128	@ 0x80
 800a5fa:	438a      	bics	r2, r1
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a604:	f383 8810 	msr	PRIMASK, r3
}
 800a608:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2288      	movs	r2, #136	@ 0x88
 800a60e:	2120      	movs	r1, #32
 800a610:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2284      	movs	r2, #132	@ 0x84
 800a616:	2100      	movs	r1, #0
 800a618:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e060      	b.n	800a6e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2204      	movs	r2, #4
 800a626:	4013      	ands	r3, r2
 800a628:	2b04      	cmp	r3, #4
 800a62a:	d146      	bne.n	800a6ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a62e:	2280      	movs	r2, #128	@ 0x80
 800a630:	03d1      	lsls	r1, r2, #15
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	4a2c      	ldr	r2, [pc, #176]	@ (800a6e8 <UART_CheckIdleState+0x14c>)
 800a636:	9200      	str	r2, [sp, #0]
 800a638:	2200      	movs	r2, #0
 800a63a:	f000 f859 	bl	800a6f0 <UART_WaitOnFlagUntilTimeout>
 800a63e:	1e03      	subs	r3, r0, #0
 800a640:	d03b      	beq.n	800a6ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a642:	f3ef 8310 	mrs	r3, PRIMASK
 800a646:	60fb      	str	r3, [r7, #12]
  return(result);
 800a648:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a64c:	2301      	movs	r3, #1
 800a64e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f383 8810 	msr	PRIMASK, r3
}
 800a656:	46c0      	nop			@ (mov r8, r8)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4922      	ldr	r1, [pc, #136]	@ (800a6ec <UART_CheckIdleState+0x150>)
 800a664:	400a      	ands	r2, r1
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a674:	f3ef 8310 	mrs	r3, PRIMASK
 800a678:	61bb      	str	r3, [r7, #24]
  return(result);
 800a67a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a67e:	2301      	movs	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f383 8810 	msr	PRIMASK, r3
}
 800a688:	46c0      	nop			@ (mov r8, r8)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2101      	movs	r1, #1
 800a696:	438a      	bics	r2, r1
 800a698:	609a      	str	r2, [r3, #8]
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f383 8810 	msr	PRIMASK, r3
}
 800a6a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	228c      	movs	r2, #140	@ 0x8c
 800a6aa:	2120      	movs	r1, #32
 800a6ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2284      	movs	r2, #132	@ 0x84
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e012      	b.n	800a6e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2288      	movs	r2, #136	@ 0x88
 800a6be:	2120      	movs	r1, #32
 800a6c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	228c      	movs	r2, #140	@ 0x8c
 800a6c6:	2120      	movs	r1, #32
 800a6c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2284      	movs	r2, #132	@ 0x84
 800a6da:	2100      	movs	r1, #0
 800a6dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b010      	add	sp, #64	@ 0x40
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	01ffffff 	.word	0x01ffffff
 800a6ec:	fffffedf 	.word	0xfffffedf

0800a6f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	1dfb      	adds	r3, r7, #7
 800a6fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a700:	e051      	b.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	3301      	adds	r3, #1
 800a706:	d04e      	beq.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a708:	f7fa fe04 	bl	8005314 <HAL_GetTick>
 800a70c:	0002      	movs	r2, r0
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	429a      	cmp	r2, r3
 800a716:	d302      	bcc.n	800a71e <UART_WaitOnFlagUntilTimeout+0x2e>
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e051      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2204      	movs	r2, #4
 800a72a:	4013      	ands	r3, r2
 800a72c:	d03b      	beq.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b80      	cmp	r3, #128	@ 0x80
 800a732:	d038      	beq.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b40      	cmp	r3, #64	@ 0x40
 800a738:	d035      	beq.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	2208      	movs	r2, #8
 800a742:	4013      	ands	r3, r2
 800a744:	2b08      	cmp	r3, #8
 800a746:	d111      	bne.n	800a76c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2208      	movs	r2, #8
 800a74e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	0018      	movs	r0, r3
 800a754:	f000 f83c 	bl	800a7d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2290      	movs	r2, #144	@ 0x90
 800a75c:	2108      	movs	r1, #8
 800a75e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2284      	movs	r2, #132	@ 0x84
 800a764:	2100      	movs	r1, #0
 800a766:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e02c      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69da      	ldr	r2, [r3, #28]
 800a772:	2380      	movs	r3, #128	@ 0x80
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	401a      	ands	r2, r3
 800a778:	2380      	movs	r3, #128	@ 0x80
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d112      	bne.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2280      	movs	r2, #128	@ 0x80
 800a786:	0112      	lsls	r2, r2, #4
 800a788:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	0018      	movs	r0, r3
 800a78e:	f000 f81f 	bl	800a7d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2290      	movs	r2, #144	@ 0x90
 800a796:	2120      	movs	r1, #32
 800a798:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2284      	movs	r2, #132	@ 0x84
 800a79e:	2100      	movs	r1, #0
 800a7a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e00f      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	425a      	negs	r2, r3
 800a7b6:	4153      	adcs	r3, r2
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	001a      	movs	r2, r3
 800a7bc:	1dfb      	adds	r3, r7, #7
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d09e      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	b004      	add	sp, #16
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08e      	sub	sp, #56	@ 0x38
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a7d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a7de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	f383 8810 	msr	PRIMASK, r3
}
 800a7ec:	46c0      	nop			@ (mov r8, r8)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4926      	ldr	r1, [pc, #152]	@ (800a894 <UART_EndRxTransfer+0xc4>)
 800a7fa:	400a      	ands	r2, r1
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	f383 8810 	msr	PRIMASK, r3
}
 800a808:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a80a:	f3ef 8310 	mrs	r3, PRIMASK
 800a80e:	623b      	str	r3, [r7, #32]
  return(result);
 800a810:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a812:	633b      	str	r3, [r7, #48]	@ 0x30
 800a814:	2301      	movs	r3, #1
 800a816:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	f383 8810 	msr	PRIMASK, r3
}
 800a81e:	46c0      	nop			@ (mov r8, r8)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	491b      	ldr	r1, [pc, #108]	@ (800a898 <UART_EndRxTransfer+0xc8>)
 800a82c:	400a      	ands	r2, r1
 800a82e:	609a      	str	r2, [r3, #8]
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a836:	f383 8810 	msr	PRIMASK, r3
}
 800a83a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d118      	bne.n	800a876 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a844:	f3ef 8310 	mrs	r3, PRIMASK
 800a848:	60bb      	str	r3, [r7, #8]
  return(result);
 800a84a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a84e:	2301      	movs	r3, #1
 800a850:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f383 8810 	msr	PRIMASK, r3
}
 800a858:	46c0      	nop			@ (mov r8, r8)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2110      	movs	r1, #16
 800a866:	438a      	bics	r2, r1
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f383 8810 	msr	PRIMASK, r3
}
 800a874:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	228c      	movs	r2, #140	@ 0x8c
 800a87a:	2120      	movs	r1, #32
 800a87c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a88a:	46c0      	nop			@ (mov r8, r8)
 800a88c:	46bd      	mov	sp, r7
 800a88e:	b00e      	add	sp, #56	@ 0x38
 800a890:	bd80      	pop	{r7, pc}
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	fffffedf 	.word	0xfffffedf
 800a898:	effffffe 	.word	0xeffffffe

0800a89c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2284      	movs	r2, #132	@ 0x84
 800a8a8:	5c9b      	ldrb	r3, [r3, r2]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e027      	b.n	800a902 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2284      	movs	r2, #132	@ 0x84
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2288      	movs	r2, #136	@ 0x88
 800a8be:	2124      	movs	r1, #36	@ 0x24
 800a8c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	438a      	bics	r2, r1
 800a8d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a0b      	ldr	r2, [pc, #44]	@ (800a90c <HAL_UARTEx_DisableFifoMode+0x70>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2288      	movs	r2, #136	@ 0x88
 800a8f4:	2120      	movs	r1, #32
 800a8f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2284      	movs	r2, #132	@ 0x84
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	0018      	movs	r0, r3
 800a904:	46bd      	mov	sp, r7
 800a906:	b004      	add	sp, #16
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	46c0      	nop			@ (mov r8, r8)
 800a90c:	dfffffff 	.word	0xdfffffff

0800a910 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2284      	movs	r2, #132	@ 0x84
 800a91e:	5c9b      	ldrb	r3, [r3, r2]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a924:	2302      	movs	r3, #2
 800a926:	e02e      	b.n	800a986 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2284      	movs	r2, #132	@ 0x84
 800a92c:	2101      	movs	r1, #1
 800a92e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2288      	movs	r2, #136	@ 0x88
 800a934:	2124      	movs	r1, #36	@ 0x24
 800a936:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2101      	movs	r1, #1
 800a94c:	438a      	bics	r2, r1
 800a94e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	00db      	lsls	r3, r3, #3
 800a958:	08d9      	lsrs	r1, r3, #3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	0018      	movs	r0, r3
 800a968:	f000 f854 	bl	800aa14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2288      	movs	r2, #136	@ 0x88
 800a978:	2120      	movs	r1, #32
 800a97a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2284      	movs	r2, #132	@ 0x84
 800a980:	2100      	movs	r1, #0
 800a982:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	0018      	movs	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	b004      	add	sp, #16
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2284      	movs	r2, #132	@ 0x84
 800a99e:	5c9b      	ldrb	r3, [r3, r2]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d101      	bne.n	800a9a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	e02f      	b.n	800aa08 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2284      	movs	r2, #132	@ 0x84
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2288      	movs	r2, #136	@ 0x88
 800a9b4:	2124      	movs	r1, #36	@ 0x24
 800a9b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	438a      	bics	r2, r1
 800a9ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	4a0e      	ldr	r2, [pc, #56]	@ (800aa10 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a9d8:	4013      	ands	r3, r2
 800a9da:	0019      	movs	r1, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f000 f813 	bl	800aa14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2288      	movs	r2, #136	@ 0x88
 800a9fa:	2120      	movs	r1, #32
 800a9fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2284      	movs	r2, #132	@ 0x84
 800aa02:	2100      	movs	r1, #0
 800aa04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	0018      	movs	r0, r3
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	b004      	add	sp, #16
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	f1ffffff 	.word	0xf1ffffff

0800aa14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d108      	bne.n	800aa36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	226a      	movs	r2, #106	@ 0x6a
 800aa28:	2101      	movs	r1, #1
 800aa2a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2268      	movs	r2, #104	@ 0x68
 800aa30:	2101      	movs	r1, #1
 800aa32:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa34:	e043      	b.n	800aabe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa36:	260f      	movs	r6, #15
 800aa38:	19bb      	adds	r3, r7, r6
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa3e:	200e      	movs	r0, #14
 800aa40:	183b      	adds	r3, r7, r0
 800aa42:	2208      	movs	r2, #8
 800aa44:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	0e5b      	lsrs	r3, r3, #25
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	240d      	movs	r4, #13
 800aa52:	193b      	adds	r3, r7, r4
 800aa54:	2107      	movs	r1, #7
 800aa56:	400a      	ands	r2, r1
 800aa58:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	0f5b      	lsrs	r3, r3, #29
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	250c      	movs	r5, #12
 800aa66:	197b      	adds	r3, r7, r5
 800aa68:	2107      	movs	r1, #7
 800aa6a:	400a      	ands	r2, r1
 800aa6c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa6e:	183b      	adds	r3, r7, r0
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	197a      	adds	r2, r7, r5
 800aa74:	7812      	ldrb	r2, [r2, #0]
 800aa76:	4914      	ldr	r1, [pc, #80]	@ (800aac8 <UARTEx_SetNbDataToProcess+0xb4>)
 800aa78:	5c8a      	ldrb	r2, [r1, r2]
 800aa7a:	435a      	muls	r2, r3
 800aa7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa7e:	197b      	adds	r3, r7, r5
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	4a12      	ldr	r2, [pc, #72]	@ (800aacc <UARTEx_SetNbDataToProcess+0xb8>)
 800aa84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa86:	0019      	movs	r1, r3
 800aa88:	f7f5 fbe4 	bl	8000254 <__divsi3>
 800aa8c:	0003      	movs	r3, r0
 800aa8e:	b299      	uxth	r1, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	226a      	movs	r2, #106	@ 0x6a
 800aa94:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa96:	19bb      	adds	r3, r7, r6
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	193a      	adds	r2, r7, r4
 800aa9c:	7812      	ldrb	r2, [r2, #0]
 800aa9e:	490a      	ldr	r1, [pc, #40]	@ (800aac8 <UARTEx_SetNbDataToProcess+0xb4>)
 800aaa0:	5c8a      	ldrb	r2, [r1, r2]
 800aaa2:	435a      	muls	r2, r3
 800aaa4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800aaa6:	193b      	adds	r3, r7, r4
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	4a08      	ldr	r2, [pc, #32]	@ (800aacc <UARTEx_SetNbDataToProcess+0xb8>)
 800aaac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaae:	0019      	movs	r1, r3
 800aab0:	f7f5 fbd0 	bl	8000254 <__divsi3>
 800aab4:	0003      	movs	r3, r0
 800aab6:	b299      	uxth	r1, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2268      	movs	r2, #104	@ 0x68
 800aabc:	5299      	strh	r1, [r3, r2]
}
 800aabe:	46c0      	nop			@ (mov r8, r8)
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b005      	add	sp, #20
 800aac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac6:	46c0      	nop			@ (mov r8, r8)
 800aac8:	08012294 	.word	0x08012294
 800aacc:	0801229c 	.word	0x0801229c

0800aad0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800aad8:	260e      	movs	r6, #14
 800aada:	19bb      	adds	r3, r7, r6
 800aadc:	2200      	movs	r2, #0
 800aade:	701a      	strb	r2, [r3, #0]

    /* Read the chip-id of bme280 sensor */
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
 800aae0:	250f      	movs	r5, #15
 800aae2:	197c      	adds	r4, r7, r5
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	19b9      	adds	r1, r7, r6
 800aae8:	2201      	movs	r2, #1
 800aaea:	20d0      	movs	r0, #208	@ 0xd0
 800aaec:	f000 f831 	bl	800ab52 <bme280_get_regs>
 800aaf0:	0003      	movs	r3, r0
 800aaf2:	7023      	strb	r3, [r4, #0]

    /* Check for chip id validity */
    if (rslt == BME280_OK)
 800aaf4:	0029      	movs	r1, r5
 800aaf6:	187b      	adds	r3, r7, r1
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d120      	bne.n	800ab42 <bme280_init+0x72>
    {
        if (chip_id == BME280_CHIP_ID)
 800ab00:	19bb      	adds	r3, r7, r6
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b60      	cmp	r3, #96	@ 0x60
 800ab06:	d118      	bne.n	800ab3a <bme280_init+0x6a>
        {
            dev->chip_id = chip_id;
 800ab08:	19bb      	adds	r3, r7, r6
 800ab0a:	781a      	ldrb	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	701a      	strb	r2, [r3, #0]

            /* Reset the sensor */
            rslt = bme280_soft_reset(dev);
 800ab10:	000d      	movs	r5, r1
 800ab12:	187c      	adds	r4, r7, r1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	0018      	movs	r0, r3
 800ab18:	f000 f9a9 	bl	800ae6e <bme280_soft_reset>
 800ab1c:	0003      	movs	r3, r0
 800ab1e:	7023      	strb	r3, [r4, #0]

            if (rslt == BME280_OK)
 800ab20:	197b      	adds	r3, r7, r5
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	b25b      	sxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10b      	bne.n	800ab42 <bme280_init+0x72>
            {
                /* Read the calibration data */
                rslt = get_calib_data(dev);
 800ab2a:	197c      	adds	r4, r7, r5
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	0018      	movs	r0, r3
 800ab30:	f001 f942 	bl	800bdb8 <get_calib_data>
 800ab34:	0003      	movs	r3, r0
 800ab36:	7023      	strb	r3, [r4, #0]
 800ab38:	e003      	b.n	800ab42 <bme280_init+0x72>
            }
        }
        else
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 800ab3a:	230f      	movs	r3, #15
 800ab3c:	18fb      	adds	r3, r7, r3
 800ab3e:	22fc      	movs	r2, #252	@ 0xfc
 800ab40:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 800ab42:	230f      	movs	r3, #15
 800ab44:	18fb      	adds	r3, r7, r3
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b25b      	sxtb	r3, r3
}
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	b005      	add	sp, #20
 800ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab52 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 800ab52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab54:	b087      	sub	sp, #28
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	603b      	str	r3, [r7, #0]
 800ab5e:	250f      	movs	r5, #15
 800ab60:	197b      	adds	r3, r7, r5
 800ab62:	1c02      	adds	r2, r0, #0
 800ab64:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800ab66:	2617      	movs	r6, #23
 800ab68:	19bc      	adds	r4, r7, r6
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	0018      	movs	r0, r3
 800ab6e:	f001 fac3 	bl	800c0f8 <null_ptr_check>
 800ab72:	0003      	movs	r3, r0
 800ab74:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (reg_data != NULL))
 800ab76:	19bb      	adds	r3, r7, r6
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d126      	bne.n	800abce <bme280_get_regs+0x7c>
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d023      	beq.n	800abce <bme280_get_regs+0x7c>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	785b      	ldrb	r3, [r3, #1]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d006      	beq.n	800ab9c <bme280_get_regs+0x4a>
        {
            reg_addr = reg_addr | 0x80;
 800ab8e:	197b      	adds	r3, r7, r5
 800ab90:	197a      	adds	r2, r7, r5
 800ab92:	7812      	ldrb	r2, [r2, #0]
 800ab94:	2180      	movs	r1, #128	@ 0x80
 800ab96:	4249      	negs	r1, r1
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	68dc      	ldr	r4, [r3, #12]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685d      	ldr	r5, [r3, #4]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	230f      	movs	r3, #15
 800abaa:	18fb      	adds	r3, r7, r3
 800abac:	7818      	ldrb	r0, [r3, #0]
 800abae:	002b      	movs	r3, r5
 800abb0:	47a0      	blx	r4
 800abb2:	0003      	movs	r3, r0
 800abb4:	001a      	movs	r2, r3
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	721a      	strb	r2, [r3, #8]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	7a1b      	ldrb	r3, [r3, #8]
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d008      	beq.n	800abd6 <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 800abc4:	2317      	movs	r3, #23
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	22fe      	movs	r2, #254	@ 0xfe
 800abca:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800abcc:	e003      	b.n	800abd6 <bme280_get_regs+0x84>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800abce:	2317      	movs	r3, #23
 800abd0:	18fb      	adds	r3, r7, r3
 800abd2:	22ff      	movs	r2, #255	@ 0xff
 800abd4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800abd6:	2317      	movs	r3, #23
 800abd8:	18fb      	adds	r3, r7, r3
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	b25b      	sxtb	r3, r3
}
 800abde:	0018      	movs	r0, r3
 800abe0:	46bd      	mov	sp, r7
 800abe2:	b007      	add	sp, #28
 800abe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abe6 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 800abe6:	b5b0      	push	{r4, r5, r7, lr}
 800abe8:	b08c      	sub	sp, #48	@ 0x30
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */
    uint32_t temp_len;
    uint32_t reg_addr_cnt;

    if (len > BME280_MAX_LEN)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b0a      	cmp	r3, #10
 800abf8:	d901      	bls.n	800abfe <bme280_set_regs+0x18>
    {
        len = BME280_MAX_LEN;
 800abfa:	230a      	movs	r3, #10
 800abfc:	607b      	str	r3, [r7, #4]
    }

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800abfe:	252f      	movs	r5, #47	@ 0x2f
 800ac00:	197c      	adds	r4, r7, r5
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	0018      	movs	r0, r3
 800ac06:	f001 fa77 	bl	800c0f8 <null_ptr_check>
 800ac0a:	0003      	movs	r3, r0
 800ac0c:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800ac0e:	197b      	adds	r3, r7, r5
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	b25b      	sxtb	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d154      	bne.n	800acc2 <bme280_set_regs+0xdc>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d051      	beq.n	800acc2 <bme280_set_regs+0xdc>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d04e      	beq.n	800acc2 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d046      	beq.n	800acb8 <bme280_set_regs+0xd2>
        {
            temp_buff[0] = reg_data[0];
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	781a      	ldrb	r2, [r3, #0]
 800ac2e:	2310      	movs	r3, #16
 800ac30:	18fb      	adds	r3, r7, r3
 800ac32:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d014      	beq.n	800ac66 <bme280_set_regs+0x80>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac40:	e00d      	b.n	800ac5e <bme280_set_regs+0x78>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac46:	18d3      	adds	r3, r2, r3
 800ac48:	781a      	ldrb	r2, [r3, #0]
 800ac4a:	68f9      	ldr	r1, [r7, #12]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	18cb      	adds	r3, r1, r3
 800ac50:	217f      	movs	r1, #127	@ 0x7f
 800ac52:	400a      	ands	r2, r1
 800ac54:	b2d2      	uxtb	r2, r2
 800ac56:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d3ed      	bcc.n	800ac42 <bme280_set_regs+0x5c>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d90b      	bls.n	800ac84 <bme280_set_regs+0x9e>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	2110      	movs	r1, #16
 800ac72:	1879      	adds	r1, r7, r1
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f001 f8eb 	bl	800be50 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac82:	e001      	b.n	800ac88 <bme280_set_regs+0xa2>
            }
            else
            {
                temp_len = len;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	691c      	ldr	r4, [r3, #16]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	7818      	ldrb	r0, [r3, #0]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac96:	2110      	movs	r1, #16
 800ac98:	1879      	adds	r1, r7, r1
 800ac9a:	47a0      	blx	r4
 800ac9c:	0003      	movs	r3, r0
 800ac9e:	001a      	movs	r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	721a      	strb	r2, [r3, #8]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	7a1b      	ldrb	r3, [r3, #8]
 800aca8:	b25b      	sxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00e      	beq.n	800accc <bme280_set_regs+0xe6>
            {
                rslt = BME280_E_COMM_FAIL;
 800acae:	232f      	movs	r3, #47	@ 0x2f
 800acb0:	18fb      	adds	r3, r7, r3
 800acb2:	22fe      	movs	r2, #254	@ 0xfe
 800acb4:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800acb6:	e009      	b.n	800accc <bme280_set_regs+0xe6>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800acb8:	232f      	movs	r3, #47	@ 0x2f
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	22fd      	movs	r2, #253	@ 0xfd
 800acbe:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800acc0:	e004      	b.n	800accc <bme280_set_regs+0xe6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800acc2:	232f      	movs	r3, #47	@ 0x2f
 800acc4:	18fb      	adds	r3, r7, r3
 800acc6:	22ff      	movs	r2, #255	@ 0xff
 800acc8:	701a      	strb	r2, [r3, #0]
 800acca:	e000      	b.n	800acce <bme280_set_regs+0xe8>
        if (len != 0)
 800accc:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 800acce:	232f      	movs	r3, #47	@ 0x2f
 800acd0:	18fb      	adds	r3, r7, r3
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b25b      	sxtb	r3, r3
}
 800acd6:	0018      	movs	r0, r3
 800acd8:	46bd      	mov	sp, r7
 800acda:	b00c      	add	sp, #48	@ 0x30
 800acdc:	bdb0      	pop	{r4, r5, r7, pc}

0800acde <bme280_set_sensor_settings>:
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings,
                                  const struct bme280_settings *settings,
                                  struct bme280_dev *dev)
{
 800acde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace0:	b087      	sub	sp, #28
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	230f      	movs	r3, #15
 800acea:	18fb      	adds	r3, r7, r3
 800acec:	1c02      	adds	r2, r0, #0
 800acee:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    if (settings != NULL)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d04e      	beq.n	800ad94 <bme280_set_sensor_settings+0xb6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800acf6:	2517      	movs	r5, #23
 800acf8:	197c      	adds	r4, r7, r5
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	2616      	movs	r6, #22
 800acfe:	19bb      	adds	r3, r7, r6
 800ad00:	0011      	movs	r1, r2
 800ad02:	0018      	movs	r0, r3
 800ad04:	f000 f88d 	bl	800ae22 <bme280_get_sensor_mode>
 800ad08:	0003      	movs	r3, r0
 800ad0a:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_POWERMODE_SLEEP))
 800ad0c:	002a      	movs	r2, r5
 800ad0e:	18bb      	adds	r3, r7, r2
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <bme280_set_sensor_settings+0x50>
 800ad18:	19bb      	adds	r3, r7, r6
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d006      	beq.n	800ad2e <bme280_set_sensor_settings+0x50>
        {
            rslt = put_device_to_sleep(dev);
 800ad20:	18bc      	adds	r4, r7, r2
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	0018      	movs	r0, r3
 800ad26:	f000 fc62 	bl	800b5ee <put_device_to_sleep>
 800ad2a:	0003      	movs	r3, r0
 800ad2c:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 800ad2e:	2417      	movs	r4, #23
 800ad30:	193b      	adds	r3, r7, r4
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d130      	bne.n	800ad9c <bme280_set_sensor_settings+0xbe>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800ad3a:	250f      	movs	r5, #15
 800ad3c:	197b      	adds	r3, r7, r5
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	0019      	movs	r1, r3
 800ad42:	2007      	movs	r0, #7
 800ad44:	f001 f9b4 	bl	800c0b0 <are_settings_changed>
 800ad48:	1e03      	subs	r3, r0, #0
 800ad4a:	d009      	beq.n	800ad60 <bme280_set_sensor_settings+0x82>
            {
                rslt = set_osr_settings(desired_settings, settings, dev);
 800ad4c:	193c      	adds	r4, r7, r4
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	68b9      	ldr	r1, [r7, #8]
 800ad52:	197b      	adds	r3, r7, r5
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	0018      	movs	r0, r3
 800ad58:	f000 fa1c 	bl	800b194 <set_osr_settings>
 800ad5c:	0003      	movs	r3, r0
 800ad5e:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800ad60:	2417      	movs	r4, #23
 800ad62:	193b      	adds	r3, r7, r4
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d117      	bne.n	800ad9c <bme280_set_sensor_settings+0xbe>
 800ad6c:	250f      	movs	r5, #15
 800ad6e:	197b      	adds	r3, r7, r5
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	0019      	movs	r1, r3
 800ad74:	2018      	movs	r0, #24
 800ad76:	f001 f99b 	bl	800c0b0 <are_settings_changed>
 800ad7a:	1e03      	subs	r3, r0, #0
 800ad7c:	d00e      	beq.n	800ad9c <bme280_set_sensor_settings+0xbe>
            {
                rslt = set_filter_standby_settings(desired_settings, settings, dev);
 800ad7e:	193c      	adds	r4, r7, r4
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	197b      	adds	r3, r7, r5
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	0018      	movs	r0, r3
 800ad8a:	f000 fac9 	bl	800b320 <set_filter_standby_settings>
 800ad8e:	0003      	movs	r3, r0
 800ad90:	7023      	strb	r3, [r4, #0]
 800ad92:	e003      	b.n	800ad9c <bme280_set_sensor_settings+0xbe>
            }
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800ad94:	2317      	movs	r3, #23
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	22ff      	movs	r2, #255	@ 0xff
 800ad9a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800ad9c:	2317      	movs	r3, #23
 800ad9e:	18fb      	adds	r3, r7, r3
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	b25b      	sxtb	r3, r3
}
 800ada4:	0018      	movs	r0, r3
 800ada6:	46bd      	mov	sp, r7
 800ada8:	b007      	add	sp, #28
 800adaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adac <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800adac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	0002      	movs	r2, r0
 800adb4:	6039      	str	r1, [r7, #0]
 800adb6:	1dfb      	adds	r3, r7, #7
 800adb8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800adba:	250f      	movs	r5, #15
 800adbc:	197c      	adds	r4, r7, r5
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	260e      	movs	r6, #14
 800adc2:	19bb      	adds	r3, r7, r6
 800adc4:	0011      	movs	r1, r2
 800adc6:	0018      	movs	r0, r3
 800adc8:	f000 f82b 	bl	800ae22 <bme280_get_sensor_mode>
 800adcc:	0003      	movs	r3, r0
 800adce:	7023      	strb	r3, [r4, #0]

    /* If the sensor is not in sleep mode put the device to sleep
     * mode
     */
    if ((rslt == BME280_OK) && (last_set_mode != BME280_POWERMODE_SLEEP))
 800add0:	002a      	movs	r2, r5
 800add2:	18bb      	adds	r3, r7, r2
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	b25b      	sxtb	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <bme280_set_sensor_mode+0x46>
 800addc:	19bb      	adds	r3, r7, r6
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d006      	beq.n	800adf2 <bme280_set_sensor_mode+0x46>
    {
        rslt = put_device_to_sleep(dev);
 800ade4:	18bc      	adds	r4, r7, r2
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	0018      	movs	r0, r3
 800adea:	f000 fc00 	bl	800b5ee <put_device_to_sleep>
 800adee:	0003      	movs	r3, r0
 800adf0:	7023      	strb	r3, [r4, #0]
    }

    /* Set the power mode */
    if (rslt == BME280_OK)
 800adf2:	220f      	movs	r2, #15
 800adf4:	18bb      	adds	r3, r7, r2
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	b25b      	sxtb	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <bme280_set_sensor_mode+0x66>
    {
        rslt = write_power_mode(sensor_mode, dev);
 800adfe:	18bc      	adds	r4, r7, r2
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	1dfb      	adds	r3, r7, #7
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	0011      	movs	r1, r2
 800ae08:	0018      	movs	r0, r3
 800ae0a:	f000 fbb0 	bl	800b56e <write_power_mode>
 800ae0e:	0003      	movs	r3, r0
 800ae10:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800ae12:	230f      	movs	r3, #15
 800ae14:	18fb      	adds	r3, r7, r3
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	b25b      	sxtb	r3, r3
}
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b005      	add	sp, #20
 800ae20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae22 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 800ae22:	b590      	push	{r4, r7, lr}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (sensor_mode != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d011      	beq.n	800ae56 <bme280_get_sensor_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_REG_PWR_CTRL, sensor_mode, 1, dev);
 800ae32:	230f      	movs	r3, #15
 800ae34:	18fc      	adds	r4, r7, r3
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	20f4      	movs	r0, #244	@ 0xf4
 800ae3e:	f7ff fe88 	bl	800ab52 <bme280_get_regs>
 800ae42:	0003      	movs	r3, r0
 800ae44:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode to variable */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	e003      	b.n	800ae5e <bme280_get_sensor_mode+0x3c>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800ae56:	230f      	movs	r3, #15
 800ae58:	18fb      	adds	r3, r7, r3
 800ae5a:	22ff      	movs	r2, #255	@ 0xff
 800ae5c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800ae5e:	230f      	movs	r3, #15
 800ae60:	18fb      	adds	r3, r7, r3
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b25b      	sxtb	r3, r3
}
 800ae66:	0018      	movs	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	b005      	add	sp, #20
 800ae6c:	bd90      	pop	{r4, r7, pc}

0800ae6e <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 800ae6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_RESET;
 800ae76:	200d      	movs	r0, #13
 800ae78:	183b      	adds	r3, r7, r0
 800ae7a:	22e0      	movs	r2, #224	@ 0xe0
 800ae7c:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 800ae7e:	230c      	movs	r3, #12
 800ae80:	18fb      	adds	r3, r7, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 800ae86:	230e      	movs	r3, #14
 800ae88:	18fb      	adds	r3, r7, r3
 800ae8a:	2205      	movs	r2, #5
 800ae8c:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800ae8e:	210b      	movs	r1, #11
 800ae90:	187b      	adds	r3, r7, r1
 800ae92:	22b6      	movs	r2, #182	@ 0xb6
 800ae94:	701a      	strb	r2, [r3, #0]

    /* Write the soft reset command in the sensor */
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800ae96:	250f      	movs	r5, #15
 800ae98:	197c      	adds	r4, r7, r5
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	1879      	adds	r1, r7, r1
 800ae9e:	1838      	adds	r0, r7, r0
 800aea0:	2201      	movs	r2, #1
 800aea2:	f7ff fea0 	bl	800abe6 <bme280_set_regs>
 800aea6:	0003      	movs	r3, r0
 800aea8:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800aeaa:	197b      	adds	r3, r7, r5
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d130      	bne.n	800af16 <bme280_soft_reset+0xa8>
    {
        /* If NVM not copied yet, Wait for NVM to copy */
        do
        {
            /* As per data sheet - Table 1, startup time is 2 ms. */
            dev->delay_us(BME280_STARTUP_DELAY, dev->intf_ptr);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	695a      	ldr	r2, [r3, #20]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6859      	ldr	r1, [r3, #4]
 800aebc:	23fa      	movs	r3, #250	@ 0xfa
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	0018      	movs	r0, r3
 800aec2:	4790      	blx	r2
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
 800aec4:	250f      	movs	r5, #15
 800aec6:	197c      	adds	r4, r7, r5
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	260c      	movs	r6, #12
 800aecc:	19b9      	adds	r1, r7, r6
 800aece:	2201      	movs	r2, #1
 800aed0:	20f3      	movs	r0, #243	@ 0xf3
 800aed2:	f7ff fe3e 	bl	800ab52 <bme280_get_regs>
 800aed6:	0003      	movs	r3, r0
 800aed8:	7023      	strb	r3, [r4, #0]

        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 800aeda:	197b      	adds	r3, r7, r5
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10d      	bne.n	800af00 <bme280_soft_reset+0x92>
 800aee4:	220e      	movs	r2, #14
 800aee6:	18bb      	adds	r3, r7, r2
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	18ba      	adds	r2, r7, r2
 800aeec:	1e59      	subs	r1, r3, #1
 800aeee:	7011      	strb	r1, [r2, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <bme280_soft_reset+0x92>
 800aef4:	19bb      	adds	r3, r7, r6
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	001a      	movs	r2, r3
 800aefa:	2301      	movs	r3, #1
 800aefc:	4013      	ands	r3, r2
 800aefe:	d1d9      	bne.n	800aeb4 <bme280_soft_reset+0x46>

        if (status_reg & BME280_STATUS_IM_UPDATE)
 800af00:	230c      	movs	r3, #12
 800af02:	18fb      	adds	r3, r7, r3
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	001a      	movs	r2, r3
 800af08:	2301      	movs	r3, #1
 800af0a:	4013      	ands	r3, r2
 800af0c:	d003      	beq.n	800af16 <bme280_soft_reset+0xa8>
        {
            rslt = BME280_E_NVM_COPY_FAILED;
 800af0e:	230f      	movs	r3, #15
 800af10:	18fb      	adds	r3, r7, r3
 800af12:	22fa      	movs	r2, #250	@ 0xfa
 800af14:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 800af16:	230f      	movs	r3, #15
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	b25b      	sxtb	r3, r3
}
 800af1e:	0018      	movs	r0, r3
 800af20:	46bd      	mov	sp, r7
 800af22:	b005      	add	sp, #20
 800af24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af26 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800af26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af28:	b08b      	sub	sp, #44	@ 0x2c
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	230f      	movs	r3, #15
 800af32:	18fb      	adds	r3, r7, r3
 800af34:	1c02      	adds	r2, r0, #0
 800af36:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 800af38:	251c      	movs	r5, #28
 800af3a:	197b      	adds	r3, r7, r5
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	2200      	movs	r2, #0
 800af42:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800af44:	2610      	movs	r6, #16
 800af46:	19bb      	adds	r3, r7, r6
 800af48:	0018      	movs	r0, r3
 800af4a:	230c      	movs	r3, #12
 800af4c:	001a      	movs	r2, r3
 800af4e:	2100      	movs	r1, #0
 800af50:	f002 ffda 	bl	800df08 <memset>

    if (comp_data != NULL)
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d024      	beq.n	800afa4 <bme280_get_sensor_data+0x7e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 800af5a:	2427      	movs	r4, #39	@ 0x27
 800af5c:	193c      	adds	r4, r7, r4
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	1979      	adds	r1, r7, r5
 800af62:	2208      	movs	r2, #8
 800af64:	20f7      	movs	r0, #247	@ 0xf7
 800af66:	f7ff fdf4 	bl	800ab52 <bme280_get_regs>
 800af6a:	0003      	movs	r3, r0
 800af6c:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800af6e:	2427      	movs	r4, #39	@ 0x27
 800af70:	193b      	adds	r3, r7, r4
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	b25b      	sxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d118      	bne.n	800afac <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 800af7a:	19ba      	adds	r2, r7, r6
 800af7c:	197b      	adds	r3, r7, r5
 800af7e:	0011      	movs	r1, r2
 800af80:	0018      	movs	r0, r3
 800af82:	f000 fab0 	bl	800b4e6 <parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	001d      	movs	r5, r3
 800af8a:	3518      	adds	r5, #24
 800af8c:	193c      	adds	r4, r7, r4
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	19b9      	adds	r1, r7, r6
 800af92:	230f      	movs	r3, #15
 800af94:	18fb      	adds	r3, r7, r3
 800af96:	7818      	ldrb	r0, [r3, #0]
 800af98:	002b      	movs	r3, r5
 800af9a:	f000 f80f 	bl	800afbc <bme280_compensate_data>
 800af9e:	0003      	movs	r3, r0
 800afa0:	7023      	strb	r3, [r4, #0]
 800afa2:	e003      	b.n	800afac <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800afa4:	2327      	movs	r3, #39	@ 0x27
 800afa6:	18fb      	adds	r3, r7, r3
 800afa8:	22ff      	movs	r2, #255	@ 0xff
 800afaa:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800afac:	2327      	movs	r3, #39	@ 0x27
 800afae:	18fb      	adds	r3, r7, r3
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	b25b      	sxtb	r3, r3
}
 800afb4:	0018      	movs	r0, r3
 800afb6:	46bd      	mov	sp, r7
 800afb8:	b00b      	add	sp, #44	@ 0x2c
 800afba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afbc <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	240f      	movs	r4, #15
 800afca:	193b      	adds	r3, r7, r4
 800afcc:	1c02      	adds	r2, r0, #0
 800afce:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800afd0:	2317      	movs	r3, #23
 800afd2:	18fb      	adds	r3, r7, r3
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d047      	beq.n	800b06e <bme280_compensate_data+0xb2>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d044      	beq.n	800b06e <bme280_compensate_data+0xb2>
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d041      	beq.n	800b06e <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800afea:	6879      	ldr	r1, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	608a      	str	r2, [r1, #8]
 800aff2:	60cb      	str	r3, [r1, #12]
        comp_data->pressure = 0;
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	600a      	str	r2, [r1, #0]
 800affc:	604b      	str	r3, [r1, #4]
        comp_data->humidity = 0;
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	2300      	movs	r3, #0
 800b004:	610a      	str	r2, [r1, #16]
 800b006:	614b      	str	r3, [r1, #20]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800b008:	193b      	adds	r3, r7, r4
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2207      	movs	r2, #7
 800b00e:	4013      	ands	r3, r2
 800b010:	d00a      	beq.n	800b028 <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	0011      	movs	r1, r2
 800b018:	0018      	movs	r0, r3
 800b01a:	f000 fb49 	bl	800b6b0 <compensate_temperature>
 800b01e:	0002      	movs	r2, r0
 800b020:	000b      	movs	r3, r1
 800b022:	6879      	ldr	r1, [r7, #4]
 800b024:	608a      	str	r2, [r1, #8]
 800b026:	60cb      	str	r3, [r1, #12]
        }

        if (sensor_comp & BME280_PRESS)
 800b028:	230f      	movs	r3, #15
 800b02a:	18fb      	adds	r3, r7, r3
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2201      	movs	r2, #1
 800b030:	4013      	ands	r3, r2
 800b032:	d00a      	beq.n	800b04a <bme280_compensate_data+0x8e>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	0011      	movs	r1, r2
 800b03a:	0018      	movs	r0, r3
 800b03c:	f000 fbfe 	bl	800b83c <compensate_pressure>
 800b040:	0002      	movs	r2, r0
 800b042:	000b      	movs	r3, r1
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	600a      	str	r2, [r1, #0]
 800b048:	604b      	str	r3, [r1, #4]
        }

        if (sensor_comp & BME280_HUM)
 800b04a:	230f      	movs	r3, #15
 800b04c:	18fb      	adds	r3, r7, r3
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2204      	movs	r2, #4
 800b052:	4013      	ands	r3, r2
 800b054:	d00f      	beq.n	800b076 <bme280_compensate_data+0xba>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	0011      	movs	r1, r2
 800b05c:	0018      	movs	r0, r3
 800b05e:	f000 fd9d 	bl	800bb9c <compensate_humidity>
 800b062:	0002      	movs	r2, r0
 800b064:	000b      	movs	r3, r1
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	610a      	str	r2, [r1, #16]
 800b06a:	614b      	str	r3, [r1, #20]
        if (sensor_comp & BME280_HUM)
 800b06c:	e003      	b.n	800b076 <bme280_compensate_data+0xba>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800b06e:	2317      	movs	r3, #23
 800b070:	18fb      	adds	r3, r7, r3
 800b072:	22ff      	movs	r2, #255	@ 0xff
 800b074:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800b076:	2317      	movs	r3, #23
 800b078:	18fb      	adds	r3, r7, r3
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	b25b      	sxtb	r3, r3
}
 800b07e:	0018      	movs	r0, r3
 800b080:	46bd      	mov	sp, r7
 800b082:	b007      	add	sp, #28
 800b084:	bd90      	pop	{r4, r7, pc}
	...

0800b088 <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(whichever are enabled) measurement to complete.
 */
int8_t bme280_cal_meas_delay(uint32_t *max_delay, const struct bme280_settings *settings)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME280_OK;
 800b092:	2317      	movs	r3, #23
 800b094:	18fb      	adds	r3, r7, r3
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /* Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = { 0, 1, 2, 4, 8, 16 };
 800b09a:	200c      	movs	r0, #12
 800b09c:	183b      	adds	r3, r7, r0
 800b09e:	4a3a      	ldr	r2, [pc, #232]	@ (800b188 <bme280_cal_meas_delay+0x100>)
 800b0a0:	6811      	ldr	r1, [r2, #0]
 800b0a2:	6019      	str	r1, [r3, #0]
 800b0a4:	8892      	ldrh	r2, [r2, #4]
 800b0a6:	809a      	strh	r2, [r3, #4]

    if ((settings != NULL) && (max_delay != NULL))
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d060      	beq.n	800b170 <bme280_cal_meas_delay+0xe8>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d05d      	beq.n	800b170 <bme280_cal_meas_delay+0xe8>
    {
        /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16 */
        if (settings->osr_t <= BME280_OVERSAMPLING_16X)
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	785b      	ldrb	r3, [r3, #1]
 800b0b8:	2b05      	cmp	r3, #5
 800b0ba:	d808      	bhi.n	800b0ce <bme280_cal_meas_delay+0x46>
        {
            temp_osr = osr_sett_to_act_osr[settings->osr_t];
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	0019      	movs	r1, r3
 800b0c2:	2316      	movs	r3, #22
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	183a      	adds	r2, r7, r0
 800b0c8:	5c52      	ldrb	r2, [r2, r1]
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	e003      	b.n	800b0d6 <bme280_cal_meas_delay+0x4e>
        }
        else
        {
            temp_osr = BME280_OVERSAMPLING_MAX;
 800b0ce:	2316      	movs	r3, #22
 800b0d0:	18fb      	adds	r3, r7, r3
 800b0d2:	2210      	movs	r2, #16
 800b0d4:	701a      	strb	r2, [r3, #0]
        }

        if (settings->osr_p <= BME280_OVERSAMPLING_16X)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	2b05      	cmp	r3, #5
 800b0dc:	d809      	bhi.n	800b0f2 <bme280_cal_meas_delay+0x6a>
        {
            pres_osr = osr_sett_to_act_osr[settings->osr_p];
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	0019      	movs	r1, r3
 800b0e4:	2315      	movs	r3, #21
 800b0e6:	18fb      	adds	r3, r7, r3
 800b0e8:	220c      	movs	r2, #12
 800b0ea:	18ba      	adds	r2, r7, r2
 800b0ec:	5c52      	ldrb	r2, [r2, r1]
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e003      	b.n	800b0fa <bme280_cal_meas_delay+0x72>
        }
        else
        {
            pres_osr = BME280_OVERSAMPLING_MAX;
 800b0f2:	2315      	movs	r3, #21
 800b0f4:	18fb      	adds	r3, r7, r3
 800b0f6:	2210      	movs	r2, #16
 800b0f8:	701a      	strb	r2, [r3, #0]
        }

        if (settings->osr_h <= BME280_OVERSAMPLING_16X)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	789b      	ldrb	r3, [r3, #2]
 800b0fe:	2b05      	cmp	r3, #5
 800b100:	d809      	bhi.n	800b116 <bme280_cal_meas_delay+0x8e>
        {
            hum_osr = osr_sett_to_act_osr[settings->osr_h];
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	789b      	ldrb	r3, [r3, #2]
 800b106:	0019      	movs	r1, r3
 800b108:	2314      	movs	r3, #20
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	220c      	movs	r2, #12
 800b10e:	18ba      	adds	r2, r7, r2
 800b110:	5c52      	ldrb	r2, [r2, r1]
 800b112:	701a      	strb	r2, [r3, #0]
 800b114:	e003      	b.n	800b11e <bme280_cal_meas_delay+0x96>
        }
        else
        {
            hum_osr = BME280_OVERSAMPLING_MAX;
 800b116:	2314      	movs	r3, #20
 800b118:	18fb      	adds	r3, r7, r3
 800b11a:	2210      	movs	r2, #16
 800b11c:	701a      	strb	r2, [r3, #0]
        }

        (*max_delay) =
            (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800b11e:	2316      	movs	r3, #22
 800b120:	18fb      	adds	r3, r7, r3
 800b122:	781a      	ldrb	r2, [r3, #0]
 800b124:	0013      	movs	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	189b      	adds	r3, r3, r2
 800b12a:	019b      	lsls	r3, r3, #6
 800b12c:	1a9b      	subs	r3, r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4a16      	ldr	r2, [pc, #88]	@ (800b18c <bme280_cal_meas_delay+0x104>)
 800b132:	1899      	adds	r1, r3, r2
                        ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800b134:	2315      	movs	r3, #21
 800b136:	18fb      	adds	r3, r7, r3
 800b138:	781a      	ldrb	r2, [r3, #0]
 800b13a:	0013      	movs	r3, r2
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	189b      	adds	r3, r3, r2
 800b140:	019b      	lsls	r3, r3, #6
 800b142:	1a9b      	subs	r3, r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4a12      	ldr	r2, [pc, #72]	@ (800b190 <bme280_cal_meas_delay+0x108>)
 800b148:	4694      	mov	ip, r2
 800b14a:	4463      	add	r3, ip
            (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800b14c:	18c9      	adds	r1, r1, r3
                        ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)));
 800b14e:	2314      	movs	r3, #20
 800b150:	18fb      	adds	r3, r7, r3
 800b152:	781a      	ldrb	r2, [r3, #0]
 800b154:	0013      	movs	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	189b      	adds	r3, r3, r2
 800b15a:	019b      	lsls	r3, r3, #6
 800b15c:	1a9b      	subs	r3, r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4a0b      	ldr	r2, [pc, #44]	@ (800b190 <bme280_cal_meas_delay+0x108>)
 800b162:	4694      	mov	ip, r2
 800b164:	4463      	add	r3, ip
                        ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800b166:	18cb      	adds	r3, r1, r3
            (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800b168:	001a      	movs	r2, r3
        (*max_delay) =
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e003      	b.n	800b178 <bme280_cal_meas_delay+0xf0>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800b170:	2317      	movs	r3, #23
 800b172:	18fb      	adds	r3, r7, r3
 800b174:	22ff      	movs	r2, #255	@ 0xff
 800b176:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800b178:	2317      	movs	r3, #23
 800b17a:	18fb      	adds	r3, r7, r3
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	b25b      	sxtb	r3, r3
}
 800b180:	0018      	movs	r0, r3
 800b182:	46bd      	mov	sp, r7
 800b184:	b006      	add	sp, #24
 800b186:	bd80      	pop	{r7, pc}
 800b188:	08011c30 	.word	0x08011c30
 800b18c:	000004e2 	.word	0x000004e2
 800b190:	0000023f 	.word	0x0000023f

0800b194 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	210f      	movs	r1, #15
 800b1a0:	187b      	adds	r3, r7, r1
 800b1a2:	1c02      	adds	r2, r0, #0
 800b1a4:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800b1a6:	2017      	movs	r0, #23
 800b1a8:	183b      	adds	r3, r7, r0
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_SEL_OSR_HUM)
 800b1ae:	187b      	adds	r3, r7, r1
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d008      	beq.n	800b1ca <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800b1b8:	183c      	adds	r4, r7, r0
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	0011      	movs	r1, r2
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f000 f81b 	bl	800b1fc <set_osr_humidity_settings>
 800b1c6:	0003      	movs	r3, r0
 800b1c8:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP))
 800b1ca:	200f      	movs	r0, #15
 800b1cc:	183b      	adds	r3, r7, r0
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2203      	movs	r2, #3
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	d00a      	beq.n	800b1ec <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800b1d6:	2317      	movs	r3, #23
 800b1d8:	18fc      	adds	r4, r7, r3
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	68b9      	ldr	r1, [r7, #8]
 800b1de:	183b      	adds	r3, r7, r0
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f000 f851 	bl	800b28a <set_osr_press_temp_settings>
 800b1e8:	0003      	movs	r3, r0
 800b1ea:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800b1ec:	2317      	movs	r3, #23
 800b1ee:	18fb      	adds	r3, r7, r3
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	b25b      	sxtb	r3, r3
}
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	b007      	add	sp, #28
 800b1fa:	bd90      	pop	{r4, r7, pc}

0800b1fc <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800b1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_REG_CTRL_HUM;
 800b206:	250c      	movs	r5, #12
 800b208:	197b      	adds	r3, r7, r5
 800b20a:	22f2      	movs	r2, #242	@ 0xf2
 800b20c:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	789b      	ldrb	r3, [r3, #2]
 800b212:	2207      	movs	r2, #7
 800b214:	4013      	ands	r3, r2
 800b216:	b2da      	uxtb	r2, r3
 800b218:	210e      	movs	r1, #14
 800b21a:	187b      	adds	r3, r7, r1
 800b21c:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800b21e:	260f      	movs	r6, #15
 800b220:	19bc      	adds	r4, r7, r6
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	1879      	adds	r1, r7, r1
 800b226:	1978      	adds	r0, r7, r5
 800b228:	2201      	movs	r2, #1
 800b22a:	f7ff fcdc 	bl	800abe6 <bme280_set_regs>
 800b22e:	0003      	movs	r3, r0
 800b230:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800b232:	0031      	movs	r1, r6
 800b234:	187b      	adds	r3, r7, r1
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	b25b      	sxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d11d      	bne.n	800b27a <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_REG_CTRL_MEAS;
 800b23e:	197b      	adds	r3, r7, r5
 800b240:	22f4      	movs	r2, #244	@ 0xf4
 800b242:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800b244:	197b      	adds	r3, r7, r5
 800b246:	7818      	ldrb	r0, [r3, #0]
 800b248:	000e      	movs	r6, r1
 800b24a:	187c      	adds	r4, r7, r1
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	220d      	movs	r2, #13
 800b250:	18b9      	adds	r1, r7, r2
 800b252:	2201      	movs	r2, #1
 800b254:	f7ff fc7d 	bl	800ab52 <bme280_get_regs>
 800b258:	0003      	movs	r3, r0
 800b25a:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800b25c:	19bb      	adds	r3, r7, r6
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	b25b      	sxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800b266:	19bc      	adds	r4, r7, r6
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	220d      	movs	r2, #13
 800b26c:	18b9      	adds	r1, r7, r2
 800b26e:	1978      	adds	r0, r7, r5
 800b270:	2201      	movs	r2, #1
 800b272:	f7ff fcb8 	bl	800abe6 <bme280_set_regs>
 800b276:	0003      	movs	r3, r0
 800b278:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800b27a:	230f      	movs	r3, #15
 800b27c:	18fb      	adds	r3, r7, r3
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	b25b      	sxtb	r3, r3
}
 800b282:	0018      	movs	r0, r3
 800b284:	46bd      	mov	sp, r7
 800b286:	b005      	add	sp, #20
 800b288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b28a <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800b28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28c:	b087      	sub	sp, #28
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	250f      	movs	r5, #15
 800b296:	197b      	adds	r3, r7, r5
 800b298:	1c02      	adds	r2, r0, #0
 800b29a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CTRL_MEAS;
 800b29c:	2116      	movs	r1, #22
 800b29e:	187b      	adds	r3, r7, r1
 800b2a0:	22f4      	movs	r2, #244	@ 0xf4
 800b2a2:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800b2a4:	187b      	adds	r3, r7, r1
 800b2a6:	7818      	ldrb	r0, [r3, #0]
 800b2a8:	2617      	movs	r6, #23
 800b2aa:	19bc      	adds	r4, r7, r6
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2215      	movs	r2, #21
 800b2b0:	18b9      	adds	r1, r7, r2
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f7ff fc4d 	bl	800ab52 <bme280_get_regs>
 800b2b8:	0003      	movs	r3, r0
 800b2ba:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800b2bc:	19bb      	adds	r3, r7, r6
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	b25b      	sxtb	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d124      	bne.n	800b310 <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_SEL_OSR_PRESS)
 800b2c6:	197b      	adds	r3, r7, r5
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	d006      	beq.n	800b2de <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	2315      	movs	r3, #21
 800b2d4:	18fb      	adds	r3, r7, r3
 800b2d6:	0011      	movs	r1, r2
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f000 f89f 	bl	800b41c <fill_osr_press_settings>
        }

        if (desired_settings & BME280_SEL_OSR_TEMP)
 800b2de:	230f      	movs	r3, #15
 800b2e0:	18fb      	adds	r3, r7, r3
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	d006      	beq.n	800b2f8 <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	2315      	movs	r3, #21
 800b2ee:	18fb      	adds	r3, r7, r3
 800b2f0:	0011      	movs	r1, r2
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f000 f8ad 	bl	800b452 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800b2f8:	2317      	movs	r3, #23
 800b2fa:	18fc      	adds	r4, r7, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2215      	movs	r2, #21
 800b300:	18b9      	adds	r1, r7, r2
 800b302:	2216      	movs	r2, #22
 800b304:	18b8      	adds	r0, r7, r2
 800b306:	2201      	movs	r2, #1
 800b308:	f7ff fc6d 	bl	800abe6 <bme280_set_regs>
 800b30c:	0003      	movs	r3, r0
 800b30e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800b310:	2317      	movs	r3, #23
 800b312:	18fb      	adds	r3, r7, r3
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	b25b      	sxtb	r3, r3
}
 800b318:	0018      	movs	r0, r3
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b007      	add	sp, #28
 800b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b320 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800b320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
 800b32a:	250f      	movs	r5, #15
 800b32c:	197b      	adds	r3, r7, r5
 800b32e:	1c02      	adds	r2, r0, #0
 800b330:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CONFIG;
 800b332:	2116      	movs	r1, #22
 800b334:	187b      	adds	r3, r7, r1
 800b336:	22f5      	movs	r2, #245	@ 0xf5
 800b338:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800b33a:	187b      	adds	r3, r7, r1
 800b33c:	7818      	ldrb	r0, [r3, #0]
 800b33e:	2617      	movs	r6, #23
 800b340:	19bc      	adds	r4, r7, r6
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2215      	movs	r2, #21
 800b346:	18b9      	adds	r1, r7, r2
 800b348:	2201      	movs	r2, #1
 800b34a:	f7ff fc02 	bl	800ab52 <bme280_get_regs>
 800b34e:	0003      	movs	r3, r0
 800b350:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800b352:	19bb      	adds	r3, r7, r6
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b25b      	sxtb	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d124      	bne.n	800b3a6 <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_SEL_FILTER)
 800b35c:	197b      	adds	r3, r7, r5
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2208      	movs	r2, #8
 800b362:	4013      	ands	r3, r2
 800b364:	d006      	beq.n	800b374 <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	2315      	movs	r3, #21
 800b36a:	18fb      	adds	r3, r7, r3
 800b36c:	0011      	movs	r1, r2
 800b36e:	0018      	movs	r0, r3
 800b370:	f000 f821 	bl	800b3b6 <fill_filter_settings>
        }

        if (desired_settings & BME280_SEL_STANDBY)
 800b374:	230f      	movs	r3, #15
 800b376:	18fb      	adds	r3, r7, r3
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2210      	movs	r2, #16
 800b37c:	4013      	ands	r3, r2
 800b37e:	d006      	beq.n	800b38e <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	2315      	movs	r3, #21
 800b384:	18fb      	adds	r3, r7, r3
 800b386:	0011      	movs	r1, r2
 800b388:	0018      	movs	r0, r3
 800b38a:	f000 f82f 	bl	800b3ec <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800b38e:	2317      	movs	r3, #23
 800b390:	18fc      	adds	r4, r7, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2215      	movs	r2, #21
 800b396:	18b9      	adds	r1, r7, r2
 800b398:	2216      	movs	r2, #22
 800b39a:	18b8      	adds	r0, r7, r2
 800b39c:	2201      	movs	r2, #1
 800b39e:	f7ff fc22 	bl	800abe6 <bme280_set_regs>
 800b3a2:	0003      	movs	r3, r0
 800b3a4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800b3a6:	2317      	movs	r3, #23
 800b3a8:	18fb      	adds	r3, r7, r3
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	b25b      	sxtb	r3, r3
}
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	b007      	add	sp, #28
 800b3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3b6 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	b25b      	sxtb	r3, r3
 800b3c6:	221c      	movs	r2, #28
 800b3c8:	4393      	bics	r3, r2
 800b3ca:	b25a      	sxtb	r2, r3
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	78db      	ldrb	r3, [r3, #3]
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	b25b      	sxtb	r3, r3
 800b3d4:	211c      	movs	r1, #28
 800b3d6:	400b      	ands	r3, r1
 800b3d8:	b25b      	sxtb	r3, r3
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	b25b      	sxtb	r3, r3
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	701a      	strb	r2, [r3, #0]
}
 800b3e4:	46c0      	nop			@ (mov r8, r8)
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	b002      	add	sp, #8
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	b25b      	sxtb	r3, r3
 800b3fc:	221f      	movs	r2, #31
 800b3fe:	4013      	ands	r3, r2
 800b400:	b25a      	sxtb	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	791b      	ldrb	r3, [r3, #4]
 800b406:	015b      	lsls	r3, r3, #5
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	4313      	orrs	r3, r2
 800b40c:	b25b      	sxtb	r3, r3
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	701a      	strb	r2, [r3, #0]
}
 800b414:	46c0      	nop			@ (mov r8, r8)
 800b416:	46bd      	mov	sp, r7
 800b418:	b002      	add	sp, #8
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	b25b      	sxtb	r3, r3
 800b42c:	221c      	movs	r2, #28
 800b42e:	4393      	bics	r3, r2
 800b430:	b25a      	sxtb	r2, r3
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	b25b      	sxtb	r3, r3
 800b43a:	211c      	movs	r1, #28
 800b43c:	400b      	ands	r3, r1
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	4313      	orrs	r3, r2
 800b442:	b25b      	sxtb	r3, r3
 800b444:	b2da      	uxtb	r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	701a      	strb	r2, [r3, #0]
}
 800b44a:	46c0      	nop			@ (mov r8, r8)
 800b44c:	46bd      	mov	sp, r7
 800b44e:	b002      	add	sp, #8
 800b450:	bd80      	pop	{r7, pc}

0800b452 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b25b      	sxtb	r3, r3
 800b462:	221f      	movs	r2, #31
 800b464:	4013      	ands	r3, r2
 800b466:	b25a      	sxtb	r2, r3
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	015b      	lsls	r3, r3, #5
 800b46e:	b25b      	sxtb	r3, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	b25b      	sxtb	r3, r3
 800b474:	b2da      	uxtb	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	701a      	strb	r2, [r3, #0]
}
 800b47a:	46c0      	nop			@ (mov r8, r8)
 800b47c:	46bd      	mov	sp, r7
 800b47e:	b002      	add	sp, #8
 800b480:	bd80      	pop	{r7, pc}

0800b482 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * bme280_settings structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2207      	movs	r2, #7
 800b492:	4013      	ands	r3, r2
 800b494:	b2da      	uxtb	r2, r3
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3302      	adds	r3, #2
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	109b      	asrs	r3, r3, #2
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2207      	movs	r2, #7
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	095b      	lsrs	r3, r3, #5
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3303      	adds	r3, #3
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	109b      	asrs	r3, r3, #2
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2207      	movs	r2, #7
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3303      	adds	r3, #3
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	095b      	lsrs	r3, r3, #5
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	711a      	strb	r2, [r3, #4]
}
 800b4de:	46c0      	nop			@ (mov r8, r8)
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b002      	add	sp, #8
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b086      	sub	sp, #24
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	031b      	lsls	r3, r3, #12
 800b4f6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3302      	adds	r3, #2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	091b      	lsrs	r3, r3, #4
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	431a      	orrs	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	431a      	orrs	r2, r3
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3303      	adds	r3, #3
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	031b      	lsls	r3, r3, #12
 800b524:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3304      	adds	r3, #4
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3305      	adds	r3, #5
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	091b      	lsrs	r3, r3, #4
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	431a      	orrs	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	431a      	orrs	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3306      	adds	r3, #6
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	021b      	lsls	r3, r3, #8
 800b552:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3307      	adds	r3, #7
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	431a      	orrs	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	609a      	str	r2, [r3, #8]
}
 800b566:	46c0      	nop			@ (mov r8, r8)
 800b568:	46bd      	mov	sp, r7
 800b56a:	b006      	add	sp, #24
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800b56e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b570:	b085      	sub	sp, #20
 800b572:	af00      	add	r7, sp, #0
 800b574:	0002      	movs	r2, r0
 800b576:	6039      	str	r1, [r7, #0]
 800b578:	1dfb      	adds	r3, r7, #7
 800b57a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_PWR_CTRL;
 800b57c:	260e      	movs	r6, #14
 800b57e:	19bb      	adds	r3, r7, r6
 800b580:	22f4      	movs	r2, #244	@ 0xf4
 800b582:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800b584:	19bb      	adds	r3, r7, r6
 800b586:	7818      	ldrb	r0, [r3, #0]
 800b588:	240f      	movs	r4, #15
 800b58a:	193c      	adds	r4, r7, r4
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	250d      	movs	r5, #13
 800b590:	1979      	adds	r1, r7, r5
 800b592:	2201      	movs	r2, #1
 800b594:	f7ff fadd 	bl	800ab52 <bme280_get_regs>
 800b598:	0003      	movs	r3, r0
 800b59a:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800b59c:	240f      	movs	r4, #15
 800b59e:	193b      	adds	r3, r7, r4
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11a      	bne.n	800b5de <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800b5a8:	0028      	movs	r0, r5
 800b5aa:	183b      	adds	r3, r7, r0
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	b25b      	sxtb	r3, r3
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	4393      	bics	r3, r2
 800b5b4:	b25a      	sxtb	r2, r3
 800b5b6:	1dfb      	adds	r3, r7, #7
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	b25b      	sxtb	r3, r3
 800b5bc:	2103      	movs	r1, #3
 800b5be:	400b      	ands	r3, r1
 800b5c0:	b25b      	sxtb	r3, r3
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	b25b      	sxtb	r3, r3
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	183b      	adds	r3, r7, r0
 800b5ca:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800b5cc:	193c      	adds	r4, r7, r4
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	1839      	adds	r1, r7, r0
 800b5d2:	19b8      	adds	r0, r7, r6
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f7ff fb06 	bl	800abe6 <bme280_set_regs>
 800b5da:	0003      	movs	r3, r0
 800b5dc:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800b5de:	230f      	movs	r3, #15
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	b25b      	sxtb	r3, r3
}
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	b005      	add	sp, #20
 800b5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5ee <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800b5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f0:	b087      	sub	sp, #28
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 800b5f6:	2517      	movs	r5, #23
 800b5f8:	197c      	adds	r4, r7, r5
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2610      	movs	r6, #16
 800b5fe:	19b9      	adds	r1, r7, r6
 800b600:	2204      	movs	r2, #4
 800b602:	20f2      	movs	r0, #242	@ 0xf2
 800b604:	f7ff faa5 	bl	800ab52 <bme280_get_regs>
 800b608:	0003      	movs	r3, r0
 800b60a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800b60c:	002c      	movs	r4, r5
 800b60e:	193b      	adds	r3, r7, r4
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	b25b      	sxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d11d      	bne.n	800b654 <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 800b618:	2308      	movs	r3, #8
 800b61a:	18fa      	adds	r2, r7, r3
 800b61c:	19bb      	adds	r3, r7, r6
 800b61e:	0011      	movs	r1, r2
 800b620:	0018      	movs	r0, r3
 800b622:	f7ff ff2e 	bl	800b482 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800b626:	0025      	movs	r5, r4
 800b628:	193c      	adds	r4, r7, r4
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	0018      	movs	r0, r3
 800b62e:	f7ff fc1e 	bl	800ae6e <bme280_soft_reset>
 800b632:	0003      	movs	r3, r0
 800b634:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800b636:	197b      	adds	r3, r7, r5
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	b25b      	sxtb	r3, r3
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d109      	bne.n	800b654 <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 800b640:	197c      	adds	r4, r7, r5
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	2308      	movs	r3, #8
 800b646:	18fb      	adds	r3, r7, r3
 800b648:	0011      	movs	r1, r2
 800b64a:	0018      	movs	r0, r3
 800b64c:	f000 f80a 	bl	800b664 <reload_device_settings>
 800b650:	0003      	movs	r3, r0
 800b652:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800b654:	2317      	movs	r3, #23
 800b656:	18fb      	adds	r3, r7, r3
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	b25b      	sxtb	r3, r3
}
 800b65c:	0018      	movs	r0, r3
 800b65e:	46bd      	mov	sp, r7
 800b660:	b007      	add	sp, #28
 800b662:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b664 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800b664:	b5b0      	push	{r4, r5, r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 800b66e:	250f      	movs	r5, #15
 800b670:	197c      	adds	r4, r7, r5
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	0019      	movs	r1, r3
 800b678:	201f      	movs	r0, #31
 800b67a:	f7ff fd8b 	bl	800b194 <set_osr_settings>
 800b67e:	0003      	movs	r3, r0
 800b680:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800b682:	197b      	adds	r3, r7, r5
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	b25b      	sxtb	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d108      	bne.n	800b69e <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 800b68c:	197c      	adds	r4, r7, r5
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	0019      	movs	r1, r3
 800b694:	201f      	movs	r0, #31
 800b696:	f7ff fe43 	bl	800b320 <set_filter_standby_settings>
 800b69a:	0003      	movs	r3, r0
 800b69c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800b69e:	230f      	movs	r3, #15
 800b6a0:	18fb      	adds	r3, r7, r3
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	b25b      	sxtb	r3, r3
}
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	b004      	add	sp, #16
 800b6ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b6b0 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 800b6b0:	b5b0      	push	{r4, r5, r7, lr}
 800b6b2:	b08c      	sub	sp, #48	@ 0x30
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4b59      	ldr	r3, [pc, #356]	@ (800b824 <compensate_temperature+0x174>)
 800b6be:	623a      	str	r2, [r7, #32]
 800b6c0:	627b      	str	r3, [r7, #36]	@ 0x24
    double temperature_max = 85;
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	4b58      	ldr	r3, [pc, #352]	@ (800b828 <compensate_temperature+0x178>)
 800b6c6:	61ba      	str	r2, [r7, #24]
 800b6c8:	61fb      	str	r3, [r7, #28]

    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f7f6 ffda 	bl	8002688 <__aeabi_ui2d>
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4b55      	ldr	r3, [pc, #340]	@ (800b82c <compensate_temperature+0x17c>)
 800b6d8:	f7f5 fca2 	bl	8001020 <__aeabi_ddiv>
 800b6dc:	0002      	movs	r2, r0
 800b6de:	000b      	movs	r3, r1
 800b6e0:	0014      	movs	r4, r2
 800b6e2:	001d      	movs	r5, r3
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f7f6 ffcd 	bl	8002688 <__aeabi_ui2d>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	4b4f      	ldr	r3, [pc, #316]	@ (800b830 <compensate_temperature+0x180>)
 800b6f2:	f7f5 fc95 	bl	8001020 <__aeabi_ddiv>
 800b6f6:	0002      	movs	r2, r0
 800b6f8:	000b      	movs	r3, r1
 800b6fa:	0020      	movs	r0, r4
 800b6fc:	0029      	movs	r1, r5
 800b6fe:	f7f6 fb9b 	bl	8001e38 <__aeabi_dsub>
 800b702:	0002      	movs	r2, r0
 800b704:	000b      	movs	r3, r1
 800b706:	613a      	str	r2, [r7, #16]
 800b708:	617b      	str	r3, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2202      	movs	r2, #2
 800b70e:	5e9b      	ldrsh	r3, [r3, r2]
 800b710:	0018      	movs	r0, r3
 800b712:	f7f6 ff8b 	bl	800262c <__aeabi_i2d>
 800b716:	0002      	movs	r2, r0
 800b718:	000b      	movs	r3, r1
 800b71a:	6938      	ldr	r0, [r7, #16]
 800b71c:	6979      	ldr	r1, [r7, #20]
 800b71e:	f7f6 f8c3 	bl	80018a8 <__aeabi_dmul>
 800b722:	0002      	movs	r2, r0
 800b724:	000b      	movs	r3, r1
 800b726:	613a      	str	r2, [r7, #16]
 800b728:	617b      	str	r3, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	0018      	movs	r0, r3
 800b730:	f7f6 ffaa 	bl	8002688 <__aeabi_ui2d>
 800b734:	2200      	movs	r2, #0
 800b736:	2382      	movs	r3, #130	@ 0x82
 800b738:	05db      	lsls	r3, r3, #23
 800b73a:	f7f5 fc71 	bl	8001020 <__aeabi_ddiv>
 800b73e:	0002      	movs	r2, r0
 800b740:	000b      	movs	r3, r1
 800b742:	0014      	movs	r4, r2
 800b744:	001d      	movs	r5, r3
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	0018      	movs	r0, r3
 800b74c:	f7f6 ff9c 	bl	8002688 <__aeabi_ui2d>
 800b750:	2200      	movs	r2, #0
 800b752:	4b38      	ldr	r3, [pc, #224]	@ (800b834 <compensate_temperature+0x184>)
 800b754:	f7f5 fc64 	bl	8001020 <__aeabi_ddiv>
 800b758:	0002      	movs	r2, r0
 800b75a:	000b      	movs	r3, r1
 800b75c:	0020      	movs	r0, r4
 800b75e:	0029      	movs	r1, r5
 800b760:	f7f6 fb6a 	bl	8001e38 <__aeabi_dsub>
 800b764:	0002      	movs	r2, r0
 800b766:	000b      	movs	r3, r1
 800b768:	60ba      	str	r2, [r7, #8]
 800b76a:	60fb      	str	r3, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	68b8      	ldr	r0, [r7, #8]
 800b772:	68f9      	ldr	r1, [r7, #12]
 800b774:	f7f6 f898 	bl	80018a8 <__aeabi_dmul>
 800b778:	0002      	movs	r2, r0
 800b77a:	000b      	movs	r3, r1
 800b77c:	0014      	movs	r4, r2
 800b77e:	001d      	movs	r5, r3
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	2204      	movs	r2, #4
 800b784:	5e9b      	ldrsh	r3, [r3, r2]
 800b786:	0018      	movs	r0, r3
 800b788:	f7f6 ff50 	bl	800262c <__aeabi_i2d>
 800b78c:	0002      	movs	r2, r0
 800b78e:	000b      	movs	r3, r1
 800b790:	0020      	movs	r0, r4
 800b792:	0029      	movs	r1, r5
 800b794:	f7f6 f888 	bl	80018a8 <__aeabi_dmul>
 800b798:	0002      	movs	r2, r0
 800b79a:	000b      	movs	r3, r1
 800b79c:	60ba      	str	r2, [r7, #8]
 800b79e:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6938      	ldr	r0, [r7, #16]
 800b7a6:	6979      	ldr	r1, [r7, #20]
 800b7a8:	f7f5 f8d6 	bl	8000958 <__aeabi_dadd>
 800b7ac:	0002      	movs	r2, r0
 800b7ae:	000b      	movs	r3, r1
 800b7b0:	0010      	movs	r0, r2
 800b7b2:	0019      	movs	r1, r3
 800b7b4:	f7f6 fefe 	bl	80025b4 <__aeabi_d2iz>
 800b7b8:	0002      	movs	r2, r0
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6938      	ldr	r0, [r7, #16]
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	f7f5 f8c7 	bl	8000958 <__aeabi_dadd>
 800b7ca:	0002      	movs	r2, r0
 800b7cc:	000b      	movs	r3, r1
 800b7ce:	0010      	movs	r0, r2
 800b7d0:	0019      	movs	r1, r3
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4b18      	ldr	r3, [pc, #96]	@ (800b838 <compensate_temperature+0x188>)
 800b7d6:	f7f5 fc23 	bl	8001020 <__aeabi_ddiv>
 800b7da:	0002      	movs	r2, r0
 800b7dc:	000b      	movs	r3, r1
 800b7de:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (temperature < temperature_min)
 800b7e2:	6a3a      	ldr	r2, [r7, #32]
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7ea:	f7f4 fe35 	bl	8000458 <__aeabi_dcmplt>
 800b7ee:	1e03      	subs	r3, r0, #0
 800b7f0:	d004      	beq.n	800b7fc <compensate_temperature+0x14c>
    {
        temperature = temperature_min;
 800b7f2:	6a3a      	ldr	r2, [r7, #32]
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7fa:	e00b      	b.n	800b814 <compensate_temperature+0x164>
    }
    else if (temperature > temperature_max)
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b802:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b804:	f7f4 fe3c 	bl	8000480 <__aeabi_dcmpgt>
 800b808:	1e03      	subs	r3, r0, #0
 800b80a:	d003      	beq.n	800b814 <compensate_temperature+0x164>
    {
        temperature = temperature_max;
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    return temperature;
 800b814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b818:	0010      	movs	r0, r2
 800b81a:	0019      	movs	r1, r3
 800b81c:	46bd      	mov	sp, r7
 800b81e:	b00c      	add	sp, #48	@ 0x30
 800b820:	bdb0      	pop	{r4, r5, r7, pc}
 800b822:	46c0      	nop			@ (mov r8, r8)
 800b824:	c0440000 	.word	0xc0440000
 800b828:	40554000 	.word	0x40554000
 800b82c:	40d00000 	.word	0x40d00000
 800b830:	40900000 	.word	0x40900000
 800b834:	40c00000 	.word	0x40c00000
 800b838:	40b40000 	.word	0x40b40000

0800b83c <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 800b83c:	b5b0      	push	{r4, r5, r7, lr}
 800b83e:	b08e      	sub	sp, #56	@ 0x38
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 800b846:	2200      	movs	r2, #0
 800b848:	4bc7      	ldr	r3, [pc, #796]	@ (800bb68 <compensate_pressure+0x32c>)
 800b84a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    double pressure_max = 110000.0;
 800b84e:	2200      	movs	r2, #0
 800b850:	4bc6      	ldr	r3, [pc, #792]	@ (800bb6c <compensate_pressure+0x330>)
 800b852:	623a      	str	r2, [r7, #32]
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85a:	0018      	movs	r0, r3
 800b85c:	f7f6 fee6 	bl	800262c <__aeabi_i2d>
 800b860:	2200      	movs	r2, #0
 800b862:	2380      	movs	r3, #128	@ 0x80
 800b864:	05db      	lsls	r3, r3, #23
 800b866:	f7f5 fbdb 	bl	8001020 <__aeabi_ddiv>
 800b86a:	0002      	movs	r2, r0
 800b86c:	000b      	movs	r3, r1
 800b86e:	0010      	movs	r0, r2
 800b870:	0019      	movs	r1, r3
 800b872:	2200      	movs	r2, #0
 800b874:	4bbe      	ldr	r3, [pc, #760]	@ (800bb70 <compensate_pressure+0x334>)
 800b876:	f7f6 fadf 	bl	8001e38 <__aeabi_dsub>
 800b87a:	0002      	movs	r2, r0
 800b87c:	000b      	movs	r3, r1
 800b87e:	61ba      	str	r2, [r7, #24]
 800b880:	61fb      	str	r3, [r7, #28]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 800b882:	69ba      	ldr	r2, [r7, #24]
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	69b8      	ldr	r0, [r7, #24]
 800b888:	69f9      	ldr	r1, [r7, #28]
 800b88a:	f7f6 f80d 	bl	80018a8 <__aeabi_dmul>
 800b88e:	0002      	movs	r2, r0
 800b890:	000b      	movs	r3, r1
 800b892:	0014      	movs	r4, r2
 800b894:	001d      	movs	r5, r3
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2210      	movs	r2, #16
 800b89a:	5e9b      	ldrsh	r3, [r3, r2]
 800b89c:	0018      	movs	r0, r3
 800b89e:	f7f6 fec5 	bl	800262c <__aeabi_i2d>
 800b8a2:	0002      	movs	r2, r0
 800b8a4:	000b      	movs	r3, r1
 800b8a6:	0020      	movs	r0, r4
 800b8a8:	0029      	movs	r1, r5
 800b8aa:	f7f5 fffd 	bl	80018a8 <__aeabi_dmul>
 800b8ae:	0002      	movs	r2, r0
 800b8b0:	000b      	movs	r3, r1
 800b8b2:	0010      	movs	r0, r2
 800b8b4:	0019      	movs	r1, r3
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4bae      	ldr	r3, [pc, #696]	@ (800bb74 <compensate_pressure+0x338>)
 800b8ba:	f7f5 fbb1 	bl	8001020 <__aeabi_ddiv>
 800b8be:	0002      	movs	r2, r0
 800b8c0:	000b      	movs	r3, r1
 800b8c2:	613a      	str	r2, [r7, #16]
 800b8c4:	617b      	str	r3, [r7, #20]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	220e      	movs	r2, #14
 800b8ca:	5e9b      	ldrsh	r3, [r3, r2]
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	f7f6 fead 	bl	800262c <__aeabi_i2d>
 800b8d2:	69ba      	ldr	r2, [r7, #24]
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f7f5 ffe7 	bl	80018a8 <__aeabi_dmul>
 800b8da:	0002      	movs	r2, r0
 800b8dc:	000b      	movs	r3, r1
 800b8de:	0010      	movs	r0, r2
 800b8e0:	0019      	movs	r1, r3
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	000b      	movs	r3, r1
 800b8e6:	f7f5 f837 	bl	8000958 <__aeabi_dadd>
 800b8ea:	0002      	movs	r2, r0
 800b8ec:	000b      	movs	r3, r1
 800b8ee:	6938      	ldr	r0, [r7, #16]
 800b8f0:	6979      	ldr	r1, [r7, #20]
 800b8f2:	f7f5 f831 	bl	8000958 <__aeabi_dadd>
 800b8f6:	0002      	movs	r2, r0
 800b8f8:	000b      	movs	r3, r1
 800b8fa:	613a      	str	r2, [r7, #16]
 800b8fc:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800b8fe:	2200      	movs	r2, #0
 800b900:	4b9d      	ldr	r3, [pc, #628]	@ (800bb78 <compensate_pressure+0x33c>)
 800b902:	6938      	ldr	r0, [r7, #16]
 800b904:	6979      	ldr	r1, [r7, #20]
 800b906:	f7f5 fb8b 	bl	8001020 <__aeabi_ddiv>
 800b90a:	0002      	movs	r2, r0
 800b90c:	000b      	movs	r3, r1
 800b90e:	0014      	movs	r4, r2
 800b910:	001d      	movs	r5, r3
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	220c      	movs	r2, #12
 800b916:	5e9b      	ldrsh	r3, [r3, r2]
 800b918:	0018      	movs	r0, r3
 800b91a:	f7f6 fe87 	bl	800262c <__aeabi_i2d>
 800b91e:	2200      	movs	r2, #0
 800b920:	4b96      	ldr	r3, [pc, #600]	@ (800bb7c <compensate_pressure+0x340>)
 800b922:	f7f5 ffc1 	bl	80018a8 <__aeabi_dmul>
 800b926:	0002      	movs	r2, r0
 800b928:	000b      	movs	r3, r1
 800b92a:	0020      	movs	r0, r4
 800b92c:	0029      	movs	r1, r5
 800b92e:	f7f5 f813 	bl	8000958 <__aeabi_dadd>
 800b932:	0002      	movs	r2, r0
 800b934:	000b      	movs	r3, r1
 800b936:	613a      	str	r2, [r7, #16]
 800b938:	617b      	str	r3, [r7, #20]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	220a      	movs	r2, #10
 800b93e:	5e9b      	ldrsh	r3, [r3, r2]
 800b940:	0018      	movs	r0, r3
 800b942:	f7f6 fe73 	bl	800262c <__aeabi_i2d>
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	f7f5 ffad 	bl	80018a8 <__aeabi_dmul>
 800b94e:	0002      	movs	r2, r0
 800b950:	000b      	movs	r3, r1
 800b952:	0010      	movs	r0, r2
 800b954:	0019      	movs	r1, r3
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	f7f5 ffa5 	bl	80018a8 <__aeabi_dmul>
 800b95e:	0002      	movs	r2, r0
 800b960:	000b      	movs	r3, r1
 800b962:	0010      	movs	r0, r2
 800b964:	0019      	movs	r1, r3
 800b966:	2200      	movs	r2, #0
 800b968:	4b85      	ldr	r3, [pc, #532]	@ (800bb80 <compensate_pressure+0x344>)
 800b96a:	f7f5 fb59 	bl	8001020 <__aeabi_ddiv>
 800b96e:	0002      	movs	r2, r0
 800b970:	000b      	movs	r3, r1
 800b972:	60ba      	str	r2, [r7, #8]
 800b974:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2208      	movs	r2, #8
 800b97a:	5e9b      	ldrsh	r3, [r3, r2]
 800b97c:	0018      	movs	r0, r3
 800b97e:	f7f6 fe55 	bl	800262c <__aeabi_i2d>
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	f7f5 ff8f 	bl	80018a8 <__aeabi_dmul>
 800b98a:	0002      	movs	r2, r0
 800b98c:	000b      	movs	r3, r1
 800b98e:	0010      	movs	r0, r2
 800b990:	0019      	movs	r1, r3
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f7f4 ffdf 	bl	8000958 <__aeabi_dadd>
 800b99a:	0002      	movs	r2, r0
 800b99c:	000b      	movs	r3, r1
 800b99e:	0010      	movs	r0, r2
 800b9a0:	0019      	movs	r1, r3
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	4b76      	ldr	r3, [pc, #472]	@ (800bb80 <compensate_pressure+0x344>)
 800b9a6:	f7f5 fb3b 	bl	8001020 <__aeabi_ddiv>
 800b9aa:	0002      	movs	r2, r0
 800b9ac:	000b      	movs	r3, r1
 800b9ae:	61ba      	str	r2, [r7, #24]
 800b9b0:	61fb      	str	r3, [r7, #28]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4b6f      	ldr	r3, [pc, #444]	@ (800bb74 <compensate_pressure+0x338>)
 800b9b6:	69b8      	ldr	r0, [r7, #24]
 800b9b8:	69f9      	ldr	r1, [r7, #28]
 800b9ba:	f7f5 fb31 	bl	8001020 <__aeabi_ddiv>
 800b9be:	0002      	movs	r2, r0
 800b9c0:	000b      	movs	r3, r1
 800b9c2:	0010      	movs	r0, r2
 800b9c4:	0019      	movs	r1, r3
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	4b6e      	ldr	r3, [pc, #440]	@ (800bb84 <compensate_pressure+0x348>)
 800b9ca:	f7f4 ffc5 	bl	8000958 <__aeabi_dadd>
 800b9ce:	0002      	movs	r2, r0
 800b9d0:	000b      	movs	r3, r1
 800b9d2:	0014      	movs	r4, r2
 800b9d4:	001d      	movs	r5, r3
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	88db      	ldrh	r3, [r3, #6]
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f7f6 fe54 	bl	8002688 <__aeabi_ui2d>
 800b9e0:	0002      	movs	r2, r0
 800b9e2:	000b      	movs	r3, r1
 800b9e4:	0020      	movs	r0, r4
 800b9e6:	0029      	movs	r1, r5
 800b9e8:	f7f5 ff5e 	bl	80018a8 <__aeabi_dmul>
 800b9ec:	0002      	movs	r2, r0
 800b9ee:	000b      	movs	r3, r1
 800b9f0:	61ba      	str	r2, [r7, #24]
 800b9f2:	61fb      	str	r3, [r7, #28]

    /* Avoid exception caused by division by zero */
    if (var1 > (0.0))
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	69b8      	ldr	r0, [r7, #24]
 800b9fa:	69f9      	ldr	r1, [r7, #28]
 800b9fc:	f7f4 fd40 	bl	8000480 <__aeabi_dcmpgt>
 800ba00:	1e03      	subs	r3, r0, #0
 800ba02:	d100      	bne.n	800ba06 <compensate_pressure+0x1ca>
 800ba04:	e0a4      	b.n	800bb50 <compensate_pressure+0x314>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f7f6 fe3c 	bl	8002688 <__aeabi_ui2d>
 800ba10:	0002      	movs	r2, r0
 800ba12:	000b      	movs	r3, r1
 800ba14:	2000      	movs	r0, #0
 800ba16:	495c      	ldr	r1, [pc, #368]	@ (800bb88 <compensate_pressure+0x34c>)
 800ba18:	f7f6 fa0e 	bl	8001e38 <__aeabi_dsub>
 800ba1c:	0002      	movs	r2, r0
 800ba1e:	000b      	movs	r3, r1
 800ba20:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba22:	637b      	str	r3, [r7, #52]	@ 0x34
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800ba24:	2200      	movs	r2, #0
 800ba26:	4b59      	ldr	r3, [pc, #356]	@ (800bb8c <compensate_pressure+0x350>)
 800ba28:	6938      	ldr	r0, [r7, #16]
 800ba2a:	6979      	ldr	r1, [r7, #20]
 800ba2c:	f7f5 faf8 	bl	8001020 <__aeabi_ddiv>
 800ba30:	0002      	movs	r2, r0
 800ba32:	000b      	movs	r3, r1
 800ba34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ba38:	f7f6 f9fe 	bl	8001e38 <__aeabi_dsub>
 800ba3c:	0002      	movs	r2, r0
 800ba3e:	000b      	movs	r3, r1
 800ba40:	0010      	movs	r0, r2
 800ba42:	0019      	movs	r1, r3
 800ba44:	2200      	movs	r2, #0
 800ba46:	4b52      	ldr	r3, [pc, #328]	@ (800bb90 <compensate_pressure+0x354>)
 800ba48:	f7f5 ff2e 	bl	80018a8 <__aeabi_dmul>
 800ba4c:	0002      	movs	r2, r0
 800ba4e:	000b      	movs	r3, r1
 800ba50:	0010      	movs	r0, r2
 800ba52:	0019      	movs	r1, r3
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f7f5 fae2 	bl	8001020 <__aeabi_ddiv>
 800ba5c:	0002      	movs	r2, r0
 800ba5e:	000b      	movs	r3, r1
 800ba60:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2216      	movs	r2, #22
 800ba68:	5e9b      	ldrsh	r3, [r3, r2]
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f7f6 fdde 	bl	800262c <__aeabi_i2d>
 800ba70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba74:	f7f5 ff18 	bl	80018a8 <__aeabi_dmul>
 800ba78:	0002      	movs	r2, r0
 800ba7a:	000b      	movs	r3, r1
 800ba7c:	0010      	movs	r0, r2
 800ba7e:	0019      	movs	r1, r3
 800ba80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba84:	f7f5 ff10 	bl	80018a8 <__aeabi_dmul>
 800ba88:	0002      	movs	r2, r0
 800ba8a:	000b      	movs	r3, r1
 800ba8c:	0010      	movs	r0, r2
 800ba8e:	0019      	movs	r1, r3
 800ba90:	2200      	movs	r2, #0
 800ba92:	4b40      	ldr	r3, [pc, #256]	@ (800bb94 <compensate_pressure+0x358>)
 800ba94:	f7f5 fac4 	bl	8001020 <__aeabi_ddiv>
 800ba98:	0002      	movs	r2, r0
 800ba9a:	000b      	movs	r3, r1
 800ba9c:	61ba      	str	r2, [r7, #24]
 800ba9e:	61fb      	str	r3, [r7, #28]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2214      	movs	r2, #20
 800baa4:	5e9b      	ldrsh	r3, [r3, r2]
 800baa6:	0018      	movs	r0, r3
 800baa8:	f7f6 fdc0 	bl	800262c <__aeabi_i2d>
 800baac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab0:	f7f5 fefa 	bl	80018a8 <__aeabi_dmul>
 800bab4:	0002      	movs	r2, r0
 800bab6:	000b      	movs	r3, r1
 800bab8:	0010      	movs	r0, r2
 800baba:	0019      	movs	r1, r3
 800babc:	2200      	movs	r2, #0
 800babe:	4b2d      	ldr	r3, [pc, #180]	@ (800bb74 <compensate_pressure+0x338>)
 800bac0:	f7f5 faae 	bl	8001020 <__aeabi_ddiv>
 800bac4:	0002      	movs	r2, r0
 800bac6:	000b      	movs	r3, r1
 800bac8:	613a      	str	r2, [r7, #16]
 800baca:	617b      	str	r3, [r7, #20]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	69b8      	ldr	r0, [r7, #24]
 800bad2:	69f9      	ldr	r1, [r7, #28]
 800bad4:	f7f4 ff40 	bl	8000958 <__aeabi_dadd>
 800bad8:	0002      	movs	r2, r0
 800bada:	000b      	movs	r3, r1
 800badc:	0014      	movs	r4, r2
 800bade:	001d      	movs	r5, r3
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2212      	movs	r2, #18
 800bae4:	5e9b      	ldrsh	r3, [r3, r2]
 800bae6:	0018      	movs	r0, r3
 800bae8:	f7f6 fda0 	bl	800262c <__aeabi_i2d>
 800baec:	0002      	movs	r2, r0
 800baee:	000b      	movs	r3, r1
 800baf0:	0020      	movs	r0, r4
 800baf2:	0029      	movs	r1, r5
 800baf4:	f7f4 ff30 	bl	8000958 <__aeabi_dadd>
 800baf8:	0002      	movs	r2, r0
 800bafa:	000b      	movs	r3, r1
 800bafc:	0010      	movs	r0, r2
 800bafe:	0019      	movs	r1, r3
 800bb00:	2200      	movs	r2, #0
 800bb02:	4b25      	ldr	r3, [pc, #148]	@ (800bb98 <compensate_pressure+0x35c>)
 800bb04:	f7f5 fa8c 	bl	8001020 <__aeabi_ddiv>
 800bb08:	0002      	movs	r2, r0
 800bb0a:	000b      	movs	r3, r1
 800bb0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bb10:	f7f4 ff22 	bl	8000958 <__aeabi_dadd>
 800bb14:	0002      	movs	r2, r0
 800bb16:	000b      	movs	r3, r1
 800bb18:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if (pressure < pressure_min)
 800bb1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bb24:	f7f4 fc98 	bl	8000458 <__aeabi_dcmplt>
 800bb28:	1e03      	subs	r3, r0, #0
 800bb2a:	d004      	beq.n	800bb36 <compensate_pressure+0x2fa>
        {
            pressure = pressure_min;
 800bb2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb30:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb34:	e010      	b.n	800bb58 <compensate_pressure+0x31c>
        }
        else if (pressure > pressure_max)
 800bb36:	6a3a      	ldr	r2, [r7, #32]
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bb3e:	f7f4 fc9f 	bl	8000480 <__aeabi_dcmpgt>
 800bb42:	1e03      	subs	r3, r0, #0
 800bb44:	d008      	beq.n	800bb58 <compensate_pressure+0x31c>
        {
            pressure = pressure_max;
 800bb46:	6a3a      	ldr	r2, [r7, #32]
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb4e:	e003      	b.n	800bb58 <compensate_pressure+0x31c>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 800bb50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb54:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb56:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return pressure;
 800bb58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bb5c:	0010      	movs	r0, r2
 800bb5e:	0019      	movs	r1, r3
 800bb60:	46bd      	mov	sp, r7
 800bb62:	b00e      	add	sp, #56	@ 0x38
 800bb64:	bdb0      	pop	{r4, r5, r7, pc}
 800bb66:	46c0      	nop			@ (mov r8, r8)
 800bb68:	40dd4c00 	.word	0x40dd4c00
 800bb6c:	40fadb00 	.word	0x40fadb00
 800bb70:	40ef4000 	.word	0x40ef4000
 800bb74:	40e00000 	.word	0x40e00000
 800bb78:	40100000 	.word	0x40100000
 800bb7c:	40f00000 	.word	0x40f00000
 800bb80:	41200000 	.word	0x41200000
 800bb84:	3ff00000 	.word	0x3ff00000
 800bb88:	41300000 	.word	0x41300000
 800bb8c:	40b00000 	.word	0x40b00000
 800bb90:	40b86a00 	.word	0x40b86a00
 800bb94:	41e00000 	.word	0x41e00000
 800bb98:	40300000 	.word	0x40300000

0800bb9c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 800bb9c:	b5b0      	push	{r4, r5, r7, lr}
 800bb9e:	b094      	sub	sp, #80	@ 0x50
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 800bba6:	2200      	movs	r2, #0
 800bba8:	2300      	movs	r3, #0
 800bbaa:	643a      	str	r2, [r7, #64]	@ 0x40
 800bbac:	647b      	str	r3, [r7, #68]	@ 0x44
    double humidity_max = 100.0;
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4b79      	ldr	r3, [pc, #484]	@ (800bd98 <compensate_humidity+0x1fc>)
 800bbb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	0018      	movs	r0, r3
 800bbbc:	f7f6 fd36 	bl	800262c <__aeabi_i2d>
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4b76      	ldr	r3, [pc, #472]	@ (800bd9c <compensate_humidity+0x200>)
 800bbc4:	f7f6 f938 	bl	8001e38 <__aeabi_dsub>
 800bbc8:	0002      	movs	r2, r0
 800bbca:	000b      	movs	r3, r1
 800bbcc:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbce:	637b      	str	r3, [r7, #52]	@ 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	221e      	movs	r2, #30
 800bbd4:	5e9b      	ldrsh	r3, [r3, r2]
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	f7f6 fd28 	bl	800262c <__aeabi_i2d>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4b70      	ldr	r3, [pc, #448]	@ (800bda0 <compensate_humidity+0x204>)
 800bbe0:	f7f5 fe62 	bl	80018a8 <__aeabi_dmul>
 800bbe4:	0002      	movs	r2, r0
 800bbe6:	000b      	movs	r3, r1
 800bbe8:	0014      	movs	r4, r2
 800bbea:	001d      	movs	r5, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2220      	movs	r2, #32
 800bbf0:	5e9b      	ldrsh	r3, [r3, r2]
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f7f6 fd1a 	bl	800262c <__aeabi_i2d>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4b6a      	ldr	r3, [pc, #424]	@ (800bda4 <compensate_humidity+0x208>)
 800bbfc:	f7f5 fa10 	bl	8001020 <__aeabi_ddiv>
 800bc00:	0002      	movs	r2, r0
 800bc02:	000b      	movs	r3, r1
 800bc04:	0010      	movs	r0, r2
 800bc06:	0019      	movs	r1, r3
 800bc08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0c:	f7f5 fe4c 	bl	80018a8 <__aeabi_dmul>
 800bc10:	0002      	movs	r2, r0
 800bc12:	000b      	movs	r3, r1
 800bc14:	0020      	movs	r0, r4
 800bc16:	0029      	movs	r1, r5
 800bc18:	f7f4 fe9e 	bl	8000958 <__aeabi_dadd>
 800bc1c:	0002      	movs	r2, r0
 800bc1e:	000b      	movs	r3, r1
 800bc20:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    var3 = uncomp_data->humidity - var2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	0018      	movs	r0, r3
 800bc2a:	f7f6 fd2d 	bl	8002688 <__aeabi_ui2d>
 800bc2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc32:	f7f6 f901 	bl	8001e38 <__aeabi_dsub>
 800bc36:	0002      	movs	r2, r0
 800bc38:	000b      	movs	r3, r1
 800bc3a:	623a      	str	r2, [r7, #32]
 800bc3c:	627b      	str	r3, [r7, #36]	@ 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	221a      	movs	r2, #26
 800bc42:	5e9b      	ldrsh	r3, [r3, r2]
 800bc44:	0018      	movs	r0, r3
 800bc46:	f7f6 fcf1 	bl	800262c <__aeabi_i2d>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	4b56      	ldr	r3, [pc, #344]	@ (800bda8 <compensate_humidity+0x20c>)
 800bc4e:	f7f5 f9e7 	bl	8001020 <__aeabi_ddiv>
 800bc52:	0002      	movs	r2, r0
 800bc54:	000b      	movs	r3, r1
 800bc56:	61ba      	str	r2, [r7, #24]
 800bc58:	61fb      	str	r3, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	7f1b      	ldrb	r3, [r3, #28]
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f7f6 fd12 	bl	8002688 <__aeabi_ui2d>
 800bc64:	2200      	movs	r2, #0
 800bc66:	4b51      	ldr	r3, [pc, #324]	@ (800bdac <compensate_humidity+0x210>)
 800bc68:	f7f5 f9da 	bl	8001020 <__aeabi_ddiv>
 800bc6c:	0002      	movs	r2, r0
 800bc6e:	000b      	movs	r3, r1
 800bc70:	0010      	movs	r0, r2
 800bc72:	0019      	movs	r1, r3
 800bc74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc78:	f7f5 fe16 	bl	80018a8 <__aeabi_dmul>
 800bc7c:	0002      	movs	r2, r0
 800bc7e:	000b      	movs	r3, r1
 800bc80:	0010      	movs	r0, r2
 800bc82:	0019      	movs	r1, r3
 800bc84:	2200      	movs	r2, #0
 800bc86:	4b4a      	ldr	r3, [pc, #296]	@ (800bdb0 <compensate_humidity+0x214>)
 800bc88:	f7f4 fe66 	bl	8000958 <__aeabi_dadd>
 800bc8c:	0002      	movs	r2, r0
 800bc8e:	000b      	movs	r3, r1
 800bc90:	613a      	str	r2, [r7, #16]
 800bc92:	617b      	str	r3, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	2222      	movs	r2, #34	@ 0x22
 800bc98:	569b      	ldrsb	r3, [r3, r2]
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f7f6 fcc6 	bl	800262c <__aeabi_i2d>
 800bca0:	2200      	movs	r2, #0
 800bca2:	4b42      	ldr	r3, [pc, #264]	@ (800bdac <compensate_humidity+0x210>)
 800bca4:	f7f5 f9bc 	bl	8001020 <__aeabi_ddiv>
 800bca8:	0002      	movs	r2, r0
 800bcaa:	000b      	movs	r3, r1
 800bcac:	0010      	movs	r0, r2
 800bcae:	0019      	movs	r1, r3
 800bcb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb4:	f7f5 fdf8 	bl	80018a8 <__aeabi_dmul>
 800bcb8:	0002      	movs	r2, r0
 800bcba:	000b      	movs	r3, r1
 800bcbc:	0010      	movs	r0, r2
 800bcbe:	0019      	movs	r1, r3
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f7f5 fdf0 	bl	80018a8 <__aeabi_dmul>
 800bcc8:	0002      	movs	r2, r0
 800bcca:	000b      	movs	r3, r1
 800bccc:	0010      	movs	r0, r2
 800bcce:	0019      	movs	r1, r3
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4b37      	ldr	r3, [pc, #220]	@ (800bdb0 <compensate_humidity+0x214>)
 800bcd4:	f7f4 fe40 	bl	8000958 <__aeabi_dadd>
 800bcd8:	0002      	movs	r2, r0
 800bcda:	000b      	movs	r3, r1
 800bcdc:	60ba      	str	r2, [r7, #8]
 800bcde:	60fb      	str	r3, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	6a38      	ldr	r0, [r7, #32]
 800bce6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bce8:	f7f5 fdde 	bl	80018a8 <__aeabi_dmul>
 800bcec:	0002      	movs	r2, r0
 800bcee:	000b      	movs	r3, r1
 800bcf0:	0014      	movs	r4, r2
 800bcf2:	001d      	movs	r5, r3
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6938      	ldr	r0, [r7, #16]
 800bcfa:	6979      	ldr	r1, [r7, #20]
 800bcfc:	f7f5 fdd4 	bl	80018a8 <__aeabi_dmul>
 800bd00:	0002      	movs	r2, r0
 800bd02:	000b      	movs	r3, r1
 800bd04:	0020      	movs	r0, r4
 800bd06:	0029      	movs	r1, r5
 800bd08:	f7f5 fdce 	bl	80018a8 <__aeabi_dmul>
 800bd0c:	0002      	movs	r2, r0
 800bd0e:	000b      	movs	r3, r1
 800bd10:	60ba      	str	r2, [r7, #8]
 800bd12:	60fb      	str	r3, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	7e1b      	ldrb	r3, [r3, #24]
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f7f6 fcb5 	bl	8002688 <__aeabi_ui2d>
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f7f5 fdc1 	bl	80018a8 <__aeabi_dmul>
 800bd26:	0002      	movs	r2, r0
 800bd28:	000b      	movs	r3, r1
 800bd2a:	0010      	movs	r0, r2
 800bd2c:	0019      	movs	r1, r3
 800bd2e:	2200      	movs	r2, #0
 800bd30:	4b20      	ldr	r3, [pc, #128]	@ (800bdb4 <compensate_humidity+0x218>)
 800bd32:	f7f5 f975 	bl	8001020 <__aeabi_ddiv>
 800bd36:	0002      	movs	r2, r0
 800bd38:	000b      	movs	r3, r1
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	491c      	ldr	r1, [pc, #112]	@ (800bdb0 <compensate_humidity+0x214>)
 800bd3e:	f7f6 f87b 	bl	8001e38 <__aeabi_dsub>
 800bd42:	0002      	movs	r2, r0
 800bd44:	000b      	movs	r3, r1
 800bd46:	68b8      	ldr	r0, [r7, #8]
 800bd48:	68f9      	ldr	r1, [r7, #12]
 800bd4a:	f7f5 fdad 	bl	80018a8 <__aeabi_dmul>
 800bd4e:	0002      	movs	r2, r0
 800bd50:	000b      	movs	r3, r1
 800bd52:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd54:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (humidity > humidity_max)
 800bd56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd5a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bd5c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bd5e:	f7f4 fb8f 	bl	8000480 <__aeabi_dcmpgt>
 800bd62:	1e03      	subs	r3, r0, #0
 800bd64:	d004      	beq.n	800bd70 <compensate_humidity+0x1d4>
    {
        humidity = humidity_max;
 800bd66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd6e:	e00b      	b.n	800bd88 <compensate_humidity+0x1ec>
    }
    else if (humidity < humidity_min)
 800bd70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd74:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bd76:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bd78:	f7f4 fb6e 	bl	8000458 <__aeabi_dcmplt>
 800bd7c:	1e03      	subs	r3, r0, #0
 800bd7e:	d003      	beq.n	800bd88 <compensate_humidity+0x1ec>
    {
        humidity = humidity_min;
 800bd80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd84:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    return humidity;
 800bd88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bd8c:	0010      	movs	r0, r2
 800bd8e:	0019      	movs	r1, r3
 800bd90:	46bd      	mov	sp, r7
 800bd92:	b014      	add	sp, #80	@ 0x50
 800bd94:	bdb0      	pop	{r4, r5, r7, pc}
 800bd96:	46c0      	nop			@ (mov r8, r8)
 800bd98:	40590000 	.word	0x40590000
 800bd9c:	40f2c000 	.word	0x40f2c000
 800bda0:	40500000 	.word	0x40500000
 800bda4:	40d00000 	.word	0x40d00000
 800bda8:	40f00000 	.word	0x40f00000
 800bdac:	41900000 	.word	0x41900000
 800bdb0:	3ff00000 	.word	0x3ff00000
 800bdb4:	41200000 	.word	0x41200000

0800bdb8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdba:	b08b      	sub	sp, #44	@ 0x2c
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_TEMP_PRESS_CALIB_DATA;
 800bdc0:	2626      	movs	r6, #38	@ 0x26
 800bdc2:	19bb      	adds	r3, r7, r6
 800bdc4:	2288      	movs	r2, #136	@ 0x88
 800bdc6:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
 800bdc8:	250c      	movs	r5, #12
 800bdca:	197b      	adds	r3, r7, r5
 800bdcc:	2200      	movs	r2, #0
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	2216      	movs	r2, #22
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	0018      	movs	r0, r3
 800bdd8:	f002 f896 	bl	800df08 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
 800bddc:	2427      	movs	r4, #39	@ 0x27
 800bdde:	193c      	adds	r4, r7, r4
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	1979      	adds	r1, r7, r5
 800bde4:	19bb      	adds	r3, r7, r6
 800bde6:	7818      	ldrb	r0, [r3, #0]
 800bde8:	0013      	movs	r3, r2
 800bdea:	221a      	movs	r2, #26
 800bdec:	f7fe feb1 	bl	800ab52 <bme280_get_regs>
 800bdf0:	0003      	movs	r3, r0
 800bdf2:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800bdf4:	2427      	movs	r4, #39	@ 0x27
 800bdf6:	193b      	adds	r3, r7, r4
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b25b      	sxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d11f      	bne.n	800be40 <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	197b      	adds	r3, r7, r5
 800be04:	0011      	movs	r1, r2
 800be06:	0018      	movs	r0, r3
 800be08:	f000 f84b 	bl	800bea2 <parse_temp_press_calib_data>
        reg_addr = BME280_REG_HUMIDITY_CALIB_DATA;
 800be0c:	19bb      	adds	r3, r7, r6
 800be0e:	22e1      	movs	r2, #225	@ 0xe1
 800be10:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
 800be12:	193c      	adds	r4, r7, r4
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	1979      	adds	r1, r7, r5
 800be18:	19bb      	adds	r3, r7, r6
 800be1a:	7818      	ldrb	r0, [r3, #0]
 800be1c:	0013      	movs	r3, r2
 800be1e:	2207      	movs	r2, #7
 800be20:	f7fe fe97 	bl	800ab52 <bme280_get_regs>
 800be24:	0003      	movs	r3, r0
 800be26:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800be28:	2427      	movs	r4, #39	@ 0x27
 800be2a:	193b      	adds	r3, r7, r4
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	d105      	bne.n	800be40 <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	197b      	adds	r3, r7, r5
 800be38:	0011      	movs	r1, r2
 800be3a:	0018      	movs	r0, r3
 800be3c:	f000 f8df 	bl	800bffe <parse_humidity_calib_data>
        }
    }

    return rslt;
 800be40:	2327      	movs	r3, #39	@ 0x27
 800be42:	18fb      	adds	r3, r7, r3
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	b25b      	sxtb	r3, r3
}
 800be48:	0018      	movs	r0, r3
 800be4a:	46bd      	mov	sp, r7
 800be4c:	b00b      	add	sp, #44	@ 0x2c
 800be4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be50 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800be5e:	2301      	movs	r3, #1
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e015      	b.n	800be90 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	18d2      	adds	r2, r2, r3
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	3b01      	subs	r3, #1
 800be70:	68b9      	ldr	r1, [r7, #8]
 800be72:	18cb      	adds	r3, r1, r3
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	18d2      	adds	r2, r2, r3
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	005b      	lsls	r3, r3, #1
 800be82:	68b9      	ldr	r1, [r7, #8]
 800be84:	18cb      	adds	r3, r1, r3
 800be86:	7812      	ldrb	r2, [r2, #0]
 800be88:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	3301      	adds	r3, #1
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d3e5      	bcc.n	800be64 <interleave_reg_addr+0x14>
    }
}
 800be98:	46c0      	nop			@ (mov r8, r8)
 800be9a:	46c0      	nop			@ (mov r8, r8)
 800be9c:	46bd      	mov	sp, r7
 800be9e:	b006      	add	sp, #24
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	3318      	adds	r3, #24
 800beb0:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3301      	adds	r3, #1
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	021b      	lsls	r3, r3, #8
 800beba:	b21a      	sxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	b21b      	sxth	r3, r3
 800bec2:	4313      	orrs	r3, r2
 800bec4:	b21b      	sxth	r3, r3
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3303      	adds	r3, #3
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	b21a      	sxth	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	3302      	adds	r3, #2
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b21b      	sxth	r3, r3
 800bede:	4313      	orrs	r3, r2
 800bee0:	b21a      	sxth	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3305      	adds	r3, #5
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	b21a      	sxth	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3304      	adds	r3, #4
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	b21b      	sxth	r3, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	b21a      	sxth	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3307      	adds	r3, #7
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	021b      	lsls	r3, r3, #8
 800bf08:	b21a      	sxth	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3306      	adds	r3, #6
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	b21b      	sxth	r3, r3
 800bf12:	4313      	orrs	r3, r2
 800bf14:	b21b      	sxth	r3, r3
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3309      	adds	r3, #9
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	021b      	lsls	r3, r3, #8
 800bf24:	b21a      	sxth	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3308      	adds	r3, #8
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	b21b      	sxth	r3, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	b21a      	sxth	r2, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	330b      	adds	r3, #11
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	021b      	lsls	r3, r3, #8
 800bf3e:	b21a      	sxth	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	330a      	adds	r3, #10
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b21b      	sxth	r3, r3
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	b21a      	sxth	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	330d      	adds	r3, #13
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	b21a      	sxth	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	b21b      	sxth	r3, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	b21a      	sxth	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	330f      	adds	r3, #15
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	021b      	lsls	r3, r3, #8
 800bf72:	b21a      	sxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	330e      	adds	r3, #14
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b21b      	sxth	r3, r3
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	b21a      	sxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3311      	adds	r3, #17
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	021b      	lsls	r3, r3, #8
 800bf8c:	b21a      	sxth	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3310      	adds	r3, #16
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	b21b      	sxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	b21a      	sxth	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3313      	adds	r3, #19
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	021b      	lsls	r3, r3, #8
 800bfa6:	b21a      	sxth	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3312      	adds	r3, #18
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	b21b      	sxth	r3, r3
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	b21a      	sxth	r2, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	3315      	adds	r3, #21
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	021b      	lsls	r3, r3, #8
 800bfc0:	b21a      	sxth	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3314      	adds	r3, #20
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	b21b      	sxth	r3, r3
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	b21a      	sxth	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3317      	adds	r3, #23
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	021b      	lsls	r3, r3, #8
 800bfda:	b21a      	sxth	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3316      	adds	r3, #22
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	b21a      	sxth	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3319      	adds	r3, #25
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	761a      	strb	r2, [r3, #24]
}
 800bff6:	46c0      	nop			@ (mov r8, r8)
 800bff8:	46bd      	mov	sp, r7
 800bffa:	b004      	add	sp, #16
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800bffe:	b590      	push	{r4, r7, lr}
 800c000:	b087      	sub	sp, #28
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	3318      	adds	r3, #24
 800c00c:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3301      	adds	r3, #1
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	021b      	lsls	r3, r3, #8
 800c016:	b21a      	sxth	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	b21b      	sxth	r3, r3
 800c01e:	4313      	orrs	r3, r2
 800c020:	b21a      	sxth	r2, r3
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3302      	adds	r3, #2
 800c02a:	781a      	ldrb	r2, [r3, #0]
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3303      	adds	r3, #3
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	b25b      	sxtb	r3, r3
 800c038:	b29b      	uxth	r3, r3
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	2012      	movs	r0, #18
 800c040:	183b      	adds	r3, r7, r0
 800c042:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3304      	adds	r3, #4
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b21a      	sxth	r2, r3
 800c04c:	2410      	movs	r4, #16
 800c04e:	193b      	adds	r3, r7, r4
 800c050:	210f      	movs	r1, #15
 800c052:	400a      	ands	r2, r1
 800c054:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800c056:	183a      	adds	r2, r7, r0
 800c058:	193b      	adds	r3, r7, r4
 800c05a:	8812      	ldrh	r2, [r2, #0]
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	4313      	orrs	r3, r2
 800c060:	b21a      	sxth	r2, r3
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3305      	adds	r3, #5
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	b25b      	sxtb	r3, r3
 800c06e:	b29b      	uxth	r3, r3
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	b29a      	uxth	r2, r3
 800c074:	210e      	movs	r1, #14
 800c076:	187b      	adds	r3, r7, r1
 800c078:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3304      	adds	r3, #4
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	091b      	lsrs	r3, r3, #4
 800c082:	b2da      	uxtb	r2, r3
 800c084:	200c      	movs	r0, #12
 800c086:	183b      	adds	r3, r7, r0
 800c088:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800c08a:	187a      	adds	r2, r7, r1
 800c08c:	183b      	adds	r3, r7, r0
 800c08e:	8812      	ldrh	r2, [r2, #0]
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	4313      	orrs	r3, r2
 800c094:	b21a      	sxth	r2, r3
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3306      	adds	r3, #6
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	b259      	sxtb	r1, r3
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	2222      	movs	r2, #34	@ 0x22
 800c0a6:	5499      	strb	r1, [r3, r2]
}
 800c0a8:	46c0      	nop			@ (mov r8, r8)
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b007      	add	sp, #28
 800c0ae:	bd90      	pop	{r4, r7, pc}

0800c0b0 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	0002      	movs	r2, r0
 800c0b8:	1dfb      	adds	r3, r7, #7
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	1dbb      	adds	r3, r7, #6
 800c0be:	1c0a      	adds	r2, r1, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800c0c2:	210f      	movs	r1, #15
 800c0c4:	187b      	adds	r3, r7, r1
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 800c0ca:	1dfb      	adds	r3, r7, #7
 800c0cc:	1dba      	adds	r2, r7, #6
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	7812      	ldrb	r2, [r2, #0]
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d003      	beq.n	800c0e2 <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800c0da:	187b      	adds	r3, r7, r1
 800c0dc:	2201      	movs	r2, #1
 800c0de:	701a      	strb	r2, [r3, #0]
 800c0e0:	e003      	b.n	800c0ea <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800c0e2:	230f      	movs	r3, #15
 800c0e4:	18fb      	adds	r3, r7, r3
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800c0ea:	230f      	movs	r3, #15
 800c0ec:	18fb      	adds	r3, r7, r3
 800c0ee:	781b      	ldrb	r3, [r3, #0]
}
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b004      	add	sp, #16
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00b      	beq.n	800c11e <null_ptr_check+0x26>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d007      	beq.n	800c11e <null_ptr_check+0x26>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <null_ptr_check+0x26>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d104      	bne.n	800c128 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800c11e:	230f      	movs	r3, #15
 800c120:	18fb      	adds	r3, r7, r3
 800c122:	22ff      	movs	r2, #255	@ 0xff
 800c124:	701a      	strb	r2, [r3, #0]
 800c126:	e003      	b.n	800c130 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800c128:	230f      	movs	r3, #15
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	2200      	movs	r2, #0
 800c12e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800c130:	230f      	movs	r3, #15
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b25b      	sxtb	r3, r3
}
 800c138:	0018      	movs	r0, r3
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b004      	add	sp, #16
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <bme280_i2c_read>:

/*!
 * @brief This internal API reads I2C function map to COINES platform
 */
BME280_INTF_RET_TYPE bme280_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800c140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c142:	b089      	sub	sp, #36	@ 0x24
 800c144:	af02      	add	r7, sp, #8
 800c146:	60b9      	str	r1, [r7, #8]
 800c148:	607a      	str	r2, [r7, #4]
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	250f      	movs	r5, #15
 800c14e:	197b      	adds	r3, r7, r5
 800c150:	1c02      	adds	r2, r0, #0
 800c152:	701a      	strb	r2, [r3, #0]
    uint8_t device_addr = *(uint8_t *)intf_ptr;
 800c154:	2117      	movs	r1, #23
 800c156:	187b      	adds	r3, r7, r1
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	7812      	ldrb	r2, [r2, #0]
 800c15c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;

    // Write the register address first
    status = HAL_I2C_Master_Transmit(&hi2c1, (device_addr << 1), &reg_addr, 1, HAL_MAX_DELAY);
 800c15e:	187b      	adds	r3, r7, r1
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	18db      	adds	r3, r3, r3
 800c166:	b299      	uxth	r1, r3
 800c168:	2616      	movs	r6, #22
 800c16a:	19bc      	adds	r4, r7, r6
 800c16c:	197a      	adds	r2, r7, r5
 800c16e:	4818      	ldr	r0, [pc, #96]	@ (800c1d0 <bme280_i2c_read+0x90>)
 800c170:	2301      	movs	r3, #1
 800c172:	425b      	negs	r3, r3
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	2301      	movs	r3, #1
 800c178:	f7fa f896 	bl	80062a8 <HAL_I2C_Master_Transmit>
 800c17c:	0003      	movs	r3, r0
 800c17e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800c180:	19bb      	adds	r3, r7, r6
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <bme280_i2c_read+0x4e>
        return BME280_E_COMM_FAIL;
 800c188:	2302      	movs	r3, #2
 800c18a:	425b      	negs	r3, r3
 800c18c:	e01b      	b.n	800c1c6 <bme280_i2c_read+0x86>
    }

    // Read the data
    status = HAL_I2C_Master_Receive(&hi2c1, (device_addr << 1), reg_data, len, HAL_MAX_DELAY);
 800c18e:	2317      	movs	r3, #23
 800c190:	18fb      	adds	r3, r7, r3
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	b29b      	uxth	r3, r3
 800c196:	18db      	adds	r3, r3, r3
 800c198:	b299      	uxth	r1, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	b29d      	uxth	r5, r3
 800c19e:	2616      	movs	r6, #22
 800c1a0:	19bc      	adds	r4, r7, r6
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	480a      	ldr	r0, [pc, #40]	@ (800c1d0 <bme280_i2c_read+0x90>)
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	425b      	negs	r3, r3
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	002b      	movs	r3, r5
 800c1ae:	f7fa f983 	bl	80064b8 <HAL_I2C_Master_Receive>
 800c1b2:	0003      	movs	r3, r0
 800c1b4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800c1b6:	19bb      	adds	r3, r7, r6
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <bme280_i2c_read+0x84>
        return BME280_E_COMM_FAIL;
 800c1be:	2302      	movs	r3, #2
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	e000      	b.n	800c1c6 <bme280_i2c_read+0x86>
    }

    return BME280_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	b007      	add	sp, #28
 800c1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ce:	46c0      	nop			@ (mov r8, r8)
 800c1d0:	20000280 	.word	0x20000280

0800c1d4 <bme280_i2c_write>:

/*!
 * @brief This internal API writes I2C function map to COINES platform
 */
BME280_INTF_RET_TYPE bme280_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800c1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1d6:	46c6      	mov	lr, r8
 800c1d8:	b500      	push	{lr}
 800c1da:	b090      	sub	sp, #64	@ 0x40
 800c1dc:	af02      	add	r7, sp, #8
 800c1de:	6239      	str	r1, [r7, #32]
 800c1e0:	61fa      	str	r2, [r7, #28]
 800c1e2:	61bb      	str	r3, [r7, #24]
 800c1e4:	230f      	movs	r3, #15
 800c1e6:	2618      	movs	r6, #24
 800c1e8:	199b      	adds	r3, r3, r6
 800c1ea:	19db      	adds	r3, r3, r7
 800c1ec:	1c02      	adds	r2, r0, #0
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	466b      	mov	r3, sp
 800c1f2:	4698      	mov	r8, r3
    uint8_t device_addr = *(uint8_t *)intf_ptr;
 800c1f4:	211f      	movs	r1, #31
 800c1f6:	198b      	adds	r3, r1, r6
 800c1f8:	19db      	adds	r3, r3, r7
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	7812      	ldrb	r2, [r2, #0]
 800c1fe:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    uint8_t buffer[len + 1];
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	3301      	adds	r3, #1
 800c204:	001a      	movs	r2, r3
 800c206:	3a01      	subs	r2, #1
 800c208:	633a      	str	r2, [r7, #48]	@ 0x30
 800c20a:	60bb      	str	r3, [r7, #8]
 800c20c:	2200      	movs	r2, #0
 800c20e:	60fa      	str	r2, [r7, #12]
 800c210:	68b8      	ldr	r0, [r7, #8]
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	0006      	movs	r6, r0
 800c216:	0f72      	lsrs	r2, r6, #29
 800c218:	000e      	movs	r6, r1
 800c21a:	00f6      	lsls	r6, r6, #3
 800c21c:	617e      	str	r6, [r7, #20]
 800c21e:	697e      	ldr	r6, [r7, #20]
 800c220:	4316      	orrs	r6, r2
 800c222:	617e      	str	r6, [r7, #20]
 800c224:	00c0      	lsls	r0, r0, #3
 800c226:	6138      	str	r0, [r7, #16]
 800c228:	603b      	str	r3, [r7, #0]
 800c22a:	2200      	movs	r2, #0
 800c22c:	607a      	str	r2, [r7, #4]
 800c22e:	6838      	ldr	r0, [r7, #0]
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	0006      	movs	r6, r0
 800c234:	0f72      	lsrs	r2, r6, #29
 800c236:	000e      	movs	r6, r1
 800c238:	00f5      	lsls	r5, r6, #3
 800c23a:	4315      	orrs	r5, r2
 800c23c:	00c4      	lsls	r4, r0, #3
 800c23e:	3307      	adds	r3, #7
 800c240:	08db      	lsrs	r3, r3, #3
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	4668      	mov	r0, sp
 800c246:	1ac0      	subs	r0, r0, r3
 800c248:	4685      	mov	sp, r0
 800c24a:	ab02      	add	r3, sp, #8
 800c24c:	3300      	adds	r3, #0
 800c24e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    buffer[0] = reg_addr;
 800c250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c252:	220f      	movs	r2, #15
 800c254:	2418      	movs	r4, #24
 800c256:	1912      	adds	r2, r2, r4
 800c258:	19d2      	adds	r2, r2, r7
 800c25a:	7812      	ldrb	r2, [r2, #0]
 800c25c:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], reg_data, len);
 800c25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c260:	3301      	adds	r3, #1
 800c262:	69fa      	ldr	r2, [r7, #28]
 800c264:	6a39      	ldr	r1, [r7, #32]
 800c266:	0018      	movs	r0, r3
 800c268:	f001 fee0 	bl	800e02c <memcpy>

    status = HAL_I2C_Master_Transmit(&hi2c1, (device_addr << 1), buffer, len + 1, HAL_MAX_DELAY);
 800c26c:	211f      	movs	r1, #31
 800c26e:	0022      	movs	r2, r4
 800c270:	188b      	adds	r3, r1, r2
 800c272:	19db      	adds	r3, r3, r7
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	18db      	adds	r3, r3, r3
 800c27a:	b299      	uxth	r1, r3
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3301      	adds	r3, #1
 800c282:	b29d      	uxth	r5, r3
 800c284:	2613      	movs	r6, #19
 800c286:	18b3      	adds	r3, r6, r2
 800c288:	19dc      	adds	r4, r3, r7
 800c28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c28c:	480c      	ldr	r0, [pc, #48]	@ (800c2c0 <bme280_i2c_write+0xec>)
 800c28e:	2301      	movs	r3, #1
 800c290:	425b      	negs	r3, r3
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	002b      	movs	r3, r5
 800c296:	f7fa f807 	bl	80062a8 <HAL_I2C_Master_Transmit>
 800c29a:	0003      	movs	r3, r0
 800c29c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800c29e:	2218      	movs	r2, #24
 800c2a0:	18b3      	adds	r3, r6, r2
 800c2a2:	19db      	adds	r3, r3, r7
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <bme280_i2c_write+0xdc>
        return BME280_E_COMM_FAIL;
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	425b      	negs	r3, r3
 800c2ae:	e000      	b.n	800c2b2 <bme280_i2c_write+0xde>
    }

    return BME280_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	46c5      	mov	sp, r8
}
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	b00e      	add	sp, #56	@ 0x38
 800c2ba:	bc80      	pop	{r7}
 800c2bc:	46b8      	mov	r8, r7
 800c2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c0:	20000280 	.word	0x20000280

0800c2c4 <bme280_spi_read>:

/*!
 * SPI read function map to COINES platform
 */
BME280_INTF_RET_TYPE bme280_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	230f      	movs	r3, #15
 800c2d2:	18fb      	adds	r3, r7, r3
 800c2d4:	1c02      	adds	r2, r0, #0
 800c2d6:	701a      	strb	r2, [r3, #0]
    //dev_addr = *(uint8_t*)intf_ptr;

    return 0;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	0018      	movs	r0, r3
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	b004      	add	sp, #16
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <bme280_spi_write>:

/*!
 * SPI write function map to COINES platform
 */
BME280_INTF_RET_TYPE bme280_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	603b      	str	r3, [r7, #0]
 800c2ee:	230f      	movs	r3, #15
 800c2f0:	18fb      	adds	r3, r7, r3
 800c2f2:	1c02      	adds	r2, r0, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
    //dev_addr = *(uint8_t*)intf_ptr;

    return 0;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	b004      	add	sp, #16
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <bme280_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bme280_delay_us(uint32_t period, void *intf_ptr)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
    (void)intf_ptr;
    uint32_t delay = period / 1000; // Convert microseconds to milliseconds
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	22fa      	movs	r2, #250	@ 0xfa
 800c30e:	0091      	lsls	r1, r2, #2
 800c310:	0018      	movs	r0, r3
 800c312:	f7f3 ff15 	bl	8000140 <__udivsi3>
 800c316:	0003      	movs	r3, r0
 800c318:	60fb      	str	r3, [r7, #12]
    HAL_Delay(delay > 0 ? delay : 1); // Minimum delay is 1ms
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <bme280_delay_us+0x24>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	e000      	b.n	800c326 <bme280_delay_us+0x26>
 800c324:	2301      	movs	r3, #1
 800c326:	0018      	movs	r0, r3
 800c328:	f7f8 fffe 	bl	8005328 <HAL_Delay>
}
 800c32c:	46c0      	nop			@ (mov r8, r8)
 800c32e:	46bd      	mov	sp, r7
 800c330:	b004      	add	sp, #16
 800c332:	bd80      	pop	{r7, pc}

0800c334 <bme280_interface_selection>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t bme280_interface_selection(struct bme280_dev *dev, uint8_t intf)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	000a      	movs	r2, r1
 800c33e:	1cfb      	adds	r3, r7, #3
 800c340:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800c342:	230f      	movs	r3, #15
 800c344:	18fb      	adds	r3, r7, r3
 800c346:	2200      	movs	r2, #0
 800c348:	701a      	strb	r2, [r3, #0]
    //struct coines_board_info board_info;

    if (dev != NULL)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d02c      	beq.n	800c3aa <bme280_interface_selection+0x76>

        coines_set_shuttleboard_vdd_vddio_config(0, 0);
        coines_delay_msec(100);*/

        /* Bus configuration : I2C */
        if (intf == BME280_I2C_INTF)
 800c350:	1cfb      	adds	r3, r7, #3
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d110      	bne.n	800c37a <bme280_interface_selection+0x46>
        {
            printf("I2C Interface\n");
 800c358:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c4 <bme280_interface_selection+0x90>)
 800c35a:	0018      	movs	r0, r3
 800c35c:	f001 fc80 	bl	800dc60 <puts>

            dev_addr = BME280_I2C_ADDR_PRIM;
 800c360:	4b19      	ldr	r3, [pc, #100]	@ (800c3c8 <bme280_interface_selection+0x94>)
 800c362:	2276      	movs	r2, #118	@ 0x76
 800c364:	701a      	strb	r2, [r3, #0]
            dev->read = bme280_i2c_read;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a18      	ldr	r2, [pc, #96]	@ (800c3cc <bme280_interface_selection+0x98>)
 800c36a:	60da      	str	r2, [r3, #12]
            dev->write = bme280_i2c_write;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a18      	ldr	r2, [pc, #96]	@ (800c3d0 <bme280_interface_selection+0x9c>)
 800c370:	611a      	str	r2, [r3, #16]
            dev->intf = BME280_I2C_INTF;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	705a      	strb	r2, [r3, #1]
 800c378:	e010      	b.n	800c39c <bme280_interface_selection+0x68>

            /* set the sensor interface as I2C with 100kHz speed */
            //result = coines_config_i2c_bus(COINES_I2C_BUS_0, COINES_I2C_STANDARD_MODE);
        }
        /* Bus configuration : SPI */
        else if (intf == BME280_SPI_INTF)
 800c37a:	1cfb      	adds	r3, r7, #3
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10c      	bne.n	800c39c <bme280_interface_selection+0x68>
        {
            printf("SPI Interface\n");
 800c382:	4b14      	ldr	r3, [pc, #80]	@ (800c3d4 <bme280_interface_selection+0xa0>)
 800c384:	0018      	movs	r0, r3
 800c386:	f001 fc6b 	bl	800dc60 <puts>

           // dev_addr = COINES_SHUTTLE_PIN_7;
            dev->read = bme280_spi_read;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4a12      	ldr	r2, [pc, #72]	@ (800c3d8 <bme280_interface_selection+0xa4>)
 800c38e:	60da      	str	r2, [r3, #12]
            dev->write = bme280_spi_write;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a12      	ldr	r2, [pc, #72]	@ (800c3dc <bme280_interface_selection+0xa8>)
 800c394:	611a      	str	r2, [r3, #16]
            dev->intf = BME280_SPI_INTF;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	705a      	strb	r2, [r3, #1]
        //{
            //rslt = COINES_E_COMM_INIT_FAILED;
        //}

        /* Holds the I2C device addr or SPI chip selection */
        dev->intf_ptr = &dev_addr;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a0a      	ldr	r2, [pc, #40]	@ (800c3c8 <bme280_interface_selection+0x94>)
 800c3a0:	605a      	str	r2, [r3, #4]

        /* Configure delay in microseconds */
        dev->delay_us = bme280_delay_us;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a0e      	ldr	r2, [pc, #56]	@ (800c3e0 <bme280_interface_selection+0xac>)
 800c3a6:	615a      	str	r2, [r3, #20]
 800c3a8:	e003      	b.n	800c3b2 <bme280_interface_selection+0x7e>

        //coines_delay_msec(100);
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800c3aa:	230f      	movs	r3, #15
 800c3ac:	18fb      	adds	r3, r7, r3
 800c3ae:	22ff      	movs	r2, #255	@ 0xff
 800c3b0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800c3b2:	230f      	movs	r3, #15
 800c3b4:	18fb      	adds	r3, r7, r3
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	b25b      	sxtb	r3, r3
}
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	b004      	add	sp, #16
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	46c0      	nop			@ (mov r8, r8)
 800c3c4:	08011e3c 	.word	0x08011e3c
 800c3c8:	20000474 	.word	0x20000474
 800c3cc:	0800c141 	.word	0x0800c141
 800c3d0:	0800c1d5 	.word	0x0800c1d5
 800c3d4:	08011e4c 	.word	0x08011e4c
 800c3d8:	0800c2c5 	.word	0x0800c2c5
 800c3dc:	0800c2e3 	.word	0x0800c2e3
 800c3e0:	0800c301 	.word	0x0800c301

0800c3e4 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af02      	add	r7, sp, #8
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	000a      	movs	r2, r1
 800c3ee:	1cfb      	adds	r3, r7, #3
 800c3f0:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800c3f2:	210c      	movs	r1, #12
 800c3f4:	187b      	adds	r3, r7, r1
 800c3f6:	2280      	movs	r2, #128	@ 0x80
 800c3f8:	701a      	strb	r2, [r3, #0]
 800c3fa:	187b      	adds	r3, r7, r1
 800c3fc:	1cfa      	adds	r2, r7, #3
 800c3fe:	7812      	ldrb	r2, [r2, #0]
 800c400:	705a      	strb	r2, [r3, #1]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800c402:	1879      	adds	r1, r7, r1
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	2300      	movs	r3, #0
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	2202      	movs	r2, #2
 800c40e:	f000 fda7 	bl	800cf60 <sx126x_hal_write>
 800c412:	0003      	movs	r3, r0
}
 800c414:	0018      	movs	r0, r3
 800c416:	46bd      	mov	sp, r7
 800c418:	b004      	add	sp, #16
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	2380      	movs	r3, #128	@ 0x80
 800c42a:	02db      	lsls	r3, r3, #11
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d301      	bcc.n	800c434 <sx126x_set_tx+0x18>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800c430:	2302      	movs	r3, #2
 800c432:	e00c      	b.n	800c44e <sx126x_set_tx+0x32>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	0018      	movs	r0, r3
 800c438:	f000 fbcc 	bl	800cbd4 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800c43c:	0003      	movs	r3, r0
 800c43e:	60fb      	str	r3, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	0011      	movs	r1, r2
 800c446:	0018      	movs	r0, r3
 800c448:	f000 f805 	bl	800c456 <sx126x_set_tx_with_timeout_in_rtc_step>
 800c44c:	0003      	movs	r3, r0
}
 800c44e:	0018      	movs	r0, r3
 800c450:	46bd      	mov	sp, r7
 800c452:	b004      	add	sp, #16
 800c454:	bd80      	pop	{r7, pc}

0800c456 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b086      	sub	sp, #24
 800c45a:	af02      	add	r7, sp, #8
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800c460:	210c      	movs	r1, #12
 800c462:	187b      	adds	r3, r7, r1
 800c464:	2283      	movs	r2, #131	@ 0x83
 800c466:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	0c1b      	lsrs	r3, r3, #16
 800c46c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800c46e:	187b      	adds	r3, r7, r1
 800c470:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	0a1b      	lsrs	r3, r3, #8
 800c476:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800c478:	187b      	adds	r3, r7, r1
 800c47a:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800c480:	187b      	adds	r3, r7, r1
 800c482:	70da      	strb	r2, [r3, #3]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800c484:	1879      	adds	r1, r7, r1
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	2300      	movs	r3, #0
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2300      	movs	r3, #0
 800c48e:	2204      	movs	r2, #4
 800c490:	f000 fd66 	bl	800cf60 <sx126x_hal_write>
 800c494:	0003      	movs	r3, r0
}
 800c496:	0018      	movs	r0, r3
 800c498:	46bd      	mov	sp, r7
 800c49a:	b004      	add	sp, #16
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <sx126x_set_rx>:

sx126x_status_t sx126x_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	2380      	movs	r3, #128	@ 0x80
 800c4ac:	02db      	lsls	r3, r3, #11
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d301      	bcc.n	800c4b6 <sx126x_set_rx+0x18>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	e00c      	b.n	800c4d0 <sx126x_set_rx+0x32>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f000 fb8b 	bl	800cbd4 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800c4be:	0003      	movs	r3, r0
 800c4c0:	60fb      	str	r3, [r7, #12]

    return sx126x_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	0011      	movs	r1, r2
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f000 f805 	bl	800c4d8 <sx126x_set_rx_with_timeout_in_rtc_step>
 800c4ce:	0003      	movs	r3, r0
}
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	b004      	add	sp, #16
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <sx126x_set_rx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 800c4e2:	210c      	movs	r1, #12
 800c4e4:	187b      	adds	r3, r7, r1
 800c4e6:	2282      	movs	r2, #130	@ 0x82
 800c4e8:	701a      	strb	r2, [r3, #0]
        SX126X_SET_RX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	0c1b      	lsrs	r3, r3, #16
 800c4ee:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 800c4f0:	187b      	adds	r3, r7, r1
 800c4f2:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	0a1b      	lsrs	r3, r3, #8
 800c4f8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 800c4fa:	187b      	adds	r3, r7, r1
 800c4fc:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 800c502:	187b      	adds	r3, r7, r1
 800c504:	70da      	strb	r2, [r3, #3]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX, 0, 0 );
 800c506:	1879      	adds	r1, r7, r1
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	2204      	movs	r2, #4
 800c512:	f000 fd25 	bl	800cf60 <sx126x_hal_write>
 800c516:	0003      	movs	r3, r0
}
 800c518:	0018      	movs	r0, r3
 800c51a:	46bd      	mov	sp, r7
 800c51c:	b004      	add	sp, #16
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af02      	add	r7, sp, #8
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	000a      	movs	r2, r1
 800c52a:	1cfb      	adds	r3, r7, #3
 800c52c:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800c52e:	210c      	movs	r1, #12
 800c530:	187b      	adds	r3, r7, r1
 800c532:	2296      	movs	r2, #150	@ 0x96
 800c534:	701a      	strb	r2, [r3, #0]
 800c536:	187b      	adds	r3, r7, r1
 800c538:	1cfa      	adds	r2, r7, #3
 800c53a:	7812      	ldrb	r2, [r2, #0]
 800c53c:	705a      	strb	r2, [r3, #1]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800c53e:	1879      	adds	r1, r7, r1
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	2300      	movs	r3, #0
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	2300      	movs	r3, #0
 800c548:	2202      	movs	r2, #2
 800c54a:	f000 fd09 	bl	800cf60 <sx126x_hal_write>
 800c54e:	0003      	movs	r3, r0
}
 800c550:	0018      	movs	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	b004      	add	sp, #16
 800c556:	bd80      	pop	{r7, pc}

0800c558 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af02      	add	r7, sp, #8
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	000a      	movs	r2, r1
 800c562:	1cfb      	adds	r3, r7, #3
 800c564:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800c566:	210c      	movs	r1, #12
 800c568:	187b      	adds	r3, r7, r1
 800c56a:	2289      	movs	r2, #137	@ 0x89
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	187b      	adds	r3, r7, r1
 800c570:	1cfa      	adds	r2, r7, #3
 800c572:	7812      	ldrb	r2, [r2, #0]
 800c574:	705a      	strb	r2, [r3, #1]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800c576:	1879      	adds	r1, r7, r1
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	2300      	movs	r3, #0
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	2300      	movs	r3, #0
 800c580:	2202      	movs	r2, #2
 800c582:	f000 fced 	bl	800cf60 <sx126x_hal_write>
 800c586:	0003      	movs	r3, r0
}
 800c588:	0018      	movs	r0, r3
 800c58a:	46bd      	mov	sp, r7
 800c58c:	b004      	add	sp, #16
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af02      	add	r7, sp, #8
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800c59a:	2108      	movs	r1, #8
 800c59c:	187b      	adds	r3, r7, r1
 800c59e:	2295      	movs	r2, #149	@ 0x95
 800c5a0:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800c5a6:	187b      	adds	r3, r7, r1
 800c5a8:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	785a      	ldrb	r2, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800c5ae:	187b      	adds	r3, r7, r1
 800c5b0:	709a      	strb	r2, [r3, #2]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800c5b6:	187b      	adds	r3, r7, r1
 800c5b8:	70da      	strb	r2, [r3, #3]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800c5be:	187b      	adds	r3, r7, r1
 800c5c0:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800c5c2:	1879      	adds	r1, r7, r1
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2205      	movs	r2, #5
 800c5ce:	f000 fcc7 	bl	800cf60 <sx126x_hal_write>
 800c5d2:	0003      	movs	r3, r0
}
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	b004      	add	sp, #16
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800c5dc:	b5b0      	push	{r4, r5, r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af02      	add	r7, sp, #8
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	0008      	movs	r0, r1
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	0019      	movs	r1, r3
 800c5ea:	240a      	movs	r4, #10
 800c5ec:	193b      	adds	r3, r7, r4
 800c5ee:	1c02      	adds	r2, r0, #0
 800c5f0:	801a      	strh	r2, [r3, #0]
 800c5f2:	2509      	movs	r5, #9
 800c5f4:	197b      	adds	r3, r7, r5
 800c5f6:	1c0a      	adds	r2, r1, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800c5fa:	2114      	movs	r1, #20
 800c5fc:	187b      	adds	r3, r7, r1
 800c5fe:	220d      	movs	r2, #13
 800c600:	701a      	strb	r2, [r3, #0]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800c602:	0020      	movs	r0, r4
 800c604:	183b      	adds	r3, r7, r0
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	0a1b      	lsrs	r3, r3, #8
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800c60e:	187b      	adds	r3, r7, r1
 800c610:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 800c612:	183b      	adds	r3, r7, r0
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800c618:	187b      	adds	r3, r7, r1
 800c61a:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800c61c:	197b      	adds	r3, r7, r5
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	b29b      	uxth	r3, r3
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	1879      	adds	r1, r7, r1
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	0013      	movs	r3, r2
 800c62c:	2203      	movs	r2, #3
 800c62e:	f000 fc97 	bl	800cf60 <sx126x_hal_write>
 800c632:	0003      	movs	r3, r0
}
 800c634:	0018      	movs	r0, r3
 800c636:	46bd      	mov	sp, r7
 800c638:	b006      	add	sp, #24
 800c63a:	bdb0      	pop	{r4, r5, r7, pc}

0800c63c <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800c63c:	b5b0      	push	{r4, r5, r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af02      	add	r7, sp, #8
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	0008      	movs	r0, r1
 800c646:	607a      	str	r2, [r7, #4]
 800c648:	0019      	movs	r1, r3
 800c64a:	240a      	movs	r4, #10
 800c64c:	193b      	adds	r3, r7, r4
 800c64e:	1c02      	adds	r2, r0, #0
 800c650:	801a      	strh	r2, [r3, #0]
 800c652:	2509      	movs	r5, #9
 800c654:	197b      	adds	r3, r7, r5
 800c656:	1c0a      	adds	r2, r1, #0
 800c658:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800c65a:	2114      	movs	r1, #20
 800c65c:	187b      	adds	r3, r7, r1
 800c65e:	221d      	movs	r2, #29
 800c660:	701a      	strb	r2, [r3, #0]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800c662:	0020      	movs	r0, r4
 800c664:	183b      	adds	r3, r7, r0
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	0a1b      	lsrs	r3, r3, #8
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800c66e:	187b      	adds	r3, r7, r1
 800c670:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 800c672:	183b      	adds	r3, r7, r0
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800c678:	187b      	adds	r3, r7, r1
 800c67a:	709a      	strb	r2, [r3, #2]
 800c67c:	187b      	adds	r3, r7, r1
 800c67e:	2200      	movs	r2, #0
 800c680:	70da      	strb	r2, [r3, #3]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800c682:	197b      	adds	r3, r7, r5
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	b29b      	uxth	r3, r3
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	1879      	adds	r1, r7, r1
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	0013      	movs	r3, r2
 800c692:	2204      	movs	r2, #4
 800c694:	f000 fcbc 	bl	800d010 <sx126x_hal_read>
 800c698:	0003      	movs	r3, r0
}
 800c69a:	0018      	movs	r0, r3
 800c69c:	46bd      	mov	sp, r7
 800c69e:	b006      	add	sp, #24
 800c6a0:	bdb0      	pop	{r4, r5, r7, pc}

0800c6a2 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800c6a2:	b590      	push	{r4, r7, lr}
 800c6a4:	b089      	sub	sp, #36	@ 0x24
 800c6a6:	af02      	add	r7, sp, #8
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	0008      	movs	r0, r1
 800c6ac:	607a      	str	r2, [r7, #4]
 800c6ae:	0019      	movs	r1, r3
 800c6b0:	240b      	movs	r4, #11
 800c6b2:	193b      	adds	r3, r7, r4
 800c6b4:	1c02      	adds	r2, r0, #0
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	200a      	movs	r0, #10
 800c6ba:	183b      	adds	r3, r7, r0
 800c6bc:	1c0a      	adds	r2, r1, #0
 800c6be:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800c6c0:	2114      	movs	r1, #20
 800c6c2:	187b      	adds	r3, r7, r1
 800c6c4:	220e      	movs	r2, #14
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	187b      	adds	r3, r7, r1
 800c6ca:	193a      	adds	r2, r7, r4
 800c6cc:	7812      	ldrb	r2, [r2, #0]
 800c6ce:	705a      	strb	r2, [r3, #1]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800c6d0:	183b      	adds	r3, r7, r0
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	1879      	adds	r1, r7, r1
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	0013      	movs	r3, r2
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f000 fc3d 	bl	800cf60 <sx126x_hal_write>
 800c6e6:	0003      	movs	r3, r0
}
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	b007      	add	sp, #28
 800c6ee:	bd90      	pop	{r4, r7, pc}

0800c6f0 <sx126x_read_buffer>:

sx126x_status_t sx126x_read_buffer( const void* context, const uint8_t offset, uint8_t* buffer, const uint8_t size )
{
 800c6f0:	b590      	push	{r4, r7, lr}
 800c6f2:	b089      	sub	sp, #36	@ 0x24
 800c6f4:	af02      	add	r7, sp, #8
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	0008      	movs	r0, r1
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	0019      	movs	r1, r3
 800c6fe:	240b      	movs	r4, #11
 800c700:	193b      	adds	r3, r7, r4
 800c702:	1c02      	adds	r2, r0, #0
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	200a      	movs	r0, #10
 800c708:	183b      	adds	r3, r7, r0
 800c70a:	1c0a      	adds	r2, r1, #0
 800c70c:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_READ_BUFFER] = {
 800c70e:	2114      	movs	r1, #20
 800c710:	187b      	adds	r3, r7, r1
 800c712:	221e      	movs	r2, #30
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	187b      	adds	r3, r7, r1
 800c718:	193a      	adds	r2, r7, r4
 800c71a:	7812      	ldrb	r2, [r2, #0]
 800c71c:	705a      	strb	r2, [r3, #1]
 800c71e:	187b      	adds	r3, r7, r1
 800c720:	2200      	movs	r2, #0
 800c722:	709a      	strb	r2, [r3, #2]
        SX126X_READ_BUFFER,
        offset,
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_BUFFER, buffer, size );
 800c724:	183b      	adds	r3, r7, r0
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	1879      	adds	r1, r7, r1
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	0013      	movs	r3, r2
 800c734:	2203      	movs	r2, #3
 800c736:	f000 fc6b 	bl	800d010 <sx126x_hal_read>
 800c73a:	0003      	movs	r3, r0
}
 800c73c:	0018      	movs	r0, r3
 800c73e:	46bd      	mov	sp, r7
 800c740:	b007      	add	sp, #28
 800c742:	bd90      	pop	{r4, r7, pc}

0800c744 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800c744:	b5b0      	push	{r4, r5, r7, lr}
 800c746:	b08a      	sub	sp, #40	@ 0x28
 800c748:	af02      	add	r7, sp, #8
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	000c      	movs	r4, r1
 800c74e:	0010      	movs	r0, r2
 800c750:	0019      	movs	r1, r3
 800c752:	250a      	movs	r5, #10
 800c754:	197b      	adds	r3, r7, r5
 800c756:	1c22      	adds	r2, r4, #0
 800c758:	801a      	strh	r2, [r3, #0]
 800c75a:	2408      	movs	r4, #8
 800c75c:	193b      	adds	r3, r7, r4
 800c75e:	1c02      	adds	r2, r0, #0
 800c760:	801a      	strh	r2, [r3, #0]
 800c762:	1dbb      	adds	r3, r7, #6
 800c764:	1c0a      	adds	r2, r1, #0
 800c766:	801a      	strh	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c768:	2114      	movs	r1, #20
 800c76a:	187b      	adds	r3, r7, r1
 800c76c:	2208      	movs	r2, #8
 800c76e:	701a      	strb	r2, [r3, #0]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800c770:	197b      	adds	r3, r7, r5
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	0a1b      	lsrs	r3, r3, #8
 800c776:	b29b      	uxth	r3, r3
 800c778:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c77a:	187b      	adds	r3, r7, r1
 800c77c:	705a      	strb	r2, [r3, #1]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800c77e:	197b      	adds	r3, r7, r5
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c784:	187b      	adds	r3, r7, r1
 800c786:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800c788:	193b      	adds	r3, r7, r4
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	0a1b      	lsrs	r3, r3, #8
 800c78e:	b29b      	uxth	r3, r3
 800c790:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c792:	187b      	adds	r3, r7, r1
 800c794:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800c796:	193b      	adds	r3, r7, r4
 800c798:	881b      	ldrh	r3, [r3, #0]
 800c79a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c79c:	187b      	adds	r3, r7, r1
 800c79e:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800c7a0:	1dbb      	adds	r3, r7, #6
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	0a1b      	lsrs	r3, r3, #8
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c7aa:	187b      	adds	r3, r7, r1
 800c7ac:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800c7ae:	1dbb      	adds	r3, r7, #6
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c7b4:	187b      	adds	r3, r7, r1
 800c7b6:	719a      	strb	r2, [r3, #6]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800c7b8:	2030      	movs	r0, #48	@ 0x30
 800c7ba:	183b      	adds	r3, r7, r0
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	0a1b      	lsrs	r3, r3, #8
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c7c4:	187b      	adds	r3, r7, r1
 800c7c6:	71da      	strb	r2, [r3, #7]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800c7c8:	183b      	adds	r3, r7, r0
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800c7ce:	187b      	adds	r3, r7, r1
 800c7d0:	721a      	strb	r2, [r3, #8]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800c7d2:	1879      	adds	r1, r7, r1
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	2209      	movs	r2, #9
 800c7de:	f000 fbbf 	bl	800cf60 <sx126x_hal_write>
 800c7e2:	0003      	movs	r3, r0
}
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	b008      	add	sp, #32
 800c7ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c7ec <sx126x_clear_irq_status>:

    return status;
}

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	000a      	movs	r2, r1
 800c7f6:	1cbb      	adds	r3, r7, #2
 800c7f8:	801a      	strh	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 800c7fa:	210c      	movs	r1, #12
 800c7fc:	187b      	adds	r3, r7, r1
 800c7fe:	2202      	movs	r2, #2
 800c800:	701a      	strb	r2, [r3, #0]
        SX126X_CLR_IRQ_STATUS,
        ( uint8_t )( irq_mask >> 8 ),
 800c802:	1cbb      	adds	r3, r7, #2
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	0a1b      	lsrs	r3, r3, #8
 800c808:	b29b      	uxth	r3, r3
 800c80a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 800c80c:	187b      	adds	r3, r7, r1
 800c80e:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( irq_mask >> 0 ),
 800c810:	1cbb      	adds	r3, r7, #2
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 800c816:	187b      	adds	r3, r7, r1
 800c818:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800c81a:	1879      	adds	r1, r7, r1
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	2300      	movs	r3, #0
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	2300      	movs	r3, #0
 800c824:	2203      	movs	r2, #3
 800c826:	f000 fb9b 	bl	800cf60 <sx126x_hal_write>
 800c82a:	0003      	movs	r3, r0
}
 800c82c:	0018      	movs	r0, r3
 800c82e:	46bd      	mov	sp, r7
 800c830:	b004      	add	sp, #16
 800c832:	bd80      	pop	{r7, pc}

0800c834 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	0018      	movs	r0, r3
 800c842:	f000 f99b 	bl	800cb7c <sx126x_convert_freq_in_hz_to_pll_step>
 800c846:	0003      	movs	r3, r0
 800c848:	60fb      	str	r3, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	0011      	movs	r1, r2
 800c850:	0018      	movs	r0, r3
 800c852:	f000 f805 	bl	800c860 <sx126x_set_rf_freq_in_pll_steps>
 800c856:	0003      	movs	r3, r0
}
 800c858:	0018      	movs	r0, r3
 800c85a:	46bd      	mov	sp, r7
 800c85c:	b004      	add	sp, #16
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af02      	add	r7, sp, #8
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800c86a:	2108      	movs	r1, #8
 800c86c:	187b      	adds	r3, r7, r1
 800c86e:	2286      	movs	r2, #134	@ 0x86
 800c870:	701a      	strb	r2, [r3, #0]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	0e1b      	lsrs	r3, r3, #24
 800c876:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800c878:	187b      	adds	r3, r7, r1
 800c87a:	705a      	strb	r2, [r3, #1]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	0c1b      	lsrs	r3, r3, #16
 800c880:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800c882:	187b      	adds	r3, r7, r1
 800c884:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	0a1b      	lsrs	r3, r3, #8
 800c88a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800c88c:	187b      	adds	r3, r7, r1
 800c88e:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800c894:	187b      	adds	r3, r7, r1
 800c896:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800c898:	1879      	adds	r1, r7, r1
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	2300      	movs	r3, #0
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2205      	movs	r2, #5
 800c8a4:	f000 fb5c 	bl	800cf60 <sx126x_hal_write>
 800c8a8:	0003      	movs	r3, r0
}
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	b004      	add	sp, #16
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b086      	sub	sp, #24
 800c8b6:	af02      	add	r7, sp, #8
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	000a      	movs	r2, r1
 800c8bc:	1cfb      	adds	r3, r7, #3
 800c8be:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800c8c0:	210c      	movs	r1, #12
 800c8c2:	187b      	adds	r3, r7, r1
 800c8c4:	228a      	movs	r2, #138	@ 0x8a
 800c8c6:	701a      	strb	r2, [r3, #0]
 800c8c8:	187b      	adds	r3, r7, r1
 800c8ca:	1cfa      	adds	r2, r7, #3
 800c8cc:	7812      	ldrb	r2, [r2, #0]
 800c8ce:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800c8d0:	1879      	adds	r1, r7, r1
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	2300      	movs	r3, #0
 800c8da:	2202      	movs	r2, #2
 800c8dc:	f000 fb40 	bl	800cf60 <sx126x_hal_write>
 800c8e0:	0003      	movs	r3, r0
}
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	b004      	add	sp, #16
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af02      	add	r7, sp, #8
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	0008      	movs	r0, r1
 800c8f4:	0011      	movs	r1, r2
 800c8f6:	1cfb      	adds	r3, r7, #3
 800c8f8:	1c02      	adds	r2, r0, #0
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	1cbb      	adds	r3, r7, #2
 800c8fe:	1c0a      	adds	r2, r1, #0
 800c900:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800c902:	210c      	movs	r1, #12
 800c904:	187b      	adds	r3, r7, r1
 800c906:	228e      	movs	r2, #142	@ 0x8e
 800c908:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800c90a:	1cfb      	adds	r3, r7, #3
 800c90c:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800c90e:	187b      	adds	r3, r7, r1
 800c910:	705a      	strb	r2, [r3, #1]
 800c912:	187b      	adds	r3, r7, r1
 800c914:	1cba      	adds	r2, r7, #2
 800c916:	7812      	ldrb	r2, [r2, #0]
 800c918:	709a      	strb	r2, [r3, #2]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800c91a:	1879      	adds	r1, r7, r1
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	2300      	movs	r3, #0
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	2300      	movs	r3, #0
 800c924:	2203      	movs	r2, #3
 800c926:	f000 fb1b 	bl	800cf60 <sx126x_hal_write>
 800c92a:	0003      	movs	r3, r0
}
 800c92c:	0018      	movs	r0, r3
 800c92e:	46bd      	mov	sp, r7
 800c930:	b004      	add	sp, #16
 800c932:	bd80      	pop	{r7, pc}

0800c934 <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800c934:	b5b0      	push	{r4, r5, r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af02      	add	r7, sp, #8
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800c93e:	2108      	movs	r1, #8
 800c940:	187b      	adds	r3, r7, r1
 800c942:	228b      	movs	r2, #139	@ 0x8b
 800c944:	701a      	strb	r2, [r3, #0]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800c94a:	187b      	adds	r3, r7, r1
 800c94c:	705a      	strb	r2, [r3, #1]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	785a      	ldrb	r2, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800c952:	187b      	adds	r3, r7, r1
 800c954:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800c95a:	187b      	adds	r3, r7, r1
 800c95c:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	78db      	ldrb	r3, [r3, #3]
 800c962:	2201      	movs	r2, #1
 800c964:	4013      	ands	r3, r2
 800c966:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800c968:	187b      	adds	r3, r7, r1
 800c96a:	711a      	strb	r2, [r3, #4]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800c96c:	250f      	movs	r5, #15
 800c96e:	197c      	adds	r4, r7, r5
 800c970:	1879      	adds	r1, r7, r1
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	2300      	movs	r3, #0
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	2300      	movs	r3, #0
 800c97a:	2205      	movs	r2, #5
 800c97c:	f000 faf0 	bl	800cf60 <sx126x_hal_write>
 800c980:	0003      	movs	r3, r0
 800c982:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800c984:	197b      	adds	r3, r7, r5
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d109      	bne.n	800c9a0 <sx126x_set_lora_mod_params+0x6c>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	785a      	ldrb	r2, [r3, #1]
 800c990:	197c      	adds	r4, r7, r5
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2101      	movs	r1, #1
 800c996:	0018      	movs	r0, r3
 800c998:	f000 fa70 	bl	800ce7c <sx126x_tx_modulation_workaround>
 800c99c:	0003      	movs	r3, r0
 800c99e:	7023      	strb	r3, [r4, #0]
        // WORKAROUND END
    }

    return status;
 800c9a0:	230f      	movs	r3, #15
 800c9a2:	18fb      	adds	r3, r7, r3
 800c9a4:	781b      	ldrb	r3, [r3, #0]
}
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	b004      	add	sp, #16
 800c9ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c9b0 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800c9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9b2:	b089      	sub	sp, #36	@ 0x24
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800c9ba:	2110      	movs	r1, #16
 800c9bc:	187b      	adds	r3, r7, r1
 800c9be:	228c      	movs	r2, #140	@ 0x8c
 800c9c0:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	0a1b      	lsrs	r3, r3, #8
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800c9cc:	187b      	adds	r3, r7, r1
 800c9ce:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800c9d6:	187b      	adds	r3, r7, r1
 800c9d8:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->header_type ),
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800c9de:	187b      	adds	r3, r7, r1
 800c9e0:	70da      	strb	r2, [r3, #3]
        params->pld_len_in_bytes,
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800c9e6:	187b      	adds	r3, r7, r1
 800c9e8:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <sx126x_set_lora_pkt_params+0x46>
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	e000      	b.n	800c9f8 <sx126x_set_lora_pkt_params+0x48>
 800c9f6:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	18fb      	adds	r3, r7, r3
 800c9fc:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	795b      	ldrb	r3, [r3, #5]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <sx126x_set_lora_pkt_params+0x5a>
 800ca06:	2201      	movs	r2, #1
 800ca08:	e000      	b.n	800ca0c <sx126x_set_lora_pkt_params+0x5c>
 800ca0a:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800ca0c:	2110      	movs	r1, #16
 800ca0e:	187b      	adds	r3, r7, r1
 800ca10:	719a      	strb	r2, [r3, #6]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800ca12:	2517      	movs	r5, #23
 800ca14:	197c      	adds	r4, r7, r5
 800ca16:	1879      	adds	r1, r7, r1
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2207      	movs	r2, #7
 800ca22:	f000 fa9d 	bl	800cf60 <sx126x_hal_write>
 800ca26:	0003      	movs	r3, r0
 800ca28:	7023      	strb	r3, [r4, #0]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800ca2a:	197b      	adds	r3, r7, r5
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d12f      	bne.n	800ca92 <sx126x_set_lora_pkt_params+0xe2>
    {
        uint8_t reg_value = 0;
 800ca32:	260f      	movs	r6, #15
 800ca34:	19bb      	adds	r3, r7, r6
 800ca36:	2200      	movs	r2, #0
 800ca38:	701a      	strb	r2, [r3, #0]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800ca3a:	197c      	adds	r4, r7, r5
 800ca3c:	19ba      	adds	r2, r7, r6
 800ca3e:	4918      	ldr	r1, [pc, #96]	@ (800caa0 <sx126x_set_lora_pkt_params+0xf0>)
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	2301      	movs	r3, #1
 800ca44:	f7ff fdfa 	bl	800c63c <sx126x_read_register>
 800ca48:	0003      	movs	r3, r0
 800ca4a:	7023      	strb	r3, [r4, #0]
        if( status == SX126X_STATUS_OK )
 800ca4c:	197b      	adds	r3, r7, r5
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d11e      	bne.n	800ca92 <sx126x_set_lora_pkt_params+0xe2>
        {
            if( params->invert_iq_is_on == true )
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	795b      	ldrb	r3, [r3, #5]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d007      	beq.n	800ca6c <sx126x_set_lora_pkt_params+0xbc>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800ca5c:	19bb      	adds	r3, r7, r6
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2204      	movs	r2, #4
 800ca62:	4393      	bics	r3, r2
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	19bb      	adds	r3, r7, r6
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	e007      	b.n	800ca7c <sx126x_set_lora_pkt_params+0xcc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800ca6c:	210f      	movs	r1, #15
 800ca6e:	187b      	adds	r3, r7, r1
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2204      	movs	r2, #4
 800ca74:	4313      	orrs	r3, r2
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	187b      	adds	r3, r7, r1
 800ca7a:	701a      	strb	r2, [r3, #0]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800ca7c:	2317      	movs	r3, #23
 800ca7e:	18fc      	adds	r4, r7, r3
 800ca80:	230f      	movs	r3, #15
 800ca82:	18fa      	adds	r2, r7, r3
 800ca84:	4906      	ldr	r1, [pc, #24]	@ (800caa0 <sx126x_set_lora_pkt_params+0xf0>)
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	2301      	movs	r3, #1
 800ca8a:	f7ff fda7 	bl	800c5dc <sx126x_write_register>
 800ca8e:	0003      	movs	r3, r0
 800ca90:	7023      	strb	r3, [r4, #0]
        }
    }
    // WORKAROUND END

    return status;
 800ca92:	2317      	movs	r3, #23
 800ca94:	18fb      	adds	r3, r7, r3
 800ca96:	781b      	ldrb	r3, [r3, #0]
}
 800ca98:	0018      	movs	r0, r3
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	b007      	add	sp, #28
 800ca9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa0:	00000736 	.word	0x00000736

0800caa4 <sx126x_get_rx_buffer_status>:

    return status;
}

sx126x_status_t sx126x_get_rx_buffer_status( const void* context, sx126x_rx_buffer_status_t* rx_buffer_status )
{
 800caa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af02      	add	r7, sp, #8
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_RX_BUFFER_STATUS] = {
 800caae:	210c      	movs	r1, #12
 800cab0:	187b      	adds	r3, r7, r1
 800cab2:	2213      	movs	r2, #19
 800cab4:	801a      	strh	r2, [r3, #0]
        SX126X_GET_RX_BUFFER_STATUS,
        SX126X_NOP,
    };
    uint8_t status_local[sizeof( sx126x_rx_buffer_status_t )] = { 0x00 };
 800cab6:	2508      	movs	r5, #8
 800cab8:	197b      	adds	r3, r7, r5
 800caba:	2200      	movs	r2, #0
 800cabc:	801a      	strh	r2, [r3, #0]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read(
 800cabe:	260f      	movs	r6, #15
 800cac0:	19bc      	adds	r4, r7, r6
 800cac2:	197b      	adds	r3, r7, r5
 800cac4:	1879      	adds	r1, r7, r1
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	2202      	movs	r2, #2
 800caca:	9200      	str	r2, [sp, #0]
 800cacc:	2202      	movs	r2, #2
 800cace:	f000 fa9f 	bl	800d010 <sx126x_hal_read>
 800cad2:	0003      	movs	r3, r0
 800cad4:	7023      	strb	r3, [r4, #0]
        context, buf, SX126X_SIZE_GET_RX_BUFFER_STATUS, status_local, sizeof( sx126x_rx_buffer_status_t ) );

    if( status == SX126X_STATUS_OK )
 800cad6:	19bb      	adds	r3, r7, r6
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d107      	bne.n	800caee <sx126x_get_rx_buffer_status+0x4a>
    {
        rx_buffer_status->pld_len_in_bytes     = status_local[0];
 800cade:	197b      	adds	r3, r7, r5
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = status_local[1];
 800cae6:	197b      	adds	r3, r7, r5
 800cae8:	785a      	ldrb	r2, [r3, #1]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	705a      	strb	r2, [r3, #1]
    }

    return status;
 800caee:	230f      	movs	r3, #15
 800caf0:	18fb      	adds	r3, r7, r3
 800caf2:	781b      	ldrb	r3, [r3, #0]
}
 800caf4:	0018      	movs	r0, r3
 800caf6:	46bd      	mov	sp, r7
 800caf8:	b005      	add	sp, #20
 800cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cafc <sx126x_get_lora_pkt_status>:

    return status;
}

sx126x_status_t sx126x_get_lora_pkt_status( const void* context, sx126x_pkt_status_lora_t* pkt_status )
{
 800cafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af02      	add	r7, sp, #8
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_PKT_STATUS] = {
 800cb06:	200c      	movs	r0, #12
 800cb08:	183b      	adds	r3, r7, r0
 800cb0a:	2214      	movs	r2, #20
 800cb0c:	801a      	strh	r2, [r3, #0]
        SX126X_GET_PKT_STATUS,
        SX126X_NOP,
    };
    uint8_t pkt_status_local[sizeof( sx126x_pkt_status_lora_t )] = { 0x00 };
 800cb0e:	2508      	movs	r5, #8
 800cb10:	197b      	adds	r3, r7, r5
 800cb12:	4a19      	ldr	r2, [pc, #100]	@ (800cb78 <sx126x_get_lora_pkt_status+0x7c>)
 800cb14:	8812      	ldrh	r2, [r2, #0]
 800cb16:	801a      	strh	r2, [r3, #0]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	5499      	strb	r1, [r3, r2]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read(
 800cb1e:	260f      	movs	r6, #15
 800cb20:	19bc      	adds	r4, r7, r6
 800cb22:	197b      	adds	r3, r7, r5
 800cb24:	1839      	adds	r1, r7, r0
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	2203      	movs	r2, #3
 800cb2a:	9200      	str	r2, [sp, #0]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	f000 fa6f 	bl	800d010 <sx126x_hal_read>
 800cb32:	0003      	movs	r3, r0
 800cb34:	7023      	strb	r3, [r4, #0]
        context, buf, SX126X_SIZE_GET_PKT_STATUS, pkt_status_local, sizeof( sx126x_pkt_status_lora_t ) );

    if( status == SX126X_STATUS_OK )
 800cb36:	19bb      	adds	r3, r7, r6
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d115      	bne.n	800cb6a <sx126x_get_lora_pkt_status+0x6e>
    {
        pkt_status->rssi_pkt_in_dbm        = ( int8_t )( -pkt_status_local[0] >> 1 );
 800cb3e:	197b      	adds	r3, r7, r5
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	425b      	negs	r3, r3
 800cb44:	105b      	asrs	r3, r3, #1
 800cb46:	b25a      	sxtb	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	701a      	strb	r2, [r3, #0]
        pkt_status->snr_pkt_in_db          = ( ( ( int8_t ) pkt_status_local[1] ) + 2 ) >> 2;
 800cb4c:	197b      	adds	r3, r7, r5
 800cb4e:	785b      	ldrb	r3, [r3, #1]
 800cb50:	b25b      	sxtb	r3, r3
 800cb52:	3302      	adds	r3, #2
 800cb54:	109b      	asrs	r3, r3, #2
 800cb56:	b25a      	sxtb	r2, r3
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	705a      	strb	r2, [r3, #1]
        pkt_status->signal_rssi_pkt_in_dbm = ( int8_t )( -pkt_status_local[2] >> 1 );
 800cb5c:	197b      	adds	r3, r7, r5
 800cb5e:	789b      	ldrb	r3, [r3, #2]
 800cb60:	425b      	negs	r3, r3
 800cb62:	105b      	asrs	r3, r3, #1
 800cb64:	b25a      	sxtb	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	709a      	strb	r2, [r3, #2]
    }

    return status;
 800cb6a:	230f      	movs	r3, #15
 800cb6c:	18fb      	adds	r3, r7, r3
 800cb6e:	781b      	ldrb	r3, [r3, #0]
}
 800cb70:	0018      	movs	r0, r3
 800cb72:	46bd      	mov	sp, r7
 800cb74:	b005      	add	sp, #20
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb78:	08011e70 	.word	0x08011e70

0800cb7c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800cb7c:	b590      	push	{r4, r7, lr}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4911      	ldr	r1, [pc, #68]	@ (800cbcc <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 800cb88:	0018      	movs	r0, r3
 800cb8a:	f7f3 fad9 	bl	8000140 <__udivsi3>
 800cb8e:	0003      	movs	r3, r0
 800cb90:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800cb92:	68f9      	ldr	r1, [r7, #12]
 800cb94:	000b      	movs	r3, r1
 800cb96:	015b      	lsls	r3, r3, #5
 800cb98:	1a5b      	subs	r3, r3, r1
 800cb9a:	019a      	lsls	r2, r3, #6
 800cb9c:	1ad2      	subs	r2, r2, r3
 800cb9e:	00d2      	lsls	r2, r2, #3
 800cba0:	1853      	adds	r3, r2, r1
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	039c      	lsls	r4, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	039b      	lsls	r3, r3, #14
 800cbb0:	4a07      	ldr	r2, [pc, #28]	@ (800cbd0 <sx126x_convert_freq_in_hz_to_pll_step+0x54>)
 800cbb2:	4694      	mov	ip, r2
 800cbb4:	4463      	add	r3, ip
 800cbb6:	4905      	ldr	r1, [pc, #20]	@ (800cbcc <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 800cbb8:	0018      	movs	r0, r3
 800cbba:	f7f3 fac1 	bl	8000140 <__udivsi3>
 800cbbe:	0003      	movs	r3, r0
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800cbc0:	18e3      	adds	r3, r4, r3
             SX126X_PLL_STEP_SCALED );
}
 800cbc2:	0018      	movs	r0, r3
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	b005      	add	sp, #20
 800cbc8:	bd90      	pop	{r4, r7, pc}
 800cbca:	46c0      	nop			@ (mov r8, r8)
 800cbcc:	00003d09 	.word	0x00003d09
 800cbd0:	00001e84 	.word	0x00001e84

0800cbd4 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	019b      	lsls	r3, r3, #6
}
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	b002      	add	sp, #8
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <sx126x_cfg_rx_boosted>:
//
// Registers access
//

sx126x_status_t sx126x_cfg_rx_boosted( const void* context, const bool state )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	000a      	movs	r2, r1
 800cbf2:	1cfb      	adds	r3, r7, #3
 800cbf4:	701a      	strb	r2, [r3, #0]
    if( state == true )
 800cbf6:	1cfb      	adds	r3, r7, #3
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00b      	beq.n	800cc16 <sx126x_cfg_rx_boosted+0x2e>
    {
        return sx126x_write_register( context, SX126X_REG_RXGAIN, ( const uint8_t[] ){ 0x96 }, 1 );
 800cbfe:	210c      	movs	r1, #12
 800cc00:	187b      	adds	r3, r7, r1
 800cc02:	2296      	movs	r2, #150	@ 0x96
 800cc04:	701a      	strb	r2, [r3, #0]
 800cc06:	187a      	adds	r2, r7, r1
 800cc08:	490a      	ldr	r1, [pc, #40]	@ (800cc34 <sx126x_cfg_rx_boosted+0x4c>)
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	f7ff fce5 	bl	800c5dc <sx126x_write_register>
 800cc12:	0003      	movs	r3, r0
 800cc14:	e00a      	b.n	800cc2c <sx126x_cfg_rx_boosted+0x44>
    }
    else
    {
        return sx126x_write_register( context, SX126X_REG_RXGAIN, ( const uint8_t[] ){ 0x94 }, 1 );
 800cc16:	2108      	movs	r1, #8
 800cc18:	187b      	adds	r3, r7, r1
 800cc1a:	2294      	movs	r2, #148	@ 0x94
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	187a      	adds	r2, r7, r1
 800cc20:	4904      	ldr	r1, [pc, #16]	@ (800cc34 <sx126x_cfg_rx_boosted+0x4c>)
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	2301      	movs	r3, #1
 800cc26:	f7ff fcd9 	bl	800c5dc <sx126x_write_register>
 800cc2a:	0003      	movs	r3, r0
    }
}
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	b004      	add	sp, #16
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	000008ac 	.word	0x000008ac

0800cc38 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	000a      	movs	r2, r1
 800cc42:	1cfb      	adds	r3, r7, #3
 800cc44:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2] = { 0x00 };
 800cc46:	250c      	movs	r5, #12
 800cc48:	197b      	adds	r3, r7, r5
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	801a      	strh	r2, [r3, #0]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800cc4e:	260f      	movs	r6, #15
 800cc50:	19bc      	adds	r4, r7, r6
 800cc52:	197a      	adds	r2, r7, r5
 800cc54:	23e8      	movs	r3, #232	@ 0xe8
 800cc56:	00d9      	lsls	r1, r3, #3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	f7ff fcee 	bl	800c63c <sx126x_read_register>
 800cc60:	0003      	movs	r3, r0
 800cc62:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800cc64:	0034      	movs	r4, r6
 800cc66:	193b      	adds	r3, r7, r4
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d128      	bne.n	800ccc0 <sx126x_set_lora_sync_word+0x88>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800cc6e:	0028      	movs	r0, r5
 800cc70:	183b      	adds	r3, r7, r0
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	b25b      	sxtb	r3, r3
 800cc76:	220f      	movs	r2, #15
 800cc78:	4013      	ands	r3, r2
 800cc7a:	b25a      	sxtb	r2, r3
 800cc7c:	1cfb      	adds	r3, r7, #3
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	b25b      	sxtb	r3, r3
 800cc82:	210f      	movs	r1, #15
 800cc84:	438b      	bics	r3, r1
 800cc86:	b25b      	sxtb	r3, r3
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	b25b      	sxtb	r3, r3
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	183b      	adds	r3, r7, r0
 800cc90:	701a      	strb	r2, [r3, #0]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800cc92:	183b      	adds	r3, r7, r0
 800cc94:	785b      	ldrb	r3, [r3, #1]
 800cc96:	220f      	movs	r2, #15
 800cc98:	4013      	ands	r3, r2
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	1cfb      	adds	r3, r7, #3
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	011b      	lsls	r3, r3, #4
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	18d3      	adds	r3, r2, r3
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	183b      	adds	r3, r7, r0
 800ccaa:	705a      	strb	r2, [r3, #1]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800ccac:	193c      	adds	r4, r7, r4
 800ccae:	183a      	adds	r2, r7, r0
 800ccb0:	23e8      	movs	r3, #232	@ 0xe8
 800ccb2:	00d9      	lsls	r1, r3, #3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	f7ff fc90 	bl	800c5dc <sx126x_write_register>
 800ccbc:	0003      	movs	r3, r0
 800ccbe:	7023      	strb	r3, [r4, #0]
    }

    return status;
 800ccc0:	230f      	movs	r3, #15
 800ccc2:	18fb      	adds	r3, r7, r3
 800ccc4:	781b      	ldrb	r3, [r3, #0]
}
 800ccc6:	0018      	movs	r0, r3
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	b005      	add	sp, #20
 800cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ccd0 <sx126x_add_registers_to_retention_list>:
    return ( sx126x_status_t ) sx126x_write_register( context, SX126X_REG_XTATRIM, trimming_capacitor_values, 2 );
}

sx126x_status_t sx126x_add_registers_to_retention_list( const void* context, const uint16_t* register_addr,
                                                        uint8_t register_nb )
{
 800ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccd2:	b08b      	sub	sp, #44	@ 0x2c
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	1dfb      	adds	r3, r7, #7
 800ccdc:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[9] = {0};
 800ccde:	2510      	movs	r5, #16
 800cce0:	197b      	adds	r3, r7, r5
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	3304      	adds	r3, #4
 800cce8:	2205      	movs	r2, #5
 800ccea:	2100      	movs	r1, #0
 800ccec:	0018      	movs	r0, r3
 800ccee:	f001 f90b 	bl	800df08 <memset>

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800ccf2:	2627      	movs	r6, #39	@ 0x27
 800ccf4:	19bc      	adds	r4, r7, r6
 800ccf6:	197a      	adds	r2, r7, r5
 800ccf8:	4953      	ldr	r1, [pc, #332]	@ (800ce48 <sx126x_add_registers_to_retention_list+0x178>)
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	2309      	movs	r3, #9
 800ccfe:	f7ff fc9d 	bl	800c63c <sx126x_read_register>
 800cd02:	0003      	movs	r3, r0
 800cd04:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800cd06:	19bb      	adds	r3, r7, r6
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d000      	beq.n	800cd10 <sx126x_add_registers_to_retention_list+0x40>
 800cd0e:	e094      	b.n	800ce3a <sx126x_add_registers_to_retention_list+0x16a>
    {
        const uint8_t initial_nb_of_registers = buffer[0];
 800cd10:	2323      	movs	r3, #35	@ 0x23
 800cd12:	18fb      	adds	r3, r7, r3
 800cd14:	197a      	adds	r2, r7, r5
 800cd16:	7812      	ldrb	r2, [r2, #0]
 800cd18:	701a      	strb	r2, [r3, #0]
        uint8_t*      register_list           = &buffer[1];
 800cd1a:	197b      	adds	r3, r7, r5
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	61fb      	str	r3, [r7, #28]

        for( uint8_t index = 0; index < register_nb; index++ )
 800cd20:	2326      	movs	r3, #38	@ 0x26
 800cd22:	18fb      	adds	r3, r7, r3
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	e06e      	b.n	800ce08 <sx126x_add_registers_to_retention_list+0x138>
        {
            bool register_has_to_be_added = true;
 800cd2a:	2325      	movs	r3, #37	@ 0x25
 800cd2c:	18fb      	adds	r3, r7, r3
 800cd2e:	2201      	movs	r2, #1
 800cd30:	701a      	strb	r2, [r3, #0]

            // Check if the current register is already added to the list
            for( uint8_t i = 0; i < buffer[0]; i++ )
 800cd32:	2324      	movs	r3, #36	@ 0x24
 800cd34:	18fb      	adds	r3, r7, r3
 800cd36:	2200      	movs	r2, #0
 800cd38:	701a      	strb	r2, [r3, #0]
 800cd3a:	e025      	b.n	800cd88 <sx126x_add_registers_to_retention_list+0xb8>
            {
                if( register_addr[index] == ( ( uint16_t ) register_list[2 * i] << 8 ) + register_list[2 * i + 1] )
 800cd3c:	2326      	movs	r3, #38	@ 0x26
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	18d3      	adds	r3, r2, r3
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	2124      	movs	r1, #36	@ 0x24
 800cd4e:	187b      	adds	r3, r7, r1
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	001a      	movs	r2, r3
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	189b      	adds	r3, r3, r2
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	187a      	adds	r2, r7, r1
 800cd60:	7812      	ldrb	r2, [r2, #0]
 800cd62:	0052      	lsls	r2, r2, #1
 800cd64:	3201      	adds	r2, #1
 800cd66:	69f9      	ldr	r1, [r7, #28]
 800cd68:	188a      	adds	r2, r1, r2
 800cd6a:	7812      	ldrb	r2, [r2, #0]
 800cd6c:	189b      	adds	r3, r3, r2
 800cd6e:	4298      	cmp	r0, r3
 800cd70:	d104      	bne.n	800cd7c <sx126x_add_registers_to_retention_list+0xac>
                {
                    register_has_to_be_added = false;
 800cd72:	2325      	movs	r3, #37	@ 0x25
 800cd74:	18fb      	adds	r3, r7, r3
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
                    break;
 800cd7a:	e00d      	b.n	800cd98 <sx126x_add_registers_to_retention_list+0xc8>
            for( uint8_t i = 0; i < buffer[0]; i++ )
 800cd7c:	2124      	movs	r1, #36	@ 0x24
 800cd7e:	187b      	adds	r3, r7, r1
 800cd80:	781a      	ldrb	r2, [r3, #0]
 800cd82:	187b      	adds	r3, r7, r1
 800cd84:	3201      	adds	r2, #1
 800cd86:	701a      	strb	r2, [r3, #0]
 800cd88:	2310      	movs	r3, #16
 800cd8a:	18fb      	adds	r3, r7, r3
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	2224      	movs	r2, #36	@ 0x24
 800cd90:	18ba      	adds	r2, r7, r2
 800cd92:	7812      	ldrb	r2, [r2, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d3d1      	bcc.n	800cd3c <sx126x_add_registers_to_retention_list+0x6c>
                }
            }

            if( register_has_to_be_added == true )
 800cd98:	2325      	movs	r3, #37	@ 0x25
 800cd9a:	18fb      	adds	r3, r7, r3
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d02c      	beq.n	800cdfc <sx126x_add_registers_to_retention_list+0x12c>
            {
                if( buffer[0] < SX126X_MAX_NB_REG_IN_RETENTION )
 800cda2:	2010      	movs	r0, #16
 800cda4:	183b      	adds	r3, r7, r0
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d825      	bhi.n	800cdf8 <sx126x_add_registers_to_retention_list+0x128>
                {
                    register_list[2 * buffer[0]]     = ( uint8_t )( register_addr[index] >> 8 );
 800cdac:	2426      	movs	r4, #38	@ 0x26
 800cdae:	193b      	adds	r3, r7, r4
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	18d3      	adds	r3, r2, r3
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	0a1b      	lsrs	r3, r3, #8
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	183b      	adds	r3, r7, r0
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	0019      	movs	r1, r3
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	185b      	adds	r3, r3, r1
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	701a      	strb	r2, [r3, #0]
                    register_list[2 * buffer[0] + 1] = ( uint8_t )( register_addr[index] >> 0 );
 800cdce:	193b      	adds	r3, r7, r4
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	18d3      	adds	r3, r2, r3
 800cdd8:	8819      	ldrh	r1, [r3, #0]
 800cdda:	183b      	adds	r3, r7, r0
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	3301      	adds	r3, #1
 800cde2:	69fa      	ldr	r2, [r7, #28]
 800cde4:	18d3      	adds	r3, r2, r3
 800cde6:	b2ca      	uxtb	r2, r1
 800cde8:	701a      	strb	r2, [r3, #0]
                    buffer[0] += 1;
 800cdea:	183b      	adds	r3, r7, r0
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	183b      	adds	r3, r7, r0
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	e001      	b.n	800cdfc <sx126x_add_registers_to_retention_list+0x12c>
                }
                else
                {
                    return SX126X_STATUS_ERROR;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e021      	b.n	800ce40 <sx126x_add_registers_to_retention_list+0x170>
        for( uint8_t index = 0; index < register_nb; index++ )
 800cdfc:	2126      	movs	r1, #38	@ 0x26
 800cdfe:	187b      	adds	r3, r7, r1
 800ce00:	781a      	ldrb	r2, [r3, #0]
 800ce02:	187b      	adds	r3, r7, r1
 800ce04:	3201      	adds	r2, #1
 800ce06:	701a      	strb	r2, [r3, #0]
 800ce08:	2326      	movs	r3, #38	@ 0x26
 800ce0a:	18fa      	adds	r2, r7, r3
 800ce0c:	1dfb      	adds	r3, r7, #7
 800ce0e:	7812      	ldrb	r2, [r2, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d389      	bcc.n	800cd2a <sx126x_add_registers_to_retention_list+0x5a>
                }
            }
        }

        if( buffer[0] != initial_nb_of_registers )
 800ce16:	2110      	movs	r1, #16
 800ce18:	187b      	adds	r3, r7, r1
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2223      	movs	r2, #35	@ 0x23
 800ce1e:	18ba      	adds	r2, r7, r2
 800ce20:	7812      	ldrb	r2, [r2, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d009      	beq.n	800ce3a <sx126x_add_registers_to_retention_list+0x16a>
        {
            status = sx126x_write_register( context, SX126X_REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 800ce26:	2327      	movs	r3, #39	@ 0x27
 800ce28:	18fc      	adds	r4, r7, r3
 800ce2a:	187a      	adds	r2, r7, r1
 800ce2c:	4906      	ldr	r1, [pc, #24]	@ (800ce48 <sx126x_add_registers_to_retention_list+0x178>)
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	2309      	movs	r3, #9
 800ce32:	f7ff fbd3 	bl	800c5dc <sx126x_write_register>
 800ce36:	0003      	movs	r3, r0
 800ce38:	7023      	strb	r3, [r4, #0]
        }
    }

    return status;
 800ce3a:	2327      	movs	r3, #39	@ 0x27
 800ce3c:	18fb      	adds	r3, r7, r3
 800ce3e:	781b      	ldrb	r3, [r3, #0]
}
 800ce40:	0018      	movs	r0, r3
 800ce42:	46bd      	mov	sp, r7
 800ce44:	b00b      	add	sp, #44	@ 0x2c
 800ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce48:	0000029f 	.word	0x0000029f

0800ce4c <sx126x_init_retention_list>:

sx126x_status_t sx126x_init_retention_list( const void* context )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
    const uint16_t list_of_registers[3] = { SX126X_REG_RXGAIN, SX126X_REG_TX_MODULATION, SX126X_REG_IQ_POLARITY };
 800ce54:	2008      	movs	r0, #8
 800ce56:	183b      	adds	r3, r7, r0
 800ce58:	4a07      	ldr	r2, [pc, #28]	@ (800ce78 <sx126x_init_retention_list+0x2c>)
 800ce5a:	6811      	ldr	r1, [r2, #0]
 800ce5c:	6019      	str	r1, [r3, #0]
 800ce5e:	8892      	ldrh	r2, [r2, #4]
 800ce60:	809a      	strh	r2, [r3, #4]

    return sx126x_add_registers_to_retention_list( context, list_of_registers,
 800ce62:	1839      	adds	r1, r7, r0
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2203      	movs	r2, #3
 800ce68:	0018      	movs	r0, r3
 800ce6a:	f7ff ff31 	bl	800ccd0 <sx126x_add_registers_to_retention_list>
 800ce6e:	0003      	movs	r3, r0
                                                   sizeof( list_of_registers ) / sizeof( list_of_registers[0] ) );
}
 800ce70:	0018      	movs	r0, r3
 800ce72:	46bd      	mov	sp, r7
 800ce74:	b004      	add	sp, #16
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	08011e80 	.word	0x08011e80

0800ce7c <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800ce7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	0008      	movs	r0, r1
 800ce86:	0011      	movs	r1, r2
 800ce88:	1cfb      	adds	r3, r7, #3
 800ce8a:	1c02      	adds	r2, r0, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	1cbb      	adds	r3, r7, #2
 800ce90:	1c0a      	adds	r2, r1, #0
 800ce92:	701a      	strb	r2, [r3, #0]
    uint8_t reg_value = 0;
 800ce94:	250e      	movs	r5, #14
 800ce96:	197b      	adds	r3, r7, r5
 800ce98:	2200      	movs	r2, #0
 800ce9a:	701a      	strb	r2, [r3, #0]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800ce9c:	260f      	movs	r6, #15
 800ce9e:	19bc      	adds	r4, r7, r6
 800cea0:	197a      	adds	r2, r7, r5
 800cea2:	491f      	ldr	r1, [pc, #124]	@ (800cf20 <sx126x_tx_modulation_workaround+0xa4>)
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	2301      	movs	r3, #1
 800cea8:	f7ff fbc8 	bl	800c63c <sx126x_read_register>
 800ceac:	0003      	movs	r3, r0
 800ceae:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800ceb0:	19bb      	adds	r3, r7, r6
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d12b      	bne.n	800cf10 <sx126x_tx_modulation_workaround+0x94>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800ceb8:	1cfb      	adds	r3, r7, #3
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d114      	bne.n	800ceea <sx126x_tx_modulation_workaround+0x6e>
        {
            if( bw == SX126X_LORA_BW_500 )
 800cec0:	1cbb      	adds	r3, r7, #2
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2b06      	cmp	r3, #6
 800cec6:	d107      	bne.n	800ced8 <sx126x_tx_modulation_workaround+0x5c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800cec8:	197b      	adds	r3, r7, r5
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2204      	movs	r2, #4
 800cece:	4393      	bics	r3, r2
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	197b      	adds	r3, r7, r5
 800ced4:	701a      	strb	r2, [r3, #0]
 800ced6:	e010      	b.n	800cefa <sx126x_tx_modulation_workaround+0x7e>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800ced8:	210e      	movs	r1, #14
 800ceda:	187b      	adds	r3, r7, r1
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2204      	movs	r2, #4
 800cee0:	4313      	orrs	r3, r2
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	187b      	adds	r3, r7, r1
 800cee6:	701a      	strb	r2, [r3, #0]
 800cee8:	e007      	b.n	800cefa <sx126x_tx_modulation_workaround+0x7e>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800ceea:	210e      	movs	r1, #14
 800ceec:	187b      	adds	r3, r7, r1
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2204      	movs	r2, #4
 800cef2:	4313      	orrs	r3, r2
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	187b      	adds	r3, r7, r1
 800cef8:	701a      	strb	r2, [r3, #0]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800cefa:	230f      	movs	r3, #15
 800cefc:	18fc      	adds	r4, r7, r3
 800cefe:	230e      	movs	r3, #14
 800cf00:	18fa      	adds	r2, r7, r3
 800cf02:	4907      	ldr	r1, [pc, #28]	@ (800cf20 <sx126x_tx_modulation_workaround+0xa4>)
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	2301      	movs	r3, #1
 800cf08:	f7ff fb68 	bl	800c5dc <sx126x_write_register>
 800cf0c:	0003      	movs	r3, r0
 800cf0e:	7023      	strb	r3, [r4, #0]
    }
    return status;
 800cf10:	230f      	movs	r3, #15
 800cf12:	18fb      	adds	r3, r7, r3
 800cf14:	781b      	ldrb	r3, [r3, #0]
}
 800cf16:	0018      	movs	r0, r3
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b005      	add	sp, #20
 800cf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf1e:	46c0      	nop			@ (mov r8, r8)
 800cf20:	00000889 	.word	0x00000889

0800cf24 <sx126x_hal_reset>:
#include "main.h"  // Pin definitions

extern SPI_HandleTypeDef hspi1;

sx126x_hal_status_t sx126x_hal_reset(const void* context)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SX_NRST_GPIO_Port, SX_NRST_Pin, GPIO_PIN_RESET);
 800cf2c:	4b0b      	ldr	r3, [pc, #44]	@ (800cf5c <sx126x_hal_reset+0x38>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2180      	movs	r1, #128	@ 0x80
 800cf32:	0018      	movs	r0, r3
 800cf34:	f7f9 f89b 	bl	800606e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800cf38:	200a      	movs	r0, #10
 800cf3a:	f7f8 f9f5 	bl	8005328 <HAL_Delay>

	HAL_GPIO_WritePin(SX_NRST_GPIO_Port, SX_NRST_Pin, GPIO_PIN_SET);
 800cf3e:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <sx126x_hal_reset+0x38>)
 800cf40:	2201      	movs	r2, #1
 800cf42:	2180      	movs	r1, #128	@ 0x80
 800cf44:	0018      	movs	r0, r3
 800cf46:	f7f9 f892 	bl	800606e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800cf4a:	200a      	movs	r0, #10
 800cf4c:	f7f8 f9ec 	bl	8005328 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	0018      	movs	r0, r3
 800cf54:	46bd      	mov	sp, r7
 800cf56:	b002      	add	sp, #8
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	46c0      	nop			@ (mov r8, r8)
 800cf5c:	50000400 	.word	0x50000400

0800cf60 <sx126x_hal_write>:

    return SX126X_HAL_STATUS_OK;
}

sx126x_hal_status_t sx126x_hal_write(const void* context, const uint8_t* command, const uint16_t command_length, const uint8_t* data, const uint16_t data_length)
{
 800cf60:	b590      	push	{r4, r7, lr}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	1dbb      	adds	r3, r7, #6
 800cf6e:	801a      	strh	r2, [r3, #0]
	// Wait for the SX1262 to be ready
	while (HAL_GPIO_ReadPin(SX_BUSY_GPIO_Port, SX_BUSY_Pin) == GPIO_PIN_SET);
 800cf70:	46c0      	nop			@ (mov r8, r8)
 800cf72:	2380      	movs	r3, #128	@ 0x80
 800cf74:	021a      	lsls	r2, r3, #8
 800cf76:	23a0      	movs	r3, #160	@ 0xa0
 800cf78:	05db      	lsls	r3, r3, #23
 800cf7a:	0011      	movs	r1, r2
 800cf7c:	0018      	movs	r0, r3
 800cf7e:	f7f9 f859 	bl	8006034 <HAL_GPIO_ReadPin>
 800cf82:	0003      	movs	r3, r0
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d0f4      	beq.n	800cf72 <sx126x_hal_write+0x12>

	HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_RESET); // CS low to begin transmit
 800cf88:	4b1f      	ldr	r3, [pc, #124]	@ (800d008 <sx126x_hal_write+0xa8>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	2140      	movs	r1, #64	@ 0x40
 800cf8e:	0018      	movs	r0, r3
 800cf90:	f7f9 f86d 	bl	800606e <HAL_GPIO_WritePin>

	// Transmit command
	if (HAL_SPI_Transmit(&hspi1, (uint8_t*)command, command_length, HAL_MAX_DELAY) != HAL_OK) {
 800cf94:	2301      	movs	r3, #1
 800cf96:	425c      	negs	r4, r3
 800cf98:	1dbb      	adds	r3, r7, #6
 800cf9a:	881a      	ldrh	r2, [r3, #0]
 800cf9c:	68b9      	ldr	r1, [r7, #8]
 800cf9e:	481b      	ldr	r0, [pc, #108]	@ (800d00c <sx126x_hal_write+0xac>)
 800cfa0:	0023      	movs	r3, r4
 800cfa2:	f7fb fe87 	bl	8008cb4 <HAL_SPI_Transmit>
 800cfa6:	1e03      	subs	r3, r0, #0
 800cfa8:	d007      	beq.n	800cfba <sx126x_hal_write+0x5a>
		HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_SET); // CS high when fail
 800cfaa:	4b17      	ldr	r3, [pc, #92]	@ (800d008 <sx126x_hal_write+0xa8>)
 800cfac:	2201      	movs	r2, #1
 800cfae:	2140      	movs	r1, #64	@ 0x40
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	f7f9 f85c 	bl	800606e <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e021      	b.n	800cffe <sx126x_hal_write+0x9e>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d017      	beq.n	800cff0 <sx126x_hal_write+0x90>
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	18bb      	adds	r3, r7, r2
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d012      	beq.n	800cff0 <sx126x_hal_write+0x90>
		if (HAL_SPI_Transmit(&hspi1, (uint8_t*)data, data_length, HAL_MAX_DELAY) != HAL_OK) {
 800cfca:	2301      	movs	r3, #1
 800cfcc:	425c      	negs	r4, r3
 800cfce:	18bb      	adds	r3, r7, r2
 800cfd0:	881a      	ldrh	r2, [r3, #0]
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	480d      	ldr	r0, [pc, #52]	@ (800d00c <sx126x_hal_write+0xac>)
 800cfd6:	0023      	movs	r3, r4
 800cfd8:	f7fb fe6c 	bl	8008cb4 <HAL_SPI_Transmit>
 800cfdc:	1e03      	subs	r3, r0, #0
 800cfde:	d007      	beq.n	800cff0 <sx126x_hal_write+0x90>
			HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_SET); // CS high when fail
 800cfe0:	4b09      	ldr	r3, [pc, #36]	@ (800d008 <sx126x_hal_write+0xa8>)
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	2140      	movs	r1, #64	@ 0x40
 800cfe6:	0018      	movs	r0, r3
 800cfe8:	f7f9 f841 	bl	800606e <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e006      	b.n	800cffe <sx126x_hal_write+0x9e>
		}
	}

	HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_SET); // CS high when done
 800cff0:	4b05      	ldr	r3, [pc, #20]	@ (800d008 <sx126x_hal_write+0xa8>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	2140      	movs	r1, #64	@ 0x40
 800cff6:	0018      	movs	r0, r3
 800cff8:	f7f9 f839 	bl	800606e <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	0018      	movs	r0, r3
 800d000:	46bd      	mov	sp, r7
 800d002:	b005      	add	sp, #20
 800d004:	bd90      	pop	{r4, r7, pc}
 800d006:	46c0      	nop			@ (mov r8, r8)
 800d008:	50000400 	.word	0x50000400
 800d00c:	200002d4 	.word	0x200002d4

0800d010 <sx126x_hal_read>:

sx126x_hal_status_t sx126x_hal_read(const void* context, const uint8_t* command, const uint16_t command_length, uint8_t* data, const uint16_t data_length)
{
 800d010:	b590      	push	{r4, r7, lr}
 800d012:	b089      	sub	sp, #36	@ 0x24
 800d014:	af02      	add	r7, sp, #8
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	1dbb      	adds	r3, r7, #6
 800d01e:	801a      	strh	r2, [r3, #0]
	// Wait for the SX1262 to be ready
	while (HAL_GPIO_ReadPin(SX_BUSY_GPIO_Port, SX_BUSY_Pin) == GPIO_PIN_SET);
 800d020:	46c0      	nop			@ (mov r8, r8)
 800d022:	2380      	movs	r3, #128	@ 0x80
 800d024:	021a      	lsls	r2, r3, #8
 800d026:	23a0      	movs	r3, #160	@ 0xa0
 800d028:	05db      	lsls	r3, r3, #23
 800d02a:	0011      	movs	r1, r2
 800d02c:	0018      	movs	r0, r3
 800d02e:	f7f9 f801 	bl	8006034 <HAL_GPIO_ReadPin>
 800d032:	0003      	movs	r3, r0
 800d034:	2b01      	cmp	r3, #1
 800d036:	d0f4      	beq.n	800d022 <sx126x_hal_read+0x12>

	HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_RESET); // CS low to begin transmit
 800d038:	4b22      	ldr	r3, [pc, #136]	@ (800d0c4 <sx126x_hal_read+0xb4>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	2140      	movs	r1, #64	@ 0x40
 800d03e:	0018      	movs	r0, r3
 800d040:	f7f9 f815 	bl	800606e <HAL_GPIO_WritePin>

	// Transmit command
	if (HAL_SPI_Transmit(&hspi1, (uint8_t*)command, command_length, HAL_MAX_DELAY) != HAL_OK) {
 800d044:	2301      	movs	r3, #1
 800d046:	425c      	negs	r4, r3
 800d048:	1dbb      	adds	r3, r7, #6
 800d04a:	881a      	ldrh	r2, [r3, #0]
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	481e      	ldr	r0, [pc, #120]	@ (800d0c8 <sx126x_hal_read+0xb8>)
 800d050:	0023      	movs	r3, r4
 800d052:	f7fb fe2f 	bl	8008cb4 <HAL_SPI_Transmit>
 800d056:	1e03      	subs	r3, r0, #0
 800d058:	d007      	beq.n	800d06a <sx126x_hal_read+0x5a>
		HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_SET); // CS high when fail
 800d05a:	4b1a      	ldr	r3, [pc, #104]	@ (800d0c4 <sx126x_hal_read+0xb4>)
 800d05c:	2201      	movs	r2, #1
 800d05e:	2140      	movs	r1, #64	@ 0x40
 800d060:	0018      	movs	r0, r3
 800d062:	f7f9 f804 	bl	800606e <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800d066:	2303      	movs	r3, #3
 800d068:	e027      	b.n	800d0ba <sx126x_hal_read+0xaa>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d01d      	beq.n	800d0ac <sx126x_hal_read+0x9c>
 800d070:	2128      	movs	r1, #40	@ 0x28
 800d072:	187b      	adds	r3, r7, r1
 800d074:	881b      	ldrh	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d018      	beq.n	800d0ac <sx126x_hal_read+0x9c>
		uint8_t dummy_byte = SX126X_NOP;
 800d07a:	2017      	movs	r0, #23
 800d07c:	183b      	adds	r3, r7, r0
 800d07e:	2200      	movs	r2, #0
 800d080:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_TransmitReceive(&hspi1, &dummy_byte, data, data_length, HAL_MAX_DELAY) != HAL_OK) {
 800d082:	187b      	adds	r3, r7, r1
 800d084:	881c      	ldrh	r4, [r3, #0]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	1839      	adds	r1, r7, r0
 800d08a:	480f      	ldr	r0, [pc, #60]	@ (800d0c8 <sx126x_hal_read+0xb8>)
 800d08c:	2301      	movs	r3, #1
 800d08e:	425b      	negs	r3, r3
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	0023      	movs	r3, r4
 800d094:	f7fb ff6e 	bl	8008f74 <HAL_SPI_TransmitReceive>
 800d098:	1e03      	subs	r3, r0, #0
 800d09a:	d007      	beq.n	800d0ac <sx126x_hal_read+0x9c>
			HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_SET); // CS high when fail
 800d09c:	4b09      	ldr	r3, [pc, #36]	@ (800d0c4 <sx126x_hal_read+0xb4>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	2140      	movs	r1, #64	@ 0x40
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f7f8 ffe3 	bl	800606e <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e006      	b.n	800d0ba <sx126x_hal_read+0xaa>
		}
	}

	HAL_GPIO_WritePin(SX_CS_GPIO_Port, SX_CS_Pin, GPIO_PIN_SET); // CS high when done
 800d0ac:	4b05      	ldr	r3, [pc, #20]	@ (800d0c4 <sx126x_hal_read+0xb4>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	2140      	movs	r1, #64	@ 0x40
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	f7f8 ffdb 	bl	800606e <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	0018      	movs	r0, r3
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	b007      	add	sp, #28
 800d0c0:	bd90      	pop	{r4, r7, pc}
 800d0c2:	46c0      	nop			@ (mov r8, r8)
 800d0c4:	50000400 	.word	0x50000400
 800d0c8:	200002d4 	.word	0x200002d4

0800d0cc <rand>:
 800d0cc:	4b16      	ldr	r3, [pc, #88]	@ (800d128 <rand+0x5c>)
 800d0ce:	b510      	push	{r4, lr}
 800d0d0:	681c      	ldr	r4, [r3, #0]
 800d0d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d116      	bne.n	800d106 <rand+0x3a>
 800d0d8:	2018      	movs	r0, #24
 800d0da:	f001 fe9b 	bl	800ee14 <malloc>
 800d0de:	1e02      	subs	r2, r0, #0
 800d0e0:	6320      	str	r0, [r4, #48]	@ 0x30
 800d0e2:	d104      	bne.n	800d0ee <rand+0x22>
 800d0e4:	2152      	movs	r1, #82	@ 0x52
 800d0e6:	4b11      	ldr	r3, [pc, #68]	@ (800d12c <rand+0x60>)
 800d0e8:	4811      	ldr	r0, [pc, #68]	@ (800d130 <rand+0x64>)
 800d0ea:	f000 ffa9 	bl	800e040 <__assert_func>
 800d0ee:	4b11      	ldr	r3, [pc, #68]	@ (800d134 <rand+0x68>)
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	6003      	str	r3, [r0, #0]
 800d0f4:	4b10      	ldr	r3, [pc, #64]	@ (800d138 <rand+0x6c>)
 800d0f6:	6043      	str	r3, [r0, #4]
 800d0f8:	4b10      	ldr	r3, [pc, #64]	@ (800d13c <rand+0x70>)
 800d0fa:	6083      	str	r3, [r0, #8]
 800d0fc:	230b      	movs	r3, #11
 800d0fe:	8183      	strh	r3, [r0, #12]
 800d100:	2001      	movs	r0, #1
 800d102:	6110      	str	r0, [r2, #16]
 800d104:	6151      	str	r1, [r2, #20]
 800d106:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800d108:	4a0d      	ldr	r2, [pc, #52]	@ (800d140 <rand+0x74>)
 800d10a:	6920      	ldr	r0, [r4, #16]
 800d10c:	6961      	ldr	r1, [r4, #20]
 800d10e:	4b0d      	ldr	r3, [pc, #52]	@ (800d144 <rand+0x78>)
 800d110:	f7f3 fa08 	bl	8000524 <__aeabi_lmul>
 800d114:	2201      	movs	r2, #1
 800d116:	2300      	movs	r3, #0
 800d118:	1880      	adds	r0, r0, r2
 800d11a:	4159      	adcs	r1, r3
 800d11c:	6120      	str	r0, [r4, #16]
 800d11e:	6161      	str	r1, [r4, #20]
 800d120:	0048      	lsls	r0, r1, #1
 800d122:	0840      	lsrs	r0, r0, #1
 800d124:	bd10      	pop	{r4, pc}
 800d126:	46c0      	nop			@ (mov r8, r8)
 800d128:	2000002c 	.word	0x2000002c
 800d12c:	080122a4 	.word	0x080122a4
 800d130:	080122bb 	.word	0x080122bb
 800d134:	abcd330e 	.word	0xabcd330e
 800d138:	e66d1234 	.word	0xe66d1234
 800d13c:	0005deec 	.word	0x0005deec
 800d140:	4c957f2d 	.word	0x4c957f2d
 800d144:	5851f42d 	.word	0x5851f42d

0800d148 <__cvt>:
 800d148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14a:	001f      	movs	r7, r3
 800d14c:	2300      	movs	r3, #0
 800d14e:	0016      	movs	r6, r2
 800d150:	b08b      	sub	sp, #44	@ 0x2c
 800d152:	429f      	cmp	r7, r3
 800d154:	da04      	bge.n	800d160 <__cvt+0x18>
 800d156:	2180      	movs	r1, #128	@ 0x80
 800d158:	0609      	lsls	r1, r1, #24
 800d15a:	187b      	adds	r3, r7, r1
 800d15c:	001f      	movs	r7, r3
 800d15e:	232d      	movs	r3, #45	@ 0x2d
 800d160:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d162:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d164:	7013      	strb	r3, [r2, #0]
 800d166:	2320      	movs	r3, #32
 800d168:	2203      	movs	r2, #3
 800d16a:	439d      	bics	r5, r3
 800d16c:	2d46      	cmp	r5, #70	@ 0x46
 800d16e:	d007      	beq.n	800d180 <__cvt+0x38>
 800d170:	002b      	movs	r3, r5
 800d172:	3b45      	subs	r3, #69	@ 0x45
 800d174:	4259      	negs	r1, r3
 800d176:	414b      	adcs	r3, r1
 800d178:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d17a:	3a01      	subs	r2, #1
 800d17c:	18cb      	adds	r3, r1, r3
 800d17e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d180:	ab09      	add	r3, sp, #36	@ 0x24
 800d182:	9304      	str	r3, [sp, #16]
 800d184:	ab08      	add	r3, sp, #32
 800d186:	9303      	str	r3, [sp, #12]
 800d188:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d18a:	9200      	str	r2, [sp, #0]
 800d18c:	9302      	str	r3, [sp, #8]
 800d18e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d190:	0032      	movs	r2, r6
 800d192:	9301      	str	r3, [sp, #4]
 800d194:	003b      	movs	r3, r7
 800d196:	f000 ffff 	bl	800e198 <_dtoa_r>
 800d19a:	0004      	movs	r4, r0
 800d19c:	2d47      	cmp	r5, #71	@ 0x47
 800d19e:	d11b      	bne.n	800d1d8 <__cvt+0x90>
 800d1a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d1a2:	07db      	lsls	r3, r3, #31
 800d1a4:	d511      	bpl.n	800d1ca <__cvt+0x82>
 800d1a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1a8:	18c3      	adds	r3, r0, r3
 800d1aa:	9307      	str	r3, [sp, #28]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	0030      	movs	r0, r6
 800d1b2:	0039      	movs	r1, r7
 800d1b4:	f7f3 f94a 	bl	800044c <__aeabi_dcmpeq>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d001      	beq.n	800d1c0 <__cvt+0x78>
 800d1bc:	9b07      	ldr	r3, [sp, #28]
 800d1be:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1c0:	2230      	movs	r2, #48	@ 0x30
 800d1c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1c4:	9907      	ldr	r1, [sp, #28]
 800d1c6:	428b      	cmp	r3, r1
 800d1c8:	d320      	bcc.n	800d20c <__cvt+0xc4>
 800d1ca:	0020      	movs	r0, r4
 800d1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d1d0:	1b1b      	subs	r3, r3, r4
 800d1d2:	6013      	str	r3, [r2, #0]
 800d1d4:	b00b      	add	sp, #44	@ 0x2c
 800d1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1da:	18c3      	adds	r3, r0, r3
 800d1dc:	9307      	str	r3, [sp, #28]
 800d1de:	2d46      	cmp	r5, #70	@ 0x46
 800d1e0:	d1e4      	bne.n	800d1ac <__cvt+0x64>
 800d1e2:	7803      	ldrb	r3, [r0, #0]
 800d1e4:	2b30      	cmp	r3, #48	@ 0x30
 800d1e6:	d10c      	bne.n	800d202 <__cvt+0xba>
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	0030      	movs	r0, r6
 800d1ee:	0039      	movs	r1, r7
 800d1f0:	f7f3 f92c 	bl	800044c <__aeabi_dcmpeq>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d104      	bne.n	800d202 <__cvt+0xba>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d200:	6013      	str	r3, [r2, #0]
 800d202:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d204:	9a07      	ldr	r2, [sp, #28]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	18d3      	adds	r3, r2, r3
 800d20a:	e7ce      	b.n	800d1aa <__cvt+0x62>
 800d20c:	1c59      	adds	r1, r3, #1
 800d20e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e7d6      	b.n	800d1c2 <__cvt+0x7a>

0800d214 <__exponent>:
 800d214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d216:	232b      	movs	r3, #43	@ 0x2b
 800d218:	0005      	movs	r5, r0
 800d21a:	000c      	movs	r4, r1
 800d21c:	b085      	sub	sp, #20
 800d21e:	7002      	strb	r2, [r0, #0]
 800d220:	2900      	cmp	r1, #0
 800d222:	da01      	bge.n	800d228 <__exponent+0x14>
 800d224:	424c      	negs	r4, r1
 800d226:	3302      	adds	r3, #2
 800d228:	706b      	strb	r3, [r5, #1]
 800d22a:	2c09      	cmp	r4, #9
 800d22c:	dd2c      	ble.n	800d288 <__exponent+0x74>
 800d22e:	ab02      	add	r3, sp, #8
 800d230:	1dde      	adds	r6, r3, #7
 800d232:	0020      	movs	r0, r4
 800d234:	210a      	movs	r1, #10
 800d236:	f7f3 f8f3 	bl	8000420 <__aeabi_idivmod>
 800d23a:	0037      	movs	r7, r6
 800d23c:	3130      	adds	r1, #48	@ 0x30
 800d23e:	3e01      	subs	r6, #1
 800d240:	0020      	movs	r0, r4
 800d242:	7031      	strb	r1, [r6, #0]
 800d244:	210a      	movs	r1, #10
 800d246:	9401      	str	r4, [sp, #4]
 800d248:	f7f3 f804 	bl	8000254 <__divsi3>
 800d24c:	9b01      	ldr	r3, [sp, #4]
 800d24e:	0004      	movs	r4, r0
 800d250:	2b63      	cmp	r3, #99	@ 0x63
 800d252:	dcee      	bgt.n	800d232 <__exponent+0x1e>
 800d254:	1eba      	subs	r2, r7, #2
 800d256:	1ca8      	adds	r0, r5, #2
 800d258:	0001      	movs	r1, r0
 800d25a:	0013      	movs	r3, r2
 800d25c:	3430      	adds	r4, #48	@ 0x30
 800d25e:	7014      	strb	r4, [r2, #0]
 800d260:	ac02      	add	r4, sp, #8
 800d262:	3407      	adds	r4, #7
 800d264:	429c      	cmp	r4, r3
 800d266:	d80a      	bhi.n	800d27e <__exponent+0x6a>
 800d268:	2300      	movs	r3, #0
 800d26a:	42a2      	cmp	r2, r4
 800d26c:	d803      	bhi.n	800d276 <__exponent+0x62>
 800d26e:	3309      	adds	r3, #9
 800d270:	aa02      	add	r2, sp, #8
 800d272:	189b      	adds	r3, r3, r2
 800d274:	1bdb      	subs	r3, r3, r7
 800d276:	18c0      	adds	r0, r0, r3
 800d278:	1b40      	subs	r0, r0, r5
 800d27a:	b005      	add	sp, #20
 800d27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27e:	781c      	ldrb	r4, [r3, #0]
 800d280:	3301      	adds	r3, #1
 800d282:	700c      	strb	r4, [r1, #0]
 800d284:	3101      	adds	r1, #1
 800d286:	e7eb      	b.n	800d260 <__exponent+0x4c>
 800d288:	2330      	movs	r3, #48	@ 0x30
 800d28a:	18e4      	adds	r4, r4, r3
 800d28c:	70ab      	strb	r3, [r5, #2]
 800d28e:	1d28      	adds	r0, r5, #4
 800d290:	70ec      	strb	r4, [r5, #3]
 800d292:	e7f1      	b.n	800d278 <__exponent+0x64>

0800d294 <_printf_float>:
 800d294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d296:	b097      	sub	sp, #92	@ 0x5c
 800d298:	000d      	movs	r5, r1
 800d29a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d29c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d29e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2a0:	9009      	str	r0, [sp, #36]	@ 0x24
 800d2a2:	f000 fe39 	bl	800df18 <_localeconv_r>
 800d2a6:	6803      	ldr	r3, [r0, #0]
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	930d      	str	r3, [sp, #52]	@ 0x34
 800d2ac:	f7f2 ff2c 	bl	8000108 <strlen>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d2b4:	9314      	str	r3, [sp, #80]	@ 0x50
 800d2b6:	7e2b      	ldrb	r3, [r5, #24]
 800d2b8:	2207      	movs	r2, #7
 800d2ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	930e      	str	r3, [sp, #56]	@ 0x38
 800d2c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	05c9      	lsls	r1, r1, #23
 800d2c6:	d545      	bpl.n	800d354 <_printf_float+0xc0>
 800d2c8:	189b      	adds	r3, r3, r2
 800d2ca:	4393      	bics	r3, r2
 800d2cc:	001a      	movs	r2, r3
 800d2ce:	3208      	adds	r2, #8
 800d2d0:	6022      	str	r2, [r4, #0]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	681e      	ldr	r6, [r3, #0]
 800d2d6:	685f      	ldr	r7, [r3, #4]
 800d2d8:	007b      	lsls	r3, r7, #1
 800d2da:	085b      	lsrs	r3, r3, #1
 800d2dc:	9311      	str	r3, [sp, #68]	@ 0x44
 800d2de:	9610      	str	r6, [sp, #64]	@ 0x40
 800d2e0:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d2e2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d2e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d2e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d2e8:	4ba7      	ldr	r3, [pc, #668]	@ (800d588 <_printf_float+0x2f4>)
 800d2ea:	4252      	negs	r2, r2
 800d2ec:	f7f5 f940 	bl	8002570 <__aeabi_dcmpun>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d131      	bne.n	800d358 <_printf_float+0xc4>
 800d2f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d2f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	4ba3      	ldr	r3, [pc, #652]	@ (800d588 <_printf_float+0x2f4>)
 800d2fc:	4252      	negs	r2, r2
 800d2fe:	f7f3 f8b5 	bl	800046c <__aeabi_dcmple>
 800d302:	2800      	cmp	r0, #0
 800d304:	d128      	bne.n	800d358 <_printf_float+0xc4>
 800d306:	2200      	movs	r2, #0
 800d308:	2300      	movs	r3, #0
 800d30a:	0030      	movs	r0, r6
 800d30c:	0039      	movs	r1, r7
 800d30e:	f7f3 f8a3 	bl	8000458 <__aeabi_dcmplt>
 800d312:	2800      	cmp	r0, #0
 800d314:	d003      	beq.n	800d31e <_printf_float+0x8a>
 800d316:	002b      	movs	r3, r5
 800d318:	222d      	movs	r2, #45	@ 0x2d
 800d31a:	3343      	adds	r3, #67	@ 0x43
 800d31c:	701a      	strb	r2, [r3, #0]
 800d31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d320:	4f9a      	ldr	r7, [pc, #616]	@ (800d58c <_printf_float+0x2f8>)
 800d322:	2b47      	cmp	r3, #71	@ 0x47
 800d324:	d900      	bls.n	800d328 <_printf_float+0x94>
 800d326:	4f9a      	ldr	r7, [pc, #616]	@ (800d590 <_printf_float+0x2fc>)
 800d328:	2303      	movs	r3, #3
 800d32a:	2400      	movs	r4, #0
 800d32c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d32e:	612b      	str	r3, [r5, #16]
 800d330:	3301      	adds	r3, #1
 800d332:	439a      	bics	r2, r3
 800d334:	602a      	str	r2, [r5, #0]
 800d336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d338:	0029      	movs	r1, r5
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d33e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d340:	aa15      	add	r2, sp, #84	@ 0x54
 800d342:	f000 f9e5 	bl	800d710 <_printf_common>
 800d346:	3001      	adds	r0, #1
 800d348:	d000      	beq.n	800d34c <_printf_float+0xb8>
 800d34a:	e09f      	b.n	800d48c <_printf_float+0x1f8>
 800d34c:	2001      	movs	r0, #1
 800d34e:	4240      	negs	r0, r0
 800d350:	b017      	add	sp, #92	@ 0x5c
 800d352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d354:	3307      	adds	r3, #7
 800d356:	e7b8      	b.n	800d2ca <_printf_float+0x36>
 800d358:	0032      	movs	r2, r6
 800d35a:	003b      	movs	r3, r7
 800d35c:	0030      	movs	r0, r6
 800d35e:	0039      	movs	r1, r7
 800d360:	f7f5 f906 	bl	8002570 <__aeabi_dcmpun>
 800d364:	2800      	cmp	r0, #0
 800d366:	d00b      	beq.n	800d380 <_printf_float+0xec>
 800d368:	2f00      	cmp	r7, #0
 800d36a:	da03      	bge.n	800d374 <_printf_float+0xe0>
 800d36c:	002b      	movs	r3, r5
 800d36e:	222d      	movs	r2, #45	@ 0x2d
 800d370:	3343      	adds	r3, #67	@ 0x43
 800d372:	701a      	strb	r2, [r3, #0]
 800d374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d376:	4f87      	ldr	r7, [pc, #540]	@ (800d594 <_printf_float+0x300>)
 800d378:	2b47      	cmp	r3, #71	@ 0x47
 800d37a:	d9d5      	bls.n	800d328 <_printf_float+0x94>
 800d37c:	4f86      	ldr	r7, [pc, #536]	@ (800d598 <_printf_float+0x304>)
 800d37e:	e7d3      	b.n	800d328 <_printf_float+0x94>
 800d380:	2220      	movs	r2, #32
 800d382:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d384:	686b      	ldr	r3, [r5, #4]
 800d386:	4394      	bics	r4, r2
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	d146      	bne.n	800d41a <_printf_float+0x186>
 800d38c:	3307      	adds	r3, #7
 800d38e:	606b      	str	r3, [r5, #4]
 800d390:	2380      	movs	r3, #128	@ 0x80
 800d392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d394:	00db      	lsls	r3, r3, #3
 800d396:	4313      	orrs	r3, r2
 800d398:	2200      	movs	r2, #0
 800d39a:	602b      	str	r3, [r5, #0]
 800d39c:	9206      	str	r2, [sp, #24]
 800d39e:	aa14      	add	r2, sp, #80	@ 0x50
 800d3a0:	9205      	str	r2, [sp, #20]
 800d3a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3a4:	a90a      	add	r1, sp, #40	@ 0x28
 800d3a6:	9204      	str	r2, [sp, #16]
 800d3a8:	aa13      	add	r2, sp, #76	@ 0x4c
 800d3aa:	9203      	str	r2, [sp, #12]
 800d3ac:	2223      	movs	r2, #35	@ 0x23
 800d3ae:	1852      	adds	r2, r2, r1
 800d3b0:	9202      	str	r2, [sp, #8]
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	686b      	ldr	r3, [r5, #4]
 800d3b6:	0032      	movs	r2, r6
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3bc:	003b      	movs	r3, r7
 800d3be:	f7ff fec3 	bl	800d148 <__cvt>
 800d3c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d3c4:	0007      	movs	r7, r0
 800d3c6:	2c47      	cmp	r4, #71	@ 0x47
 800d3c8:	d12d      	bne.n	800d426 <_printf_float+0x192>
 800d3ca:	1cd3      	adds	r3, r2, #3
 800d3cc:	db02      	blt.n	800d3d4 <_printf_float+0x140>
 800d3ce:	686b      	ldr	r3, [r5, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	dd48      	ble.n	800d466 <_printf_float+0x1d2>
 800d3d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d3d8:	3b02      	subs	r3, #2
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3de:	0028      	movs	r0, r5
 800d3e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3e2:	3901      	subs	r1, #1
 800d3e4:	3050      	adds	r0, #80	@ 0x50
 800d3e6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d3e8:	f7ff ff14 	bl	800d214 <__exponent>
 800d3ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d3ee:	0004      	movs	r4, r0
 800d3f0:	1813      	adds	r3, r2, r0
 800d3f2:	612b      	str	r3, [r5, #16]
 800d3f4:	2a01      	cmp	r2, #1
 800d3f6:	dc02      	bgt.n	800d3fe <_printf_float+0x16a>
 800d3f8:	682a      	ldr	r2, [r5, #0]
 800d3fa:	07d2      	lsls	r2, r2, #31
 800d3fc:	d501      	bpl.n	800d402 <_printf_float+0x16e>
 800d3fe:	3301      	adds	r3, #1
 800d400:	612b      	str	r3, [r5, #16]
 800d402:	2323      	movs	r3, #35	@ 0x23
 800d404:	aa0a      	add	r2, sp, #40	@ 0x28
 800d406:	189b      	adds	r3, r3, r2
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d100      	bne.n	800d410 <_printf_float+0x17c>
 800d40e:	e792      	b.n	800d336 <_printf_float+0xa2>
 800d410:	002b      	movs	r3, r5
 800d412:	222d      	movs	r2, #45	@ 0x2d
 800d414:	3343      	adds	r3, #67	@ 0x43
 800d416:	701a      	strb	r2, [r3, #0]
 800d418:	e78d      	b.n	800d336 <_printf_float+0xa2>
 800d41a:	2c47      	cmp	r4, #71	@ 0x47
 800d41c:	d1b8      	bne.n	800d390 <_printf_float+0xfc>
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1b6      	bne.n	800d390 <_printf_float+0xfc>
 800d422:	3301      	adds	r3, #1
 800d424:	e7b3      	b.n	800d38e <_printf_float+0xfa>
 800d426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d428:	0011      	movs	r1, r2
 800d42a:	2b65      	cmp	r3, #101	@ 0x65
 800d42c:	d9d7      	bls.n	800d3de <_printf_float+0x14a>
 800d42e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d430:	2b66      	cmp	r3, #102	@ 0x66
 800d432:	d11a      	bne.n	800d46a <_printf_float+0x1d6>
 800d434:	686b      	ldr	r3, [r5, #4]
 800d436:	2a00      	cmp	r2, #0
 800d438:	dd09      	ble.n	800d44e <_printf_float+0x1ba>
 800d43a:	612a      	str	r2, [r5, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <_printf_float+0x1b2>
 800d440:	6829      	ldr	r1, [r5, #0]
 800d442:	07c9      	lsls	r1, r1, #31
 800d444:	d50b      	bpl.n	800d45e <_printf_float+0x1ca>
 800d446:	3301      	adds	r3, #1
 800d448:	189b      	adds	r3, r3, r2
 800d44a:	612b      	str	r3, [r5, #16]
 800d44c:	e007      	b.n	800d45e <_printf_float+0x1ca>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d103      	bne.n	800d45a <_printf_float+0x1c6>
 800d452:	2201      	movs	r2, #1
 800d454:	6829      	ldr	r1, [r5, #0]
 800d456:	4211      	tst	r1, r2
 800d458:	d000      	beq.n	800d45c <_printf_float+0x1c8>
 800d45a:	1c9a      	adds	r2, r3, #2
 800d45c:	612a      	str	r2, [r5, #16]
 800d45e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d460:	2400      	movs	r4, #0
 800d462:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d464:	e7cd      	b.n	800d402 <_printf_float+0x16e>
 800d466:	2367      	movs	r3, #103	@ 0x67
 800d468:	930c      	str	r3, [sp, #48]	@ 0x30
 800d46a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d46c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d46e:	4299      	cmp	r1, r3
 800d470:	db06      	blt.n	800d480 <_printf_float+0x1ec>
 800d472:	682b      	ldr	r3, [r5, #0]
 800d474:	6129      	str	r1, [r5, #16]
 800d476:	07db      	lsls	r3, r3, #31
 800d478:	d5f1      	bpl.n	800d45e <_printf_float+0x1ca>
 800d47a:	3101      	adds	r1, #1
 800d47c:	6129      	str	r1, [r5, #16]
 800d47e:	e7ee      	b.n	800d45e <_printf_float+0x1ca>
 800d480:	2201      	movs	r2, #1
 800d482:	2900      	cmp	r1, #0
 800d484:	dce0      	bgt.n	800d448 <_printf_float+0x1b4>
 800d486:	1892      	adds	r2, r2, r2
 800d488:	1a52      	subs	r2, r2, r1
 800d48a:	e7dd      	b.n	800d448 <_printf_float+0x1b4>
 800d48c:	682a      	ldr	r2, [r5, #0]
 800d48e:	0553      	lsls	r3, r2, #21
 800d490:	d408      	bmi.n	800d4a4 <_printf_float+0x210>
 800d492:	692b      	ldr	r3, [r5, #16]
 800d494:	003a      	movs	r2, r7
 800d496:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d498:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d49a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d49c:	47a0      	blx	r4
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d129      	bne.n	800d4f6 <_printf_float+0x262>
 800d4a2:	e753      	b.n	800d34c <_printf_float+0xb8>
 800d4a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4a6:	2b65      	cmp	r3, #101	@ 0x65
 800d4a8:	d800      	bhi.n	800d4ac <_printf_float+0x218>
 800d4aa:	e0da      	b.n	800d662 <_printf_float+0x3ce>
 800d4ac:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d4ae:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f7f2 ffca 	bl	800044c <__aeabi_dcmpeq>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d033      	beq.n	800d524 <_printf_float+0x290>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	4a37      	ldr	r2, [pc, #220]	@ (800d59c <_printf_float+0x308>)
 800d4c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d4c6:	47a0      	blx	r4
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	d100      	bne.n	800d4ce <_printf_float+0x23a>
 800d4cc:	e73e      	b.n	800d34c <_printf_float+0xb8>
 800d4ce:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d4d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4d2:	42b3      	cmp	r3, r6
 800d4d4:	db02      	blt.n	800d4dc <_printf_float+0x248>
 800d4d6:	682b      	ldr	r3, [r5, #0]
 800d4d8:	07db      	lsls	r3, r3, #31
 800d4da:	d50c      	bpl.n	800d4f6 <_printf_float+0x262>
 800d4dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d4de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4e6:	47a0      	blx	r4
 800d4e8:	2400      	movs	r4, #0
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	d100      	bne.n	800d4f0 <_printf_float+0x25c>
 800d4ee:	e72d      	b.n	800d34c <_printf_float+0xb8>
 800d4f0:	1e73      	subs	r3, r6, #1
 800d4f2:	42a3      	cmp	r3, r4
 800d4f4:	dc0a      	bgt.n	800d50c <_printf_float+0x278>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	079b      	lsls	r3, r3, #30
 800d4fa:	d500      	bpl.n	800d4fe <_printf_float+0x26a>
 800d4fc:	e105      	b.n	800d70a <_printf_float+0x476>
 800d4fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d500:	68e8      	ldr	r0, [r5, #12]
 800d502:	4298      	cmp	r0, r3
 800d504:	db00      	blt.n	800d508 <_printf_float+0x274>
 800d506:	e723      	b.n	800d350 <_printf_float+0xbc>
 800d508:	0018      	movs	r0, r3
 800d50a:	e721      	b.n	800d350 <_printf_float+0xbc>
 800d50c:	002a      	movs	r2, r5
 800d50e:	2301      	movs	r3, #1
 800d510:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d514:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d516:	321a      	adds	r2, #26
 800d518:	47b8      	blx	r7
 800d51a:	3001      	adds	r0, #1
 800d51c:	d100      	bne.n	800d520 <_printf_float+0x28c>
 800d51e:	e715      	b.n	800d34c <_printf_float+0xb8>
 800d520:	3401      	adds	r4, #1
 800d522:	e7e5      	b.n	800d4f0 <_printf_float+0x25c>
 800d524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d526:	2b00      	cmp	r3, #0
 800d528:	dc3a      	bgt.n	800d5a0 <_printf_float+0x30c>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4a1b      	ldr	r2, [pc, #108]	@ (800d59c <_printf_float+0x308>)
 800d52e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d530:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d532:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d534:	47a0      	blx	r4
 800d536:	3001      	adds	r0, #1
 800d538:	d100      	bne.n	800d53c <_printf_float+0x2a8>
 800d53a:	e707      	b.n	800d34c <_printf_float+0xb8>
 800d53c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d53e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d540:	4333      	orrs	r3, r6
 800d542:	d102      	bne.n	800d54a <_printf_float+0x2b6>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	07db      	lsls	r3, r3, #31
 800d548:	d5d5      	bpl.n	800d4f6 <_printf_float+0x262>
 800d54a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d54c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d54e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d550:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d552:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d554:	47a0      	blx	r4
 800d556:	2300      	movs	r3, #0
 800d558:	3001      	adds	r0, #1
 800d55a:	d100      	bne.n	800d55e <_printf_float+0x2ca>
 800d55c:	e6f6      	b.n	800d34c <_printf_float+0xb8>
 800d55e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d560:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d562:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d564:	425b      	negs	r3, r3
 800d566:	4293      	cmp	r3, r2
 800d568:	dc01      	bgt.n	800d56e <_printf_float+0x2da>
 800d56a:	0033      	movs	r3, r6
 800d56c:	e792      	b.n	800d494 <_printf_float+0x200>
 800d56e:	002a      	movs	r2, r5
 800d570:	2301      	movs	r3, #1
 800d572:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d574:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d576:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d578:	321a      	adds	r2, #26
 800d57a:	47a0      	blx	r4
 800d57c:	3001      	adds	r0, #1
 800d57e:	d100      	bne.n	800d582 <_printf_float+0x2ee>
 800d580:	e6e4      	b.n	800d34c <_printf_float+0xb8>
 800d582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d584:	3301      	adds	r3, #1
 800d586:	e7ea      	b.n	800d55e <_printf_float+0x2ca>
 800d588:	7fefffff 	.word	0x7fefffff
 800d58c:	08012313 	.word	0x08012313
 800d590:	08012317 	.word	0x08012317
 800d594:	0801231b 	.word	0x0801231b
 800d598:	0801231f 	.word	0x0801231f
 800d59c:	08012577 	.word	0x08012577
 800d5a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d5a2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d5a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5a6:	429e      	cmp	r6, r3
 800d5a8:	dd00      	ble.n	800d5ac <_printf_float+0x318>
 800d5aa:	001e      	movs	r6, r3
 800d5ac:	2e00      	cmp	r6, #0
 800d5ae:	dc31      	bgt.n	800d614 <_printf_float+0x380>
 800d5b0:	43f3      	mvns	r3, r6
 800d5b2:	2400      	movs	r4, #0
 800d5b4:	17db      	asrs	r3, r3, #31
 800d5b6:	4033      	ands	r3, r6
 800d5b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d5ba:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5be:	1af3      	subs	r3, r6, r3
 800d5c0:	42a3      	cmp	r3, r4
 800d5c2:	dc30      	bgt.n	800d626 <_printf_float+0x392>
 800d5c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	dc38      	bgt.n	800d63e <_printf_float+0x3aa>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	07db      	lsls	r3, r3, #31
 800d5d0:	d435      	bmi.n	800d63e <_printf_float+0x3aa>
 800d5d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d5d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d5d8:	1b9b      	subs	r3, r3, r6
 800d5da:	1b14      	subs	r4, r2, r4
 800d5dc:	429c      	cmp	r4, r3
 800d5de:	dd00      	ble.n	800d5e2 <_printf_float+0x34e>
 800d5e0:	001c      	movs	r4, r3
 800d5e2:	2c00      	cmp	r4, #0
 800d5e4:	dc34      	bgt.n	800d650 <_printf_float+0x3bc>
 800d5e6:	43e3      	mvns	r3, r4
 800d5e8:	2600      	movs	r6, #0
 800d5ea:	17db      	asrs	r3, r3, #31
 800d5ec:	401c      	ands	r4, r3
 800d5ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	1b1b      	subs	r3, r3, r4
 800d5f6:	42b3      	cmp	r3, r6
 800d5f8:	dc00      	bgt.n	800d5fc <_printf_float+0x368>
 800d5fa:	e77c      	b.n	800d4f6 <_printf_float+0x262>
 800d5fc:	002a      	movs	r2, r5
 800d5fe:	2301      	movs	r3, #1
 800d600:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d604:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d606:	321a      	adds	r2, #26
 800d608:	47b8      	blx	r7
 800d60a:	3001      	adds	r0, #1
 800d60c:	d100      	bne.n	800d610 <_printf_float+0x37c>
 800d60e:	e69d      	b.n	800d34c <_printf_float+0xb8>
 800d610:	3601      	adds	r6, #1
 800d612:	e7ec      	b.n	800d5ee <_printf_float+0x35a>
 800d614:	0033      	movs	r3, r6
 800d616:	003a      	movs	r2, r7
 800d618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d61a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d61c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d61e:	47a0      	blx	r4
 800d620:	3001      	adds	r0, #1
 800d622:	d1c5      	bne.n	800d5b0 <_printf_float+0x31c>
 800d624:	e692      	b.n	800d34c <_printf_float+0xb8>
 800d626:	002a      	movs	r2, r5
 800d628:	2301      	movs	r3, #1
 800d62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d62c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d62e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d630:	321a      	adds	r2, #26
 800d632:	47b0      	blx	r6
 800d634:	3001      	adds	r0, #1
 800d636:	d100      	bne.n	800d63a <_printf_float+0x3a6>
 800d638:	e688      	b.n	800d34c <_printf_float+0xb8>
 800d63a:	3401      	adds	r4, #1
 800d63c:	e7bd      	b.n	800d5ba <_printf_float+0x326>
 800d63e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d644:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d646:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d648:	47a0      	blx	r4
 800d64a:	3001      	adds	r0, #1
 800d64c:	d1c1      	bne.n	800d5d2 <_printf_float+0x33e>
 800d64e:	e67d      	b.n	800d34c <_printf_float+0xb8>
 800d650:	19ba      	adds	r2, r7, r6
 800d652:	0023      	movs	r3, r4
 800d654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d658:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d65a:	47b0      	blx	r6
 800d65c:	3001      	adds	r0, #1
 800d65e:	d1c2      	bne.n	800d5e6 <_printf_float+0x352>
 800d660:	e674      	b.n	800d34c <_printf_float+0xb8>
 800d662:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d664:	930c      	str	r3, [sp, #48]	@ 0x30
 800d666:	2b01      	cmp	r3, #1
 800d668:	dc02      	bgt.n	800d670 <_printf_float+0x3dc>
 800d66a:	2301      	movs	r3, #1
 800d66c:	421a      	tst	r2, r3
 800d66e:	d039      	beq.n	800d6e4 <_printf_float+0x450>
 800d670:	2301      	movs	r3, #1
 800d672:	003a      	movs	r2, r7
 800d674:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d678:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d67a:	47b0      	blx	r6
 800d67c:	3001      	adds	r0, #1
 800d67e:	d100      	bne.n	800d682 <_printf_float+0x3ee>
 800d680:	e664      	b.n	800d34c <_printf_float+0xb8>
 800d682:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d684:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d686:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d688:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d68a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d68c:	47b0      	blx	r6
 800d68e:	3001      	adds	r0, #1
 800d690:	d100      	bne.n	800d694 <_printf_float+0x400>
 800d692:	e65b      	b.n	800d34c <_printf_float+0xb8>
 800d694:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d696:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d698:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d69a:	2200      	movs	r2, #0
 800d69c:	3b01      	subs	r3, #1
 800d69e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f7f2 fed3 	bl	800044c <__aeabi_dcmpeq>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d11a      	bne.n	800d6e0 <_printf_float+0x44c>
 800d6aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6ac:	1c7a      	adds	r2, r7, #1
 800d6ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6b2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d6b4:	47b0      	blx	r6
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	d10e      	bne.n	800d6d8 <_printf_float+0x444>
 800d6ba:	e647      	b.n	800d34c <_printf_float+0xb8>
 800d6bc:	002a      	movs	r2, r5
 800d6be:	2301      	movs	r3, #1
 800d6c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d6c6:	321a      	adds	r2, #26
 800d6c8:	47b8      	blx	r7
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	d100      	bne.n	800d6d0 <_printf_float+0x43c>
 800d6ce:	e63d      	b.n	800d34c <_printf_float+0xb8>
 800d6d0:	3601      	adds	r6, #1
 800d6d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6d4:	429e      	cmp	r6, r3
 800d6d6:	dbf1      	blt.n	800d6bc <_printf_float+0x428>
 800d6d8:	002a      	movs	r2, r5
 800d6da:	0023      	movs	r3, r4
 800d6dc:	3250      	adds	r2, #80	@ 0x50
 800d6de:	e6da      	b.n	800d496 <_printf_float+0x202>
 800d6e0:	2600      	movs	r6, #0
 800d6e2:	e7f6      	b.n	800d6d2 <_printf_float+0x43e>
 800d6e4:	003a      	movs	r2, r7
 800d6e6:	e7e2      	b.n	800d6ae <_printf_float+0x41a>
 800d6e8:	002a      	movs	r2, r5
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6f0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d6f2:	3219      	adds	r2, #25
 800d6f4:	47b0      	blx	r6
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	d100      	bne.n	800d6fc <_printf_float+0x468>
 800d6fa:	e627      	b.n	800d34c <_printf_float+0xb8>
 800d6fc:	3401      	adds	r4, #1
 800d6fe:	68eb      	ldr	r3, [r5, #12]
 800d700:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d702:	1a9b      	subs	r3, r3, r2
 800d704:	42a3      	cmp	r3, r4
 800d706:	dcef      	bgt.n	800d6e8 <_printf_float+0x454>
 800d708:	e6f9      	b.n	800d4fe <_printf_float+0x26a>
 800d70a:	2400      	movs	r4, #0
 800d70c:	e7f7      	b.n	800d6fe <_printf_float+0x46a>
 800d70e:	46c0      	nop			@ (mov r8, r8)

0800d710 <_printf_common>:
 800d710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d712:	0016      	movs	r6, r2
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	688a      	ldr	r2, [r1, #8]
 800d718:	690b      	ldr	r3, [r1, #16]
 800d71a:	000c      	movs	r4, r1
 800d71c:	9000      	str	r0, [sp, #0]
 800d71e:	4293      	cmp	r3, r2
 800d720:	da00      	bge.n	800d724 <_printf_common+0x14>
 800d722:	0013      	movs	r3, r2
 800d724:	0022      	movs	r2, r4
 800d726:	6033      	str	r3, [r6, #0]
 800d728:	3243      	adds	r2, #67	@ 0x43
 800d72a:	7812      	ldrb	r2, [r2, #0]
 800d72c:	2a00      	cmp	r2, #0
 800d72e:	d001      	beq.n	800d734 <_printf_common+0x24>
 800d730:	3301      	adds	r3, #1
 800d732:	6033      	str	r3, [r6, #0]
 800d734:	6823      	ldr	r3, [r4, #0]
 800d736:	069b      	lsls	r3, r3, #26
 800d738:	d502      	bpl.n	800d740 <_printf_common+0x30>
 800d73a:	6833      	ldr	r3, [r6, #0]
 800d73c:	3302      	adds	r3, #2
 800d73e:	6033      	str	r3, [r6, #0]
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	2306      	movs	r3, #6
 800d744:	0015      	movs	r5, r2
 800d746:	401d      	ands	r5, r3
 800d748:	421a      	tst	r2, r3
 800d74a:	d027      	beq.n	800d79c <_printf_common+0x8c>
 800d74c:	0023      	movs	r3, r4
 800d74e:	3343      	adds	r3, #67	@ 0x43
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	1e5a      	subs	r2, r3, #1
 800d754:	4193      	sbcs	r3, r2
 800d756:	6822      	ldr	r2, [r4, #0]
 800d758:	0692      	lsls	r2, r2, #26
 800d75a:	d430      	bmi.n	800d7be <_printf_common+0xae>
 800d75c:	0022      	movs	r2, r4
 800d75e:	9901      	ldr	r1, [sp, #4]
 800d760:	9800      	ldr	r0, [sp, #0]
 800d762:	9d08      	ldr	r5, [sp, #32]
 800d764:	3243      	adds	r2, #67	@ 0x43
 800d766:	47a8      	blx	r5
 800d768:	3001      	adds	r0, #1
 800d76a:	d025      	beq.n	800d7b8 <_printf_common+0xa8>
 800d76c:	2206      	movs	r2, #6
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	2500      	movs	r5, #0
 800d772:	4013      	ands	r3, r2
 800d774:	2b04      	cmp	r3, #4
 800d776:	d105      	bne.n	800d784 <_printf_common+0x74>
 800d778:	6833      	ldr	r3, [r6, #0]
 800d77a:	68e5      	ldr	r5, [r4, #12]
 800d77c:	1aed      	subs	r5, r5, r3
 800d77e:	43eb      	mvns	r3, r5
 800d780:	17db      	asrs	r3, r3, #31
 800d782:	401d      	ands	r5, r3
 800d784:	68a3      	ldr	r3, [r4, #8]
 800d786:	6922      	ldr	r2, [r4, #16]
 800d788:	4293      	cmp	r3, r2
 800d78a:	dd01      	ble.n	800d790 <_printf_common+0x80>
 800d78c:	1a9b      	subs	r3, r3, r2
 800d78e:	18ed      	adds	r5, r5, r3
 800d790:	2600      	movs	r6, #0
 800d792:	42b5      	cmp	r5, r6
 800d794:	d120      	bne.n	800d7d8 <_printf_common+0xc8>
 800d796:	2000      	movs	r0, #0
 800d798:	e010      	b.n	800d7bc <_printf_common+0xac>
 800d79a:	3501      	adds	r5, #1
 800d79c:	68e3      	ldr	r3, [r4, #12]
 800d79e:	6832      	ldr	r2, [r6, #0]
 800d7a0:	1a9b      	subs	r3, r3, r2
 800d7a2:	42ab      	cmp	r3, r5
 800d7a4:	ddd2      	ble.n	800d74c <_printf_common+0x3c>
 800d7a6:	0022      	movs	r2, r4
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	9901      	ldr	r1, [sp, #4]
 800d7ac:	9800      	ldr	r0, [sp, #0]
 800d7ae:	9f08      	ldr	r7, [sp, #32]
 800d7b0:	3219      	adds	r2, #25
 800d7b2:	47b8      	blx	r7
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d1f0      	bne.n	800d79a <_printf_common+0x8a>
 800d7b8:	2001      	movs	r0, #1
 800d7ba:	4240      	negs	r0, r0
 800d7bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7be:	2030      	movs	r0, #48	@ 0x30
 800d7c0:	18e1      	adds	r1, r4, r3
 800d7c2:	3143      	adds	r1, #67	@ 0x43
 800d7c4:	7008      	strb	r0, [r1, #0]
 800d7c6:	0021      	movs	r1, r4
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	3145      	adds	r1, #69	@ 0x45
 800d7cc:	7809      	ldrb	r1, [r1, #0]
 800d7ce:	18a2      	adds	r2, r4, r2
 800d7d0:	3243      	adds	r2, #67	@ 0x43
 800d7d2:	3302      	adds	r3, #2
 800d7d4:	7011      	strb	r1, [r2, #0]
 800d7d6:	e7c1      	b.n	800d75c <_printf_common+0x4c>
 800d7d8:	0022      	movs	r2, r4
 800d7da:	2301      	movs	r3, #1
 800d7dc:	9901      	ldr	r1, [sp, #4]
 800d7de:	9800      	ldr	r0, [sp, #0]
 800d7e0:	9f08      	ldr	r7, [sp, #32]
 800d7e2:	321a      	adds	r2, #26
 800d7e4:	47b8      	blx	r7
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	d0e6      	beq.n	800d7b8 <_printf_common+0xa8>
 800d7ea:	3601      	adds	r6, #1
 800d7ec:	e7d1      	b.n	800d792 <_printf_common+0x82>
	...

0800d7f0 <_printf_i>:
 800d7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7f2:	b08b      	sub	sp, #44	@ 0x2c
 800d7f4:	9206      	str	r2, [sp, #24]
 800d7f6:	000a      	movs	r2, r1
 800d7f8:	3243      	adds	r2, #67	@ 0x43
 800d7fa:	9307      	str	r3, [sp, #28]
 800d7fc:	9005      	str	r0, [sp, #20]
 800d7fe:	9203      	str	r2, [sp, #12]
 800d800:	7e0a      	ldrb	r2, [r1, #24]
 800d802:	000c      	movs	r4, r1
 800d804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d806:	2a78      	cmp	r2, #120	@ 0x78
 800d808:	d809      	bhi.n	800d81e <_printf_i+0x2e>
 800d80a:	2a62      	cmp	r2, #98	@ 0x62
 800d80c:	d80b      	bhi.n	800d826 <_printf_i+0x36>
 800d80e:	2a00      	cmp	r2, #0
 800d810:	d100      	bne.n	800d814 <_printf_i+0x24>
 800d812:	e0bc      	b.n	800d98e <_printf_i+0x19e>
 800d814:	497b      	ldr	r1, [pc, #492]	@ (800da04 <_printf_i+0x214>)
 800d816:	9104      	str	r1, [sp, #16]
 800d818:	2a58      	cmp	r2, #88	@ 0x58
 800d81a:	d100      	bne.n	800d81e <_printf_i+0x2e>
 800d81c:	e090      	b.n	800d940 <_printf_i+0x150>
 800d81e:	0025      	movs	r5, r4
 800d820:	3542      	adds	r5, #66	@ 0x42
 800d822:	702a      	strb	r2, [r5, #0]
 800d824:	e022      	b.n	800d86c <_printf_i+0x7c>
 800d826:	0010      	movs	r0, r2
 800d828:	3863      	subs	r0, #99	@ 0x63
 800d82a:	2815      	cmp	r0, #21
 800d82c:	d8f7      	bhi.n	800d81e <_printf_i+0x2e>
 800d82e:	f7f2 fc7d 	bl	800012c <__gnu_thumb1_case_shi>
 800d832:	0016      	.short	0x0016
 800d834:	fff6001f 	.word	0xfff6001f
 800d838:	fff6fff6 	.word	0xfff6fff6
 800d83c:	001ffff6 	.word	0x001ffff6
 800d840:	fff6fff6 	.word	0xfff6fff6
 800d844:	fff6fff6 	.word	0xfff6fff6
 800d848:	003600a1 	.word	0x003600a1
 800d84c:	fff60080 	.word	0xfff60080
 800d850:	00b2fff6 	.word	0x00b2fff6
 800d854:	0036fff6 	.word	0x0036fff6
 800d858:	fff6fff6 	.word	0xfff6fff6
 800d85c:	0084      	.short	0x0084
 800d85e:	0025      	movs	r5, r4
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	3542      	adds	r5, #66	@ 0x42
 800d864:	1d11      	adds	r1, r2, #4
 800d866:	6019      	str	r1, [r3, #0]
 800d868:	6813      	ldr	r3, [r2, #0]
 800d86a:	702b      	strb	r3, [r5, #0]
 800d86c:	2301      	movs	r3, #1
 800d86e:	e0a0      	b.n	800d9b2 <_printf_i+0x1c2>
 800d870:	6818      	ldr	r0, [r3, #0]
 800d872:	6809      	ldr	r1, [r1, #0]
 800d874:	1d02      	adds	r2, r0, #4
 800d876:	060d      	lsls	r5, r1, #24
 800d878:	d50b      	bpl.n	800d892 <_printf_i+0xa2>
 800d87a:	6806      	ldr	r6, [r0, #0]
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	2e00      	cmp	r6, #0
 800d880:	da03      	bge.n	800d88a <_printf_i+0x9a>
 800d882:	232d      	movs	r3, #45	@ 0x2d
 800d884:	9a03      	ldr	r2, [sp, #12]
 800d886:	4276      	negs	r6, r6
 800d888:	7013      	strb	r3, [r2, #0]
 800d88a:	4b5e      	ldr	r3, [pc, #376]	@ (800da04 <_printf_i+0x214>)
 800d88c:	270a      	movs	r7, #10
 800d88e:	9304      	str	r3, [sp, #16]
 800d890:	e018      	b.n	800d8c4 <_printf_i+0xd4>
 800d892:	6806      	ldr	r6, [r0, #0]
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	0649      	lsls	r1, r1, #25
 800d898:	d5f1      	bpl.n	800d87e <_printf_i+0x8e>
 800d89a:	b236      	sxth	r6, r6
 800d89c:	e7ef      	b.n	800d87e <_printf_i+0x8e>
 800d89e:	6808      	ldr	r0, [r1, #0]
 800d8a0:	6819      	ldr	r1, [r3, #0]
 800d8a2:	c940      	ldmia	r1!, {r6}
 800d8a4:	0605      	lsls	r5, r0, #24
 800d8a6:	d402      	bmi.n	800d8ae <_printf_i+0xbe>
 800d8a8:	0640      	lsls	r0, r0, #25
 800d8aa:	d500      	bpl.n	800d8ae <_printf_i+0xbe>
 800d8ac:	b2b6      	uxth	r6, r6
 800d8ae:	6019      	str	r1, [r3, #0]
 800d8b0:	4b54      	ldr	r3, [pc, #336]	@ (800da04 <_printf_i+0x214>)
 800d8b2:	270a      	movs	r7, #10
 800d8b4:	9304      	str	r3, [sp, #16]
 800d8b6:	2a6f      	cmp	r2, #111	@ 0x6f
 800d8b8:	d100      	bne.n	800d8bc <_printf_i+0xcc>
 800d8ba:	3f02      	subs	r7, #2
 800d8bc:	0023      	movs	r3, r4
 800d8be:	2200      	movs	r2, #0
 800d8c0:	3343      	adds	r3, #67	@ 0x43
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	6863      	ldr	r3, [r4, #4]
 800d8c6:	60a3      	str	r3, [r4, #8]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	db03      	blt.n	800d8d4 <_printf_i+0xe4>
 800d8cc:	2104      	movs	r1, #4
 800d8ce:	6822      	ldr	r2, [r4, #0]
 800d8d0:	438a      	bics	r2, r1
 800d8d2:	6022      	str	r2, [r4, #0]
 800d8d4:	2e00      	cmp	r6, #0
 800d8d6:	d102      	bne.n	800d8de <_printf_i+0xee>
 800d8d8:	9d03      	ldr	r5, [sp, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00c      	beq.n	800d8f8 <_printf_i+0x108>
 800d8de:	9d03      	ldr	r5, [sp, #12]
 800d8e0:	0030      	movs	r0, r6
 800d8e2:	0039      	movs	r1, r7
 800d8e4:	f7f2 fcb2 	bl	800024c <__aeabi_uidivmod>
 800d8e8:	9b04      	ldr	r3, [sp, #16]
 800d8ea:	3d01      	subs	r5, #1
 800d8ec:	5c5b      	ldrb	r3, [r3, r1]
 800d8ee:	702b      	strb	r3, [r5, #0]
 800d8f0:	0033      	movs	r3, r6
 800d8f2:	0006      	movs	r6, r0
 800d8f4:	429f      	cmp	r7, r3
 800d8f6:	d9f3      	bls.n	800d8e0 <_printf_i+0xf0>
 800d8f8:	2f08      	cmp	r7, #8
 800d8fa:	d109      	bne.n	800d910 <_printf_i+0x120>
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	07db      	lsls	r3, r3, #31
 800d900:	d506      	bpl.n	800d910 <_printf_i+0x120>
 800d902:	6862      	ldr	r2, [r4, #4]
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	429a      	cmp	r2, r3
 800d908:	dc02      	bgt.n	800d910 <_printf_i+0x120>
 800d90a:	2330      	movs	r3, #48	@ 0x30
 800d90c:	3d01      	subs	r5, #1
 800d90e:	702b      	strb	r3, [r5, #0]
 800d910:	9b03      	ldr	r3, [sp, #12]
 800d912:	1b5b      	subs	r3, r3, r5
 800d914:	6123      	str	r3, [r4, #16]
 800d916:	9b07      	ldr	r3, [sp, #28]
 800d918:	0021      	movs	r1, r4
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	9805      	ldr	r0, [sp, #20]
 800d91e:	9b06      	ldr	r3, [sp, #24]
 800d920:	aa09      	add	r2, sp, #36	@ 0x24
 800d922:	f7ff fef5 	bl	800d710 <_printf_common>
 800d926:	3001      	adds	r0, #1
 800d928:	d148      	bne.n	800d9bc <_printf_i+0x1cc>
 800d92a:	2001      	movs	r0, #1
 800d92c:	4240      	negs	r0, r0
 800d92e:	b00b      	add	sp, #44	@ 0x2c
 800d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d932:	2220      	movs	r2, #32
 800d934:	6809      	ldr	r1, [r1, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	6022      	str	r2, [r4, #0]
 800d93a:	2278      	movs	r2, #120	@ 0x78
 800d93c:	4932      	ldr	r1, [pc, #200]	@ (800da08 <_printf_i+0x218>)
 800d93e:	9104      	str	r1, [sp, #16]
 800d940:	0021      	movs	r1, r4
 800d942:	3145      	adds	r1, #69	@ 0x45
 800d944:	700a      	strb	r2, [r1, #0]
 800d946:	6819      	ldr	r1, [r3, #0]
 800d948:	6822      	ldr	r2, [r4, #0]
 800d94a:	c940      	ldmia	r1!, {r6}
 800d94c:	0610      	lsls	r0, r2, #24
 800d94e:	d402      	bmi.n	800d956 <_printf_i+0x166>
 800d950:	0650      	lsls	r0, r2, #25
 800d952:	d500      	bpl.n	800d956 <_printf_i+0x166>
 800d954:	b2b6      	uxth	r6, r6
 800d956:	6019      	str	r1, [r3, #0]
 800d958:	07d3      	lsls	r3, r2, #31
 800d95a:	d502      	bpl.n	800d962 <_printf_i+0x172>
 800d95c:	2320      	movs	r3, #32
 800d95e:	4313      	orrs	r3, r2
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	2e00      	cmp	r6, #0
 800d964:	d001      	beq.n	800d96a <_printf_i+0x17a>
 800d966:	2710      	movs	r7, #16
 800d968:	e7a8      	b.n	800d8bc <_printf_i+0xcc>
 800d96a:	2220      	movs	r2, #32
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	4393      	bics	r3, r2
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	e7f8      	b.n	800d966 <_printf_i+0x176>
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	680d      	ldr	r5, [r1, #0]
 800d978:	1d10      	adds	r0, r2, #4
 800d97a:	6949      	ldr	r1, [r1, #20]
 800d97c:	6018      	str	r0, [r3, #0]
 800d97e:	6813      	ldr	r3, [r2, #0]
 800d980:	062e      	lsls	r6, r5, #24
 800d982:	d501      	bpl.n	800d988 <_printf_i+0x198>
 800d984:	6019      	str	r1, [r3, #0]
 800d986:	e002      	b.n	800d98e <_printf_i+0x19e>
 800d988:	066d      	lsls	r5, r5, #25
 800d98a:	d5fb      	bpl.n	800d984 <_printf_i+0x194>
 800d98c:	8019      	strh	r1, [r3, #0]
 800d98e:	2300      	movs	r3, #0
 800d990:	9d03      	ldr	r5, [sp, #12]
 800d992:	6123      	str	r3, [r4, #16]
 800d994:	e7bf      	b.n	800d916 <_printf_i+0x126>
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	1d11      	adds	r1, r2, #4
 800d99a:	6019      	str	r1, [r3, #0]
 800d99c:	6815      	ldr	r5, [r2, #0]
 800d99e:	2100      	movs	r1, #0
 800d9a0:	0028      	movs	r0, r5
 800d9a2:	6862      	ldr	r2, [r4, #4]
 800d9a4:	f000 fb37 	bl	800e016 <memchr>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d001      	beq.n	800d9b0 <_printf_i+0x1c0>
 800d9ac:	1b40      	subs	r0, r0, r5
 800d9ae:	6060      	str	r0, [r4, #4]
 800d9b0:	6863      	ldr	r3, [r4, #4]
 800d9b2:	6123      	str	r3, [r4, #16]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	9a03      	ldr	r2, [sp, #12]
 800d9b8:	7013      	strb	r3, [r2, #0]
 800d9ba:	e7ac      	b.n	800d916 <_printf_i+0x126>
 800d9bc:	002a      	movs	r2, r5
 800d9be:	6923      	ldr	r3, [r4, #16]
 800d9c0:	9906      	ldr	r1, [sp, #24]
 800d9c2:	9805      	ldr	r0, [sp, #20]
 800d9c4:	9d07      	ldr	r5, [sp, #28]
 800d9c6:	47a8      	blx	r5
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	d0ae      	beq.n	800d92a <_printf_i+0x13a>
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	079b      	lsls	r3, r3, #30
 800d9d0:	d415      	bmi.n	800d9fe <_printf_i+0x20e>
 800d9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9d4:	68e0      	ldr	r0, [r4, #12]
 800d9d6:	4298      	cmp	r0, r3
 800d9d8:	daa9      	bge.n	800d92e <_printf_i+0x13e>
 800d9da:	0018      	movs	r0, r3
 800d9dc:	e7a7      	b.n	800d92e <_printf_i+0x13e>
 800d9de:	0022      	movs	r2, r4
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	9906      	ldr	r1, [sp, #24]
 800d9e4:	9805      	ldr	r0, [sp, #20]
 800d9e6:	9e07      	ldr	r6, [sp, #28]
 800d9e8:	3219      	adds	r2, #25
 800d9ea:	47b0      	blx	r6
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	d09c      	beq.n	800d92a <_printf_i+0x13a>
 800d9f0:	3501      	adds	r5, #1
 800d9f2:	68e3      	ldr	r3, [r4, #12]
 800d9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9f6:	1a9b      	subs	r3, r3, r2
 800d9f8:	42ab      	cmp	r3, r5
 800d9fa:	dcf0      	bgt.n	800d9de <_printf_i+0x1ee>
 800d9fc:	e7e9      	b.n	800d9d2 <_printf_i+0x1e2>
 800d9fe:	2500      	movs	r5, #0
 800da00:	e7f7      	b.n	800d9f2 <_printf_i+0x202>
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	08012323 	.word	0x08012323
 800da08:	08012334 	.word	0x08012334

0800da0c <std>:
 800da0c:	2300      	movs	r3, #0
 800da0e:	b510      	push	{r4, lr}
 800da10:	0004      	movs	r4, r0
 800da12:	6003      	str	r3, [r0, #0]
 800da14:	6043      	str	r3, [r0, #4]
 800da16:	6083      	str	r3, [r0, #8]
 800da18:	8181      	strh	r1, [r0, #12]
 800da1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800da1c:	81c2      	strh	r2, [r0, #14]
 800da1e:	6103      	str	r3, [r0, #16]
 800da20:	6143      	str	r3, [r0, #20]
 800da22:	6183      	str	r3, [r0, #24]
 800da24:	0019      	movs	r1, r3
 800da26:	2208      	movs	r2, #8
 800da28:	305c      	adds	r0, #92	@ 0x5c
 800da2a:	f000 fa6d 	bl	800df08 <memset>
 800da2e:	4b0b      	ldr	r3, [pc, #44]	@ (800da5c <std+0x50>)
 800da30:	6224      	str	r4, [r4, #32]
 800da32:	6263      	str	r3, [r4, #36]	@ 0x24
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <std+0x54>)
 800da36:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da38:	4b0a      	ldr	r3, [pc, #40]	@ (800da64 <std+0x58>)
 800da3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da3c:	4b0a      	ldr	r3, [pc, #40]	@ (800da68 <std+0x5c>)
 800da3e:	6323      	str	r3, [r4, #48]	@ 0x30
 800da40:	4b0a      	ldr	r3, [pc, #40]	@ (800da6c <std+0x60>)
 800da42:	429c      	cmp	r4, r3
 800da44:	d005      	beq.n	800da52 <std+0x46>
 800da46:	4b0a      	ldr	r3, [pc, #40]	@ (800da70 <std+0x64>)
 800da48:	429c      	cmp	r4, r3
 800da4a:	d002      	beq.n	800da52 <std+0x46>
 800da4c:	4b09      	ldr	r3, [pc, #36]	@ (800da74 <std+0x68>)
 800da4e:	429c      	cmp	r4, r3
 800da50:	d103      	bne.n	800da5a <std+0x4e>
 800da52:	0020      	movs	r0, r4
 800da54:	3058      	adds	r0, #88	@ 0x58
 800da56:	f000 fadb 	bl	800e010 <__retarget_lock_init_recursive>
 800da5a:	bd10      	pop	{r4, pc}
 800da5c:	0800dd2d 	.word	0x0800dd2d
 800da60:	0800dd59 	.word	0x0800dd59
 800da64:	0800dd91 	.word	0x0800dd91
 800da68:	0800ddbd 	.word	0x0800ddbd
 800da6c:	20000478 	.word	0x20000478
 800da70:	200004e0 	.word	0x200004e0
 800da74:	20000548 	.word	0x20000548

0800da78 <stdio_exit_handler>:
 800da78:	b510      	push	{r4, lr}
 800da7a:	4a03      	ldr	r2, [pc, #12]	@ (800da88 <stdio_exit_handler+0x10>)
 800da7c:	4903      	ldr	r1, [pc, #12]	@ (800da8c <stdio_exit_handler+0x14>)
 800da7e:	4804      	ldr	r0, [pc, #16]	@ (800da90 <stdio_exit_handler+0x18>)
 800da80:	f000 f86c 	bl	800db5c <_fwalk_sglue>
 800da84:	bd10      	pop	{r4, pc}
 800da86:	46c0      	nop			@ (mov r8, r8)
 800da88:	20000020 	.word	0x20000020
 800da8c:	08010361 	.word	0x08010361
 800da90:	20000030 	.word	0x20000030

0800da94 <cleanup_stdio>:
 800da94:	6841      	ldr	r1, [r0, #4]
 800da96:	4b0b      	ldr	r3, [pc, #44]	@ (800dac4 <cleanup_stdio+0x30>)
 800da98:	b510      	push	{r4, lr}
 800da9a:	0004      	movs	r4, r0
 800da9c:	4299      	cmp	r1, r3
 800da9e:	d001      	beq.n	800daa4 <cleanup_stdio+0x10>
 800daa0:	f002 fc5e 	bl	8010360 <_fflush_r>
 800daa4:	68a1      	ldr	r1, [r4, #8]
 800daa6:	4b08      	ldr	r3, [pc, #32]	@ (800dac8 <cleanup_stdio+0x34>)
 800daa8:	4299      	cmp	r1, r3
 800daaa:	d002      	beq.n	800dab2 <cleanup_stdio+0x1e>
 800daac:	0020      	movs	r0, r4
 800daae:	f002 fc57 	bl	8010360 <_fflush_r>
 800dab2:	68e1      	ldr	r1, [r4, #12]
 800dab4:	4b05      	ldr	r3, [pc, #20]	@ (800dacc <cleanup_stdio+0x38>)
 800dab6:	4299      	cmp	r1, r3
 800dab8:	d002      	beq.n	800dac0 <cleanup_stdio+0x2c>
 800daba:	0020      	movs	r0, r4
 800dabc:	f002 fc50 	bl	8010360 <_fflush_r>
 800dac0:	bd10      	pop	{r4, pc}
 800dac2:	46c0      	nop			@ (mov r8, r8)
 800dac4:	20000478 	.word	0x20000478
 800dac8:	200004e0 	.word	0x200004e0
 800dacc:	20000548 	.word	0x20000548

0800dad0 <global_stdio_init.part.0>:
 800dad0:	b510      	push	{r4, lr}
 800dad2:	4b09      	ldr	r3, [pc, #36]	@ (800daf8 <global_stdio_init.part.0+0x28>)
 800dad4:	4a09      	ldr	r2, [pc, #36]	@ (800dafc <global_stdio_init.part.0+0x2c>)
 800dad6:	2104      	movs	r1, #4
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	4809      	ldr	r0, [pc, #36]	@ (800db00 <global_stdio_init.part.0+0x30>)
 800dadc:	2200      	movs	r2, #0
 800dade:	f7ff ff95 	bl	800da0c <std>
 800dae2:	2201      	movs	r2, #1
 800dae4:	2109      	movs	r1, #9
 800dae6:	4807      	ldr	r0, [pc, #28]	@ (800db04 <global_stdio_init.part.0+0x34>)
 800dae8:	f7ff ff90 	bl	800da0c <std>
 800daec:	2202      	movs	r2, #2
 800daee:	2112      	movs	r1, #18
 800daf0:	4805      	ldr	r0, [pc, #20]	@ (800db08 <global_stdio_init.part.0+0x38>)
 800daf2:	f7ff ff8b 	bl	800da0c <std>
 800daf6:	bd10      	pop	{r4, pc}
 800daf8:	200005b0 	.word	0x200005b0
 800dafc:	0800da79 	.word	0x0800da79
 800db00:	20000478 	.word	0x20000478
 800db04:	200004e0 	.word	0x200004e0
 800db08:	20000548 	.word	0x20000548

0800db0c <__sfp_lock_acquire>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	4802      	ldr	r0, [pc, #8]	@ (800db18 <__sfp_lock_acquire+0xc>)
 800db10:	f000 fa7f 	bl	800e012 <__retarget_lock_acquire_recursive>
 800db14:	bd10      	pop	{r4, pc}
 800db16:	46c0      	nop			@ (mov r8, r8)
 800db18:	200005b9 	.word	0x200005b9

0800db1c <__sfp_lock_release>:
 800db1c:	b510      	push	{r4, lr}
 800db1e:	4802      	ldr	r0, [pc, #8]	@ (800db28 <__sfp_lock_release+0xc>)
 800db20:	f000 fa78 	bl	800e014 <__retarget_lock_release_recursive>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	46c0      	nop			@ (mov r8, r8)
 800db28:	200005b9 	.word	0x200005b9

0800db2c <__sinit>:
 800db2c:	b510      	push	{r4, lr}
 800db2e:	0004      	movs	r4, r0
 800db30:	f7ff ffec 	bl	800db0c <__sfp_lock_acquire>
 800db34:	6a23      	ldr	r3, [r4, #32]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <__sinit+0x14>
 800db3a:	f7ff ffef 	bl	800db1c <__sfp_lock_release>
 800db3e:	bd10      	pop	{r4, pc}
 800db40:	4b04      	ldr	r3, [pc, #16]	@ (800db54 <__sinit+0x28>)
 800db42:	6223      	str	r3, [r4, #32]
 800db44:	4b04      	ldr	r3, [pc, #16]	@ (800db58 <__sinit+0x2c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1f6      	bne.n	800db3a <__sinit+0xe>
 800db4c:	f7ff ffc0 	bl	800dad0 <global_stdio_init.part.0>
 800db50:	e7f3      	b.n	800db3a <__sinit+0xe>
 800db52:	46c0      	nop			@ (mov r8, r8)
 800db54:	0800da95 	.word	0x0800da95
 800db58:	200005b0 	.word	0x200005b0

0800db5c <_fwalk_sglue>:
 800db5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db5e:	0014      	movs	r4, r2
 800db60:	2600      	movs	r6, #0
 800db62:	9000      	str	r0, [sp, #0]
 800db64:	9101      	str	r1, [sp, #4]
 800db66:	68a5      	ldr	r5, [r4, #8]
 800db68:	6867      	ldr	r7, [r4, #4]
 800db6a:	3f01      	subs	r7, #1
 800db6c:	d504      	bpl.n	800db78 <_fwalk_sglue+0x1c>
 800db6e:	6824      	ldr	r4, [r4, #0]
 800db70:	2c00      	cmp	r4, #0
 800db72:	d1f8      	bne.n	800db66 <_fwalk_sglue+0xa>
 800db74:	0030      	movs	r0, r6
 800db76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db78:	89ab      	ldrh	r3, [r5, #12]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d908      	bls.n	800db90 <_fwalk_sglue+0x34>
 800db7e:	220e      	movs	r2, #14
 800db80:	5eab      	ldrsh	r3, [r5, r2]
 800db82:	3301      	adds	r3, #1
 800db84:	d004      	beq.n	800db90 <_fwalk_sglue+0x34>
 800db86:	0029      	movs	r1, r5
 800db88:	9800      	ldr	r0, [sp, #0]
 800db8a:	9b01      	ldr	r3, [sp, #4]
 800db8c:	4798      	blx	r3
 800db8e:	4306      	orrs	r6, r0
 800db90:	3568      	adds	r5, #104	@ 0x68
 800db92:	e7ea      	b.n	800db6a <_fwalk_sglue+0xe>

0800db94 <iprintf>:
 800db94:	b40f      	push	{r0, r1, r2, r3}
 800db96:	b507      	push	{r0, r1, r2, lr}
 800db98:	4905      	ldr	r1, [pc, #20]	@ (800dbb0 <iprintf+0x1c>)
 800db9a:	ab04      	add	r3, sp, #16
 800db9c:	6808      	ldr	r0, [r1, #0]
 800db9e:	cb04      	ldmia	r3!, {r2}
 800dba0:	6881      	ldr	r1, [r0, #8]
 800dba2:	9301      	str	r3, [sp, #4]
 800dba4:	f002 f8da 	bl	800fd5c <_vfiprintf_r>
 800dba8:	b003      	add	sp, #12
 800dbaa:	bc08      	pop	{r3}
 800dbac:	b004      	add	sp, #16
 800dbae:	4718      	bx	r3
 800dbb0:	2000002c 	.word	0x2000002c

0800dbb4 <_puts_r>:
 800dbb4:	6a03      	ldr	r3, [r0, #32]
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	0005      	movs	r5, r0
 800dbba:	000e      	movs	r6, r1
 800dbbc:	6884      	ldr	r4, [r0, #8]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <_puts_r+0x12>
 800dbc2:	f7ff ffb3 	bl	800db2c <__sinit>
 800dbc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbc8:	07db      	lsls	r3, r3, #31
 800dbca:	d405      	bmi.n	800dbd8 <_puts_r+0x24>
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	059b      	lsls	r3, r3, #22
 800dbd0:	d402      	bmi.n	800dbd8 <_puts_r+0x24>
 800dbd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbd4:	f000 fa1d 	bl	800e012 <__retarget_lock_acquire_recursive>
 800dbd8:	89a3      	ldrh	r3, [r4, #12]
 800dbda:	071b      	lsls	r3, r3, #28
 800dbdc:	d502      	bpl.n	800dbe4 <_puts_r+0x30>
 800dbde:	6923      	ldr	r3, [r4, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d11f      	bne.n	800dc24 <_puts_r+0x70>
 800dbe4:	0021      	movs	r1, r4
 800dbe6:	0028      	movs	r0, r5
 800dbe8:	f000 f930 	bl	800de4c <__swsetup_r>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d019      	beq.n	800dc24 <_puts_r+0x70>
 800dbf0:	2501      	movs	r5, #1
 800dbf2:	426d      	negs	r5, r5
 800dbf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf6:	07db      	lsls	r3, r3, #31
 800dbf8:	d405      	bmi.n	800dc06 <_puts_r+0x52>
 800dbfa:	89a3      	ldrh	r3, [r4, #12]
 800dbfc:	059b      	lsls	r3, r3, #22
 800dbfe:	d402      	bmi.n	800dc06 <_puts_r+0x52>
 800dc00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc02:	f000 fa07 	bl	800e014 <__retarget_lock_release_recursive>
 800dc06:	0028      	movs	r0, r5
 800dc08:	bd70      	pop	{r4, r5, r6, pc}
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	60a3      	str	r3, [r4, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	da04      	bge.n	800dc1c <_puts_r+0x68>
 800dc12:	69a2      	ldr	r2, [r4, #24]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	dc16      	bgt.n	800dc46 <_puts_r+0x92>
 800dc18:	290a      	cmp	r1, #10
 800dc1a:	d014      	beq.n	800dc46 <_puts_r+0x92>
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	6022      	str	r2, [r4, #0]
 800dc22:	7019      	strb	r1, [r3, #0]
 800dc24:	68a3      	ldr	r3, [r4, #8]
 800dc26:	7831      	ldrb	r1, [r6, #0]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	2900      	cmp	r1, #0
 800dc2c:	d1ed      	bne.n	800dc0a <_puts_r+0x56>
 800dc2e:	60a3      	str	r3, [r4, #8]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	da0f      	bge.n	800dc54 <_puts_r+0xa0>
 800dc34:	0022      	movs	r2, r4
 800dc36:	0028      	movs	r0, r5
 800dc38:	310a      	adds	r1, #10
 800dc3a:	f000 f8c5 	bl	800ddc8 <__swbuf_r>
 800dc3e:	3001      	adds	r0, #1
 800dc40:	d0d6      	beq.n	800dbf0 <_puts_r+0x3c>
 800dc42:	250a      	movs	r5, #10
 800dc44:	e7d6      	b.n	800dbf4 <_puts_r+0x40>
 800dc46:	0022      	movs	r2, r4
 800dc48:	0028      	movs	r0, r5
 800dc4a:	f000 f8bd 	bl	800ddc8 <__swbuf_r>
 800dc4e:	3001      	adds	r0, #1
 800dc50:	d1e8      	bne.n	800dc24 <_puts_r+0x70>
 800dc52:	e7cd      	b.n	800dbf0 <_puts_r+0x3c>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	1c5a      	adds	r2, r3, #1
 800dc58:	6022      	str	r2, [r4, #0]
 800dc5a:	220a      	movs	r2, #10
 800dc5c:	701a      	strb	r2, [r3, #0]
 800dc5e:	e7f0      	b.n	800dc42 <_puts_r+0x8e>

0800dc60 <puts>:
 800dc60:	b510      	push	{r4, lr}
 800dc62:	4b03      	ldr	r3, [pc, #12]	@ (800dc70 <puts+0x10>)
 800dc64:	0001      	movs	r1, r0
 800dc66:	6818      	ldr	r0, [r3, #0]
 800dc68:	f7ff ffa4 	bl	800dbb4 <_puts_r>
 800dc6c:	bd10      	pop	{r4, pc}
 800dc6e:	46c0      	nop			@ (mov r8, r8)
 800dc70:	2000002c 	.word	0x2000002c

0800dc74 <sniprintf>:
 800dc74:	b40c      	push	{r2, r3}
 800dc76:	b530      	push	{r4, r5, lr}
 800dc78:	4b17      	ldr	r3, [pc, #92]	@ (800dcd8 <sniprintf+0x64>)
 800dc7a:	000c      	movs	r4, r1
 800dc7c:	681d      	ldr	r5, [r3, #0]
 800dc7e:	b09d      	sub	sp, #116	@ 0x74
 800dc80:	2900      	cmp	r1, #0
 800dc82:	da08      	bge.n	800dc96 <sniprintf+0x22>
 800dc84:	238b      	movs	r3, #139	@ 0x8b
 800dc86:	2001      	movs	r0, #1
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	4240      	negs	r0, r0
 800dc8c:	b01d      	add	sp, #116	@ 0x74
 800dc8e:	bc30      	pop	{r4, r5}
 800dc90:	bc08      	pop	{r3}
 800dc92:	b002      	add	sp, #8
 800dc94:	4718      	bx	r3
 800dc96:	2382      	movs	r3, #130	@ 0x82
 800dc98:	466a      	mov	r2, sp
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	8293      	strh	r3, [r2, #20]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	9002      	str	r0, [sp, #8]
 800dca2:	9006      	str	r0, [sp, #24]
 800dca4:	4299      	cmp	r1, r3
 800dca6:	d000      	beq.n	800dcaa <sniprintf+0x36>
 800dca8:	1e4b      	subs	r3, r1, #1
 800dcaa:	9304      	str	r3, [sp, #16]
 800dcac:	9307      	str	r3, [sp, #28]
 800dcae:	2301      	movs	r3, #1
 800dcb0:	466a      	mov	r2, sp
 800dcb2:	425b      	negs	r3, r3
 800dcb4:	82d3      	strh	r3, [r2, #22]
 800dcb6:	0028      	movs	r0, r5
 800dcb8:	ab21      	add	r3, sp, #132	@ 0x84
 800dcba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dcbc:	a902      	add	r1, sp, #8
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	f001 fd68 	bl	800f794 <_svfiprintf_r>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	da01      	bge.n	800dccc <sniprintf+0x58>
 800dcc8:	238b      	movs	r3, #139	@ 0x8b
 800dcca:	602b      	str	r3, [r5, #0]
 800dccc:	2c00      	cmp	r4, #0
 800dcce:	d0dd      	beq.n	800dc8c <sniprintf+0x18>
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	9b02      	ldr	r3, [sp, #8]
 800dcd4:	701a      	strb	r2, [r3, #0]
 800dcd6:	e7d9      	b.n	800dc8c <sniprintf+0x18>
 800dcd8:	2000002c 	.word	0x2000002c

0800dcdc <siscanf>:
 800dcdc:	b40e      	push	{r1, r2, r3}
 800dcde:	b530      	push	{r4, r5, lr}
 800dce0:	2381      	movs	r3, #129	@ 0x81
 800dce2:	b09c      	sub	sp, #112	@ 0x70
 800dce4:	466a      	mov	r2, sp
 800dce6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	cc20      	ldmia	r4!, {r5}
 800dcec:	8293      	strh	r3, [r2, #20]
 800dcee:	9002      	str	r0, [sp, #8]
 800dcf0:	9006      	str	r0, [sp, #24]
 800dcf2:	f7f2 fa09 	bl	8000108 <strlen>
 800dcf6:	4b0b      	ldr	r3, [pc, #44]	@ (800dd24 <siscanf+0x48>)
 800dcf8:	466a      	mov	r2, sp
 800dcfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9003      	str	r0, [sp, #12]
 800dd00:	9007      	str	r0, [sp, #28]
 800dd02:	4809      	ldr	r0, [pc, #36]	@ (800dd28 <siscanf+0x4c>)
 800dd04:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd06:	9314      	str	r3, [sp, #80]	@ 0x50
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	82d3      	strh	r3, [r2, #22]
 800dd0c:	a902      	add	r1, sp, #8
 800dd0e:	0023      	movs	r3, r4
 800dd10:	002a      	movs	r2, r5
 800dd12:	6800      	ldr	r0, [r0, #0]
 800dd14:	9401      	str	r4, [sp, #4]
 800dd16:	f001 fe97 	bl	800fa48 <__ssvfiscanf_r>
 800dd1a:	b01c      	add	sp, #112	@ 0x70
 800dd1c:	bc30      	pop	{r4, r5}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	b003      	add	sp, #12
 800dd22:	4718      	bx	r3
 800dd24:	0800dd55 	.word	0x0800dd55
 800dd28:	2000002c 	.word	0x2000002c

0800dd2c <__sread>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	000c      	movs	r4, r1
 800dd30:	250e      	movs	r5, #14
 800dd32:	5f49      	ldrsh	r1, [r1, r5]
 800dd34:	f000 f91a 	bl	800df6c <_read_r>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	db03      	blt.n	800dd44 <__sread+0x18>
 800dd3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800dd3e:	181b      	adds	r3, r3, r0
 800dd40:	6563      	str	r3, [r4, #84]	@ 0x54
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	89a3      	ldrh	r3, [r4, #12]
 800dd46:	4a02      	ldr	r2, [pc, #8]	@ (800dd50 <__sread+0x24>)
 800dd48:	4013      	ands	r3, r2
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	e7f9      	b.n	800dd42 <__sread+0x16>
 800dd4e:	46c0      	nop			@ (mov r8, r8)
 800dd50:	ffffefff 	.word	0xffffefff

0800dd54 <__seofread>:
 800dd54:	2000      	movs	r0, #0
 800dd56:	4770      	bx	lr

0800dd58 <__swrite>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	001f      	movs	r7, r3
 800dd5c:	898b      	ldrh	r3, [r1, #12]
 800dd5e:	0005      	movs	r5, r0
 800dd60:	000c      	movs	r4, r1
 800dd62:	0016      	movs	r6, r2
 800dd64:	05db      	lsls	r3, r3, #23
 800dd66:	d505      	bpl.n	800dd74 <__swrite+0x1c>
 800dd68:	230e      	movs	r3, #14
 800dd6a:	5ec9      	ldrsh	r1, [r1, r3]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2302      	movs	r3, #2
 800dd70:	f000 f8e8 	bl	800df44 <_lseek_r>
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	4a05      	ldr	r2, [pc, #20]	@ (800dd8c <__swrite+0x34>)
 800dd78:	0028      	movs	r0, r5
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	81a3      	strh	r3, [r4, #12]
 800dd7e:	0032      	movs	r2, r6
 800dd80:	230e      	movs	r3, #14
 800dd82:	5ee1      	ldrsh	r1, [r4, r3]
 800dd84:	003b      	movs	r3, r7
 800dd86:	f000 f905 	bl	800df94 <_write_r>
 800dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd8c:	ffffefff 	.word	0xffffefff

0800dd90 <__sseek>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	000c      	movs	r4, r1
 800dd94:	250e      	movs	r5, #14
 800dd96:	5f49      	ldrsh	r1, [r1, r5]
 800dd98:	f000 f8d4 	bl	800df44 <_lseek_r>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	1c42      	adds	r2, r0, #1
 800dda0:	d103      	bne.n	800ddaa <__sseek+0x1a>
 800dda2:	4a05      	ldr	r2, [pc, #20]	@ (800ddb8 <__sseek+0x28>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	81a3      	strh	r3, [r4, #12]
 800dda8:	bd70      	pop	{r4, r5, r6, pc}
 800ddaa:	2280      	movs	r2, #128	@ 0x80
 800ddac:	0152      	lsls	r2, r2, #5
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ddb4:	e7f8      	b.n	800dda8 <__sseek+0x18>
 800ddb6:	46c0      	nop			@ (mov r8, r8)
 800ddb8:	ffffefff 	.word	0xffffefff

0800ddbc <__sclose>:
 800ddbc:	b510      	push	{r4, lr}
 800ddbe:	230e      	movs	r3, #14
 800ddc0:	5ec9      	ldrsh	r1, [r1, r3]
 800ddc2:	f000 f8ad 	bl	800df20 <_close_r>
 800ddc6:	bd10      	pop	{r4, pc}

0800ddc8 <__swbuf_r>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	0006      	movs	r6, r0
 800ddcc:	000d      	movs	r5, r1
 800ddce:	0014      	movs	r4, r2
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d004      	beq.n	800ddde <__swbuf_r+0x16>
 800ddd4:	6a03      	ldr	r3, [r0, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <__swbuf_r+0x16>
 800ddda:	f7ff fea7 	bl	800db2c <__sinit>
 800ddde:	69a3      	ldr	r3, [r4, #24]
 800dde0:	60a3      	str	r3, [r4, #8]
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	071b      	lsls	r3, r3, #28
 800dde6:	d502      	bpl.n	800ddee <__swbuf_r+0x26>
 800dde8:	6923      	ldr	r3, [r4, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d109      	bne.n	800de02 <__swbuf_r+0x3a>
 800ddee:	0021      	movs	r1, r4
 800ddf0:	0030      	movs	r0, r6
 800ddf2:	f000 f82b 	bl	800de4c <__swsetup_r>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d003      	beq.n	800de02 <__swbuf_r+0x3a>
 800ddfa:	2501      	movs	r5, #1
 800ddfc:	426d      	negs	r5, r5
 800ddfe:	0028      	movs	r0, r5
 800de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de02:	6923      	ldr	r3, [r4, #16]
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	b2ef      	uxtb	r7, r5
 800de08:	1ac0      	subs	r0, r0, r3
 800de0a:	6963      	ldr	r3, [r4, #20]
 800de0c:	b2ed      	uxtb	r5, r5
 800de0e:	4283      	cmp	r3, r0
 800de10:	dc05      	bgt.n	800de1e <__swbuf_r+0x56>
 800de12:	0021      	movs	r1, r4
 800de14:	0030      	movs	r0, r6
 800de16:	f002 faa3 	bl	8010360 <_fflush_r>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d1ed      	bne.n	800ddfa <__swbuf_r+0x32>
 800de1e:	68a3      	ldr	r3, [r4, #8]
 800de20:	3001      	adds	r0, #1
 800de22:	3b01      	subs	r3, #1
 800de24:	60a3      	str	r3, [r4, #8]
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	6022      	str	r2, [r4, #0]
 800de2c:	701f      	strb	r7, [r3, #0]
 800de2e:	6963      	ldr	r3, [r4, #20]
 800de30:	4283      	cmp	r3, r0
 800de32:	d004      	beq.n	800de3e <__swbuf_r+0x76>
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	07db      	lsls	r3, r3, #31
 800de38:	d5e1      	bpl.n	800ddfe <__swbuf_r+0x36>
 800de3a:	2d0a      	cmp	r5, #10
 800de3c:	d1df      	bne.n	800ddfe <__swbuf_r+0x36>
 800de3e:	0021      	movs	r1, r4
 800de40:	0030      	movs	r0, r6
 800de42:	f002 fa8d 	bl	8010360 <_fflush_r>
 800de46:	2800      	cmp	r0, #0
 800de48:	d0d9      	beq.n	800ddfe <__swbuf_r+0x36>
 800de4a:	e7d6      	b.n	800ddfa <__swbuf_r+0x32>

0800de4c <__swsetup_r>:
 800de4c:	4b2d      	ldr	r3, [pc, #180]	@ (800df04 <__swsetup_r+0xb8>)
 800de4e:	b570      	push	{r4, r5, r6, lr}
 800de50:	0005      	movs	r5, r0
 800de52:	6818      	ldr	r0, [r3, #0]
 800de54:	000c      	movs	r4, r1
 800de56:	2800      	cmp	r0, #0
 800de58:	d004      	beq.n	800de64 <__swsetup_r+0x18>
 800de5a:	6a03      	ldr	r3, [r0, #32]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <__swsetup_r+0x18>
 800de60:	f7ff fe64 	bl	800db2c <__sinit>
 800de64:	230c      	movs	r3, #12
 800de66:	5ee2      	ldrsh	r2, [r4, r3]
 800de68:	0713      	lsls	r3, r2, #28
 800de6a:	d423      	bmi.n	800deb4 <__swsetup_r+0x68>
 800de6c:	06d3      	lsls	r3, r2, #27
 800de6e:	d407      	bmi.n	800de80 <__swsetup_r+0x34>
 800de70:	2309      	movs	r3, #9
 800de72:	602b      	str	r3, [r5, #0]
 800de74:	2340      	movs	r3, #64	@ 0x40
 800de76:	2001      	movs	r0, #1
 800de78:	4313      	orrs	r3, r2
 800de7a:	81a3      	strh	r3, [r4, #12]
 800de7c:	4240      	negs	r0, r0
 800de7e:	e03a      	b.n	800def6 <__swsetup_r+0xaa>
 800de80:	0752      	lsls	r2, r2, #29
 800de82:	d513      	bpl.n	800deac <__swsetup_r+0x60>
 800de84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de86:	2900      	cmp	r1, #0
 800de88:	d008      	beq.n	800de9c <__swsetup_r+0x50>
 800de8a:	0023      	movs	r3, r4
 800de8c:	3344      	adds	r3, #68	@ 0x44
 800de8e:	4299      	cmp	r1, r3
 800de90:	d002      	beq.n	800de98 <__swsetup_r+0x4c>
 800de92:	0028      	movs	r0, r5
 800de94:	f000 ff74 	bl	800ed80 <_free_r>
 800de98:	2300      	movs	r3, #0
 800de9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800de9c:	2224      	movs	r2, #36	@ 0x24
 800de9e:	89a3      	ldrh	r3, [r4, #12]
 800dea0:	4393      	bics	r3, r2
 800dea2:	81a3      	strh	r3, [r4, #12]
 800dea4:	2300      	movs	r3, #0
 800dea6:	6063      	str	r3, [r4, #4]
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	6023      	str	r3, [r4, #0]
 800deac:	2308      	movs	r3, #8
 800deae:	89a2      	ldrh	r2, [r4, #12]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	81a3      	strh	r3, [r4, #12]
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10b      	bne.n	800ded2 <__swsetup_r+0x86>
 800deba:	21a0      	movs	r1, #160	@ 0xa0
 800debc:	2280      	movs	r2, #128	@ 0x80
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	0089      	lsls	r1, r1, #2
 800dec2:	0092      	lsls	r2, r2, #2
 800dec4:	400b      	ands	r3, r1
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d003      	beq.n	800ded2 <__swsetup_r+0x86>
 800deca:	0021      	movs	r1, r4
 800decc:	0028      	movs	r0, r5
 800dece:	f002 faad 	bl	801042c <__smakebuf_r>
 800ded2:	230c      	movs	r3, #12
 800ded4:	5ee2      	ldrsh	r2, [r4, r3]
 800ded6:	2101      	movs	r1, #1
 800ded8:	0013      	movs	r3, r2
 800deda:	400b      	ands	r3, r1
 800dedc:	420a      	tst	r2, r1
 800dede:	d00b      	beq.n	800def8 <__swsetup_r+0xac>
 800dee0:	2300      	movs	r3, #0
 800dee2:	60a3      	str	r3, [r4, #8]
 800dee4:	6963      	ldr	r3, [r4, #20]
 800dee6:	425b      	negs	r3, r3
 800dee8:	61a3      	str	r3, [r4, #24]
 800deea:	2000      	movs	r0, #0
 800deec:	6923      	ldr	r3, [r4, #16]
 800deee:	4283      	cmp	r3, r0
 800def0:	d101      	bne.n	800def6 <__swsetup_r+0xaa>
 800def2:	0613      	lsls	r3, r2, #24
 800def4:	d4be      	bmi.n	800de74 <__swsetup_r+0x28>
 800def6:	bd70      	pop	{r4, r5, r6, pc}
 800def8:	0791      	lsls	r1, r2, #30
 800defa:	d400      	bmi.n	800defe <__swsetup_r+0xb2>
 800defc:	6963      	ldr	r3, [r4, #20]
 800defe:	60a3      	str	r3, [r4, #8]
 800df00:	e7f3      	b.n	800deea <__swsetup_r+0x9e>
 800df02:	46c0      	nop			@ (mov r8, r8)
 800df04:	2000002c 	.word	0x2000002c

0800df08 <memset>:
 800df08:	0003      	movs	r3, r0
 800df0a:	1882      	adds	r2, r0, r2
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d100      	bne.n	800df12 <memset+0xa>
 800df10:	4770      	bx	lr
 800df12:	7019      	strb	r1, [r3, #0]
 800df14:	3301      	adds	r3, #1
 800df16:	e7f9      	b.n	800df0c <memset+0x4>

0800df18 <_localeconv_r>:
 800df18:	4800      	ldr	r0, [pc, #0]	@ (800df1c <_localeconv_r+0x4>)
 800df1a:	4770      	bx	lr
 800df1c:	2000016c 	.word	0x2000016c

0800df20 <_close_r>:
 800df20:	2300      	movs	r3, #0
 800df22:	b570      	push	{r4, r5, r6, lr}
 800df24:	4d06      	ldr	r5, [pc, #24]	@ (800df40 <_close_r+0x20>)
 800df26:	0004      	movs	r4, r0
 800df28:	0008      	movs	r0, r1
 800df2a:	602b      	str	r3, [r5, #0]
 800df2c:	f7f7 f8ca 	bl	80050c4 <_close>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d103      	bne.n	800df3c <_close_r+0x1c>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d000      	beq.n	800df3c <_close_r+0x1c>
 800df3a:	6023      	str	r3, [r4, #0]
 800df3c:	bd70      	pop	{r4, r5, r6, pc}
 800df3e:	46c0      	nop			@ (mov r8, r8)
 800df40:	200005b4 	.word	0x200005b4

0800df44 <_lseek_r>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	0004      	movs	r4, r0
 800df48:	0008      	movs	r0, r1
 800df4a:	0011      	movs	r1, r2
 800df4c:	001a      	movs	r2, r3
 800df4e:	2300      	movs	r3, #0
 800df50:	4d05      	ldr	r5, [pc, #20]	@ (800df68 <_lseek_r+0x24>)
 800df52:	602b      	str	r3, [r5, #0]
 800df54:	f7f7 f8d7 	bl	8005106 <_lseek>
 800df58:	1c43      	adds	r3, r0, #1
 800df5a:	d103      	bne.n	800df64 <_lseek_r+0x20>
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d000      	beq.n	800df64 <_lseek_r+0x20>
 800df62:	6023      	str	r3, [r4, #0]
 800df64:	bd70      	pop	{r4, r5, r6, pc}
 800df66:	46c0      	nop			@ (mov r8, r8)
 800df68:	200005b4 	.word	0x200005b4

0800df6c <_read_r>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	0004      	movs	r4, r0
 800df70:	0008      	movs	r0, r1
 800df72:	0011      	movs	r1, r2
 800df74:	001a      	movs	r2, r3
 800df76:	2300      	movs	r3, #0
 800df78:	4d05      	ldr	r5, [pc, #20]	@ (800df90 <_read_r+0x24>)
 800df7a:	602b      	str	r3, [r5, #0]
 800df7c:	f7f7 f869 	bl	8005052 <_read>
 800df80:	1c43      	adds	r3, r0, #1
 800df82:	d103      	bne.n	800df8c <_read_r+0x20>
 800df84:	682b      	ldr	r3, [r5, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d000      	beq.n	800df8c <_read_r+0x20>
 800df8a:	6023      	str	r3, [r4, #0]
 800df8c:	bd70      	pop	{r4, r5, r6, pc}
 800df8e:	46c0      	nop			@ (mov r8, r8)
 800df90:	200005b4 	.word	0x200005b4

0800df94 <_write_r>:
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	0004      	movs	r4, r0
 800df98:	0008      	movs	r0, r1
 800df9a:	0011      	movs	r1, r2
 800df9c:	001a      	movs	r2, r3
 800df9e:	2300      	movs	r3, #0
 800dfa0:	4d05      	ldr	r5, [pc, #20]	@ (800dfb8 <_write_r+0x24>)
 800dfa2:	602b      	str	r3, [r5, #0]
 800dfa4:	f7f7 f872 	bl	800508c <_write>
 800dfa8:	1c43      	adds	r3, r0, #1
 800dfaa:	d103      	bne.n	800dfb4 <_write_r+0x20>
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d000      	beq.n	800dfb4 <_write_r+0x20>
 800dfb2:	6023      	str	r3, [r4, #0]
 800dfb4:	bd70      	pop	{r4, r5, r6, pc}
 800dfb6:	46c0      	nop			@ (mov r8, r8)
 800dfb8:	200005b4 	.word	0x200005b4

0800dfbc <__errno>:
 800dfbc:	4b01      	ldr	r3, [pc, #4]	@ (800dfc4 <__errno+0x8>)
 800dfbe:	6818      	ldr	r0, [r3, #0]
 800dfc0:	4770      	bx	lr
 800dfc2:	46c0      	nop			@ (mov r8, r8)
 800dfc4:	2000002c 	.word	0x2000002c

0800dfc8 <__libc_init_array>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	2600      	movs	r6, #0
 800dfcc:	4c0c      	ldr	r4, [pc, #48]	@ (800e000 <__libc_init_array+0x38>)
 800dfce:	4d0d      	ldr	r5, [pc, #52]	@ (800e004 <__libc_init_array+0x3c>)
 800dfd0:	1b64      	subs	r4, r4, r5
 800dfd2:	10a4      	asrs	r4, r4, #2
 800dfd4:	42a6      	cmp	r6, r4
 800dfd6:	d109      	bne.n	800dfec <__libc_init_array+0x24>
 800dfd8:	2600      	movs	r6, #0
 800dfda:	f003 fc39 	bl	8011850 <_init>
 800dfde:	4c0a      	ldr	r4, [pc, #40]	@ (800e008 <__libc_init_array+0x40>)
 800dfe0:	4d0a      	ldr	r5, [pc, #40]	@ (800e00c <__libc_init_array+0x44>)
 800dfe2:	1b64      	subs	r4, r4, r5
 800dfe4:	10a4      	asrs	r4, r4, #2
 800dfe6:	42a6      	cmp	r6, r4
 800dfe8:	d105      	bne.n	800dff6 <__libc_init_array+0x2e>
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	00b3      	lsls	r3, r6, #2
 800dfee:	58eb      	ldr	r3, [r5, r3]
 800dff0:	4798      	blx	r3
 800dff2:	3601      	adds	r6, #1
 800dff4:	e7ee      	b.n	800dfd4 <__libc_init_array+0xc>
 800dff6:	00b3      	lsls	r3, r6, #2
 800dff8:	58eb      	ldr	r3, [r5, r3]
 800dffa:	4798      	blx	r3
 800dffc:	3601      	adds	r6, #1
 800dffe:	e7f2      	b.n	800dfe6 <__libc_init_array+0x1e>
 800e000:	080126c0 	.word	0x080126c0
 800e004:	080126c0 	.word	0x080126c0
 800e008:	080126c4 	.word	0x080126c4
 800e00c:	080126c0 	.word	0x080126c0

0800e010 <__retarget_lock_init_recursive>:
 800e010:	4770      	bx	lr

0800e012 <__retarget_lock_acquire_recursive>:
 800e012:	4770      	bx	lr

0800e014 <__retarget_lock_release_recursive>:
 800e014:	4770      	bx	lr

0800e016 <memchr>:
 800e016:	b2c9      	uxtb	r1, r1
 800e018:	1882      	adds	r2, r0, r2
 800e01a:	4290      	cmp	r0, r2
 800e01c:	d101      	bne.n	800e022 <memchr+0xc>
 800e01e:	2000      	movs	r0, #0
 800e020:	4770      	bx	lr
 800e022:	7803      	ldrb	r3, [r0, #0]
 800e024:	428b      	cmp	r3, r1
 800e026:	d0fb      	beq.n	800e020 <memchr+0xa>
 800e028:	3001      	adds	r0, #1
 800e02a:	e7f6      	b.n	800e01a <memchr+0x4>

0800e02c <memcpy>:
 800e02c:	2300      	movs	r3, #0
 800e02e:	b510      	push	{r4, lr}
 800e030:	429a      	cmp	r2, r3
 800e032:	d100      	bne.n	800e036 <memcpy+0xa>
 800e034:	bd10      	pop	{r4, pc}
 800e036:	5ccc      	ldrb	r4, [r1, r3]
 800e038:	54c4      	strb	r4, [r0, r3]
 800e03a:	3301      	adds	r3, #1
 800e03c:	e7f8      	b.n	800e030 <memcpy+0x4>
	...

0800e040 <__assert_func>:
 800e040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e042:	0014      	movs	r4, r2
 800e044:	001a      	movs	r2, r3
 800e046:	4b09      	ldr	r3, [pc, #36]	@ (800e06c <__assert_func+0x2c>)
 800e048:	0005      	movs	r5, r0
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	000e      	movs	r6, r1
 800e04e:	68d8      	ldr	r0, [r3, #12]
 800e050:	4b07      	ldr	r3, [pc, #28]	@ (800e070 <__assert_func+0x30>)
 800e052:	2c00      	cmp	r4, #0
 800e054:	d101      	bne.n	800e05a <__assert_func+0x1a>
 800e056:	4b07      	ldr	r3, [pc, #28]	@ (800e074 <__assert_func+0x34>)
 800e058:	001c      	movs	r4, r3
 800e05a:	4907      	ldr	r1, [pc, #28]	@ (800e078 <__assert_func+0x38>)
 800e05c:	9301      	str	r3, [sp, #4]
 800e05e:	9402      	str	r4, [sp, #8]
 800e060:	002b      	movs	r3, r5
 800e062:	9600      	str	r6, [sp, #0]
 800e064:	f002 f9a8 	bl	80103b8 <fiprintf>
 800e068:	f002 fae2 	bl	8010630 <abort>
 800e06c:	2000002c 	.word	0x2000002c
 800e070:	08012345 	.word	0x08012345
 800e074:	08012380 	.word	0x08012380
 800e078:	08012352 	.word	0x08012352

0800e07c <quorem>:
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	6902      	ldr	r2, [r0, #16]
 800e080:	690f      	ldr	r7, [r1, #16]
 800e082:	b087      	sub	sp, #28
 800e084:	0006      	movs	r6, r0
 800e086:	000b      	movs	r3, r1
 800e088:	2000      	movs	r0, #0
 800e08a:	9102      	str	r1, [sp, #8]
 800e08c:	42ba      	cmp	r2, r7
 800e08e:	db6d      	blt.n	800e16c <quorem+0xf0>
 800e090:	3f01      	subs	r7, #1
 800e092:	00bc      	lsls	r4, r7, #2
 800e094:	3314      	adds	r3, #20
 800e096:	9305      	str	r3, [sp, #20]
 800e098:	191b      	adds	r3, r3, r4
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	0033      	movs	r3, r6
 800e09e:	3314      	adds	r3, #20
 800e0a0:	191c      	adds	r4, r3, r4
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	9304      	str	r3, [sp, #16]
 800e0a8:	9b03      	ldr	r3, [sp, #12]
 800e0aa:	9804      	ldr	r0, [sp, #16]
 800e0ac:	681d      	ldr	r5, [r3, #0]
 800e0ae:	3501      	adds	r5, #1
 800e0b0:	0029      	movs	r1, r5
 800e0b2:	f7f2 f845 	bl	8000140 <__udivsi3>
 800e0b6:	9b04      	ldr	r3, [sp, #16]
 800e0b8:	9000      	str	r0, [sp, #0]
 800e0ba:	42ab      	cmp	r3, r5
 800e0bc:	d32b      	bcc.n	800e116 <quorem+0x9a>
 800e0be:	9b05      	ldr	r3, [sp, #20]
 800e0c0:	9d01      	ldr	r5, [sp, #4]
 800e0c2:	469c      	mov	ip, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9305      	str	r3, [sp, #20]
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	4662      	mov	r2, ip
 800e0cc:	ca08      	ldmia	r2!, {r3}
 800e0ce:	6828      	ldr	r0, [r5, #0]
 800e0d0:	4694      	mov	ip, r2
 800e0d2:	9a00      	ldr	r2, [sp, #0]
 800e0d4:	b299      	uxth	r1, r3
 800e0d6:	4351      	muls	r1, r2
 800e0d8:	9a05      	ldr	r2, [sp, #20]
 800e0da:	0c1b      	lsrs	r3, r3, #16
 800e0dc:	1889      	adds	r1, r1, r2
 800e0de:	9a00      	ldr	r2, [sp, #0]
 800e0e0:	4353      	muls	r3, r2
 800e0e2:	0c0a      	lsrs	r2, r1, #16
 800e0e4:	189b      	adds	r3, r3, r2
 800e0e6:	0c1a      	lsrs	r2, r3, #16
 800e0e8:	b289      	uxth	r1, r1
 800e0ea:	9205      	str	r2, [sp, #20]
 800e0ec:	b282      	uxth	r2, r0
 800e0ee:	1a52      	subs	r2, r2, r1
 800e0f0:	9904      	ldr	r1, [sp, #16]
 800e0f2:	0c00      	lsrs	r0, r0, #16
 800e0f4:	1852      	adds	r2, r2, r1
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	1411      	asrs	r1, r2, #16
 800e0fa:	1ac3      	subs	r3, r0, r3
 800e0fc:	185b      	adds	r3, r3, r1
 800e0fe:	1419      	asrs	r1, r3, #16
 800e100:	b292      	uxth	r2, r2
 800e102:	041b      	lsls	r3, r3, #16
 800e104:	431a      	orrs	r2, r3
 800e106:	9b03      	ldr	r3, [sp, #12]
 800e108:	9104      	str	r1, [sp, #16]
 800e10a:	c504      	stmia	r5!, {r2}
 800e10c:	4563      	cmp	r3, ip
 800e10e:	d2dc      	bcs.n	800e0ca <quorem+0x4e>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d030      	beq.n	800e178 <quorem+0xfc>
 800e116:	0030      	movs	r0, r6
 800e118:	9902      	ldr	r1, [sp, #8]
 800e11a:	f001 f9c5 	bl	800f4a8 <__mcmp>
 800e11e:	2800      	cmp	r0, #0
 800e120:	db23      	blt.n	800e16a <quorem+0xee>
 800e122:	0034      	movs	r4, r6
 800e124:	2500      	movs	r5, #0
 800e126:	9902      	ldr	r1, [sp, #8]
 800e128:	3414      	adds	r4, #20
 800e12a:	3114      	adds	r1, #20
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	c901      	ldmia	r1!, {r0}
 800e130:	9302      	str	r3, [sp, #8]
 800e132:	466b      	mov	r3, sp
 800e134:	891b      	ldrh	r3, [r3, #8]
 800e136:	b282      	uxth	r2, r0
 800e138:	1a9a      	subs	r2, r3, r2
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	1952      	adds	r2, r2, r5
 800e13e:	0c00      	lsrs	r0, r0, #16
 800e140:	0c1b      	lsrs	r3, r3, #16
 800e142:	1a1b      	subs	r3, r3, r0
 800e144:	1410      	asrs	r0, r2, #16
 800e146:	181b      	adds	r3, r3, r0
 800e148:	141d      	asrs	r5, r3, #16
 800e14a:	b292      	uxth	r2, r2
 800e14c:	041b      	lsls	r3, r3, #16
 800e14e:	431a      	orrs	r2, r3
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	c404      	stmia	r4!, {r2}
 800e154:	428b      	cmp	r3, r1
 800e156:	d2e9      	bcs.n	800e12c <quorem+0xb0>
 800e158:	9a01      	ldr	r2, [sp, #4]
 800e15a:	00bb      	lsls	r3, r7, #2
 800e15c:	18d3      	adds	r3, r2, r3
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	2a00      	cmp	r2, #0
 800e162:	d013      	beq.n	800e18c <quorem+0x110>
 800e164:	9b00      	ldr	r3, [sp, #0]
 800e166:	3301      	adds	r3, #1
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	9800      	ldr	r0, [sp, #0]
 800e16c:	b007      	add	sp, #28
 800e16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d104      	bne.n	800e180 <quorem+0x104>
 800e176:	3f01      	subs	r7, #1
 800e178:	9b01      	ldr	r3, [sp, #4]
 800e17a:	3c04      	subs	r4, #4
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	d3f7      	bcc.n	800e170 <quorem+0xf4>
 800e180:	6137      	str	r7, [r6, #16]
 800e182:	e7c8      	b.n	800e116 <quorem+0x9a>
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	2a00      	cmp	r2, #0
 800e188:	d104      	bne.n	800e194 <quorem+0x118>
 800e18a:	3f01      	subs	r7, #1
 800e18c:	9a01      	ldr	r2, [sp, #4]
 800e18e:	3b04      	subs	r3, #4
 800e190:	429a      	cmp	r2, r3
 800e192:	d3f7      	bcc.n	800e184 <quorem+0x108>
 800e194:	6137      	str	r7, [r6, #16]
 800e196:	e7e5      	b.n	800e164 <quorem+0xe8>

0800e198 <_dtoa_r>:
 800e198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19a:	0014      	movs	r4, r2
 800e19c:	001d      	movs	r5, r3
 800e19e:	69c6      	ldr	r6, [r0, #28]
 800e1a0:	b09d      	sub	sp, #116	@ 0x74
 800e1a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800e1a4:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e1a6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800e1a8:	9003      	str	r0, [sp, #12]
 800e1aa:	2e00      	cmp	r6, #0
 800e1ac:	d10f      	bne.n	800e1ce <_dtoa_r+0x36>
 800e1ae:	2010      	movs	r0, #16
 800e1b0:	f000 fe30 	bl	800ee14 <malloc>
 800e1b4:	9b03      	ldr	r3, [sp, #12]
 800e1b6:	1e02      	subs	r2, r0, #0
 800e1b8:	61d8      	str	r0, [r3, #28]
 800e1ba:	d104      	bne.n	800e1c6 <_dtoa_r+0x2e>
 800e1bc:	21ef      	movs	r1, #239	@ 0xef
 800e1be:	4bc7      	ldr	r3, [pc, #796]	@ (800e4dc <_dtoa_r+0x344>)
 800e1c0:	48c7      	ldr	r0, [pc, #796]	@ (800e4e0 <_dtoa_r+0x348>)
 800e1c2:	f7ff ff3d 	bl	800e040 <__assert_func>
 800e1c6:	6046      	str	r6, [r0, #4]
 800e1c8:	6086      	str	r6, [r0, #8]
 800e1ca:	6006      	str	r6, [r0, #0]
 800e1cc:	60c6      	str	r6, [r0, #12]
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	69db      	ldr	r3, [r3, #28]
 800e1d2:	6819      	ldr	r1, [r3, #0]
 800e1d4:	2900      	cmp	r1, #0
 800e1d6:	d00b      	beq.n	800e1f0 <_dtoa_r+0x58>
 800e1d8:	685a      	ldr	r2, [r3, #4]
 800e1da:	2301      	movs	r3, #1
 800e1dc:	4093      	lsls	r3, r2
 800e1de:	604a      	str	r2, [r1, #4]
 800e1e0:	608b      	str	r3, [r1, #8]
 800e1e2:	9803      	ldr	r0, [sp, #12]
 800e1e4:	f000 ff16 	bl	800f014 <_Bfree>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	9b03      	ldr	r3, [sp, #12]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	da1e      	bge.n	800e232 <_dtoa_r+0x9a>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	603b      	str	r3, [r7, #0]
 800e1f8:	006b      	lsls	r3, r5, #1
 800e1fa:	085b      	lsrs	r3, r3, #1
 800e1fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e200:	4bb8      	ldr	r3, [pc, #736]	@ (800e4e4 <_dtoa_r+0x34c>)
 800e202:	4ab8      	ldr	r2, [pc, #736]	@ (800e4e4 <_dtoa_r+0x34c>)
 800e204:	403b      	ands	r3, r7
 800e206:	4293      	cmp	r3, r2
 800e208:	d116      	bne.n	800e238 <_dtoa_r+0xa0>
 800e20a:	4bb7      	ldr	r3, [pc, #732]	@ (800e4e8 <_dtoa_r+0x350>)
 800e20c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e20e:	6013      	str	r3, [r2, #0]
 800e210:	033b      	lsls	r3, r7, #12
 800e212:	0b1b      	lsrs	r3, r3, #12
 800e214:	4323      	orrs	r3, r4
 800e216:	d101      	bne.n	800e21c <_dtoa_r+0x84>
 800e218:	f000 fd83 	bl	800ed22 <_dtoa_r+0xb8a>
 800e21c:	4bb3      	ldr	r3, [pc, #716]	@ (800e4ec <_dtoa_r+0x354>)
 800e21e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e220:	9308      	str	r3, [sp, #32]
 800e222:	2a00      	cmp	r2, #0
 800e224:	d002      	beq.n	800e22c <_dtoa_r+0x94>
 800e226:	4bb2      	ldr	r3, [pc, #712]	@ (800e4f0 <_dtoa_r+0x358>)
 800e228:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e22a:	6013      	str	r3, [r2, #0]
 800e22c:	9808      	ldr	r0, [sp, #32]
 800e22e:	b01d      	add	sp, #116	@ 0x74
 800e230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e232:	2300      	movs	r3, #0
 800e234:	603b      	str	r3, [r7, #0]
 800e236:	e7e2      	b.n	800e1fe <_dtoa_r+0x66>
 800e238:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e23a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e23c:	9212      	str	r2, [sp, #72]	@ 0x48
 800e23e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e240:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e242:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e244:	2200      	movs	r2, #0
 800e246:	2300      	movs	r3, #0
 800e248:	f7f2 f900 	bl	800044c <__aeabi_dcmpeq>
 800e24c:	1e06      	subs	r6, r0, #0
 800e24e:	d00b      	beq.n	800e268 <_dtoa_r+0xd0>
 800e250:	2301      	movs	r3, #1
 800e252:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e254:	6013      	str	r3, [r2, #0]
 800e256:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <_dtoa_r+0xca>
 800e25c:	4ba5      	ldr	r3, [pc, #660]	@ (800e4f4 <_dtoa_r+0x35c>)
 800e25e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e260:	6013      	str	r3, [r2, #0]
 800e262:	4ba5      	ldr	r3, [pc, #660]	@ (800e4f8 <_dtoa_r+0x360>)
 800e264:	9308      	str	r3, [sp, #32]
 800e266:	e7e1      	b.n	800e22c <_dtoa_r+0x94>
 800e268:	ab1a      	add	r3, sp, #104	@ 0x68
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	9803      	ldr	r0, [sp, #12]
 800e272:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e274:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e276:	f001 f9cd 	bl	800f614 <__d2b>
 800e27a:	007a      	lsls	r2, r7, #1
 800e27c:	9005      	str	r0, [sp, #20]
 800e27e:	0d52      	lsrs	r2, r2, #21
 800e280:	d100      	bne.n	800e284 <_dtoa_r+0xec>
 800e282:	e07b      	b.n	800e37c <_dtoa_r+0x1e4>
 800e284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e286:	9618      	str	r6, [sp, #96]	@ 0x60
 800e288:	0319      	lsls	r1, r3, #12
 800e28a:	4b9c      	ldr	r3, [pc, #624]	@ (800e4fc <_dtoa_r+0x364>)
 800e28c:	0b09      	lsrs	r1, r1, #12
 800e28e:	430b      	orrs	r3, r1
 800e290:	499b      	ldr	r1, [pc, #620]	@ (800e500 <_dtoa_r+0x368>)
 800e292:	1857      	adds	r7, r2, r1
 800e294:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e296:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e298:	0019      	movs	r1, r3
 800e29a:	2200      	movs	r2, #0
 800e29c:	4b99      	ldr	r3, [pc, #612]	@ (800e504 <_dtoa_r+0x36c>)
 800e29e:	f7f3 fdcb 	bl	8001e38 <__aeabi_dsub>
 800e2a2:	4a99      	ldr	r2, [pc, #612]	@ (800e508 <_dtoa_r+0x370>)
 800e2a4:	4b99      	ldr	r3, [pc, #612]	@ (800e50c <_dtoa_r+0x374>)
 800e2a6:	f7f3 faff 	bl	80018a8 <__aeabi_dmul>
 800e2aa:	4a99      	ldr	r2, [pc, #612]	@ (800e510 <_dtoa_r+0x378>)
 800e2ac:	4b99      	ldr	r3, [pc, #612]	@ (800e514 <_dtoa_r+0x37c>)
 800e2ae:	f7f2 fb53 	bl	8000958 <__aeabi_dadd>
 800e2b2:	0004      	movs	r4, r0
 800e2b4:	0038      	movs	r0, r7
 800e2b6:	000d      	movs	r5, r1
 800e2b8:	f7f4 f9b8 	bl	800262c <__aeabi_i2d>
 800e2bc:	4a96      	ldr	r2, [pc, #600]	@ (800e518 <_dtoa_r+0x380>)
 800e2be:	4b97      	ldr	r3, [pc, #604]	@ (800e51c <_dtoa_r+0x384>)
 800e2c0:	f7f3 faf2 	bl	80018a8 <__aeabi_dmul>
 800e2c4:	0002      	movs	r2, r0
 800e2c6:	000b      	movs	r3, r1
 800e2c8:	0020      	movs	r0, r4
 800e2ca:	0029      	movs	r1, r5
 800e2cc:	f7f2 fb44 	bl	8000958 <__aeabi_dadd>
 800e2d0:	0004      	movs	r4, r0
 800e2d2:	000d      	movs	r5, r1
 800e2d4:	f7f4 f96e 	bl	80025b4 <__aeabi_d2iz>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	9004      	str	r0, [sp, #16]
 800e2dc:	2300      	movs	r3, #0
 800e2de:	0020      	movs	r0, r4
 800e2e0:	0029      	movs	r1, r5
 800e2e2:	f7f2 f8b9 	bl	8000458 <__aeabi_dcmplt>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d00b      	beq.n	800e302 <_dtoa_r+0x16a>
 800e2ea:	9804      	ldr	r0, [sp, #16]
 800e2ec:	f7f4 f99e 	bl	800262c <__aeabi_i2d>
 800e2f0:	002b      	movs	r3, r5
 800e2f2:	0022      	movs	r2, r4
 800e2f4:	f7f2 f8aa 	bl	800044c <__aeabi_dcmpeq>
 800e2f8:	4243      	negs	r3, r0
 800e2fa:	4158      	adcs	r0, r3
 800e2fc:	9b04      	ldr	r3, [sp, #16]
 800e2fe:	1a1b      	subs	r3, r3, r0
 800e300:	9304      	str	r3, [sp, #16]
 800e302:	2301      	movs	r3, #1
 800e304:	9315      	str	r3, [sp, #84]	@ 0x54
 800e306:	9b04      	ldr	r3, [sp, #16]
 800e308:	2b16      	cmp	r3, #22
 800e30a:	d810      	bhi.n	800e32e <_dtoa_r+0x196>
 800e30c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e30e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e310:	9a04      	ldr	r2, [sp, #16]
 800e312:	4b83      	ldr	r3, [pc, #524]	@ (800e520 <_dtoa_r+0x388>)
 800e314:	00d2      	lsls	r2, r2, #3
 800e316:	189b      	adds	r3, r3, r2
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	f7f2 f89c 	bl	8000458 <__aeabi_dcmplt>
 800e320:	2800      	cmp	r0, #0
 800e322:	d047      	beq.n	800e3b4 <_dtoa_r+0x21c>
 800e324:	9b04      	ldr	r3, [sp, #16]
 800e326:	3b01      	subs	r3, #1
 800e328:	9304      	str	r3, [sp, #16]
 800e32a:	2300      	movs	r3, #0
 800e32c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e32e:	2200      	movs	r2, #0
 800e330:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e332:	9206      	str	r2, [sp, #24]
 800e334:	1bdb      	subs	r3, r3, r7
 800e336:	1e5a      	subs	r2, r3, #1
 800e338:	d53e      	bpl.n	800e3b8 <_dtoa_r+0x220>
 800e33a:	2201      	movs	r2, #1
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	9306      	str	r3, [sp, #24]
 800e340:	2300      	movs	r3, #0
 800e342:	930d      	str	r3, [sp, #52]	@ 0x34
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	db38      	blt.n	800e3bc <_dtoa_r+0x224>
 800e34a:	9a04      	ldr	r2, [sp, #16]
 800e34c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e34e:	4694      	mov	ip, r2
 800e350:	4463      	add	r3, ip
 800e352:	930d      	str	r3, [sp, #52]	@ 0x34
 800e354:	2300      	movs	r3, #0
 800e356:	9214      	str	r2, [sp, #80]	@ 0x50
 800e358:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e35a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e35c:	2401      	movs	r4, #1
 800e35e:	2b09      	cmp	r3, #9
 800e360:	d867      	bhi.n	800e432 <_dtoa_r+0x29a>
 800e362:	2b05      	cmp	r3, #5
 800e364:	dd02      	ble.n	800e36c <_dtoa_r+0x1d4>
 800e366:	2400      	movs	r4, #0
 800e368:	3b04      	subs	r3, #4
 800e36a:	9322      	str	r3, [sp, #136]	@ 0x88
 800e36c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e36e:	1e98      	subs	r0, r3, #2
 800e370:	2803      	cmp	r0, #3
 800e372:	d867      	bhi.n	800e444 <_dtoa_r+0x2ac>
 800e374:	f7f1 fed0 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e378:	5b383a2b 	.word	0x5b383a2b
 800e37c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e37e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800e380:	18f6      	adds	r6, r6, r3
 800e382:	4b68      	ldr	r3, [pc, #416]	@ (800e524 <_dtoa_r+0x38c>)
 800e384:	18f2      	adds	r2, r6, r3
 800e386:	2a20      	cmp	r2, #32
 800e388:	dd0f      	ble.n	800e3aa <_dtoa_r+0x212>
 800e38a:	2340      	movs	r3, #64	@ 0x40
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	409f      	lsls	r7, r3
 800e390:	4b65      	ldr	r3, [pc, #404]	@ (800e528 <_dtoa_r+0x390>)
 800e392:	0038      	movs	r0, r7
 800e394:	18f3      	adds	r3, r6, r3
 800e396:	40dc      	lsrs	r4, r3
 800e398:	4320      	orrs	r0, r4
 800e39a:	f7f4 f975 	bl	8002688 <__aeabi_ui2d>
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4b62      	ldr	r3, [pc, #392]	@ (800e52c <_dtoa_r+0x394>)
 800e3a2:	1e77      	subs	r7, r6, #1
 800e3a4:	18cb      	adds	r3, r1, r3
 800e3a6:	9218      	str	r2, [sp, #96]	@ 0x60
 800e3a8:	e776      	b.n	800e298 <_dtoa_r+0x100>
 800e3aa:	2320      	movs	r3, #32
 800e3ac:	0020      	movs	r0, r4
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	4098      	lsls	r0, r3
 800e3b2:	e7f2      	b.n	800e39a <_dtoa_r+0x202>
 800e3b4:	9015      	str	r0, [sp, #84]	@ 0x54
 800e3b6:	e7ba      	b.n	800e32e <_dtoa_r+0x196>
 800e3b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e3ba:	e7c3      	b.n	800e344 <_dtoa_r+0x1ac>
 800e3bc:	9b06      	ldr	r3, [sp, #24]
 800e3be:	9a04      	ldr	r2, [sp, #16]
 800e3c0:	1a9b      	subs	r3, r3, r2
 800e3c2:	9306      	str	r3, [sp, #24]
 800e3c4:	4253      	negs	r3, r2
 800e3c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9314      	str	r3, [sp, #80]	@ 0x50
 800e3cc:	e7c5      	b.n	800e35a <_dtoa_r+0x1c2>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e3d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	dc13      	bgt.n	800e404 <_dtoa_r+0x26c>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	001a      	movs	r2, r3
 800e3e0:	930e      	str	r3, [sp, #56]	@ 0x38
 800e3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3e4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800e3e6:	e00d      	b.n	800e404 <_dtoa_r+0x26c>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e7f1      	b.n	800e3d0 <_dtoa_r+0x238>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3f2:	4694      	mov	ip, r2
 800e3f4:	9b04      	ldr	r3, [sp, #16]
 800e3f6:	4463      	add	r3, ip
 800e3f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	dc00      	bgt.n	800e404 <_dtoa_r+0x26c>
 800e402:	2301      	movs	r3, #1
 800e404:	9a03      	ldr	r2, [sp, #12]
 800e406:	2100      	movs	r1, #0
 800e408:	69d0      	ldr	r0, [r2, #28]
 800e40a:	2204      	movs	r2, #4
 800e40c:	0015      	movs	r5, r2
 800e40e:	3514      	adds	r5, #20
 800e410:	429d      	cmp	r5, r3
 800e412:	d91b      	bls.n	800e44c <_dtoa_r+0x2b4>
 800e414:	6041      	str	r1, [r0, #4]
 800e416:	9803      	ldr	r0, [sp, #12]
 800e418:	f000 fdb8 	bl	800ef8c <_Balloc>
 800e41c:	9008      	str	r0, [sp, #32]
 800e41e:	2800      	cmp	r0, #0
 800e420:	d117      	bne.n	800e452 <_dtoa_r+0x2ba>
 800e422:	21b0      	movs	r1, #176	@ 0xb0
 800e424:	4b42      	ldr	r3, [pc, #264]	@ (800e530 <_dtoa_r+0x398>)
 800e426:	482e      	ldr	r0, [pc, #184]	@ (800e4e0 <_dtoa_r+0x348>)
 800e428:	9a08      	ldr	r2, [sp, #32]
 800e42a:	31ff      	adds	r1, #255	@ 0xff
 800e42c:	e6c9      	b.n	800e1c2 <_dtoa_r+0x2a>
 800e42e:	2301      	movs	r3, #1
 800e430:	e7dd      	b.n	800e3ee <_dtoa_r+0x256>
 800e432:	2300      	movs	r3, #0
 800e434:	9410      	str	r4, [sp, #64]	@ 0x40
 800e436:	9322      	str	r3, [sp, #136]	@ 0x88
 800e438:	3b01      	subs	r3, #1
 800e43a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e43e:	2200      	movs	r2, #0
 800e440:	3313      	adds	r3, #19
 800e442:	e7cf      	b.n	800e3e4 <_dtoa_r+0x24c>
 800e444:	2301      	movs	r3, #1
 800e446:	9310      	str	r3, [sp, #64]	@ 0x40
 800e448:	3b02      	subs	r3, #2
 800e44a:	e7f6      	b.n	800e43a <_dtoa_r+0x2a2>
 800e44c:	3101      	adds	r1, #1
 800e44e:	0052      	lsls	r2, r2, #1
 800e450:	e7dc      	b.n	800e40c <_dtoa_r+0x274>
 800e452:	9b03      	ldr	r3, [sp, #12]
 800e454:	9a08      	ldr	r2, [sp, #32]
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	601a      	str	r2, [r3, #0]
 800e45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e45c:	2b0e      	cmp	r3, #14
 800e45e:	d900      	bls.n	800e462 <_dtoa_r+0x2ca>
 800e460:	e0d9      	b.n	800e616 <_dtoa_r+0x47e>
 800e462:	2c00      	cmp	r4, #0
 800e464:	d100      	bne.n	800e468 <_dtoa_r+0x2d0>
 800e466:	e0d6      	b.n	800e616 <_dtoa_r+0x47e>
 800e468:	9b04      	ldr	r3, [sp, #16]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dd64      	ble.n	800e538 <_dtoa_r+0x3a0>
 800e46e:	210f      	movs	r1, #15
 800e470:	9a04      	ldr	r2, [sp, #16]
 800e472:	4b2b      	ldr	r3, [pc, #172]	@ (800e520 <_dtoa_r+0x388>)
 800e474:	400a      	ands	r2, r1
 800e476:	00d2      	lsls	r2, r2, #3
 800e478:	189b      	adds	r3, r3, r2
 800e47a:	681e      	ldr	r6, [r3, #0]
 800e47c:	685f      	ldr	r7, [r3, #4]
 800e47e:	9b04      	ldr	r3, [sp, #16]
 800e480:	2402      	movs	r4, #2
 800e482:	111d      	asrs	r5, r3, #4
 800e484:	05db      	lsls	r3, r3, #23
 800e486:	d50a      	bpl.n	800e49e <_dtoa_r+0x306>
 800e488:	4b2a      	ldr	r3, [pc, #168]	@ (800e534 <_dtoa_r+0x39c>)
 800e48a:	400d      	ands	r5, r1
 800e48c:	6a1a      	ldr	r2, [r3, #32]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e490:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e492:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e494:	f7f2 fdc4 	bl	8001020 <__aeabi_ddiv>
 800e498:	900a      	str	r0, [sp, #40]	@ 0x28
 800e49a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e49c:	3401      	adds	r4, #1
 800e49e:	4b25      	ldr	r3, [pc, #148]	@ (800e534 <_dtoa_r+0x39c>)
 800e4a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4a2:	2d00      	cmp	r5, #0
 800e4a4:	d108      	bne.n	800e4b8 <_dtoa_r+0x320>
 800e4a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e4a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4aa:	0032      	movs	r2, r6
 800e4ac:	003b      	movs	r3, r7
 800e4ae:	f7f2 fdb7 	bl	8001020 <__aeabi_ddiv>
 800e4b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e4b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e4b6:	e05a      	b.n	800e56e <_dtoa_r+0x3d6>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	421d      	tst	r5, r3
 800e4bc:	d009      	beq.n	800e4d2 <_dtoa_r+0x33a>
 800e4be:	18e4      	adds	r4, r4, r3
 800e4c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4c2:	0030      	movs	r0, r6
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	0039      	movs	r1, r7
 800e4ca:	f7f3 f9ed 	bl	80018a8 <__aeabi_dmul>
 800e4ce:	0006      	movs	r6, r0
 800e4d0:	000f      	movs	r7, r1
 800e4d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4d4:	106d      	asrs	r5, r5, #1
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	e7e2      	b.n	800e4a0 <_dtoa_r+0x308>
 800e4da:	46c0      	nop			@ (mov r8, r8)
 800e4dc:	080122a4 	.word	0x080122a4
 800e4e0:	0801238e 	.word	0x0801238e
 800e4e4:	7ff00000 	.word	0x7ff00000
 800e4e8:	0000270f 	.word	0x0000270f
 800e4ec:	0801238a 	.word	0x0801238a
 800e4f0:	0801238d 	.word	0x0801238d
 800e4f4:	08012578 	.word	0x08012578
 800e4f8:	08012577 	.word	0x08012577
 800e4fc:	3ff00000 	.word	0x3ff00000
 800e500:	fffffc01 	.word	0xfffffc01
 800e504:	3ff80000 	.word	0x3ff80000
 800e508:	636f4361 	.word	0x636f4361
 800e50c:	3fd287a7 	.word	0x3fd287a7
 800e510:	8b60c8b3 	.word	0x8b60c8b3
 800e514:	3fc68a28 	.word	0x3fc68a28
 800e518:	509f79fb 	.word	0x509f79fb
 800e51c:	3fd34413 	.word	0x3fd34413
 800e520:	08012488 	.word	0x08012488
 800e524:	00000432 	.word	0x00000432
 800e528:	00000412 	.word	0x00000412
 800e52c:	fe100000 	.word	0xfe100000
 800e530:	080123e6 	.word	0x080123e6
 800e534:	08012460 	.word	0x08012460
 800e538:	9b04      	ldr	r3, [sp, #16]
 800e53a:	2402      	movs	r4, #2
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d016      	beq.n	800e56e <_dtoa_r+0x3d6>
 800e540:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e542:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e544:	220f      	movs	r2, #15
 800e546:	425d      	negs	r5, r3
 800e548:	402a      	ands	r2, r5
 800e54a:	4bd7      	ldr	r3, [pc, #860]	@ (800e8a8 <_dtoa_r+0x710>)
 800e54c:	00d2      	lsls	r2, r2, #3
 800e54e:	189b      	adds	r3, r3, r2
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	f7f3 f9a8 	bl	80018a8 <__aeabi_dmul>
 800e558:	2701      	movs	r7, #1
 800e55a:	2300      	movs	r3, #0
 800e55c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e55e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e560:	4ed2      	ldr	r6, [pc, #840]	@ (800e8ac <_dtoa_r+0x714>)
 800e562:	112d      	asrs	r5, r5, #4
 800e564:	2d00      	cmp	r5, #0
 800e566:	d000      	beq.n	800e56a <_dtoa_r+0x3d2>
 800e568:	e0ba      	b.n	800e6e0 <_dtoa_r+0x548>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1a1      	bne.n	800e4b2 <_dtoa_r+0x31a>
 800e56e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e570:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e572:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e574:	2b00      	cmp	r3, #0
 800e576:	d100      	bne.n	800e57a <_dtoa_r+0x3e2>
 800e578:	e0bd      	b.n	800e6f6 <_dtoa_r+0x55e>
 800e57a:	2200      	movs	r2, #0
 800e57c:	0030      	movs	r0, r6
 800e57e:	0039      	movs	r1, r7
 800e580:	4bcb      	ldr	r3, [pc, #812]	@ (800e8b0 <_dtoa_r+0x718>)
 800e582:	f7f1 ff69 	bl	8000458 <__aeabi_dcmplt>
 800e586:	2800      	cmp	r0, #0
 800e588:	d100      	bne.n	800e58c <_dtoa_r+0x3f4>
 800e58a:	e0b4      	b.n	800e6f6 <_dtoa_r+0x55e>
 800e58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d100      	bne.n	800e594 <_dtoa_r+0x3fc>
 800e592:	e0b0      	b.n	800e6f6 <_dtoa_r+0x55e>
 800e594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e596:	2b00      	cmp	r3, #0
 800e598:	dd39      	ble.n	800e60e <_dtoa_r+0x476>
 800e59a:	9b04      	ldr	r3, [sp, #16]
 800e59c:	2200      	movs	r2, #0
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5a2:	0030      	movs	r0, r6
 800e5a4:	4bc3      	ldr	r3, [pc, #780]	@ (800e8b4 <_dtoa_r+0x71c>)
 800e5a6:	0039      	movs	r1, r7
 800e5a8:	f7f3 f97e 	bl	80018a8 <__aeabi_dmul>
 800e5ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800e5ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e5b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5b2:	3401      	adds	r4, #1
 800e5b4:	0020      	movs	r0, r4
 800e5b6:	9311      	str	r3, [sp, #68]	@ 0x44
 800e5b8:	f7f4 f838 	bl	800262c <__aeabi_i2d>
 800e5bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5c0:	f7f3 f972 	bl	80018a8 <__aeabi_dmul>
 800e5c4:	4bbc      	ldr	r3, [pc, #752]	@ (800e8b8 <_dtoa_r+0x720>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f7f2 f9c6 	bl	8000958 <__aeabi_dadd>
 800e5cc:	4bbb      	ldr	r3, [pc, #748]	@ (800e8bc <_dtoa_r+0x724>)
 800e5ce:	0006      	movs	r6, r0
 800e5d0:	18cf      	adds	r7, r1, r3
 800e5d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d000      	beq.n	800e5da <_dtoa_r+0x442>
 800e5d8:	e091      	b.n	800e6fe <_dtoa_r+0x566>
 800e5da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5de:	2200      	movs	r2, #0
 800e5e0:	4bb7      	ldr	r3, [pc, #732]	@ (800e8c0 <_dtoa_r+0x728>)
 800e5e2:	f7f3 fc29 	bl	8001e38 <__aeabi_dsub>
 800e5e6:	0032      	movs	r2, r6
 800e5e8:	003b      	movs	r3, r7
 800e5ea:	0004      	movs	r4, r0
 800e5ec:	000d      	movs	r5, r1
 800e5ee:	f7f1 ff47 	bl	8000480 <__aeabi_dcmpgt>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d000      	beq.n	800e5f8 <_dtoa_r+0x460>
 800e5f6:	e29d      	b.n	800eb34 <_dtoa_r+0x99c>
 800e5f8:	2180      	movs	r1, #128	@ 0x80
 800e5fa:	0609      	lsls	r1, r1, #24
 800e5fc:	187b      	adds	r3, r7, r1
 800e5fe:	0032      	movs	r2, r6
 800e600:	0020      	movs	r0, r4
 800e602:	0029      	movs	r1, r5
 800e604:	f7f1 ff28 	bl	8000458 <__aeabi_dcmplt>
 800e608:	2800      	cmp	r0, #0
 800e60a:	d000      	beq.n	800e60e <_dtoa_r+0x476>
 800e60c:	e130      	b.n	800e870 <_dtoa_r+0x6d8>
 800e60e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e610:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e612:	930a      	str	r3, [sp, #40]	@ 0x28
 800e614:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e616:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	da00      	bge.n	800e61e <_dtoa_r+0x486>
 800e61c:	e177      	b.n	800e90e <_dtoa_r+0x776>
 800e61e:	9a04      	ldr	r2, [sp, #16]
 800e620:	2a0e      	cmp	r2, #14
 800e622:	dd00      	ble.n	800e626 <_dtoa_r+0x48e>
 800e624:	e173      	b.n	800e90e <_dtoa_r+0x776>
 800e626:	4ba0      	ldr	r3, [pc, #640]	@ (800e8a8 <_dtoa_r+0x710>)
 800e628:	00d2      	lsls	r2, r2, #3
 800e62a:	189b      	adds	r3, r3, r2
 800e62c:	685c      	ldr	r4, [r3, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	9306      	str	r3, [sp, #24]
 800e632:	9407      	str	r4, [sp, #28]
 800e634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e636:	2b00      	cmp	r3, #0
 800e638:	da03      	bge.n	800e642 <_dtoa_r+0x4aa>
 800e63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	dc00      	bgt.n	800e642 <_dtoa_r+0x4aa>
 800e640:	e106      	b.n	800e850 <_dtoa_r+0x6b8>
 800e642:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e644:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e648:	9d08      	ldr	r5, [sp, #32]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	195b      	adds	r3, r3, r5
 800e64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e650:	9a06      	ldr	r2, [sp, #24]
 800e652:	9b07      	ldr	r3, [sp, #28]
 800e654:	0030      	movs	r0, r6
 800e656:	0039      	movs	r1, r7
 800e658:	f7f2 fce2 	bl	8001020 <__aeabi_ddiv>
 800e65c:	f7f3 ffaa 	bl	80025b4 <__aeabi_d2iz>
 800e660:	9009      	str	r0, [sp, #36]	@ 0x24
 800e662:	f7f3 ffe3 	bl	800262c <__aeabi_i2d>
 800e666:	9a06      	ldr	r2, [sp, #24]
 800e668:	9b07      	ldr	r3, [sp, #28]
 800e66a:	f7f3 f91d 	bl	80018a8 <__aeabi_dmul>
 800e66e:	0002      	movs	r2, r0
 800e670:	000b      	movs	r3, r1
 800e672:	0030      	movs	r0, r6
 800e674:	0039      	movs	r1, r7
 800e676:	f7f3 fbdf 	bl	8001e38 <__aeabi_dsub>
 800e67a:	002b      	movs	r3, r5
 800e67c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e67e:	3501      	adds	r5, #1
 800e680:	3230      	adds	r2, #48	@ 0x30
 800e682:	701a      	strb	r2, [r3, #0]
 800e684:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e686:	002c      	movs	r4, r5
 800e688:	429a      	cmp	r2, r3
 800e68a:	d000      	beq.n	800e68e <_dtoa_r+0x4f6>
 800e68c:	e131      	b.n	800e8f2 <_dtoa_r+0x75a>
 800e68e:	0002      	movs	r2, r0
 800e690:	000b      	movs	r3, r1
 800e692:	f7f2 f961 	bl	8000958 <__aeabi_dadd>
 800e696:	9a06      	ldr	r2, [sp, #24]
 800e698:	9b07      	ldr	r3, [sp, #28]
 800e69a:	0006      	movs	r6, r0
 800e69c:	000f      	movs	r7, r1
 800e69e:	f7f1 feef 	bl	8000480 <__aeabi_dcmpgt>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d000      	beq.n	800e6a8 <_dtoa_r+0x510>
 800e6a6:	e10f      	b.n	800e8c8 <_dtoa_r+0x730>
 800e6a8:	9a06      	ldr	r2, [sp, #24]
 800e6aa:	9b07      	ldr	r3, [sp, #28]
 800e6ac:	0030      	movs	r0, r6
 800e6ae:	0039      	movs	r1, r7
 800e6b0:	f7f1 fecc 	bl	800044c <__aeabi_dcmpeq>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d003      	beq.n	800e6c0 <_dtoa_r+0x528>
 800e6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ba:	07dd      	lsls	r5, r3, #31
 800e6bc:	d500      	bpl.n	800e6c0 <_dtoa_r+0x528>
 800e6be:	e103      	b.n	800e8c8 <_dtoa_r+0x730>
 800e6c0:	9905      	ldr	r1, [sp, #20]
 800e6c2:	9803      	ldr	r0, [sp, #12]
 800e6c4:	f000 fca6 	bl	800f014 <_Bfree>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	7023      	strb	r3, [r4, #0]
 800e6cc:	9b04      	ldr	r3, [sp, #16]
 800e6ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	6013      	str	r3, [r2, #0]
 800e6d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d100      	bne.n	800e6dc <_dtoa_r+0x544>
 800e6da:	e5a7      	b.n	800e22c <_dtoa_r+0x94>
 800e6dc:	601c      	str	r4, [r3, #0]
 800e6de:	e5a5      	b.n	800e22c <_dtoa_r+0x94>
 800e6e0:	423d      	tst	r5, r7
 800e6e2:	d005      	beq.n	800e6f0 <_dtoa_r+0x558>
 800e6e4:	6832      	ldr	r2, [r6, #0]
 800e6e6:	6873      	ldr	r3, [r6, #4]
 800e6e8:	f7f3 f8de 	bl	80018a8 <__aeabi_dmul>
 800e6ec:	003b      	movs	r3, r7
 800e6ee:	3401      	adds	r4, #1
 800e6f0:	106d      	asrs	r5, r5, #1
 800e6f2:	3608      	adds	r6, #8
 800e6f4:	e736      	b.n	800e564 <_dtoa_r+0x3cc>
 800e6f6:	9b04      	ldr	r3, [sp, #16]
 800e6f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6fc:	e75a      	b.n	800e5b4 <_dtoa_r+0x41c>
 800e6fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e700:	4b69      	ldr	r3, [pc, #420]	@ (800e8a8 <_dtoa_r+0x710>)
 800e702:	3a01      	subs	r2, #1
 800e704:	00d2      	lsls	r2, r2, #3
 800e706:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e708:	189b      	adds	r3, r3, r2
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	2900      	cmp	r1, #0
 800e710:	d04c      	beq.n	800e7ac <_dtoa_r+0x614>
 800e712:	2000      	movs	r0, #0
 800e714:	496b      	ldr	r1, [pc, #428]	@ (800e8c4 <_dtoa_r+0x72c>)
 800e716:	f7f2 fc83 	bl	8001020 <__aeabi_ddiv>
 800e71a:	0032      	movs	r2, r6
 800e71c:	003b      	movs	r3, r7
 800e71e:	f7f3 fb8b 	bl	8001e38 <__aeabi_dsub>
 800e722:	9a08      	ldr	r2, [sp, #32]
 800e724:	0006      	movs	r6, r0
 800e726:	4694      	mov	ip, r2
 800e728:	000f      	movs	r7, r1
 800e72a:	9b08      	ldr	r3, [sp, #32]
 800e72c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e72e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e730:	4463      	add	r3, ip
 800e732:	9311      	str	r3, [sp, #68]	@ 0x44
 800e734:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e736:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e738:	f7f3 ff3c 	bl	80025b4 <__aeabi_d2iz>
 800e73c:	0005      	movs	r5, r0
 800e73e:	f7f3 ff75 	bl	800262c <__aeabi_i2d>
 800e742:	0002      	movs	r2, r0
 800e744:	000b      	movs	r3, r1
 800e746:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e74a:	f7f3 fb75 	bl	8001e38 <__aeabi_dsub>
 800e74e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e750:	3530      	adds	r5, #48	@ 0x30
 800e752:	1c5c      	adds	r4, r3, #1
 800e754:	701d      	strb	r5, [r3, #0]
 800e756:	0032      	movs	r2, r6
 800e758:	003b      	movs	r3, r7
 800e75a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e75c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e75e:	f7f1 fe7b 	bl	8000458 <__aeabi_dcmplt>
 800e762:	2800      	cmp	r0, #0
 800e764:	d16a      	bne.n	800e83c <_dtoa_r+0x6a4>
 800e766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e76a:	2000      	movs	r0, #0
 800e76c:	4950      	ldr	r1, [pc, #320]	@ (800e8b0 <_dtoa_r+0x718>)
 800e76e:	f7f3 fb63 	bl	8001e38 <__aeabi_dsub>
 800e772:	0032      	movs	r2, r6
 800e774:	003b      	movs	r3, r7
 800e776:	f7f1 fe6f 	bl	8000458 <__aeabi_dcmplt>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	d000      	beq.n	800e780 <_dtoa_r+0x5e8>
 800e77e:	e0a5      	b.n	800e8cc <_dtoa_r+0x734>
 800e780:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e782:	42a3      	cmp	r3, r4
 800e784:	d100      	bne.n	800e788 <_dtoa_r+0x5f0>
 800e786:	e742      	b.n	800e60e <_dtoa_r+0x476>
 800e788:	2200      	movs	r2, #0
 800e78a:	0030      	movs	r0, r6
 800e78c:	0039      	movs	r1, r7
 800e78e:	4b49      	ldr	r3, [pc, #292]	@ (800e8b4 <_dtoa_r+0x71c>)
 800e790:	f7f3 f88a 	bl	80018a8 <__aeabi_dmul>
 800e794:	2200      	movs	r2, #0
 800e796:	0006      	movs	r6, r0
 800e798:	000f      	movs	r7, r1
 800e79a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e79e:	4b45      	ldr	r3, [pc, #276]	@ (800e8b4 <_dtoa_r+0x71c>)
 800e7a0:	f7f3 f882 	bl	80018a8 <__aeabi_dmul>
 800e7a4:	9416      	str	r4, [sp, #88]	@ 0x58
 800e7a6:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e7aa:	e7c3      	b.n	800e734 <_dtoa_r+0x59c>
 800e7ac:	0030      	movs	r0, r6
 800e7ae:	0039      	movs	r1, r7
 800e7b0:	f7f3 f87a 	bl	80018a8 <__aeabi_dmul>
 800e7b4:	9d08      	ldr	r5, [sp, #32]
 800e7b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e7b8:	002b      	movs	r3, r5
 800e7ba:	4694      	mov	ip, r2
 800e7bc:	9016      	str	r0, [sp, #88]	@ 0x58
 800e7be:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e7c0:	4463      	add	r3, ip
 800e7c2:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e7c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7c8:	f7f3 fef4 	bl	80025b4 <__aeabi_d2iz>
 800e7cc:	0004      	movs	r4, r0
 800e7ce:	f7f3 ff2d 	bl	800262c <__aeabi_i2d>
 800e7d2:	000b      	movs	r3, r1
 800e7d4:	0002      	movs	r2, r0
 800e7d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e7d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7da:	f7f3 fb2d 	bl	8001e38 <__aeabi_dsub>
 800e7de:	3430      	adds	r4, #48	@ 0x30
 800e7e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7e2:	702c      	strb	r4, [r5, #0]
 800e7e4:	3501      	adds	r5, #1
 800e7e6:	0006      	movs	r6, r0
 800e7e8:	000f      	movs	r7, r1
 800e7ea:	42ab      	cmp	r3, r5
 800e7ec:	d129      	bne.n	800e842 <_dtoa_r+0x6aa>
 800e7ee:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e7f0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e7f2:	9b08      	ldr	r3, [sp, #32]
 800e7f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e7f6:	469c      	mov	ip, r3
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	4b32      	ldr	r3, [pc, #200]	@ (800e8c4 <_dtoa_r+0x72c>)
 800e7fc:	4464      	add	r4, ip
 800e7fe:	f7f2 f8ab 	bl	8000958 <__aeabi_dadd>
 800e802:	0002      	movs	r2, r0
 800e804:	000b      	movs	r3, r1
 800e806:	0030      	movs	r0, r6
 800e808:	0039      	movs	r1, r7
 800e80a:	f7f1 fe39 	bl	8000480 <__aeabi_dcmpgt>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d15c      	bne.n	800e8cc <_dtoa_r+0x734>
 800e812:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e814:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e816:	2000      	movs	r0, #0
 800e818:	492a      	ldr	r1, [pc, #168]	@ (800e8c4 <_dtoa_r+0x72c>)
 800e81a:	f7f3 fb0d 	bl	8001e38 <__aeabi_dsub>
 800e81e:	0002      	movs	r2, r0
 800e820:	000b      	movs	r3, r1
 800e822:	0030      	movs	r0, r6
 800e824:	0039      	movs	r1, r7
 800e826:	f7f1 fe17 	bl	8000458 <__aeabi_dcmplt>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d100      	bne.n	800e830 <_dtoa_r+0x698>
 800e82e:	e6ee      	b.n	800e60e <_dtoa_r+0x476>
 800e830:	0023      	movs	r3, r4
 800e832:	3c01      	subs	r4, #1
 800e834:	7822      	ldrb	r2, [r4, #0]
 800e836:	2a30      	cmp	r2, #48	@ 0x30
 800e838:	d0fa      	beq.n	800e830 <_dtoa_r+0x698>
 800e83a:	001c      	movs	r4, r3
 800e83c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e83e:	9304      	str	r3, [sp, #16]
 800e840:	e73e      	b.n	800e6c0 <_dtoa_r+0x528>
 800e842:	2200      	movs	r2, #0
 800e844:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b4 <_dtoa_r+0x71c>)
 800e846:	f7f3 f82f 	bl	80018a8 <__aeabi_dmul>
 800e84a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e84c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e84e:	e7b9      	b.n	800e7c4 <_dtoa_r+0x62c>
 800e850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10c      	bne.n	800e870 <_dtoa_r+0x6d8>
 800e856:	9806      	ldr	r0, [sp, #24]
 800e858:	9907      	ldr	r1, [sp, #28]
 800e85a:	2200      	movs	r2, #0
 800e85c:	4b18      	ldr	r3, [pc, #96]	@ (800e8c0 <_dtoa_r+0x728>)
 800e85e:	f7f3 f823 	bl	80018a8 <__aeabi_dmul>
 800e862:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e866:	f7f1 fe15 	bl	8000494 <__aeabi_dcmpge>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d100      	bne.n	800e870 <_dtoa_r+0x6d8>
 800e86e:	e164      	b.n	800eb3a <_dtoa_r+0x9a2>
 800e870:	2600      	movs	r6, #0
 800e872:	0037      	movs	r7, r6
 800e874:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e876:	9c08      	ldr	r4, [sp, #32]
 800e878:	43db      	mvns	r3, r3
 800e87a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e87c:	2300      	movs	r3, #0
 800e87e:	9304      	str	r3, [sp, #16]
 800e880:	0031      	movs	r1, r6
 800e882:	9803      	ldr	r0, [sp, #12]
 800e884:	f000 fbc6 	bl	800f014 <_Bfree>
 800e888:	2f00      	cmp	r7, #0
 800e88a:	d0d7      	beq.n	800e83c <_dtoa_r+0x6a4>
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d005      	beq.n	800e89e <_dtoa_r+0x706>
 800e892:	42bb      	cmp	r3, r7
 800e894:	d003      	beq.n	800e89e <_dtoa_r+0x706>
 800e896:	0019      	movs	r1, r3
 800e898:	9803      	ldr	r0, [sp, #12]
 800e89a:	f000 fbbb 	bl	800f014 <_Bfree>
 800e89e:	0039      	movs	r1, r7
 800e8a0:	9803      	ldr	r0, [sp, #12]
 800e8a2:	f000 fbb7 	bl	800f014 <_Bfree>
 800e8a6:	e7c9      	b.n	800e83c <_dtoa_r+0x6a4>
 800e8a8:	08012488 	.word	0x08012488
 800e8ac:	08012460 	.word	0x08012460
 800e8b0:	3ff00000 	.word	0x3ff00000
 800e8b4:	40240000 	.word	0x40240000
 800e8b8:	401c0000 	.word	0x401c0000
 800e8bc:	fcc00000 	.word	0xfcc00000
 800e8c0:	40140000 	.word	0x40140000
 800e8c4:	3fe00000 	.word	0x3fe00000
 800e8c8:	9b04      	ldr	r3, [sp, #16]
 800e8ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8cc:	0023      	movs	r3, r4
 800e8ce:	001c      	movs	r4, r3
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	781a      	ldrb	r2, [r3, #0]
 800e8d4:	2a39      	cmp	r2, #57	@ 0x39
 800e8d6:	d108      	bne.n	800e8ea <_dtoa_r+0x752>
 800e8d8:	9a08      	ldr	r2, [sp, #32]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d1f7      	bne.n	800e8ce <_dtoa_r+0x736>
 800e8de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e8e0:	9908      	ldr	r1, [sp, #32]
 800e8e2:	3201      	adds	r2, #1
 800e8e4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e8e6:	2230      	movs	r2, #48	@ 0x30
 800e8e8:	700a      	strb	r2, [r1, #0]
 800e8ea:	781a      	ldrb	r2, [r3, #0]
 800e8ec:	3201      	adds	r2, #1
 800e8ee:	701a      	strb	r2, [r3, #0]
 800e8f0:	e7a4      	b.n	800e83c <_dtoa_r+0x6a4>
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	4bc6      	ldr	r3, [pc, #792]	@ (800ec10 <_dtoa_r+0xa78>)
 800e8f6:	f7f2 ffd7 	bl	80018a8 <__aeabi_dmul>
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	0006      	movs	r6, r0
 800e900:	000f      	movs	r7, r1
 800e902:	f7f1 fda3 	bl	800044c <__aeabi_dcmpeq>
 800e906:	2800      	cmp	r0, #0
 800e908:	d100      	bne.n	800e90c <_dtoa_r+0x774>
 800e90a:	e6a1      	b.n	800e650 <_dtoa_r+0x4b8>
 800e90c:	e6d8      	b.n	800e6c0 <_dtoa_r+0x528>
 800e90e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e910:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e912:	9c06      	ldr	r4, [sp, #24]
 800e914:	2f00      	cmp	r7, #0
 800e916:	d014      	beq.n	800e942 <_dtoa_r+0x7aa>
 800e918:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e91a:	2a01      	cmp	r2, #1
 800e91c:	dd00      	ble.n	800e920 <_dtoa_r+0x788>
 800e91e:	e0c8      	b.n	800eab2 <_dtoa_r+0x91a>
 800e920:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e922:	2a00      	cmp	r2, #0
 800e924:	d100      	bne.n	800e928 <_dtoa_r+0x790>
 800e926:	e0be      	b.n	800eaa6 <_dtoa_r+0x90e>
 800e928:	4aba      	ldr	r2, [pc, #744]	@ (800ec14 <_dtoa_r+0xa7c>)
 800e92a:	189b      	adds	r3, r3, r2
 800e92c:	9a06      	ldr	r2, [sp, #24]
 800e92e:	2101      	movs	r1, #1
 800e930:	18d2      	adds	r2, r2, r3
 800e932:	9206      	str	r2, [sp, #24]
 800e934:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e936:	9803      	ldr	r0, [sp, #12]
 800e938:	18d3      	adds	r3, r2, r3
 800e93a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e93c:	f000 fc22 	bl	800f184 <__i2b>
 800e940:	0007      	movs	r7, r0
 800e942:	2c00      	cmp	r4, #0
 800e944:	d00e      	beq.n	800e964 <_dtoa_r+0x7cc>
 800e946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e948:	2b00      	cmp	r3, #0
 800e94a:	dd0b      	ble.n	800e964 <_dtoa_r+0x7cc>
 800e94c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e94e:	0023      	movs	r3, r4
 800e950:	4294      	cmp	r4, r2
 800e952:	dd00      	ble.n	800e956 <_dtoa_r+0x7be>
 800e954:	0013      	movs	r3, r2
 800e956:	9a06      	ldr	r2, [sp, #24]
 800e958:	1ae4      	subs	r4, r4, r3
 800e95a:	1ad2      	subs	r2, r2, r3
 800e95c:	9206      	str	r2, [sp, #24]
 800e95e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	930d      	str	r3, [sp, #52]	@ 0x34
 800e964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e966:	2b00      	cmp	r3, #0
 800e968:	d01f      	beq.n	800e9aa <_dtoa_r+0x812>
 800e96a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d100      	bne.n	800e972 <_dtoa_r+0x7da>
 800e970:	e0b5      	b.n	800eade <_dtoa_r+0x946>
 800e972:	2d00      	cmp	r5, #0
 800e974:	d010      	beq.n	800e998 <_dtoa_r+0x800>
 800e976:	0039      	movs	r1, r7
 800e978:	002a      	movs	r2, r5
 800e97a:	9803      	ldr	r0, [sp, #12]
 800e97c:	f000 fccc 	bl	800f318 <__pow5mult>
 800e980:	9a05      	ldr	r2, [sp, #20]
 800e982:	0001      	movs	r1, r0
 800e984:	0007      	movs	r7, r0
 800e986:	9803      	ldr	r0, [sp, #12]
 800e988:	f000 fc14 	bl	800f1b4 <__multiply>
 800e98c:	0006      	movs	r6, r0
 800e98e:	9905      	ldr	r1, [sp, #20]
 800e990:	9803      	ldr	r0, [sp, #12]
 800e992:	f000 fb3f 	bl	800f014 <_Bfree>
 800e996:	9605      	str	r6, [sp, #20]
 800e998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e99a:	1b5a      	subs	r2, r3, r5
 800e99c:	42ab      	cmp	r3, r5
 800e99e:	d004      	beq.n	800e9aa <_dtoa_r+0x812>
 800e9a0:	9905      	ldr	r1, [sp, #20]
 800e9a2:	9803      	ldr	r0, [sp, #12]
 800e9a4:	f000 fcb8 	bl	800f318 <__pow5mult>
 800e9a8:	9005      	str	r0, [sp, #20]
 800e9aa:	2101      	movs	r1, #1
 800e9ac:	9803      	ldr	r0, [sp, #12]
 800e9ae:	f000 fbe9 	bl	800f184 <__i2b>
 800e9b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e9b4:	0006      	movs	r6, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d100      	bne.n	800e9bc <_dtoa_r+0x824>
 800e9ba:	e1bc      	b.n	800ed36 <_dtoa_r+0xb9e>
 800e9bc:	001a      	movs	r2, r3
 800e9be:	0001      	movs	r1, r0
 800e9c0:	9803      	ldr	r0, [sp, #12]
 800e9c2:	f000 fca9 	bl	800f318 <__pow5mult>
 800e9c6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e9c8:	0006      	movs	r6, r0
 800e9ca:	2500      	movs	r5, #0
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	dc16      	bgt.n	800e9fe <_dtoa_r+0x866>
 800e9d0:	2500      	movs	r5, #0
 800e9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9d4:	42ab      	cmp	r3, r5
 800e9d6:	d10e      	bne.n	800e9f6 <_dtoa_r+0x85e>
 800e9d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9da:	031b      	lsls	r3, r3, #12
 800e9dc:	42ab      	cmp	r3, r5
 800e9de:	d10a      	bne.n	800e9f6 <_dtoa_r+0x85e>
 800e9e0:	4b8d      	ldr	r3, [pc, #564]	@ (800ec18 <_dtoa_r+0xa80>)
 800e9e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e9e4:	4213      	tst	r3, r2
 800e9e6:	d006      	beq.n	800e9f6 <_dtoa_r+0x85e>
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	3501      	adds	r5, #1
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	9306      	str	r3, [sp, #24]
 800e9f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800e9f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e9f8:	2001      	movs	r0, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d008      	beq.n	800ea10 <_dtoa_r+0x878>
 800e9fe:	6933      	ldr	r3, [r6, #16]
 800ea00:	3303      	adds	r3, #3
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	18f3      	adds	r3, r6, r3
 800ea06:	6858      	ldr	r0, [r3, #4]
 800ea08:	f000 fb6c 	bl	800f0e4 <__hi0bits>
 800ea0c:	2320      	movs	r3, #32
 800ea0e:	1a18      	subs	r0, r3, r0
 800ea10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea12:	1818      	adds	r0, r3, r0
 800ea14:	0002      	movs	r2, r0
 800ea16:	231f      	movs	r3, #31
 800ea18:	401a      	ands	r2, r3
 800ea1a:	4218      	tst	r0, r3
 800ea1c:	d065      	beq.n	800eaea <_dtoa_r+0x952>
 800ea1e:	3301      	adds	r3, #1
 800ea20:	1a9b      	subs	r3, r3, r2
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	dd5d      	ble.n	800eae2 <_dtoa_r+0x94a>
 800ea26:	231c      	movs	r3, #28
 800ea28:	1a9b      	subs	r3, r3, r2
 800ea2a:	9a06      	ldr	r2, [sp, #24]
 800ea2c:	18e4      	adds	r4, r4, r3
 800ea2e:	18d2      	adds	r2, r2, r3
 800ea30:	9206      	str	r2, [sp, #24]
 800ea32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea34:	18d3      	adds	r3, r2, r3
 800ea36:	930d      	str	r3, [sp, #52]	@ 0x34
 800ea38:	9b06      	ldr	r3, [sp, #24]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	dd05      	ble.n	800ea4a <_dtoa_r+0x8b2>
 800ea3e:	001a      	movs	r2, r3
 800ea40:	9905      	ldr	r1, [sp, #20]
 800ea42:	9803      	ldr	r0, [sp, #12]
 800ea44:	f000 fcc4 	bl	800f3d0 <__lshift>
 800ea48:	9005      	str	r0, [sp, #20]
 800ea4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	dd05      	ble.n	800ea5c <_dtoa_r+0x8c4>
 800ea50:	0031      	movs	r1, r6
 800ea52:	001a      	movs	r2, r3
 800ea54:	9803      	ldr	r0, [sp, #12]
 800ea56:	f000 fcbb 	bl	800f3d0 <__lshift>
 800ea5a:	0006      	movs	r6, r0
 800ea5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d045      	beq.n	800eaee <_dtoa_r+0x956>
 800ea62:	0031      	movs	r1, r6
 800ea64:	9805      	ldr	r0, [sp, #20]
 800ea66:	f000 fd1f 	bl	800f4a8 <__mcmp>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	da3f      	bge.n	800eaee <_dtoa_r+0x956>
 800ea6e:	9b04      	ldr	r3, [sp, #16]
 800ea70:	220a      	movs	r2, #10
 800ea72:	3b01      	subs	r3, #1
 800ea74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea76:	9905      	ldr	r1, [sp, #20]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	9803      	ldr	r0, [sp, #12]
 800ea7c:	f000 faee 	bl	800f05c <__multadd>
 800ea80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea82:	9005      	str	r0, [sp, #20]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d100      	bne.n	800ea8a <_dtoa_r+0x8f2>
 800ea88:	e15c      	b.n	800ed44 <_dtoa_r+0xbac>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	0039      	movs	r1, r7
 800ea8e:	220a      	movs	r2, #10
 800ea90:	9803      	ldr	r0, [sp, #12]
 800ea92:	f000 fae3 	bl	800f05c <__multadd>
 800ea96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea98:	0007      	movs	r7, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	dc55      	bgt.n	800eb4a <_dtoa_r+0x9b2>
 800ea9e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	dc2d      	bgt.n	800eb00 <_dtoa_r+0x968>
 800eaa4:	e051      	b.n	800eb4a <_dtoa_r+0x9b2>
 800eaa6:	2336      	movs	r3, #54	@ 0x36
 800eaa8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eaaa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800eaac:	9c06      	ldr	r4, [sp, #24]
 800eaae:	1a9b      	subs	r3, r3, r2
 800eab0:	e73c      	b.n	800e92c <_dtoa_r+0x794>
 800eab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab4:	1e5d      	subs	r5, r3, #1
 800eab6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eab8:	42ab      	cmp	r3, r5
 800eaba:	db08      	blt.n	800eace <_dtoa_r+0x936>
 800eabc:	1b5d      	subs	r5, r3, r5
 800eabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac0:	9c06      	ldr	r4, [sp, #24]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	db00      	blt.n	800eac8 <_dtoa_r+0x930>
 800eac6:	e731      	b.n	800e92c <_dtoa_r+0x794>
 800eac8:	1ae4      	subs	r4, r4, r3
 800eaca:	2300      	movs	r3, #0
 800eacc:	e72e      	b.n	800e92c <_dtoa_r+0x794>
 800eace:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ead0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ead2:	1aeb      	subs	r3, r5, r3
 800ead4:	18d3      	adds	r3, r2, r3
 800ead6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ead8:	9314      	str	r3, [sp, #80]	@ 0x50
 800eada:	2500      	movs	r5, #0
 800eadc:	e7ef      	b.n	800eabe <_dtoa_r+0x926>
 800eade:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eae0:	e75e      	b.n	800e9a0 <_dtoa_r+0x808>
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d0a8      	beq.n	800ea38 <_dtoa_r+0x8a0>
 800eae6:	331c      	adds	r3, #28
 800eae8:	e79f      	b.n	800ea2a <_dtoa_r+0x892>
 800eaea:	0013      	movs	r3, r2
 800eaec:	e7fb      	b.n	800eae6 <_dtoa_r+0x94e>
 800eaee:	9b04      	ldr	r3, [sp, #16]
 800eaf0:	930c      	str	r3, [sp, #48]	@ 0x30
 800eaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf4:	930e      	str	r3, [sp, #56]	@ 0x38
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	dc23      	bgt.n	800eb42 <_dtoa_r+0x9aa>
 800eafa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	dd20      	ble.n	800eb42 <_dtoa_r+0x9aa>
 800eb00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d000      	beq.n	800eb08 <_dtoa_r+0x970>
 800eb06:	e6b5      	b.n	800e874 <_dtoa_r+0x6dc>
 800eb08:	0031      	movs	r1, r6
 800eb0a:	2205      	movs	r2, #5
 800eb0c:	9803      	ldr	r0, [sp, #12]
 800eb0e:	f000 faa5 	bl	800f05c <__multadd>
 800eb12:	0006      	movs	r6, r0
 800eb14:	0001      	movs	r1, r0
 800eb16:	9805      	ldr	r0, [sp, #20]
 800eb18:	f000 fcc6 	bl	800f4a8 <__mcmp>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	dc00      	bgt.n	800eb22 <_dtoa_r+0x98a>
 800eb20:	e6a8      	b.n	800e874 <_dtoa_r+0x6dc>
 800eb22:	9b08      	ldr	r3, [sp, #32]
 800eb24:	9a08      	ldr	r2, [sp, #32]
 800eb26:	1c5c      	adds	r4, r3, #1
 800eb28:	2331      	movs	r3, #49	@ 0x31
 800eb2a:	7013      	strb	r3, [r2, #0]
 800eb2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb2e:	3301      	adds	r3, #1
 800eb30:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb32:	e6a3      	b.n	800e87c <_dtoa_r+0x6e4>
 800eb34:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800eb36:	0037      	movs	r7, r6
 800eb38:	e7f3      	b.n	800eb22 <_dtoa_r+0x98a>
 800eb3a:	9b04      	ldr	r3, [sp, #16]
 800eb3c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800eb3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb40:	e7f9      	b.n	800eb36 <_dtoa_r+0x99e>
 800eb42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d100      	bne.n	800eb4a <_dtoa_r+0x9b2>
 800eb48:	e100      	b.n	800ed4c <_dtoa_r+0xbb4>
 800eb4a:	2c00      	cmp	r4, #0
 800eb4c:	dd05      	ble.n	800eb5a <_dtoa_r+0x9c2>
 800eb4e:	0039      	movs	r1, r7
 800eb50:	0022      	movs	r2, r4
 800eb52:	9803      	ldr	r0, [sp, #12]
 800eb54:	f000 fc3c 	bl	800f3d0 <__lshift>
 800eb58:	0007      	movs	r7, r0
 800eb5a:	0038      	movs	r0, r7
 800eb5c:	2d00      	cmp	r5, #0
 800eb5e:	d018      	beq.n	800eb92 <_dtoa_r+0x9fa>
 800eb60:	6879      	ldr	r1, [r7, #4]
 800eb62:	9803      	ldr	r0, [sp, #12]
 800eb64:	f000 fa12 	bl	800ef8c <_Balloc>
 800eb68:	1e04      	subs	r4, r0, #0
 800eb6a:	d105      	bne.n	800eb78 <_dtoa_r+0x9e0>
 800eb6c:	0022      	movs	r2, r4
 800eb6e:	4b2b      	ldr	r3, [pc, #172]	@ (800ec1c <_dtoa_r+0xa84>)
 800eb70:	482b      	ldr	r0, [pc, #172]	@ (800ec20 <_dtoa_r+0xa88>)
 800eb72:	492c      	ldr	r1, [pc, #176]	@ (800ec24 <_dtoa_r+0xa8c>)
 800eb74:	f7ff fb25 	bl	800e1c2 <_dtoa_r+0x2a>
 800eb78:	0039      	movs	r1, r7
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	310c      	adds	r1, #12
 800eb7e:	3202      	adds	r2, #2
 800eb80:	0092      	lsls	r2, r2, #2
 800eb82:	300c      	adds	r0, #12
 800eb84:	f7ff fa52 	bl	800e02c <memcpy>
 800eb88:	2201      	movs	r2, #1
 800eb8a:	0021      	movs	r1, r4
 800eb8c:	9803      	ldr	r0, [sp, #12]
 800eb8e:	f000 fc1f 	bl	800f3d0 <__lshift>
 800eb92:	9b08      	ldr	r3, [sp, #32]
 800eb94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb96:	9306      	str	r3, [sp, #24]
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	189b      	adds	r3, r3, r2
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	9704      	str	r7, [sp, #16]
 800eba0:	0007      	movs	r7, r0
 800eba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eba6:	4013      	ands	r3, r2
 800eba8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ebaa:	0031      	movs	r1, r6
 800ebac:	9805      	ldr	r0, [sp, #20]
 800ebae:	f7ff fa65 	bl	800e07c <quorem>
 800ebb2:	9904      	ldr	r1, [sp, #16]
 800ebb4:	0005      	movs	r5, r0
 800ebb6:	900a      	str	r0, [sp, #40]	@ 0x28
 800ebb8:	9805      	ldr	r0, [sp, #20]
 800ebba:	f000 fc75 	bl	800f4a8 <__mcmp>
 800ebbe:	003a      	movs	r2, r7
 800ebc0:	900d      	str	r0, [sp, #52]	@ 0x34
 800ebc2:	0031      	movs	r1, r6
 800ebc4:	9803      	ldr	r0, [sp, #12]
 800ebc6:	f000 fc8b 	bl	800f4e0 <__mdiff>
 800ebca:	2201      	movs	r2, #1
 800ebcc:	68c3      	ldr	r3, [r0, #12]
 800ebce:	0004      	movs	r4, r0
 800ebd0:	3530      	adds	r5, #48	@ 0x30
 800ebd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d104      	bne.n	800ebe2 <_dtoa_r+0xa4a>
 800ebd8:	0001      	movs	r1, r0
 800ebda:	9805      	ldr	r0, [sp, #20]
 800ebdc:	f000 fc64 	bl	800f4a8 <__mcmp>
 800ebe0:	9009      	str	r0, [sp, #36]	@ 0x24
 800ebe2:	0021      	movs	r1, r4
 800ebe4:	9803      	ldr	r0, [sp, #12]
 800ebe6:	f000 fa15 	bl	800f014 <_Bfree>
 800ebea:	9b06      	ldr	r3, [sp, #24]
 800ebec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebee:	1c5c      	adds	r4, r3, #1
 800ebf0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	d116      	bne.n	800ec28 <_dtoa_r+0xa90>
 800ebfa:	2d39      	cmp	r5, #57	@ 0x39
 800ebfc:	d02f      	beq.n	800ec5e <_dtoa_r+0xac6>
 800ebfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dd01      	ble.n	800ec08 <_dtoa_r+0xa70>
 800ec04:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ec06:	3531      	adds	r5, #49	@ 0x31
 800ec08:	9b06      	ldr	r3, [sp, #24]
 800ec0a:	701d      	strb	r5, [r3, #0]
 800ec0c:	e638      	b.n	800e880 <_dtoa_r+0x6e8>
 800ec0e:	46c0      	nop			@ (mov r8, r8)
 800ec10:	40240000 	.word	0x40240000
 800ec14:	00000433 	.word	0x00000433
 800ec18:	7ff00000 	.word	0x7ff00000
 800ec1c:	080123e6 	.word	0x080123e6
 800ec20:	0801238e 	.word	0x0801238e
 800ec24:	000002ef 	.word	0x000002ef
 800ec28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	db04      	blt.n	800ec38 <_dtoa_r+0xaa0>
 800ec2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ec30:	4313      	orrs	r3, r2
 800ec32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec34:	4313      	orrs	r3, r2
 800ec36:	d11e      	bne.n	800ec76 <_dtoa_r+0xade>
 800ec38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	dde4      	ble.n	800ec08 <_dtoa_r+0xa70>
 800ec3e:	9905      	ldr	r1, [sp, #20]
 800ec40:	2201      	movs	r2, #1
 800ec42:	9803      	ldr	r0, [sp, #12]
 800ec44:	f000 fbc4 	bl	800f3d0 <__lshift>
 800ec48:	0031      	movs	r1, r6
 800ec4a:	9005      	str	r0, [sp, #20]
 800ec4c:	f000 fc2c 	bl	800f4a8 <__mcmp>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	dc02      	bgt.n	800ec5a <_dtoa_r+0xac2>
 800ec54:	d1d8      	bne.n	800ec08 <_dtoa_r+0xa70>
 800ec56:	07eb      	lsls	r3, r5, #31
 800ec58:	d5d6      	bpl.n	800ec08 <_dtoa_r+0xa70>
 800ec5a:	2d39      	cmp	r5, #57	@ 0x39
 800ec5c:	d1d2      	bne.n	800ec04 <_dtoa_r+0xa6c>
 800ec5e:	2339      	movs	r3, #57	@ 0x39
 800ec60:	9a06      	ldr	r2, [sp, #24]
 800ec62:	7013      	strb	r3, [r2, #0]
 800ec64:	0023      	movs	r3, r4
 800ec66:	001c      	movs	r4, r3
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	781a      	ldrb	r2, [r3, #0]
 800ec6c:	2a39      	cmp	r2, #57	@ 0x39
 800ec6e:	d04f      	beq.n	800ed10 <_dtoa_r+0xb78>
 800ec70:	3201      	adds	r2, #1
 800ec72:	701a      	strb	r2, [r3, #0]
 800ec74:	e604      	b.n	800e880 <_dtoa_r+0x6e8>
 800ec76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	dd03      	ble.n	800ec84 <_dtoa_r+0xaec>
 800ec7c:	2d39      	cmp	r5, #57	@ 0x39
 800ec7e:	d0ee      	beq.n	800ec5e <_dtoa_r+0xac6>
 800ec80:	3501      	adds	r5, #1
 800ec82:	e7c1      	b.n	800ec08 <_dtoa_r+0xa70>
 800ec84:	9b06      	ldr	r3, [sp, #24]
 800ec86:	9a06      	ldr	r2, [sp, #24]
 800ec88:	701d      	strb	r5, [r3, #0]
 800ec8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d02a      	beq.n	800ece6 <_dtoa_r+0xb4e>
 800ec90:	2300      	movs	r3, #0
 800ec92:	220a      	movs	r2, #10
 800ec94:	9905      	ldr	r1, [sp, #20]
 800ec96:	9803      	ldr	r0, [sp, #12]
 800ec98:	f000 f9e0 	bl	800f05c <__multadd>
 800ec9c:	9b04      	ldr	r3, [sp, #16]
 800ec9e:	9005      	str	r0, [sp, #20]
 800eca0:	42bb      	cmp	r3, r7
 800eca2:	d109      	bne.n	800ecb8 <_dtoa_r+0xb20>
 800eca4:	2300      	movs	r3, #0
 800eca6:	220a      	movs	r2, #10
 800eca8:	9904      	ldr	r1, [sp, #16]
 800ecaa:	9803      	ldr	r0, [sp, #12]
 800ecac:	f000 f9d6 	bl	800f05c <__multadd>
 800ecb0:	9004      	str	r0, [sp, #16]
 800ecb2:	0007      	movs	r7, r0
 800ecb4:	9406      	str	r4, [sp, #24]
 800ecb6:	e778      	b.n	800ebaa <_dtoa_r+0xa12>
 800ecb8:	9904      	ldr	r1, [sp, #16]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	220a      	movs	r2, #10
 800ecbe:	9803      	ldr	r0, [sp, #12]
 800ecc0:	f000 f9cc 	bl	800f05c <__multadd>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9004      	str	r0, [sp, #16]
 800ecc8:	220a      	movs	r2, #10
 800ecca:	0039      	movs	r1, r7
 800eccc:	9803      	ldr	r0, [sp, #12]
 800ecce:	f000 f9c5 	bl	800f05c <__multadd>
 800ecd2:	e7ee      	b.n	800ecb2 <_dtoa_r+0xb1a>
 800ecd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecd6:	2401      	movs	r4, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	dd00      	ble.n	800ecde <_dtoa_r+0xb46>
 800ecdc:	001c      	movs	r4, r3
 800ecde:	9b08      	ldr	r3, [sp, #32]
 800ece0:	191c      	adds	r4, r3, r4
 800ece2:	2300      	movs	r3, #0
 800ece4:	9304      	str	r3, [sp, #16]
 800ece6:	9905      	ldr	r1, [sp, #20]
 800ece8:	2201      	movs	r2, #1
 800ecea:	9803      	ldr	r0, [sp, #12]
 800ecec:	f000 fb70 	bl	800f3d0 <__lshift>
 800ecf0:	0031      	movs	r1, r6
 800ecf2:	9005      	str	r0, [sp, #20]
 800ecf4:	f000 fbd8 	bl	800f4a8 <__mcmp>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	dcb3      	bgt.n	800ec64 <_dtoa_r+0xacc>
 800ecfc:	d101      	bne.n	800ed02 <_dtoa_r+0xb6a>
 800ecfe:	07ed      	lsls	r5, r5, #31
 800ed00:	d4b0      	bmi.n	800ec64 <_dtoa_r+0xacc>
 800ed02:	0023      	movs	r3, r4
 800ed04:	001c      	movs	r4, r3
 800ed06:	3b01      	subs	r3, #1
 800ed08:	781a      	ldrb	r2, [r3, #0]
 800ed0a:	2a30      	cmp	r2, #48	@ 0x30
 800ed0c:	d0fa      	beq.n	800ed04 <_dtoa_r+0xb6c>
 800ed0e:	e5b7      	b.n	800e880 <_dtoa_r+0x6e8>
 800ed10:	9a08      	ldr	r2, [sp, #32]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d1a7      	bne.n	800ec66 <_dtoa_r+0xace>
 800ed16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed18:	3301      	adds	r3, #1
 800ed1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed1c:	2331      	movs	r3, #49	@ 0x31
 800ed1e:	7013      	strb	r3, [r2, #0]
 800ed20:	e5ae      	b.n	800e880 <_dtoa_r+0x6e8>
 800ed22:	4b15      	ldr	r3, [pc, #84]	@ (800ed78 <_dtoa_r+0xbe0>)
 800ed24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ed26:	9308      	str	r3, [sp, #32]
 800ed28:	4b14      	ldr	r3, [pc, #80]	@ (800ed7c <_dtoa_r+0xbe4>)
 800ed2a:	2a00      	cmp	r2, #0
 800ed2c:	d001      	beq.n	800ed32 <_dtoa_r+0xb9a>
 800ed2e:	f7ff fa7b 	bl	800e228 <_dtoa_r+0x90>
 800ed32:	f7ff fa7b 	bl	800e22c <_dtoa_r+0x94>
 800ed36:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	dc00      	bgt.n	800ed3e <_dtoa_r+0xba6>
 800ed3c:	e648      	b.n	800e9d0 <_dtoa_r+0x838>
 800ed3e:	2001      	movs	r0, #1
 800ed40:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ed42:	e665      	b.n	800ea10 <_dtoa_r+0x878>
 800ed44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	dc00      	bgt.n	800ed4c <_dtoa_r+0xbb4>
 800ed4a:	e6d6      	b.n	800eafa <_dtoa_r+0x962>
 800ed4c:	2400      	movs	r4, #0
 800ed4e:	0031      	movs	r1, r6
 800ed50:	9805      	ldr	r0, [sp, #20]
 800ed52:	f7ff f993 	bl	800e07c <quorem>
 800ed56:	9b08      	ldr	r3, [sp, #32]
 800ed58:	3030      	adds	r0, #48	@ 0x30
 800ed5a:	5518      	strb	r0, [r3, r4]
 800ed5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed5e:	3401      	adds	r4, #1
 800ed60:	0005      	movs	r5, r0
 800ed62:	429c      	cmp	r4, r3
 800ed64:	dab6      	bge.n	800ecd4 <_dtoa_r+0xb3c>
 800ed66:	2300      	movs	r3, #0
 800ed68:	220a      	movs	r2, #10
 800ed6a:	9905      	ldr	r1, [sp, #20]
 800ed6c:	9803      	ldr	r0, [sp, #12]
 800ed6e:	f000 f975 	bl	800f05c <__multadd>
 800ed72:	9005      	str	r0, [sp, #20]
 800ed74:	e7eb      	b.n	800ed4e <_dtoa_r+0xbb6>
 800ed76:	46c0      	nop			@ (mov r8, r8)
 800ed78:	08012381 	.word	0x08012381
 800ed7c:	08012389 	.word	0x08012389

0800ed80 <_free_r>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	0005      	movs	r5, r0
 800ed84:	1e0c      	subs	r4, r1, #0
 800ed86:	d010      	beq.n	800edaa <_free_r+0x2a>
 800ed88:	3c04      	subs	r4, #4
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	da00      	bge.n	800ed92 <_free_r+0x12>
 800ed90:	18e4      	adds	r4, r4, r3
 800ed92:	0028      	movs	r0, r5
 800ed94:	f000 f8ea 	bl	800ef6c <__malloc_lock>
 800ed98:	4a1d      	ldr	r2, [pc, #116]	@ (800ee10 <_free_r+0x90>)
 800ed9a:	6813      	ldr	r3, [r2, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d105      	bne.n	800edac <_free_r+0x2c>
 800eda0:	6063      	str	r3, [r4, #4]
 800eda2:	6014      	str	r4, [r2, #0]
 800eda4:	0028      	movs	r0, r5
 800eda6:	f000 f8e9 	bl	800ef7c <__malloc_unlock>
 800edaa:	bd70      	pop	{r4, r5, r6, pc}
 800edac:	42a3      	cmp	r3, r4
 800edae:	d908      	bls.n	800edc2 <_free_r+0x42>
 800edb0:	6820      	ldr	r0, [r4, #0]
 800edb2:	1821      	adds	r1, r4, r0
 800edb4:	428b      	cmp	r3, r1
 800edb6:	d1f3      	bne.n	800eda0 <_free_r+0x20>
 800edb8:	6819      	ldr	r1, [r3, #0]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	1809      	adds	r1, r1, r0
 800edbe:	6021      	str	r1, [r4, #0]
 800edc0:	e7ee      	b.n	800eda0 <_free_r+0x20>
 800edc2:	001a      	movs	r2, r3
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <_free_r+0x4e>
 800edca:	42a3      	cmp	r3, r4
 800edcc:	d9f9      	bls.n	800edc2 <_free_r+0x42>
 800edce:	6811      	ldr	r1, [r2, #0]
 800edd0:	1850      	adds	r0, r2, r1
 800edd2:	42a0      	cmp	r0, r4
 800edd4:	d10b      	bne.n	800edee <_free_r+0x6e>
 800edd6:	6820      	ldr	r0, [r4, #0]
 800edd8:	1809      	adds	r1, r1, r0
 800edda:	1850      	adds	r0, r2, r1
 800eddc:	6011      	str	r1, [r2, #0]
 800edde:	4283      	cmp	r3, r0
 800ede0:	d1e0      	bne.n	800eda4 <_free_r+0x24>
 800ede2:	6818      	ldr	r0, [r3, #0]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	1841      	adds	r1, r0, r1
 800ede8:	6011      	str	r1, [r2, #0]
 800edea:	6053      	str	r3, [r2, #4]
 800edec:	e7da      	b.n	800eda4 <_free_r+0x24>
 800edee:	42a0      	cmp	r0, r4
 800edf0:	d902      	bls.n	800edf8 <_free_r+0x78>
 800edf2:	230c      	movs	r3, #12
 800edf4:	602b      	str	r3, [r5, #0]
 800edf6:	e7d5      	b.n	800eda4 <_free_r+0x24>
 800edf8:	6820      	ldr	r0, [r4, #0]
 800edfa:	1821      	adds	r1, r4, r0
 800edfc:	428b      	cmp	r3, r1
 800edfe:	d103      	bne.n	800ee08 <_free_r+0x88>
 800ee00:	6819      	ldr	r1, [r3, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	1809      	adds	r1, r1, r0
 800ee06:	6021      	str	r1, [r4, #0]
 800ee08:	6063      	str	r3, [r4, #4]
 800ee0a:	6054      	str	r4, [r2, #4]
 800ee0c:	e7ca      	b.n	800eda4 <_free_r+0x24>
 800ee0e:	46c0      	nop			@ (mov r8, r8)
 800ee10:	200005c0 	.word	0x200005c0

0800ee14 <malloc>:
 800ee14:	b510      	push	{r4, lr}
 800ee16:	4b03      	ldr	r3, [pc, #12]	@ (800ee24 <malloc+0x10>)
 800ee18:	0001      	movs	r1, r0
 800ee1a:	6818      	ldr	r0, [r3, #0]
 800ee1c:	f000 f826 	bl	800ee6c <_malloc_r>
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	46c0      	nop			@ (mov r8, r8)
 800ee24:	2000002c 	.word	0x2000002c

0800ee28 <sbrk_aligned>:
 800ee28:	b570      	push	{r4, r5, r6, lr}
 800ee2a:	4e0f      	ldr	r6, [pc, #60]	@ (800ee68 <sbrk_aligned+0x40>)
 800ee2c:	000d      	movs	r5, r1
 800ee2e:	6831      	ldr	r1, [r6, #0]
 800ee30:	0004      	movs	r4, r0
 800ee32:	2900      	cmp	r1, #0
 800ee34:	d102      	bne.n	800ee3c <sbrk_aligned+0x14>
 800ee36:	f001 fbe9 	bl	801060c <_sbrk_r>
 800ee3a:	6030      	str	r0, [r6, #0]
 800ee3c:	0029      	movs	r1, r5
 800ee3e:	0020      	movs	r0, r4
 800ee40:	f001 fbe4 	bl	801060c <_sbrk_r>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d103      	bne.n	800ee50 <sbrk_aligned+0x28>
 800ee48:	2501      	movs	r5, #1
 800ee4a:	426d      	negs	r5, r5
 800ee4c:	0028      	movs	r0, r5
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}
 800ee50:	2303      	movs	r3, #3
 800ee52:	1cc5      	adds	r5, r0, #3
 800ee54:	439d      	bics	r5, r3
 800ee56:	42a8      	cmp	r0, r5
 800ee58:	d0f8      	beq.n	800ee4c <sbrk_aligned+0x24>
 800ee5a:	1a29      	subs	r1, r5, r0
 800ee5c:	0020      	movs	r0, r4
 800ee5e:	f001 fbd5 	bl	801060c <_sbrk_r>
 800ee62:	3001      	adds	r0, #1
 800ee64:	d1f2      	bne.n	800ee4c <sbrk_aligned+0x24>
 800ee66:	e7ef      	b.n	800ee48 <sbrk_aligned+0x20>
 800ee68:	200005bc 	.word	0x200005bc

0800ee6c <_malloc_r>:
 800ee6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee6e:	2203      	movs	r2, #3
 800ee70:	1ccb      	adds	r3, r1, #3
 800ee72:	4393      	bics	r3, r2
 800ee74:	3308      	adds	r3, #8
 800ee76:	0005      	movs	r5, r0
 800ee78:	001f      	movs	r7, r3
 800ee7a:	2b0c      	cmp	r3, #12
 800ee7c:	d234      	bcs.n	800eee8 <_malloc_r+0x7c>
 800ee7e:	270c      	movs	r7, #12
 800ee80:	42b9      	cmp	r1, r7
 800ee82:	d833      	bhi.n	800eeec <_malloc_r+0x80>
 800ee84:	0028      	movs	r0, r5
 800ee86:	f000 f871 	bl	800ef6c <__malloc_lock>
 800ee8a:	4e37      	ldr	r6, [pc, #220]	@ (800ef68 <_malloc_r+0xfc>)
 800ee8c:	6833      	ldr	r3, [r6, #0]
 800ee8e:	001c      	movs	r4, r3
 800ee90:	2c00      	cmp	r4, #0
 800ee92:	d12f      	bne.n	800eef4 <_malloc_r+0x88>
 800ee94:	0039      	movs	r1, r7
 800ee96:	0028      	movs	r0, r5
 800ee98:	f7ff ffc6 	bl	800ee28 <sbrk_aligned>
 800ee9c:	0004      	movs	r4, r0
 800ee9e:	1c43      	adds	r3, r0, #1
 800eea0:	d15f      	bne.n	800ef62 <_malloc_r+0xf6>
 800eea2:	6834      	ldr	r4, [r6, #0]
 800eea4:	9400      	str	r4, [sp, #0]
 800eea6:	9b00      	ldr	r3, [sp, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d14a      	bne.n	800ef42 <_malloc_r+0xd6>
 800eeac:	2c00      	cmp	r4, #0
 800eeae:	d052      	beq.n	800ef56 <_malloc_r+0xea>
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	0028      	movs	r0, r5
 800eeb4:	18e3      	adds	r3, r4, r3
 800eeb6:	9900      	ldr	r1, [sp, #0]
 800eeb8:	9301      	str	r3, [sp, #4]
 800eeba:	f001 fba7 	bl	801060c <_sbrk_r>
 800eebe:	9b01      	ldr	r3, [sp, #4]
 800eec0:	4283      	cmp	r3, r0
 800eec2:	d148      	bne.n	800ef56 <_malloc_r+0xea>
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	0028      	movs	r0, r5
 800eec8:	1aff      	subs	r7, r7, r3
 800eeca:	0039      	movs	r1, r7
 800eecc:	f7ff ffac 	bl	800ee28 <sbrk_aligned>
 800eed0:	3001      	adds	r0, #1
 800eed2:	d040      	beq.n	800ef56 <_malloc_r+0xea>
 800eed4:	6823      	ldr	r3, [r4, #0]
 800eed6:	19db      	adds	r3, r3, r7
 800eed8:	6023      	str	r3, [r4, #0]
 800eeda:	6833      	ldr	r3, [r6, #0]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	2a00      	cmp	r2, #0
 800eee0:	d133      	bne.n	800ef4a <_malloc_r+0xde>
 800eee2:	9b00      	ldr	r3, [sp, #0]
 800eee4:	6033      	str	r3, [r6, #0]
 800eee6:	e019      	b.n	800ef1c <_malloc_r+0xb0>
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	dac9      	bge.n	800ee80 <_malloc_r+0x14>
 800eeec:	230c      	movs	r3, #12
 800eeee:	602b      	str	r3, [r5, #0]
 800eef0:	2000      	movs	r0, #0
 800eef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eef4:	6821      	ldr	r1, [r4, #0]
 800eef6:	1bc9      	subs	r1, r1, r7
 800eef8:	d420      	bmi.n	800ef3c <_malloc_r+0xd0>
 800eefa:	290b      	cmp	r1, #11
 800eefc:	d90a      	bls.n	800ef14 <_malloc_r+0xa8>
 800eefe:	19e2      	adds	r2, r4, r7
 800ef00:	6027      	str	r7, [r4, #0]
 800ef02:	42a3      	cmp	r3, r4
 800ef04:	d104      	bne.n	800ef10 <_malloc_r+0xa4>
 800ef06:	6032      	str	r2, [r6, #0]
 800ef08:	6863      	ldr	r3, [r4, #4]
 800ef0a:	6011      	str	r1, [r2, #0]
 800ef0c:	6053      	str	r3, [r2, #4]
 800ef0e:	e005      	b.n	800ef1c <_malloc_r+0xb0>
 800ef10:	605a      	str	r2, [r3, #4]
 800ef12:	e7f9      	b.n	800ef08 <_malloc_r+0x9c>
 800ef14:	6862      	ldr	r2, [r4, #4]
 800ef16:	42a3      	cmp	r3, r4
 800ef18:	d10e      	bne.n	800ef38 <_malloc_r+0xcc>
 800ef1a:	6032      	str	r2, [r6, #0]
 800ef1c:	0028      	movs	r0, r5
 800ef1e:	f000 f82d 	bl	800ef7c <__malloc_unlock>
 800ef22:	0020      	movs	r0, r4
 800ef24:	2207      	movs	r2, #7
 800ef26:	300b      	adds	r0, #11
 800ef28:	1d23      	adds	r3, r4, #4
 800ef2a:	4390      	bics	r0, r2
 800ef2c:	1ac2      	subs	r2, r0, r3
 800ef2e:	4298      	cmp	r0, r3
 800ef30:	d0df      	beq.n	800eef2 <_malloc_r+0x86>
 800ef32:	1a1b      	subs	r3, r3, r0
 800ef34:	50a3      	str	r3, [r4, r2]
 800ef36:	e7dc      	b.n	800eef2 <_malloc_r+0x86>
 800ef38:	605a      	str	r2, [r3, #4]
 800ef3a:	e7ef      	b.n	800ef1c <_malloc_r+0xb0>
 800ef3c:	0023      	movs	r3, r4
 800ef3e:	6864      	ldr	r4, [r4, #4]
 800ef40:	e7a6      	b.n	800ee90 <_malloc_r+0x24>
 800ef42:	9c00      	ldr	r4, [sp, #0]
 800ef44:	6863      	ldr	r3, [r4, #4]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	e7ad      	b.n	800eea6 <_malloc_r+0x3a>
 800ef4a:	001a      	movs	r2, r3
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	42a3      	cmp	r3, r4
 800ef50:	d1fb      	bne.n	800ef4a <_malloc_r+0xde>
 800ef52:	2300      	movs	r3, #0
 800ef54:	e7da      	b.n	800ef0c <_malloc_r+0xa0>
 800ef56:	230c      	movs	r3, #12
 800ef58:	0028      	movs	r0, r5
 800ef5a:	602b      	str	r3, [r5, #0]
 800ef5c:	f000 f80e 	bl	800ef7c <__malloc_unlock>
 800ef60:	e7c6      	b.n	800eef0 <_malloc_r+0x84>
 800ef62:	6007      	str	r7, [r0, #0]
 800ef64:	e7da      	b.n	800ef1c <_malloc_r+0xb0>
 800ef66:	46c0      	nop			@ (mov r8, r8)
 800ef68:	200005c0 	.word	0x200005c0

0800ef6c <__malloc_lock>:
 800ef6c:	b510      	push	{r4, lr}
 800ef6e:	4802      	ldr	r0, [pc, #8]	@ (800ef78 <__malloc_lock+0xc>)
 800ef70:	f7ff f84f 	bl	800e012 <__retarget_lock_acquire_recursive>
 800ef74:	bd10      	pop	{r4, pc}
 800ef76:	46c0      	nop			@ (mov r8, r8)
 800ef78:	200005b8 	.word	0x200005b8

0800ef7c <__malloc_unlock>:
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	4802      	ldr	r0, [pc, #8]	@ (800ef88 <__malloc_unlock+0xc>)
 800ef80:	f7ff f848 	bl	800e014 <__retarget_lock_release_recursive>
 800ef84:	bd10      	pop	{r4, pc}
 800ef86:	46c0      	nop			@ (mov r8, r8)
 800ef88:	200005b8 	.word	0x200005b8

0800ef8c <_Balloc>:
 800ef8c:	b570      	push	{r4, r5, r6, lr}
 800ef8e:	69c5      	ldr	r5, [r0, #28]
 800ef90:	0006      	movs	r6, r0
 800ef92:	000c      	movs	r4, r1
 800ef94:	2d00      	cmp	r5, #0
 800ef96:	d10e      	bne.n	800efb6 <_Balloc+0x2a>
 800ef98:	2010      	movs	r0, #16
 800ef9a:	f7ff ff3b 	bl	800ee14 <malloc>
 800ef9e:	1e02      	subs	r2, r0, #0
 800efa0:	61f0      	str	r0, [r6, #28]
 800efa2:	d104      	bne.n	800efae <_Balloc+0x22>
 800efa4:	216b      	movs	r1, #107	@ 0x6b
 800efa6:	4b19      	ldr	r3, [pc, #100]	@ (800f00c <_Balloc+0x80>)
 800efa8:	4819      	ldr	r0, [pc, #100]	@ (800f010 <_Balloc+0x84>)
 800efaa:	f7ff f849 	bl	800e040 <__assert_func>
 800efae:	6045      	str	r5, [r0, #4]
 800efb0:	6085      	str	r5, [r0, #8]
 800efb2:	6005      	str	r5, [r0, #0]
 800efb4:	60c5      	str	r5, [r0, #12]
 800efb6:	69f5      	ldr	r5, [r6, #28]
 800efb8:	68eb      	ldr	r3, [r5, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d013      	beq.n	800efe6 <_Balloc+0x5a>
 800efbe:	69f3      	ldr	r3, [r6, #28]
 800efc0:	00a2      	lsls	r2, r4, #2
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	189b      	adds	r3, r3, r2
 800efc6:	6818      	ldr	r0, [r3, #0]
 800efc8:	2800      	cmp	r0, #0
 800efca:	d118      	bne.n	800effe <_Balloc+0x72>
 800efcc:	2101      	movs	r1, #1
 800efce:	000d      	movs	r5, r1
 800efd0:	40a5      	lsls	r5, r4
 800efd2:	1d6a      	adds	r2, r5, #5
 800efd4:	0030      	movs	r0, r6
 800efd6:	0092      	lsls	r2, r2, #2
 800efd8:	f001 fb31 	bl	801063e <_calloc_r>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d00c      	beq.n	800effa <_Balloc+0x6e>
 800efe0:	6044      	str	r4, [r0, #4]
 800efe2:	6085      	str	r5, [r0, #8]
 800efe4:	e00d      	b.n	800f002 <_Balloc+0x76>
 800efe6:	2221      	movs	r2, #33	@ 0x21
 800efe8:	2104      	movs	r1, #4
 800efea:	0030      	movs	r0, r6
 800efec:	f001 fb27 	bl	801063e <_calloc_r>
 800eff0:	69f3      	ldr	r3, [r6, #28]
 800eff2:	60e8      	str	r0, [r5, #12]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1e1      	bne.n	800efbe <_Balloc+0x32>
 800effa:	2000      	movs	r0, #0
 800effc:	bd70      	pop	{r4, r5, r6, pc}
 800effe:	6802      	ldr	r2, [r0, #0]
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	2300      	movs	r3, #0
 800f004:	6103      	str	r3, [r0, #16]
 800f006:	60c3      	str	r3, [r0, #12]
 800f008:	e7f8      	b.n	800effc <_Balloc+0x70>
 800f00a:	46c0      	nop			@ (mov r8, r8)
 800f00c:	080122a4 	.word	0x080122a4
 800f010:	080123f7 	.word	0x080123f7

0800f014 <_Bfree>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	69c6      	ldr	r6, [r0, #28]
 800f018:	0005      	movs	r5, r0
 800f01a:	000c      	movs	r4, r1
 800f01c:	2e00      	cmp	r6, #0
 800f01e:	d10e      	bne.n	800f03e <_Bfree+0x2a>
 800f020:	2010      	movs	r0, #16
 800f022:	f7ff fef7 	bl	800ee14 <malloc>
 800f026:	1e02      	subs	r2, r0, #0
 800f028:	61e8      	str	r0, [r5, #28]
 800f02a:	d104      	bne.n	800f036 <_Bfree+0x22>
 800f02c:	218f      	movs	r1, #143	@ 0x8f
 800f02e:	4b09      	ldr	r3, [pc, #36]	@ (800f054 <_Bfree+0x40>)
 800f030:	4809      	ldr	r0, [pc, #36]	@ (800f058 <_Bfree+0x44>)
 800f032:	f7ff f805 	bl	800e040 <__assert_func>
 800f036:	6046      	str	r6, [r0, #4]
 800f038:	6086      	str	r6, [r0, #8]
 800f03a:	6006      	str	r6, [r0, #0]
 800f03c:	60c6      	str	r6, [r0, #12]
 800f03e:	2c00      	cmp	r4, #0
 800f040:	d007      	beq.n	800f052 <_Bfree+0x3e>
 800f042:	69eb      	ldr	r3, [r5, #28]
 800f044:	6862      	ldr	r2, [r4, #4]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	0092      	lsls	r2, r2, #2
 800f04a:	189b      	adds	r3, r3, r2
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	6022      	str	r2, [r4, #0]
 800f050:	601c      	str	r4, [r3, #0]
 800f052:	bd70      	pop	{r4, r5, r6, pc}
 800f054:	080122a4 	.word	0x080122a4
 800f058:	080123f7 	.word	0x080123f7

0800f05c <__multadd>:
 800f05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f05e:	000f      	movs	r7, r1
 800f060:	9001      	str	r0, [sp, #4]
 800f062:	000c      	movs	r4, r1
 800f064:	001e      	movs	r6, r3
 800f066:	2000      	movs	r0, #0
 800f068:	690d      	ldr	r5, [r1, #16]
 800f06a:	3714      	adds	r7, #20
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	3001      	adds	r0, #1
 800f070:	b299      	uxth	r1, r3
 800f072:	4351      	muls	r1, r2
 800f074:	0c1b      	lsrs	r3, r3, #16
 800f076:	4353      	muls	r3, r2
 800f078:	1989      	adds	r1, r1, r6
 800f07a:	0c0e      	lsrs	r6, r1, #16
 800f07c:	199b      	adds	r3, r3, r6
 800f07e:	0c1e      	lsrs	r6, r3, #16
 800f080:	b289      	uxth	r1, r1
 800f082:	041b      	lsls	r3, r3, #16
 800f084:	185b      	adds	r3, r3, r1
 800f086:	c708      	stmia	r7!, {r3}
 800f088:	4285      	cmp	r5, r0
 800f08a:	dcef      	bgt.n	800f06c <__multadd+0x10>
 800f08c:	2e00      	cmp	r6, #0
 800f08e:	d022      	beq.n	800f0d6 <__multadd+0x7a>
 800f090:	68a3      	ldr	r3, [r4, #8]
 800f092:	42ab      	cmp	r3, r5
 800f094:	dc19      	bgt.n	800f0ca <__multadd+0x6e>
 800f096:	6861      	ldr	r1, [r4, #4]
 800f098:	9801      	ldr	r0, [sp, #4]
 800f09a:	3101      	adds	r1, #1
 800f09c:	f7ff ff76 	bl	800ef8c <_Balloc>
 800f0a0:	1e07      	subs	r7, r0, #0
 800f0a2:	d105      	bne.n	800f0b0 <__multadd+0x54>
 800f0a4:	003a      	movs	r2, r7
 800f0a6:	21ba      	movs	r1, #186	@ 0xba
 800f0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f0dc <__multadd+0x80>)
 800f0aa:	480d      	ldr	r0, [pc, #52]	@ (800f0e0 <__multadd+0x84>)
 800f0ac:	f7fe ffc8 	bl	800e040 <__assert_func>
 800f0b0:	0021      	movs	r1, r4
 800f0b2:	6922      	ldr	r2, [r4, #16]
 800f0b4:	310c      	adds	r1, #12
 800f0b6:	3202      	adds	r2, #2
 800f0b8:	0092      	lsls	r2, r2, #2
 800f0ba:	300c      	adds	r0, #12
 800f0bc:	f7fe ffb6 	bl	800e02c <memcpy>
 800f0c0:	0021      	movs	r1, r4
 800f0c2:	9801      	ldr	r0, [sp, #4]
 800f0c4:	f7ff ffa6 	bl	800f014 <_Bfree>
 800f0c8:	003c      	movs	r4, r7
 800f0ca:	1d2b      	adds	r3, r5, #4
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	18e3      	adds	r3, r4, r3
 800f0d0:	3501      	adds	r5, #1
 800f0d2:	605e      	str	r6, [r3, #4]
 800f0d4:	6125      	str	r5, [r4, #16]
 800f0d6:	0020      	movs	r0, r4
 800f0d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f0da:	46c0      	nop			@ (mov r8, r8)
 800f0dc:	080123e6 	.word	0x080123e6
 800f0e0:	080123f7 	.word	0x080123f7

0800f0e4 <__hi0bits>:
 800f0e4:	2280      	movs	r2, #128	@ 0x80
 800f0e6:	0003      	movs	r3, r0
 800f0e8:	0252      	lsls	r2, r2, #9
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d201      	bcs.n	800f0f4 <__hi0bits+0x10>
 800f0f0:	041b      	lsls	r3, r3, #16
 800f0f2:	3010      	adds	r0, #16
 800f0f4:	2280      	movs	r2, #128	@ 0x80
 800f0f6:	0452      	lsls	r2, r2, #17
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d201      	bcs.n	800f100 <__hi0bits+0x1c>
 800f0fc:	3008      	adds	r0, #8
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	2280      	movs	r2, #128	@ 0x80
 800f102:	0552      	lsls	r2, r2, #21
 800f104:	4293      	cmp	r3, r2
 800f106:	d201      	bcs.n	800f10c <__hi0bits+0x28>
 800f108:	3004      	adds	r0, #4
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	2280      	movs	r2, #128	@ 0x80
 800f10e:	05d2      	lsls	r2, r2, #23
 800f110:	4293      	cmp	r3, r2
 800f112:	d201      	bcs.n	800f118 <__hi0bits+0x34>
 800f114:	3002      	adds	r0, #2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	2b00      	cmp	r3, #0
 800f11a:	db03      	blt.n	800f124 <__hi0bits+0x40>
 800f11c:	3001      	adds	r0, #1
 800f11e:	4213      	tst	r3, r2
 800f120:	d100      	bne.n	800f124 <__hi0bits+0x40>
 800f122:	2020      	movs	r0, #32
 800f124:	4770      	bx	lr

0800f126 <__lo0bits>:
 800f126:	6803      	ldr	r3, [r0, #0]
 800f128:	0001      	movs	r1, r0
 800f12a:	2207      	movs	r2, #7
 800f12c:	0018      	movs	r0, r3
 800f12e:	4010      	ands	r0, r2
 800f130:	4213      	tst	r3, r2
 800f132:	d00d      	beq.n	800f150 <__lo0bits+0x2a>
 800f134:	3a06      	subs	r2, #6
 800f136:	2000      	movs	r0, #0
 800f138:	4213      	tst	r3, r2
 800f13a:	d105      	bne.n	800f148 <__lo0bits+0x22>
 800f13c:	3002      	adds	r0, #2
 800f13e:	4203      	tst	r3, r0
 800f140:	d003      	beq.n	800f14a <__lo0bits+0x24>
 800f142:	40d3      	lsrs	r3, r2
 800f144:	0010      	movs	r0, r2
 800f146:	600b      	str	r3, [r1, #0]
 800f148:	4770      	bx	lr
 800f14a:	089b      	lsrs	r3, r3, #2
 800f14c:	600b      	str	r3, [r1, #0]
 800f14e:	e7fb      	b.n	800f148 <__lo0bits+0x22>
 800f150:	b29a      	uxth	r2, r3
 800f152:	2a00      	cmp	r2, #0
 800f154:	d101      	bne.n	800f15a <__lo0bits+0x34>
 800f156:	2010      	movs	r0, #16
 800f158:	0c1b      	lsrs	r3, r3, #16
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	d101      	bne.n	800f164 <__lo0bits+0x3e>
 800f160:	3008      	adds	r0, #8
 800f162:	0a1b      	lsrs	r3, r3, #8
 800f164:	071a      	lsls	r2, r3, #28
 800f166:	d101      	bne.n	800f16c <__lo0bits+0x46>
 800f168:	3004      	adds	r0, #4
 800f16a:	091b      	lsrs	r3, r3, #4
 800f16c:	079a      	lsls	r2, r3, #30
 800f16e:	d101      	bne.n	800f174 <__lo0bits+0x4e>
 800f170:	3002      	adds	r0, #2
 800f172:	089b      	lsrs	r3, r3, #2
 800f174:	07da      	lsls	r2, r3, #31
 800f176:	d4e9      	bmi.n	800f14c <__lo0bits+0x26>
 800f178:	3001      	adds	r0, #1
 800f17a:	085b      	lsrs	r3, r3, #1
 800f17c:	d1e6      	bne.n	800f14c <__lo0bits+0x26>
 800f17e:	2020      	movs	r0, #32
 800f180:	e7e2      	b.n	800f148 <__lo0bits+0x22>
	...

0800f184 <__i2b>:
 800f184:	b510      	push	{r4, lr}
 800f186:	000c      	movs	r4, r1
 800f188:	2101      	movs	r1, #1
 800f18a:	f7ff feff 	bl	800ef8c <_Balloc>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d107      	bne.n	800f1a2 <__i2b+0x1e>
 800f192:	2146      	movs	r1, #70	@ 0x46
 800f194:	4c05      	ldr	r4, [pc, #20]	@ (800f1ac <__i2b+0x28>)
 800f196:	0002      	movs	r2, r0
 800f198:	4b05      	ldr	r3, [pc, #20]	@ (800f1b0 <__i2b+0x2c>)
 800f19a:	0020      	movs	r0, r4
 800f19c:	31ff      	adds	r1, #255	@ 0xff
 800f19e:	f7fe ff4f 	bl	800e040 <__assert_func>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	6144      	str	r4, [r0, #20]
 800f1a6:	6103      	str	r3, [r0, #16]
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	46c0      	nop			@ (mov r8, r8)
 800f1ac:	080123f7 	.word	0x080123f7
 800f1b0:	080123e6 	.word	0x080123e6

0800f1b4 <__multiply>:
 800f1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1b6:	0014      	movs	r4, r2
 800f1b8:	690a      	ldr	r2, [r1, #16]
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	000d      	movs	r5, r1
 800f1be:	b08b      	sub	sp, #44	@ 0x2c
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	db02      	blt.n	800f1ca <__multiply+0x16>
 800f1c4:	0023      	movs	r3, r4
 800f1c6:	000c      	movs	r4, r1
 800f1c8:	001d      	movs	r5, r3
 800f1ca:	6927      	ldr	r7, [r4, #16]
 800f1cc:	692e      	ldr	r6, [r5, #16]
 800f1ce:	6861      	ldr	r1, [r4, #4]
 800f1d0:	19bb      	adds	r3, r7, r6
 800f1d2:	9303      	str	r3, [sp, #12]
 800f1d4:	68a3      	ldr	r3, [r4, #8]
 800f1d6:	19ba      	adds	r2, r7, r6
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	da00      	bge.n	800f1de <__multiply+0x2a>
 800f1dc:	3101      	adds	r1, #1
 800f1de:	f7ff fed5 	bl	800ef8c <_Balloc>
 800f1e2:	9002      	str	r0, [sp, #8]
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d106      	bne.n	800f1f6 <__multiply+0x42>
 800f1e8:	21b1      	movs	r1, #177	@ 0xb1
 800f1ea:	4b49      	ldr	r3, [pc, #292]	@ (800f310 <__multiply+0x15c>)
 800f1ec:	4849      	ldr	r0, [pc, #292]	@ (800f314 <__multiply+0x160>)
 800f1ee:	9a02      	ldr	r2, [sp, #8]
 800f1f0:	0049      	lsls	r1, r1, #1
 800f1f2:	f7fe ff25 	bl	800e040 <__assert_func>
 800f1f6:	9b02      	ldr	r3, [sp, #8]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	3314      	adds	r3, #20
 800f1fc:	469c      	mov	ip, r3
 800f1fe:	19bb      	adds	r3, r7, r6
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	4463      	add	r3, ip
 800f204:	9304      	str	r3, [sp, #16]
 800f206:	4663      	mov	r3, ip
 800f208:	9904      	ldr	r1, [sp, #16]
 800f20a:	428b      	cmp	r3, r1
 800f20c:	d32a      	bcc.n	800f264 <__multiply+0xb0>
 800f20e:	0023      	movs	r3, r4
 800f210:	00bf      	lsls	r7, r7, #2
 800f212:	3314      	adds	r3, #20
 800f214:	3514      	adds	r5, #20
 800f216:	9308      	str	r3, [sp, #32]
 800f218:	00b6      	lsls	r6, r6, #2
 800f21a:	19db      	adds	r3, r3, r7
 800f21c:	9305      	str	r3, [sp, #20]
 800f21e:	19ab      	adds	r3, r5, r6
 800f220:	9309      	str	r3, [sp, #36]	@ 0x24
 800f222:	2304      	movs	r3, #4
 800f224:	9306      	str	r3, [sp, #24]
 800f226:	0023      	movs	r3, r4
 800f228:	9a05      	ldr	r2, [sp, #20]
 800f22a:	3315      	adds	r3, #21
 800f22c:	9501      	str	r5, [sp, #4]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d305      	bcc.n	800f23e <__multiply+0x8a>
 800f232:	1b13      	subs	r3, r2, r4
 800f234:	3b15      	subs	r3, #21
 800f236:	089b      	lsrs	r3, r3, #2
 800f238:	3301      	adds	r3, #1
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	9306      	str	r3, [sp, #24]
 800f23e:	9b01      	ldr	r3, [sp, #4]
 800f240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f242:	4293      	cmp	r3, r2
 800f244:	d310      	bcc.n	800f268 <__multiply+0xb4>
 800f246:	9b03      	ldr	r3, [sp, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	dd05      	ble.n	800f258 <__multiply+0xa4>
 800f24c:	9b04      	ldr	r3, [sp, #16]
 800f24e:	3b04      	subs	r3, #4
 800f250:	9304      	str	r3, [sp, #16]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d056      	beq.n	800f306 <__multiply+0x152>
 800f258:	9b02      	ldr	r3, [sp, #8]
 800f25a:	9a03      	ldr	r2, [sp, #12]
 800f25c:	0018      	movs	r0, r3
 800f25e:	611a      	str	r2, [r3, #16]
 800f260:	b00b      	add	sp, #44	@ 0x2c
 800f262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f264:	c304      	stmia	r3!, {r2}
 800f266:	e7cf      	b.n	800f208 <__multiply+0x54>
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	6818      	ldr	r0, [r3, #0]
 800f26c:	b280      	uxth	r0, r0
 800f26e:	2800      	cmp	r0, #0
 800f270:	d01e      	beq.n	800f2b0 <__multiply+0xfc>
 800f272:	4667      	mov	r7, ip
 800f274:	2500      	movs	r5, #0
 800f276:	9e08      	ldr	r6, [sp, #32]
 800f278:	ce02      	ldmia	r6!, {r1}
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	9307      	str	r3, [sp, #28]
 800f27e:	b28b      	uxth	r3, r1
 800f280:	4343      	muls	r3, r0
 800f282:	001a      	movs	r2, r3
 800f284:	466b      	mov	r3, sp
 800f286:	0c09      	lsrs	r1, r1, #16
 800f288:	8b9b      	ldrh	r3, [r3, #28]
 800f28a:	4341      	muls	r1, r0
 800f28c:	18d3      	adds	r3, r2, r3
 800f28e:	9a07      	ldr	r2, [sp, #28]
 800f290:	195b      	adds	r3, r3, r5
 800f292:	0c12      	lsrs	r2, r2, #16
 800f294:	1889      	adds	r1, r1, r2
 800f296:	0c1a      	lsrs	r2, r3, #16
 800f298:	188a      	adds	r2, r1, r2
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	0c15      	lsrs	r5, r2, #16
 800f29e:	0412      	lsls	r2, r2, #16
 800f2a0:	431a      	orrs	r2, r3
 800f2a2:	9b05      	ldr	r3, [sp, #20]
 800f2a4:	c704      	stmia	r7!, {r2}
 800f2a6:	42b3      	cmp	r3, r6
 800f2a8:	d8e6      	bhi.n	800f278 <__multiply+0xc4>
 800f2aa:	4663      	mov	r3, ip
 800f2ac:	9a06      	ldr	r2, [sp, #24]
 800f2ae:	509d      	str	r5, [r3, r2]
 800f2b0:	9b01      	ldr	r3, [sp, #4]
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	0c00      	lsrs	r0, r0, #16
 800f2b6:	d020      	beq.n	800f2fa <__multiply+0x146>
 800f2b8:	4663      	mov	r3, ip
 800f2ba:	0025      	movs	r5, r4
 800f2bc:	4661      	mov	r1, ip
 800f2be:	2700      	movs	r7, #0
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	3514      	adds	r5, #20
 800f2c4:	682a      	ldr	r2, [r5, #0]
 800f2c6:	680e      	ldr	r6, [r1, #0]
 800f2c8:	b292      	uxth	r2, r2
 800f2ca:	4342      	muls	r2, r0
 800f2cc:	0c36      	lsrs	r6, r6, #16
 800f2ce:	1992      	adds	r2, r2, r6
 800f2d0:	19d2      	adds	r2, r2, r7
 800f2d2:	0416      	lsls	r6, r2, #16
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	431e      	orrs	r6, r3
 800f2d8:	600e      	str	r6, [r1, #0]
 800f2da:	cd40      	ldmia	r5!, {r6}
 800f2dc:	684b      	ldr	r3, [r1, #4]
 800f2de:	0c36      	lsrs	r6, r6, #16
 800f2e0:	4346      	muls	r6, r0
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	0c12      	lsrs	r2, r2, #16
 800f2e6:	18f3      	adds	r3, r6, r3
 800f2e8:	189b      	adds	r3, r3, r2
 800f2ea:	9a05      	ldr	r2, [sp, #20]
 800f2ec:	0c1f      	lsrs	r7, r3, #16
 800f2ee:	3104      	adds	r1, #4
 800f2f0:	42aa      	cmp	r2, r5
 800f2f2:	d8e7      	bhi.n	800f2c4 <__multiply+0x110>
 800f2f4:	4662      	mov	r2, ip
 800f2f6:	9906      	ldr	r1, [sp, #24]
 800f2f8:	5053      	str	r3, [r2, r1]
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	2304      	movs	r3, #4
 800f302:	449c      	add	ip, r3
 800f304:	e79b      	b.n	800f23e <__multiply+0x8a>
 800f306:	9b03      	ldr	r3, [sp, #12]
 800f308:	3b01      	subs	r3, #1
 800f30a:	9303      	str	r3, [sp, #12]
 800f30c:	e79b      	b.n	800f246 <__multiply+0x92>
 800f30e:	46c0      	nop			@ (mov r8, r8)
 800f310:	080123e6 	.word	0x080123e6
 800f314:	080123f7 	.word	0x080123f7

0800f318 <__pow5mult>:
 800f318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f31a:	2303      	movs	r3, #3
 800f31c:	0015      	movs	r5, r2
 800f31e:	0007      	movs	r7, r0
 800f320:	000e      	movs	r6, r1
 800f322:	401a      	ands	r2, r3
 800f324:	421d      	tst	r5, r3
 800f326:	d008      	beq.n	800f33a <__pow5mult+0x22>
 800f328:	4925      	ldr	r1, [pc, #148]	@ (800f3c0 <__pow5mult+0xa8>)
 800f32a:	3a01      	subs	r2, #1
 800f32c:	0092      	lsls	r2, r2, #2
 800f32e:	5852      	ldr	r2, [r2, r1]
 800f330:	2300      	movs	r3, #0
 800f332:	0031      	movs	r1, r6
 800f334:	f7ff fe92 	bl	800f05c <__multadd>
 800f338:	0006      	movs	r6, r0
 800f33a:	10ad      	asrs	r5, r5, #2
 800f33c:	d03d      	beq.n	800f3ba <__pow5mult+0xa2>
 800f33e:	69fc      	ldr	r4, [r7, #28]
 800f340:	2c00      	cmp	r4, #0
 800f342:	d10f      	bne.n	800f364 <__pow5mult+0x4c>
 800f344:	2010      	movs	r0, #16
 800f346:	f7ff fd65 	bl	800ee14 <malloc>
 800f34a:	1e02      	subs	r2, r0, #0
 800f34c:	61f8      	str	r0, [r7, #28]
 800f34e:	d105      	bne.n	800f35c <__pow5mult+0x44>
 800f350:	21b4      	movs	r1, #180	@ 0xb4
 800f352:	4b1c      	ldr	r3, [pc, #112]	@ (800f3c4 <__pow5mult+0xac>)
 800f354:	481c      	ldr	r0, [pc, #112]	@ (800f3c8 <__pow5mult+0xb0>)
 800f356:	31ff      	adds	r1, #255	@ 0xff
 800f358:	f7fe fe72 	bl	800e040 <__assert_func>
 800f35c:	6044      	str	r4, [r0, #4]
 800f35e:	6084      	str	r4, [r0, #8]
 800f360:	6004      	str	r4, [r0, #0]
 800f362:	60c4      	str	r4, [r0, #12]
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	689c      	ldr	r4, [r3, #8]
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	2c00      	cmp	r4, #0
 800f36c:	d108      	bne.n	800f380 <__pow5mult+0x68>
 800f36e:	0038      	movs	r0, r7
 800f370:	4916      	ldr	r1, [pc, #88]	@ (800f3cc <__pow5mult+0xb4>)
 800f372:	f7ff ff07 	bl	800f184 <__i2b>
 800f376:	9b01      	ldr	r3, [sp, #4]
 800f378:	0004      	movs	r4, r0
 800f37a:	6098      	str	r0, [r3, #8]
 800f37c:	2300      	movs	r3, #0
 800f37e:	6003      	str	r3, [r0, #0]
 800f380:	2301      	movs	r3, #1
 800f382:	421d      	tst	r5, r3
 800f384:	d00a      	beq.n	800f39c <__pow5mult+0x84>
 800f386:	0031      	movs	r1, r6
 800f388:	0022      	movs	r2, r4
 800f38a:	0038      	movs	r0, r7
 800f38c:	f7ff ff12 	bl	800f1b4 <__multiply>
 800f390:	0031      	movs	r1, r6
 800f392:	9001      	str	r0, [sp, #4]
 800f394:	0038      	movs	r0, r7
 800f396:	f7ff fe3d 	bl	800f014 <_Bfree>
 800f39a:	9e01      	ldr	r6, [sp, #4]
 800f39c:	106d      	asrs	r5, r5, #1
 800f39e:	d00c      	beq.n	800f3ba <__pow5mult+0xa2>
 800f3a0:	6820      	ldr	r0, [r4, #0]
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d107      	bne.n	800f3b6 <__pow5mult+0x9e>
 800f3a6:	0022      	movs	r2, r4
 800f3a8:	0021      	movs	r1, r4
 800f3aa:	0038      	movs	r0, r7
 800f3ac:	f7ff ff02 	bl	800f1b4 <__multiply>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	6020      	str	r0, [r4, #0]
 800f3b4:	6003      	str	r3, [r0, #0]
 800f3b6:	0004      	movs	r4, r0
 800f3b8:	e7e2      	b.n	800f380 <__pow5mult+0x68>
 800f3ba:	0030      	movs	r0, r6
 800f3bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f3be:	46c0      	nop			@ (mov r8, r8)
 800f3c0:	08012450 	.word	0x08012450
 800f3c4:	080122a4 	.word	0x080122a4
 800f3c8:	080123f7 	.word	0x080123f7
 800f3cc:	00000271 	.word	0x00000271

0800f3d0 <__lshift>:
 800f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3d2:	000c      	movs	r4, r1
 800f3d4:	0016      	movs	r6, r2
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	1157      	asrs	r7, r2, #5
 800f3da:	b085      	sub	sp, #20
 800f3dc:	18fb      	adds	r3, r7, r3
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	6849      	ldr	r1, [r1, #4]
 800f3e6:	68a3      	ldr	r3, [r4, #8]
 800f3e8:	9002      	str	r0, [sp, #8]
 800f3ea:	9a00      	ldr	r2, [sp, #0]
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	db10      	blt.n	800f412 <__lshift+0x42>
 800f3f0:	9802      	ldr	r0, [sp, #8]
 800f3f2:	f7ff fdcb 	bl	800ef8c <_Balloc>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	0001      	movs	r1, r0
 800f3fa:	0005      	movs	r5, r0
 800f3fc:	001a      	movs	r2, r3
 800f3fe:	3114      	adds	r1, #20
 800f400:	4298      	cmp	r0, r3
 800f402:	d10c      	bne.n	800f41e <__lshift+0x4e>
 800f404:	21ef      	movs	r1, #239	@ 0xef
 800f406:	002a      	movs	r2, r5
 800f408:	4b25      	ldr	r3, [pc, #148]	@ (800f4a0 <__lshift+0xd0>)
 800f40a:	4826      	ldr	r0, [pc, #152]	@ (800f4a4 <__lshift+0xd4>)
 800f40c:	0049      	lsls	r1, r1, #1
 800f40e:	f7fe fe17 	bl	800e040 <__assert_func>
 800f412:	3101      	adds	r1, #1
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	e7e8      	b.n	800f3ea <__lshift+0x1a>
 800f418:	0098      	lsls	r0, r3, #2
 800f41a:	500a      	str	r2, [r1, r0]
 800f41c:	3301      	adds	r3, #1
 800f41e:	42bb      	cmp	r3, r7
 800f420:	dbfa      	blt.n	800f418 <__lshift+0x48>
 800f422:	43fb      	mvns	r3, r7
 800f424:	17db      	asrs	r3, r3, #31
 800f426:	401f      	ands	r7, r3
 800f428:	00bf      	lsls	r7, r7, #2
 800f42a:	0023      	movs	r3, r4
 800f42c:	201f      	movs	r0, #31
 800f42e:	19c9      	adds	r1, r1, r7
 800f430:	0037      	movs	r7, r6
 800f432:	6922      	ldr	r2, [r4, #16]
 800f434:	3314      	adds	r3, #20
 800f436:	0092      	lsls	r2, r2, #2
 800f438:	189a      	adds	r2, r3, r2
 800f43a:	4007      	ands	r7, r0
 800f43c:	4206      	tst	r6, r0
 800f43e:	d029      	beq.n	800f494 <__lshift+0xc4>
 800f440:	3001      	adds	r0, #1
 800f442:	1bc0      	subs	r0, r0, r7
 800f444:	9003      	str	r0, [sp, #12]
 800f446:	468c      	mov	ip, r1
 800f448:	2000      	movs	r0, #0
 800f44a:	681e      	ldr	r6, [r3, #0]
 800f44c:	40be      	lsls	r6, r7
 800f44e:	4306      	orrs	r6, r0
 800f450:	4660      	mov	r0, ip
 800f452:	c040      	stmia	r0!, {r6}
 800f454:	4684      	mov	ip, r0
 800f456:	9e03      	ldr	r6, [sp, #12]
 800f458:	cb01      	ldmia	r3!, {r0}
 800f45a:	40f0      	lsrs	r0, r6
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d8f4      	bhi.n	800f44a <__lshift+0x7a>
 800f460:	0026      	movs	r6, r4
 800f462:	3615      	adds	r6, #21
 800f464:	2304      	movs	r3, #4
 800f466:	42b2      	cmp	r2, r6
 800f468:	d304      	bcc.n	800f474 <__lshift+0xa4>
 800f46a:	1b13      	subs	r3, r2, r4
 800f46c:	3b15      	subs	r3, #21
 800f46e:	089b      	lsrs	r3, r3, #2
 800f470:	3301      	adds	r3, #1
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	50c8      	str	r0, [r1, r3]
 800f476:	2800      	cmp	r0, #0
 800f478:	d002      	beq.n	800f480 <__lshift+0xb0>
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	3302      	adds	r3, #2
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	9b00      	ldr	r3, [sp, #0]
 800f482:	9802      	ldr	r0, [sp, #8]
 800f484:	3b01      	subs	r3, #1
 800f486:	0021      	movs	r1, r4
 800f488:	612b      	str	r3, [r5, #16]
 800f48a:	f7ff fdc3 	bl	800f014 <_Bfree>
 800f48e:	0028      	movs	r0, r5
 800f490:	b005      	add	sp, #20
 800f492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f494:	cb01      	ldmia	r3!, {r0}
 800f496:	c101      	stmia	r1!, {r0}
 800f498:	429a      	cmp	r2, r3
 800f49a:	d8fb      	bhi.n	800f494 <__lshift+0xc4>
 800f49c:	e7f0      	b.n	800f480 <__lshift+0xb0>
 800f49e:	46c0      	nop			@ (mov r8, r8)
 800f4a0:	080123e6 	.word	0x080123e6
 800f4a4:	080123f7 	.word	0x080123f7

0800f4a8 <__mcmp>:
 800f4a8:	b530      	push	{r4, r5, lr}
 800f4aa:	690b      	ldr	r3, [r1, #16]
 800f4ac:	6904      	ldr	r4, [r0, #16]
 800f4ae:	0002      	movs	r2, r0
 800f4b0:	1ae0      	subs	r0, r4, r3
 800f4b2:	429c      	cmp	r4, r3
 800f4b4:	d10f      	bne.n	800f4d6 <__mcmp+0x2e>
 800f4b6:	3214      	adds	r2, #20
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	3114      	adds	r1, #20
 800f4bc:	0014      	movs	r4, r2
 800f4be:	18c9      	adds	r1, r1, r3
 800f4c0:	18d2      	adds	r2, r2, r3
 800f4c2:	3a04      	subs	r2, #4
 800f4c4:	3904      	subs	r1, #4
 800f4c6:	6815      	ldr	r5, [r2, #0]
 800f4c8:	680b      	ldr	r3, [r1, #0]
 800f4ca:	429d      	cmp	r5, r3
 800f4cc:	d004      	beq.n	800f4d8 <__mcmp+0x30>
 800f4ce:	2001      	movs	r0, #1
 800f4d0:	429d      	cmp	r5, r3
 800f4d2:	d200      	bcs.n	800f4d6 <__mcmp+0x2e>
 800f4d4:	3802      	subs	r0, #2
 800f4d6:	bd30      	pop	{r4, r5, pc}
 800f4d8:	4294      	cmp	r4, r2
 800f4da:	d3f2      	bcc.n	800f4c2 <__mcmp+0x1a>
 800f4dc:	e7fb      	b.n	800f4d6 <__mcmp+0x2e>
	...

0800f4e0 <__mdiff>:
 800f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4e2:	000c      	movs	r4, r1
 800f4e4:	b087      	sub	sp, #28
 800f4e6:	9000      	str	r0, [sp, #0]
 800f4e8:	0011      	movs	r1, r2
 800f4ea:	0020      	movs	r0, r4
 800f4ec:	0017      	movs	r7, r2
 800f4ee:	f7ff ffdb 	bl	800f4a8 <__mcmp>
 800f4f2:	1e05      	subs	r5, r0, #0
 800f4f4:	d110      	bne.n	800f518 <__mdiff+0x38>
 800f4f6:	0001      	movs	r1, r0
 800f4f8:	9800      	ldr	r0, [sp, #0]
 800f4fa:	f7ff fd47 	bl	800ef8c <_Balloc>
 800f4fe:	1e02      	subs	r2, r0, #0
 800f500:	d104      	bne.n	800f50c <__mdiff+0x2c>
 800f502:	4b40      	ldr	r3, [pc, #256]	@ (800f604 <__mdiff+0x124>)
 800f504:	4840      	ldr	r0, [pc, #256]	@ (800f608 <__mdiff+0x128>)
 800f506:	4941      	ldr	r1, [pc, #260]	@ (800f60c <__mdiff+0x12c>)
 800f508:	f7fe fd9a 	bl	800e040 <__assert_func>
 800f50c:	2301      	movs	r3, #1
 800f50e:	6145      	str	r5, [r0, #20]
 800f510:	6103      	str	r3, [r0, #16]
 800f512:	0010      	movs	r0, r2
 800f514:	b007      	add	sp, #28
 800f516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f518:	2600      	movs	r6, #0
 800f51a:	42b0      	cmp	r0, r6
 800f51c:	da03      	bge.n	800f526 <__mdiff+0x46>
 800f51e:	0023      	movs	r3, r4
 800f520:	003c      	movs	r4, r7
 800f522:	001f      	movs	r7, r3
 800f524:	3601      	adds	r6, #1
 800f526:	6861      	ldr	r1, [r4, #4]
 800f528:	9800      	ldr	r0, [sp, #0]
 800f52a:	f7ff fd2f 	bl	800ef8c <_Balloc>
 800f52e:	1e02      	subs	r2, r0, #0
 800f530:	d103      	bne.n	800f53a <__mdiff+0x5a>
 800f532:	4b34      	ldr	r3, [pc, #208]	@ (800f604 <__mdiff+0x124>)
 800f534:	4834      	ldr	r0, [pc, #208]	@ (800f608 <__mdiff+0x128>)
 800f536:	4936      	ldr	r1, [pc, #216]	@ (800f610 <__mdiff+0x130>)
 800f538:	e7e6      	b.n	800f508 <__mdiff+0x28>
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	3414      	adds	r4, #20
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	18e3      	adds	r3, r4, r3
 800f544:	0021      	movs	r1, r4
 800f546:	9401      	str	r4, [sp, #4]
 800f548:	003c      	movs	r4, r7
 800f54a:	9302      	str	r3, [sp, #8]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	3414      	adds	r4, #20
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	18e3      	adds	r3, r4, r3
 800f554:	9303      	str	r3, [sp, #12]
 800f556:	0003      	movs	r3, r0
 800f558:	60c6      	str	r6, [r0, #12]
 800f55a:	468c      	mov	ip, r1
 800f55c:	2000      	movs	r0, #0
 800f55e:	3314      	adds	r3, #20
 800f560:	9304      	str	r3, [sp, #16]
 800f562:	9305      	str	r3, [sp, #20]
 800f564:	4663      	mov	r3, ip
 800f566:	cb20      	ldmia	r3!, {r5}
 800f568:	b2a9      	uxth	r1, r5
 800f56a:	000e      	movs	r6, r1
 800f56c:	469c      	mov	ip, r3
 800f56e:	cc08      	ldmia	r4!, {r3}
 800f570:	0c2d      	lsrs	r5, r5, #16
 800f572:	b299      	uxth	r1, r3
 800f574:	1a71      	subs	r1, r6, r1
 800f576:	1809      	adds	r1, r1, r0
 800f578:	0c1b      	lsrs	r3, r3, #16
 800f57a:	1408      	asrs	r0, r1, #16
 800f57c:	1aeb      	subs	r3, r5, r3
 800f57e:	181b      	adds	r3, r3, r0
 800f580:	1418      	asrs	r0, r3, #16
 800f582:	b289      	uxth	r1, r1
 800f584:	041b      	lsls	r3, r3, #16
 800f586:	4319      	orrs	r1, r3
 800f588:	9b05      	ldr	r3, [sp, #20]
 800f58a:	c302      	stmia	r3!, {r1}
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	9b03      	ldr	r3, [sp, #12]
 800f590:	42a3      	cmp	r3, r4
 800f592:	d8e7      	bhi.n	800f564 <__mdiff+0x84>
 800f594:	0039      	movs	r1, r7
 800f596:	9c03      	ldr	r4, [sp, #12]
 800f598:	3115      	adds	r1, #21
 800f59a:	2304      	movs	r3, #4
 800f59c:	428c      	cmp	r4, r1
 800f59e:	d304      	bcc.n	800f5aa <__mdiff+0xca>
 800f5a0:	1be3      	subs	r3, r4, r7
 800f5a2:	3b15      	subs	r3, #21
 800f5a4:	089b      	lsrs	r3, r3, #2
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	9901      	ldr	r1, [sp, #4]
 800f5ac:	18cd      	adds	r5, r1, r3
 800f5ae:	9904      	ldr	r1, [sp, #16]
 800f5b0:	002e      	movs	r6, r5
 800f5b2:	18cb      	adds	r3, r1, r3
 800f5b4:	001f      	movs	r7, r3
 800f5b6:	9902      	ldr	r1, [sp, #8]
 800f5b8:	428e      	cmp	r6, r1
 800f5ba:	d311      	bcc.n	800f5e0 <__mdiff+0x100>
 800f5bc:	9c02      	ldr	r4, [sp, #8]
 800f5be:	1ee9      	subs	r1, r5, #3
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	428c      	cmp	r4, r1
 800f5c4:	d304      	bcc.n	800f5d0 <__mdiff+0xf0>
 800f5c6:	0021      	movs	r1, r4
 800f5c8:	3103      	adds	r1, #3
 800f5ca:	1b49      	subs	r1, r1, r5
 800f5cc:	0889      	lsrs	r1, r1, #2
 800f5ce:	0088      	lsls	r0, r1, #2
 800f5d0:	181b      	adds	r3, r3, r0
 800f5d2:	3b04      	subs	r3, #4
 800f5d4:	6819      	ldr	r1, [r3, #0]
 800f5d6:	2900      	cmp	r1, #0
 800f5d8:	d010      	beq.n	800f5fc <__mdiff+0x11c>
 800f5da:	9b00      	ldr	r3, [sp, #0]
 800f5dc:	6113      	str	r3, [r2, #16]
 800f5de:	e798      	b.n	800f512 <__mdiff+0x32>
 800f5e0:	4684      	mov	ip, r0
 800f5e2:	ce02      	ldmia	r6!, {r1}
 800f5e4:	b288      	uxth	r0, r1
 800f5e6:	4460      	add	r0, ip
 800f5e8:	1400      	asrs	r0, r0, #16
 800f5ea:	0c0c      	lsrs	r4, r1, #16
 800f5ec:	1904      	adds	r4, r0, r4
 800f5ee:	4461      	add	r1, ip
 800f5f0:	1420      	asrs	r0, r4, #16
 800f5f2:	b289      	uxth	r1, r1
 800f5f4:	0424      	lsls	r4, r4, #16
 800f5f6:	4321      	orrs	r1, r4
 800f5f8:	c702      	stmia	r7!, {r1}
 800f5fa:	e7dc      	b.n	800f5b6 <__mdiff+0xd6>
 800f5fc:	9900      	ldr	r1, [sp, #0]
 800f5fe:	3901      	subs	r1, #1
 800f600:	9100      	str	r1, [sp, #0]
 800f602:	e7e6      	b.n	800f5d2 <__mdiff+0xf2>
 800f604:	080123e6 	.word	0x080123e6
 800f608:	080123f7 	.word	0x080123f7
 800f60c:	00000237 	.word	0x00000237
 800f610:	00000245 	.word	0x00000245

0800f614 <__d2b>:
 800f614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f616:	2101      	movs	r1, #1
 800f618:	0016      	movs	r6, r2
 800f61a:	001f      	movs	r7, r3
 800f61c:	f7ff fcb6 	bl	800ef8c <_Balloc>
 800f620:	1e04      	subs	r4, r0, #0
 800f622:	d105      	bne.n	800f630 <__d2b+0x1c>
 800f624:	0022      	movs	r2, r4
 800f626:	4b25      	ldr	r3, [pc, #148]	@ (800f6bc <__d2b+0xa8>)
 800f628:	4825      	ldr	r0, [pc, #148]	@ (800f6c0 <__d2b+0xac>)
 800f62a:	4926      	ldr	r1, [pc, #152]	@ (800f6c4 <__d2b+0xb0>)
 800f62c:	f7fe fd08 	bl	800e040 <__assert_func>
 800f630:	033b      	lsls	r3, r7, #12
 800f632:	007d      	lsls	r5, r7, #1
 800f634:	0b1b      	lsrs	r3, r3, #12
 800f636:	0d6d      	lsrs	r5, r5, #21
 800f638:	d002      	beq.n	800f640 <__d2b+0x2c>
 800f63a:	2280      	movs	r2, #128	@ 0x80
 800f63c:	0352      	lsls	r2, r2, #13
 800f63e:	4313      	orrs	r3, r2
 800f640:	9301      	str	r3, [sp, #4]
 800f642:	2e00      	cmp	r6, #0
 800f644:	d025      	beq.n	800f692 <__d2b+0x7e>
 800f646:	4668      	mov	r0, sp
 800f648:	9600      	str	r6, [sp, #0]
 800f64a:	f7ff fd6c 	bl	800f126 <__lo0bits>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	9900      	ldr	r1, [sp, #0]
 800f652:	2800      	cmp	r0, #0
 800f654:	d01b      	beq.n	800f68e <__d2b+0x7a>
 800f656:	2220      	movs	r2, #32
 800f658:	001e      	movs	r6, r3
 800f65a:	1a12      	subs	r2, r2, r0
 800f65c:	4096      	lsls	r6, r2
 800f65e:	0032      	movs	r2, r6
 800f660:	40c3      	lsrs	r3, r0
 800f662:	430a      	orrs	r2, r1
 800f664:	6162      	str	r2, [r4, #20]
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	9e01      	ldr	r6, [sp, #4]
 800f66a:	61a6      	str	r6, [r4, #24]
 800f66c:	1e73      	subs	r3, r6, #1
 800f66e:	419e      	sbcs	r6, r3
 800f670:	3601      	adds	r6, #1
 800f672:	6126      	str	r6, [r4, #16]
 800f674:	2d00      	cmp	r5, #0
 800f676:	d014      	beq.n	800f6a2 <__d2b+0x8e>
 800f678:	2635      	movs	r6, #53	@ 0x35
 800f67a:	4b13      	ldr	r3, [pc, #76]	@ (800f6c8 <__d2b+0xb4>)
 800f67c:	18ed      	adds	r5, r5, r3
 800f67e:	9b08      	ldr	r3, [sp, #32]
 800f680:	182d      	adds	r5, r5, r0
 800f682:	601d      	str	r5, [r3, #0]
 800f684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f686:	1a36      	subs	r6, r6, r0
 800f688:	601e      	str	r6, [r3, #0]
 800f68a:	0020      	movs	r0, r4
 800f68c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f68e:	6161      	str	r1, [r4, #20]
 800f690:	e7ea      	b.n	800f668 <__d2b+0x54>
 800f692:	a801      	add	r0, sp, #4
 800f694:	f7ff fd47 	bl	800f126 <__lo0bits>
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	2601      	movs	r6, #1
 800f69c:	6163      	str	r3, [r4, #20]
 800f69e:	3020      	adds	r0, #32
 800f6a0:	e7e7      	b.n	800f672 <__d2b+0x5e>
 800f6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f6cc <__d2b+0xb8>)
 800f6a4:	18c0      	adds	r0, r0, r3
 800f6a6:	9b08      	ldr	r3, [sp, #32]
 800f6a8:	6018      	str	r0, [r3, #0]
 800f6aa:	4b09      	ldr	r3, [pc, #36]	@ (800f6d0 <__d2b+0xbc>)
 800f6ac:	18f3      	adds	r3, r6, r3
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	18e3      	adds	r3, r4, r3
 800f6b2:	6958      	ldr	r0, [r3, #20]
 800f6b4:	f7ff fd16 	bl	800f0e4 <__hi0bits>
 800f6b8:	0176      	lsls	r6, r6, #5
 800f6ba:	e7e3      	b.n	800f684 <__d2b+0x70>
 800f6bc:	080123e6 	.word	0x080123e6
 800f6c0:	080123f7 	.word	0x080123f7
 800f6c4:	0000030f 	.word	0x0000030f
 800f6c8:	fffffbcd 	.word	0xfffffbcd
 800f6cc:	fffffbce 	.word	0xfffffbce
 800f6d0:	3fffffff 	.word	0x3fffffff

0800f6d4 <__ssputs_r>:
 800f6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6d6:	688e      	ldr	r6, [r1, #8]
 800f6d8:	b085      	sub	sp, #20
 800f6da:	001f      	movs	r7, r3
 800f6dc:	000c      	movs	r4, r1
 800f6de:	680b      	ldr	r3, [r1, #0]
 800f6e0:	9002      	str	r0, [sp, #8]
 800f6e2:	9203      	str	r2, [sp, #12]
 800f6e4:	42be      	cmp	r6, r7
 800f6e6:	d830      	bhi.n	800f74a <__ssputs_r+0x76>
 800f6e8:	210c      	movs	r1, #12
 800f6ea:	5e62      	ldrsh	r2, [r4, r1]
 800f6ec:	2190      	movs	r1, #144	@ 0x90
 800f6ee:	00c9      	lsls	r1, r1, #3
 800f6f0:	420a      	tst	r2, r1
 800f6f2:	d028      	beq.n	800f746 <__ssputs_r+0x72>
 800f6f4:	2003      	movs	r0, #3
 800f6f6:	6921      	ldr	r1, [r4, #16]
 800f6f8:	1a5b      	subs	r3, r3, r1
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	6963      	ldr	r3, [r4, #20]
 800f6fe:	4343      	muls	r3, r0
 800f700:	9801      	ldr	r0, [sp, #4]
 800f702:	0fdd      	lsrs	r5, r3, #31
 800f704:	18ed      	adds	r5, r5, r3
 800f706:	1c7b      	adds	r3, r7, #1
 800f708:	181b      	adds	r3, r3, r0
 800f70a:	106d      	asrs	r5, r5, #1
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	d900      	bls.n	800f712 <__ssputs_r+0x3e>
 800f710:	001d      	movs	r5, r3
 800f712:	0552      	lsls	r2, r2, #21
 800f714:	d528      	bpl.n	800f768 <__ssputs_r+0x94>
 800f716:	0029      	movs	r1, r5
 800f718:	9802      	ldr	r0, [sp, #8]
 800f71a:	f7ff fba7 	bl	800ee6c <_malloc_r>
 800f71e:	1e06      	subs	r6, r0, #0
 800f720:	d02c      	beq.n	800f77c <__ssputs_r+0xa8>
 800f722:	9a01      	ldr	r2, [sp, #4]
 800f724:	6921      	ldr	r1, [r4, #16]
 800f726:	f7fe fc81 	bl	800e02c <memcpy>
 800f72a:	89a2      	ldrh	r2, [r4, #12]
 800f72c:	4b18      	ldr	r3, [pc, #96]	@ (800f790 <__ssputs_r+0xbc>)
 800f72e:	401a      	ands	r2, r3
 800f730:	2380      	movs	r3, #128	@ 0x80
 800f732:	4313      	orrs	r3, r2
 800f734:	81a3      	strh	r3, [r4, #12]
 800f736:	9b01      	ldr	r3, [sp, #4]
 800f738:	6126      	str	r6, [r4, #16]
 800f73a:	18f6      	adds	r6, r6, r3
 800f73c:	6026      	str	r6, [r4, #0]
 800f73e:	003e      	movs	r6, r7
 800f740:	6165      	str	r5, [r4, #20]
 800f742:	1aed      	subs	r5, r5, r3
 800f744:	60a5      	str	r5, [r4, #8]
 800f746:	42be      	cmp	r6, r7
 800f748:	d900      	bls.n	800f74c <__ssputs_r+0x78>
 800f74a:	003e      	movs	r6, r7
 800f74c:	0032      	movs	r2, r6
 800f74e:	9903      	ldr	r1, [sp, #12]
 800f750:	6820      	ldr	r0, [r4, #0]
 800f752:	f000 ff23 	bl	801059c <memmove>
 800f756:	2000      	movs	r0, #0
 800f758:	68a3      	ldr	r3, [r4, #8]
 800f75a:	1b9b      	subs	r3, r3, r6
 800f75c:	60a3      	str	r3, [r4, #8]
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	199b      	adds	r3, r3, r6
 800f762:	6023      	str	r3, [r4, #0]
 800f764:	b005      	add	sp, #20
 800f766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f768:	002a      	movs	r2, r5
 800f76a:	9802      	ldr	r0, [sp, #8]
 800f76c:	f000 ffa6 	bl	80106bc <_realloc_r>
 800f770:	1e06      	subs	r6, r0, #0
 800f772:	d1e0      	bne.n	800f736 <__ssputs_r+0x62>
 800f774:	6921      	ldr	r1, [r4, #16]
 800f776:	9802      	ldr	r0, [sp, #8]
 800f778:	f7ff fb02 	bl	800ed80 <_free_r>
 800f77c:	230c      	movs	r3, #12
 800f77e:	2001      	movs	r0, #1
 800f780:	9a02      	ldr	r2, [sp, #8]
 800f782:	4240      	negs	r0, r0
 800f784:	6013      	str	r3, [r2, #0]
 800f786:	89a2      	ldrh	r2, [r4, #12]
 800f788:	3334      	adds	r3, #52	@ 0x34
 800f78a:	4313      	orrs	r3, r2
 800f78c:	81a3      	strh	r3, [r4, #12]
 800f78e:	e7e9      	b.n	800f764 <__ssputs_r+0x90>
 800f790:	fffffb7f 	.word	0xfffffb7f

0800f794 <_svfiprintf_r>:
 800f794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f796:	b0a1      	sub	sp, #132	@ 0x84
 800f798:	9003      	str	r0, [sp, #12]
 800f79a:	001d      	movs	r5, r3
 800f79c:	898b      	ldrh	r3, [r1, #12]
 800f79e:	000f      	movs	r7, r1
 800f7a0:	0016      	movs	r6, r2
 800f7a2:	061b      	lsls	r3, r3, #24
 800f7a4:	d511      	bpl.n	800f7ca <_svfiprintf_r+0x36>
 800f7a6:	690b      	ldr	r3, [r1, #16]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10e      	bne.n	800f7ca <_svfiprintf_r+0x36>
 800f7ac:	2140      	movs	r1, #64	@ 0x40
 800f7ae:	f7ff fb5d 	bl	800ee6c <_malloc_r>
 800f7b2:	6038      	str	r0, [r7, #0]
 800f7b4:	6138      	str	r0, [r7, #16]
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d105      	bne.n	800f7c6 <_svfiprintf_r+0x32>
 800f7ba:	230c      	movs	r3, #12
 800f7bc:	9a03      	ldr	r2, [sp, #12]
 800f7be:	6013      	str	r3, [r2, #0]
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	4240      	negs	r0, r0
 800f7c4:	e0cf      	b.n	800f966 <_svfiprintf_r+0x1d2>
 800f7c6:	2340      	movs	r3, #64	@ 0x40
 800f7c8:	617b      	str	r3, [r7, #20]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	ac08      	add	r4, sp, #32
 800f7ce:	6163      	str	r3, [r4, #20]
 800f7d0:	3320      	adds	r3, #32
 800f7d2:	7663      	strb	r3, [r4, #25]
 800f7d4:	3310      	adds	r3, #16
 800f7d6:	76a3      	strb	r3, [r4, #26]
 800f7d8:	9507      	str	r5, [sp, #28]
 800f7da:	0035      	movs	r5, r6
 800f7dc:	782b      	ldrb	r3, [r5, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d001      	beq.n	800f7e6 <_svfiprintf_r+0x52>
 800f7e2:	2b25      	cmp	r3, #37	@ 0x25
 800f7e4:	d148      	bne.n	800f878 <_svfiprintf_r+0xe4>
 800f7e6:	1bab      	subs	r3, r5, r6
 800f7e8:	9305      	str	r3, [sp, #20]
 800f7ea:	42b5      	cmp	r5, r6
 800f7ec:	d00b      	beq.n	800f806 <_svfiprintf_r+0x72>
 800f7ee:	0032      	movs	r2, r6
 800f7f0:	0039      	movs	r1, r7
 800f7f2:	9803      	ldr	r0, [sp, #12]
 800f7f4:	f7ff ff6e 	bl	800f6d4 <__ssputs_r>
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	d100      	bne.n	800f7fe <_svfiprintf_r+0x6a>
 800f7fc:	e0ae      	b.n	800f95c <_svfiprintf_r+0x1c8>
 800f7fe:	6963      	ldr	r3, [r4, #20]
 800f800:	9a05      	ldr	r2, [sp, #20]
 800f802:	189b      	adds	r3, r3, r2
 800f804:	6163      	str	r3, [r4, #20]
 800f806:	782b      	ldrb	r3, [r5, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d100      	bne.n	800f80e <_svfiprintf_r+0x7a>
 800f80c:	e0a6      	b.n	800f95c <_svfiprintf_r+0x1c8>
 800f80e:	2201      	movs	r2, #1
 800f810:	2300      	movs	r3, #0
 800f812:	4252      	negs	r2, r2
 800f814:	6062      	str	r2, [r4, #4]
 800f816:	a904      	add	r1, sp, #16
 800f818:	3254      	adds	r2, #84	@ 0x54
 800f81a:	1852      	adds	r2, r2, r1
 800f81c:	1c6e      	adds	r6, r5, #1
 800f81e:	6023      	str	r3, [r4, #0]
 800f820:	60e3      	str	r3, [r4, #12]
 800f822:	60a3      	str	r3, [r4, #8]
 800f824:	7013      	strb	r3, [r2, #0]
 800f826:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f828:	4b54      	ldr	r3, [pc, #336]	@ (800f97c <_svfiprintf_r+0x1e8>)
 800f82a:	2205      	movs	r2, #5
 800f82c:	0018      	movs	r0, r3
 800f82e:	7831      	ldrb	r1, [r6, #0]
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	f7fe fbf0 	bl	800e016 <memchr>
 800f836:	1c75      	adds	r5, r6, #1
 800f838:	2800      	cmp	r0, #0
 800f83a:	d11f      	bne.n	800f87c <_svfiprintf_r+0xe8>
 800f83c:	6822      	ldr	r2, [r4, #0]
 800f83e:	06d3      	lsls	r3, r2, #27
 800f840:	d504      	bpl.n	800f84c <_svfiprintf_r+0xb8>
 800f842:	2353      	movs	r3, #83	@ 0x53
 800f844:	a904      	add	r1, sp, #16
 800f846:	185b      	adds	r3, r3, r1
 800f848:	2120      	movs	r1, #32
 800f84a:	7019      	strb	r1, [r3, #0]
 800f84c:	0713      	lsls	r3, r2, #28
 800f84e:	d504      	bpl.n	800f85a <_svfiprintf_r+0xc6>
 800f850:	2353      	movs	r3, #83	@ 0x53
 800f852:	a904      	add	r1, sp, #16
 800f854:	185b      	adds	r3, r3, r1
 800f856:	212b      	movs	r1, #43	@ 0x2b
 800f858:	7019      	strb	r1, [r3, #0]
 800f85a:	7833      	ldrb	r3, [r6, #0]
 800f85c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f85e:	d016      	beq.n	800f88e <_svfiprintf_r+0xfa>
 800f860:	0035      	movs	r5, r6
 800f862:	2100      	movs	r1, #0
 800f864:	200a      	movs	r0, #10
 800f866:	68e3      	ldr	r3, [r4, #12]
 800f868:	782a      	ldrb	r2, [r5, #0]
 800f86a:	1c6e      	adds	r6, r5, #1
 800f86c:	3a30      	subs	r2, #48	@ 0x30
 800f86e:	2a09      	cmp	r2, #9
 800f870:	d950      	bls.n	800f914 <_svfiprintf_r+0x180>
 800f872:	2900      	cmp	r1, #0
 800f874:	d111      	bne.n	800f89a <_svfiprintf_r+0x106>
 800f876:	e017      	b.n	800f8a8 <_svfiprintf_r+0x114>
 800f878:	3501      	adds	r5, #1
 800f87a:	e7af      	b.n	800f7dc <_svfiprintf_r+0x48>
 800f87c:	9b05      	ldr	r3, [sp, #20]
 800f87e:	6822      	ldr	r2, [r4, #0]
 800f880:	1ac0      	subs	r0, r0, r3
 800f882:	2301      	movs	r3, #1
 800f884:	4083      	lsls	r3, r0
 800f886:	4313      	orrs	r3, r2
 800f888:	002e      	movs	r6, r5
 800f88a:	6023      	str	r3, [r4, #0]
 800f88c:	e7cc      	b.n	800f828 <_svfiprintf_r+0x94>
 800f88e:	9b07      	ldr	r3, [sp, #28]
 800f890:	1d19      	adds	r1, r3, #4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	9107      	str	r1, [sp, #28]
 800f896:	2b00      	cmp	r3, #0
 800f898:	db01      	blt.n	800f89e <_svfiprintf_r+0x10a>
 800f89a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f89c:	e004      	b.n	800f8a8 <_svfiprintf_r+0x114>
 800f89e:	425b      	negs	r3, r3
 800f8a0:	60e3      	str	r3, [r4, #12]
 800f8a2:	2302      	movs	r3, #2
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	6023      	str	r3, [r4, #0]
 800f8a8:	782b      	ldrb	r3, [r5, #0]
 800f8aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8ac:	d10c      	bne.n	800f8c8 <_svfiprintf_r+0x134>
 800f8ae:	786b      	ldrb	r3, [r5, #1]
 800f8b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8b2:	d134      	bne.n	800f91e <_svfiprintf_r+0x18a>
 800f8b4:	9b07      	ldr	r3, [sp, #28]
 800f8b6:	3502      	adds	r5, #2
 800f8b8:	1d1a      	adds	r2, r3, #4
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	9207      	str	r2, [sp, #28]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	da01      	bge.n	800f8c6 <_svfiprintf_r+0x132>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	425b      	negs	r3, r3
 800f8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8c8:	4e2d      	ldr	r6, [pc, #180]	@ (800f980 <_svfiprintf_r+0x1ec>)
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	0030      	movs	r0, r6
 800f8ce:	7829      	ldrb	r1, [r5, #0]
 800f8d0:	f7fe fba1 	bl	800e016 <memchr>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d006      	beq.n	800f8e6 <_svfiprintf_r+0x152>
 800f8d8:	2340      	movs	r3, #64	@ 0x40
 800f8da:	1b80      	subs	r0, r0, r6
 800f8dc:	4083      	lsls	r3, r0
 800f8de:	6822      	ldr	r2, [r4, #0]
 800f8e0:	3501      	adds	r5, #1
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	7829      	ldrb	r1, [r5, #0]
 800f8e8:	2206      	movs	r2, #6
 800f8ea:	4826      	ldr	r0, [pc, #152]	@ (800f984 <_svfiprintf_r+0x1f0>)
 800f8ec:	1c6e      	adds	r6, r5, #1
 800f8ee:	7621      	strb	r1, [r4, #24]
 800f8f0:	f7fe fb91 	bl	800e016 <memchr>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d038      	beq.n	800f96a <_svfiprintf_r+0x1d6>
 800f8f8:	4b23      	ldr	r3, [pc, #140]	@ (800f988 <_svfiprintf_r+0x1f4>)
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d122      	bne.n	800f944 <_svfiprintf_r+0x1b0>
 800f8fe:	2207      	movs	r2, #7
 800f900:	9b07      	ldr	r3, [sp, #28]
 800f902:	3307      	adds	r3, #7
 800f904:	4393      	bics	r3, r2
 800f906:	3308      	adds	r3, #8
 800f908:	9307      	str	r3, [sp, #28]
 800f90a:	6963      	ldr	r3, [r4, #20]
 800f90c:	9a04      	ldr	r2, [sp, #16]
 800f90e:	189b      	adds	r3, r3, r2
 800f910:	6163      	str	r3, [r4, #20]
 800f912:	e762      	b.n	800f7da <_svfiprintf_r+0x46>
 800f914:	4343      	muls	r3, r0
 800f916:	0035      	movs	r5, r6
 800f918:	2101      	movs	r1, #1
 800f91a:	189b      	adds	r3, r3, r2
 800f91c:	e7a4      	b.n	800f868 <_svfiprintf_r+0xd4>
 800f91e:	2300      	movs	r3, #0
 800f920:	200a      	movs	r0, #10
 800f922:	0019      	movs	r1, r3
 800f924:	3501      	adds	r5, #1
 800f926:	6063      	str	r3, [r4, #4]
 800f928:	782a      	ldrb	r2, [r5, #0]
 800f92a:	1c6e      	adds	r6, r5, #1
 800f92c:	3a30      	subs	r2, #48	@ 0x30
 800f92e:	2a09      	cmp	r2, #9
 800f930:	d903      	bls.n	800f93a <_svfiprintf_r+0x1a6>
 800f932:	2b00      	cmp	r3, #0
 800f934:	d0c8      	beq.n	800f8c8 <_svfiprintf_r+0x134>
 800f936:	9109      	str	r1, [sp, #36]	@ 0x24
 800f938:	e7c6      	b.n	800f8c8 <_svfiprintf_r+0x134>
 800f93a:	4341      	muls	r1, r0
 800f93c:	0035      	movs	r5, r6
 800f93e:	2301      	movs	r3, #1
 800f940:	1889      	adds	r1, r1, r2
 800f942:	e7f1      	b.n	800f928 <_svfiprintf_r+0x194>
 800f944:	aa07      	add	r2, sp, #28
 800f946:	9200      	str	r2, [sp, #0]
 800f948:	0021      	movs	r1, r4
 800f94a:	003a      	movs	r2, r7
 800f94c:	4b0f      	ldr	r3, [pc, #60]	@ (800f98c <_svfiprintf_r+0x1f8>)
 800f94e:	9803      	ldr	r0, [sp, #12]
 800f950:	f7fd fca0 	bl	800d294 <_printf_float>
 800f954:	9004      	str	r0, [sp, #16]
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	3301      	adds	r3, #1
 800f95a:	d1d6      	bne.n	800f90a <_svfiprintf_r+0x176>
 800f95c:	89bb      	ldrh	r3, [r7, #12]
 800f95e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f960:	065b      	lsls	r3, r3, #25
 800f962:	d500      	bpl.n	800f966 <_svfiprintf_r+0x1d2>
 800f964:	e72c      	b.n	800f7c0 <_svfiprintf_r+0x2c>
 800f966:	b021      	add	sp, #132	@ 0x84
 800f968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f96a:	aa07      	add	r2, sp, #28
 800f96c:	9200      	str	r2, [sp, #0]
 800f96e:	0021      	movs	r1, r4
 800f970:	003a      	movs	r2, r7
 800f972:	4b06      	ldr	r3, [pc, #24]	@ (800f98c <_svfiprintf_r+0x1f8>)
 800f974:	9803      	ldr	r0, [sp, #12]
 800f976:	f7fd ff3b 	bl	800d7f0 <_printf_i>
 800f97a:	e7eb      	b.n	800f954 <_svfiprintf_r+0x1c0>
 800f97c:	08012550 	.word	0x08012550
 800f980:	08012556 	.word	0x08012556
 800f984:	0801255a 	.word	0x0801255a
 800f988:	0800d295 	.word	0x0800d295
 800f98c:	0800f6d5 	.word	0x0800f6d5

0800f990 <_sungetc_r>:
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	0014      	movs	r4, r2
 800f994:	1c4b      	adds	r3, r1, #1
 800f996:	d103      	bne.n	800f9a0 <_sungetc_r+0x10>
 800f998:	2501      	movs	r5, #1
 800f99a:	426d      	negs	r5, r5
 800f99c:	0028      	movs	r0, r5
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
 800f9a0:	8993      	ldrh	r3, [r2, #12]
 800f9a2:	2220      	movs	r2, #32
 800f9a4:	4393      	bics	r3, r2
 800f9a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	b2ce      	uxtb	r6, r1
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	b2cd      	uxtb	r5, r1
 800f9b0:	2a00      	cmp	r2, #0
 800f9b2:	d010      	beq.n	800f9d6 <_sungetc_r+0x46>
 800f9b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	dd07      	ble.n	800f9ca <_sungetc_r+0x3a>
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	6023      	str	r3, [r4, #0]
 800f9c0:	701e      	strb	r6, [r3, #0]
 800f9c2:	6863      	ldr	r3, [r4, #4]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	6063      	str	r3, [r4, #4]
 800f9c8:	e7e8      	b.n	800f99c <_sungetc_r+0xc>
 800f9ca:	0021      	movs	r1, r4
 800f9cc:	f000 fda8 	bl	8010520 <__submore>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d0f2      	beq.n	800f9ba <_sungetc_r+0x2a>
 800f9d4:	e7e0      	b.n	800f998 <_sungetc_r+0x8>
 800f9d6:	6921      	ldr	r1, [r4, #16]
 800f9d8:	6822      	ldr	r2, [r4, #0]
 800f9da:	2900      	cmp	r1, #0
 800f9dc:	d007      	beq.n	800f9ee <_sungetc_r+0x5e>
 800f9de:	4291      	cmp	r1, r2
 800f9e0:	d205      	bcs.n	800f9ee <_sungetc_r+0x5e>
 800f9e2:	1e51      	subs	r1, r2, #1
 800f9e4:	7808      	ldrb	r0, [r1, #0]
 800f9e6:	42a8      	cmp	r0, r5
 800f9e8:	d101      	bne.n	800f9ee <_sungetc_r+0x5e>
 800f9ea:	6021      	str	r1, [r4, #0]
 800f9ec:	e7ea      	b.n	800f9c4 <_sungetc_r+0x34>
 800f9ee:	6423      	str	r3, [r4, #64]	@ 0x40
 800f9f0:	0023      	movs	r3, r4
 800f9f2:	3344      	adds	r3, #68	@ 0x44
 800f9f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9f6:	2303      	movs	r3, #3
 800f9f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f9fa:	0023      	movs	r3, r4
 800f9fc:	3346      	adds	r3, #70	@ 0x46
 800f9fe:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800fa00:	701e      	strb	r6, [r3, #0]
 800fa02:	6023      	str	r3, [r4, #0]
 800fa04:	2301      	movs	r3, #1
 800fa06:	e7de      	b.n	800f9c6 <_sungetc_r+0x36>

0800fa08 <__ssrefill_r>:
 800fa08:	b510      	push	{r4, lr}
 800fa0a:	000c      	movs	r4, r1
 800fa0c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fa0e:	2900      	cmp	r1, #0
 800fa10:	d00e      	beq.n	800fa30 <__ssrefill_r+0x28>
 800fa12:	0023      	movs	r3, r4
 800fa14:	3344      	adds	r3, #68	@ 0x44
 800fa16:	4299      	cmp	r1, r3
 800fa18:	d001      	beq.n	800fa1e <__ssrefill_r+0x16>
 800fa1a:	f7ff f9b1 	bl	800ed80 <_free_r>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fa22:	6360      	str	r0, [r4, #52]	@ 0x34
 800fa24:	6063      	str	r3, [r4, #4]
 800fa26:	4283      	cmp	r3, r0
 800fa28:	d002      	beq.n	800fa30 <__ssrefill_r+0x28>
 800fa2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd10      	pop	{r4, pc}
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	2001      	movs	r0, #1
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	2300      	movs	r3, #0
 800fa38:	89a2      	ldrh	r2, [r4, #12]
 800fa3a:	6063      	str	r3, [r4, #4]
 800fa3c:	3320      	adds	r3, #32
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	4240      	negs	r0, r0
 800fa44:	e7f3      	b.n	800fa2e <__ssrefill_r+0x26>
	...

0800fa48 <__ssvfiscanf_r>:
 800fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4a:	4caa      	ldr	r4, [pc, #680]	@ (800fcf4 <__ssvfiscanf_r+0x2ac>)
 800fa4c:	44a5      	add	sp, r4
 800fa4e:	000c      	movs	r4, r1
 800fa50:	2100      	movs	r1, #0
 800fa52:	9001      	str	r0, [sp, #4]
 800fa54:	20be      	movs	r0, #190	@ 0xbe
 800fa56:	9146      	str	r1, [sp, #280]	@ 0x118
 800fa58:	9147      	str	r1, [sp, #284]	@ 0x11c
 800fa5a:	a903      	add	r1, sp, #12
 800fa5c:	9148      	str	r1, [sp, #288]	@ 0x120
 800fa5e:	49a6      	ldr	r1, [pc, #664]	@ (800fcf8 <__ssvfiscanf_r+0x2b0>)
 800fa60:	0040      	lsls	r0, r0, #1
 800fa62:	ad43      	add	r5, sp, #268	@ 0x10c
 800fa64:	5029      	str	r1, [r5, r0]
 800fa66:	49a5      	ldr	r1, [pc, #660]	@ (800fcfc <__ssvfiscanf_r+0x2b4>)
 800fa68:	3004      	adds	r0, #4
 800fa6a:	ad43      	add	r5, sp, #268	@ 0x10c
 800fa6c:	5029      	str	r1, [r5, r0]
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	7813      	ldrb	r3, [r2, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d100      	bne.n	800fa78 <__ssvfiscanf_r+0x30>
 800fa76:	e13a      	b.n	800fcee <__ssvfiscanf_r+0x2a6>
 800fa78:	2108      	movs	r1, #8
 800fa7a:	2708      	movs	r7, #8
 800fa7c:	4ea0      	ldr	r6, [pc, #640]	@ (800fd00 <__ssvfiscanf_r+0x2b8>)
 800fa7e:	1c55      	adds	r5, r2, #1
 800fa80:	5cf0      	ldrb	r0, [r6, r3]
 800fa82:	4001      	ands	r1, r0
 800fa84:	4238      	tst	r0, r7
 800fa86:	d01c      	beq.n	800fac2 <__ssvfiscanf_r+0x7a>
 800fa88:	6863      	ldr	r3, [r4, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	dd0f      	ble.n	800faae <__ssvfiscanf_r+0x66>
 800fa8e:	6823      	ldr	r3, [r4, #0]
 800fa90:	781a      	ldrb	r2, [r3, #0]
 800fa92:	5cb2      	ldrb	r2, [r6, r2]
 800fa94:	423a      	tst	r2, r7
 800fa96:	d101      	bne.n	800fa9c <__ssvfiscanf_r+0x54>
 800fa98:	002a      	movs	r2, r5
 800fa9a:	e7e9      	b.n	800fa70 <__ssvfiscanf_r+0x28>
 800fa9c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800fa9e:	3301      	adds	r3, #1
 800faa0:	3201      	adds	r2, #1
 800faa2:	9247      	str	r2, [sp, #284]	@ 0x11c
 800faa4:	6862      	ldr	r2, [r4, #4]
 800faa6:	6023      	str	r3, [r4, #0]
 800faa8:	3a01      	subs	r2, #1
 800faaa:	6062      	str	r2, [r4, #4]
 800faac:	e7ec      	b.n	800fa88 <__ssvfiscanf_r+0x40>
 800faae:	22c0      	movs	r2, #192	@ 0xc0
 800fab0:	ab43      	add	r3, sp, #268	@ 0x10c
 800fab2:	0052      	lsls	r2, r2, #1
 800fab4:	0021      	movs	r1, r4
 800fab6:	589b      	ldr	r3, [r3, r2]
 800fab8:	9801      	ldr	r0, [sp, #4]
 800faba:	4798      	blx	r3
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d0e6      	beq.n	800fa8e <__ssvfiscanf_r+0x46>
 800fac0:	e7ea      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fac2:	001e      	movs	r6, r3
 800fac4:	2b25      	cmp	r3, #37	@ 0x25
 800fac6:	d160      	bne.n	800fb8a <__ssvfiscanf_r+0x142>
 800fac8:	9145      	str	r1, [sp, #276]	@ 0x114
 800faca:	9143      	str	r1, [sp, #268]	@ 0x10c
 800facc:	7853      	ldrb	r3, [r2, #1]
 800face:	2b2a      	cmp	r3, #42	@ 0x2a
 800fad0:	d102      	bne.n	800fad8 <__ssvfiscanf_r+0x90>
 800fad2:	3b1a      	subs	r3, #26
 800fad4:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fad6:	1c95      	adds	r5, r2, #2
 800fad8:	002e      	movs	r6, r5
 800fada:	220a      	movs	r2, #10
 800fadc:	7831      	ldrb	r1, [r6, #0]
 800fade:	1c75      	adds	r5, r6, #1
 800fae0:	000b      	movs	r3, r1
 800fae2:	3b30      	subs	r3, #48	@ 0x30
 800fae4:	2b09      	cmp	r3, #9
 800fae6:	d91d      	bls.n	800fb24 <__ssvfiscanf_r+0xdc>
 800fae8:	4f86      	ldr	r7, [pc, #536]	@ (800fd04 <__ssvfiscanf_r+0x2bc>)
 800faea:	2203      	movs	r2, #3
 800faec:	0038      	movs	r0, r7
 800faee:	f7fe fa92 	bl	800e016 <memchr>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	d006      	beq.n	800fb04 <__ssvfiscanf_r+0xbc>
 800faf6:	2301      	movs	r3, #1
 800faf8:	1bc0      	subs	r0, r0, r7
 800fafa:	4083      	lsls	r3, r0
 800fafc:	002e      	movs	r6, r5
 800fafe:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800fb00:	4313      	orrs	r3, r2
 800fb02:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fb04:	1c75      	adds	r5, r6, #1
 800fb06:	7836      	ldrb	r6, [r6, #0]
 800fb08:	2e78      	cmp	r6, #120	@ 0x78
 800fb0a:	d806      	bhi.n	800fb1a <__ssvfiscanf_r+0xd2>
 800fb0c:	2e57      	cmp	r6, #87	@ 0x57
 800fb0e:	d810      	bhi.n	800fb32 <__ssvfiscanf_r+0xea>
 800fb10:	2e25      	cmp	r6, #37	@ 0x25
 800fb12:	d03a      	beq.n	800fb8a <__ssvfiscanf_r+0x142>
 800fb14:	d834      	bhi.n	800fb80 <__ssvfiscanf_r+0x138>
 800fb16:	2e00      	cmp	r6, #0
 800fb18:	d055      	beq.n	800fbc6 <__ssvfiscanf_r+0x17e>
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	9349      	str	r3, [sp, #292]	@ 0x124
 800fb1e:	3307      	adds	r3, #7
 800fb20:	9344      	str	r3, [sp, #272]	@ 0x110
 800fb22:	e069      	b.n	800fbf8 <__ssvfiscanf_r+0x1b0>
 800fb24:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800fb26:	002e      	movs	r6, r5
 800fb28:	4353      	muls	r3, r2
 800fb2a:	3b30      	subs	r3, #48	@ 0x30
 800fb2c:	185b      	adds	r3, r3, r1
 800fb2e:	9345      	str	r3, [sp, #276]	@ 0x114
 800fb30:	e7d4      	b.n	800fadc <__ssvfiscanf_r+0x94>
 800fb32:	0030      	movs	r0, r6
 800fb34:	3858      	subs	r0, #88	@ 0x58
 800fb36:	2820      	cmp	r0, #32
 800fb38:	d8ef      	bhi.n	800fb1a <__ssvfiscanf_r+0xd2>
 800fb3a:	f7f0 faf7 	bl	800012c <__gnu_thumb1_case_shi>
 800fb3e:	004b      	.short	0x004b
 800fb40:	ffeeffee 	.word	0xffeeffee
 800fb44:	ffee007d 	.word	0xffee007d
 800fb48:	ffeeffee 	.word	0xffeeffee
 800fb4c:	ffeeffee 	.word	0xffeeffee
 800fb50:	ffeeffee 	.word	0xffeeffee
 800fb54:	007b0088 	.word	0x007b0088
 800fb58:	00240024 	.word	0x00240024
 800fb5c:	ffee0024 	.word	0xffee0024
 800fb60:	ffee0055 	.word	0xffee0055
 800fb64:	ffeeffee 	.word	0xffeeffee
 800fb68:	0090ffee 	.word	0x0090ffee
 800fb6c:	00470059 	.word	0x00470059
 800fb70:	ffeeffee 	.word	0xffeeffee
 800fb74:	ffee008e 	.word	0xffee008e
 800fb78:	ffee007b 	.word	0xffee007b
 800fb7c:	004bffee 	.word	0x004bffee
 800fb80:	3e45      	subs	r6, #69	@ 0x45
 800fb82:	2e02      	cmp	r6, #2
 800fb84:	d8c9      	bhi.n	800fb1a <__ssvfiscanf_r+0xd2>
 800fb86:	2305      	movs	r3, #5
 800fb88:	e035      	b.n	800fbf6 <__ssvfiscanf_r+0x1ae>
 800fb8a:	6863      	ldr	r3, [r4, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	dd0d      	ble.n	800fbac <__ssvfiscanf_r+0x164>
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	781a      	ldrb	r2, [r3, #0]
 800fb94:	42b2      	cmp	r2, r6
 800fb96:	d000      	beq.n	800fb9a <__ssvfiscanf_r+0x152>
 800fb98:	e0a9      	b.n	800fcee <__ssvfiscanf_r+0x2a6>
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	6862      	ldr	r2, [r4, #4]
 800fb9e:	6023      	str	r3, [r4, #0]
 800fba0:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800fba2:	3a01      	subs	r2, #1
 800fba4:	3301      	adds	r3, #1
 800fba6:	6062      	str	r2, [r4, #4]
 800fba8:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fbaa:	e775      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fbac:	23c0      	movs	r3, #192	@ 0xc0
 800fbae:	aa43      	add	r2, sp, #268	@ 0x10c
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	0021      	movs	r1, r4
 800fbb4:	58d3      	ldr	r3, [r2, r3]
 800fbb6:	9801      	ldr	r0, [sp, #4]
 800fbb8:	4798      	blx	r3
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d0e8      	beq.n	800fb90 <__ssvfiscanf_r+0x148>
 800fbbe:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d000      	beq.n	800fbc6 <__ssvfiscanf_r+0x17e>
 800fbc4:	e08b      	b.n	800fcde <__ssvfiscanf_r+0x296>
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	4240      	negs	r0, r0
 800fbca:	e08c      	b.n	800fce6 <__ssvfiscanf_r+0x29e>
 800fbcc:	2320      	movs	r3, #32
 800fbce:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fbd4:	2380      	movs	r3, #128	@ 0x80
 800fbd6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fbde:	2310      	movs	r3, #16
 800fbe0:	9344      	str	r3, [sp, #272]	@ 0x110
 800fbe2:	2e6e      	cmp	r6, #110	@ 0x6e
 800fbe4:	d902      	bls.n	800fbec <__ssvfiscanf_r+0x1a4>
 800fbe6:	e005      	b.n	800fbf4 <__ssvfiscanf_r+0x1ac>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	9344      	str	r3, [sp, #272]	@ 0x110
 800fbec:	2303      	movs	r3, #3
 800fbee:	e002      	b.n	800fbf6 <__ssvfiscanf_r+0x1ae>
 800fbf0:	2308      	movs	r3, #8
 800fbf2:	9344      	str	r3, [sp, #272]	@ 0x110
 800fbf4:	2304      	movs	r3, #4
 800fbf6:	9349      	str	r3, [sp, #292]	@ 0x124
 800fbf8:	6863      	ldr	r3, [r4, #4]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	dd3e      	ble.n	800fc7c <__ssvfiscanf_r+0x234>
 800fbfe:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800fc00:	065b      	lsls	r3, r3, #25
 800fc02:	d408      	bmi.n	800fc16 <__ssvfiscanf_r+0x1ce>
 800fc04:	27c0      	movs	r7, #192	@ 0xc0
 800fc06:	2608      	movs	r6, #8
 800fc08:	007f      	lsls	r7, r7, #1
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	493c      	ldr	r1, [pc, #240]	@ (800fd00 <__ssvfiscanf_r+0x2b8>)
 800fc0e:	781a      	ldrb	r2, [r3, #0]
 800fc10:	5c8a      	ldrb	r2, [r1, r2]
 800fc12:	4232      	tst	r2, r6
 800fc14:	d13c      	bne.n	800fc90 <__ssvfiscanf_r+0x248>
 800fc16:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	dc4c      	bgt.n	800fcb6 <__ssvfiscanf_r+0x26e>
 800fc1c:	0022      	movs	r2, r4
 800fc1e:	9801      	ldr	r0, [sp, #4]
 800fc20:	ab02      	add	r3, sp, #8
 800fc22:	a943      	add	r1, sp, #268	@ 0x10c
 800fc24:	f000 f9b6 	bl	800ff94 <_scanf_chars>
 800fc28:	2801      	cmp	r0, #1
 800fc2a:	d060      	beq.n	800fcee <__ssvfiscanf_r+0x2a6>
 800fc2c:	2802      	cmp	r0, #2
 800fc2e:	d000      	beq.n	800fc32 <__ssvfiscanf_r+0x1ea>
 800fc30:	e732      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fc32:	e7c4      	b.n	800fbbe <__ssvfiscanf_r+0x176>
 800fc34:	230a      	movs	r3, #10
 800fc36:	e7d3      	b.n	800fbe0 <__ssvfiscanf_r+0x198>
 800fc38:	0029      	movs	r1, r5
 800fc3a:	a803      	add	r0, sp, #12
 800fc3c:	f000 fc37 	bl	80104ae <__sccl>
 800fc40:	2340      	movs	r3, #64	@ 0x40
 800fc42:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800fc44:	0005      	movs	r5, r0
 800fc46:	4313      	orrs	r3, r2
 800fc48:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e7d3      	b.n	800fbf6 <__ssvfiscanf_r+0x1ae>
 800fc4e:	2340      	movs	r3, #64	@ 0x40
 800fc50:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800fc52:	4313      	orrs	r3, r2
 800fc54:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fc56:	2300      	movs	r3, #0
 800fc58:	e7cd      	b.n	800fbf6 <__ssvfiscanf_r+0x1ae>
 800fc5a:	2302      	movs	r3, #2
 800fc5c:	e7cb      	b.n	800fbf6 <__ssvfiscanf_r+0x1ae>
 800fc5e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800fc60:	06d3      	lsls	r3, r2, #27
 800fc62:	d500      	bpl.n	800fc66 <__ssvfiscanf_r+0x21e>
 800fc64:	e718      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fc66:	9b02      	ldr	r3, [sp, #8]
 800fc68:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800fc6a:	1d18      	adds	r0, r3, #4
 800fc6c:	9002      	str	r0, [sp, #8]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	07d6      	lsls	r6, r2, #31
 800fc72:	d501      	bpl.n	800fc78 <__ssvfiscanf_r+0x230>
 800fc74:	8019      	strh	r1, [r3, #0]
 800fc76:	e70f      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fc78:	6019      	str	r1, [r3, #0]
 800fc7a:	e70d      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fc7c:	23c0      	movs	r3, #192	@ 0xc0
 800fc7e:	aa43      	add	r2, sp, #268	@ 0x10c
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	0021      	movs	r1, r4
 800fc84:	58d3      	ldr	r3, [r2, r3]
 800fc86:	9801      	ldr	r0, [sp, #4]
 800fc88:	4798      	blx	r3
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d0b7      	beq.n	800fbfe <__ssvfiscanf_r+0x1b6>
 800fc8e:	e796      	b.n	800fbbe <__ssvfiscanf_r+0x176>
 800fc90:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800fc92:	3201      	adds	r2, #1
 800fc94:	9247      	str	r2, [sp, #284]	@ 0x11c
 800fc96:	6862      	ldr	r2, [r4, #4]
 800fc98:	3a01      	subs	r2, #1
 800fc9a:	6062      	str	r2, [r4, #4]
 800fc9c:	2a00      	cmp	r2, #0
 800fc9e:	dd02      	ble.n	800fca6 <__ssvfiscanf_r+0x25e>
 800fca0:	3301      	adds	r3, #1
 800fca2:	6023      	str	r3, [r4, #0]
 800fca4:	e7b1      	b.n	800fc0a <__ssvfiscanf_r+0x1c2>
 800fca6:	ab43      	add	r3, sp, #268	@ 0x10c
 800fca8:	0021      	movs	r1, r4
 800fcaa:	59db      	ldr	r3, [r3, r7]
 800fcac:	9801      	ldr	r0, [sp, #4]
 800fcae:	4798      	blx	r3
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d0aa      	beq.n	800fc0a <__ssvfiscanf_r+0x1c2>
 800fcb4:	e783      	b.n	800fbbe <__ssvfiscanf_r+0x176>
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	dc06      	bgt.n	800fcc8 <__ssvfiscanf_r+0x280>
 800fcba:	0022      	movs	r2, r4
 800fcbc:	9801      	ldr	r0, [sp, #4]
 800fcbe:	ab02      	add	r3, sp, #8
 800fcc0:	a943      	add	r1, sp, #268	@ 0x10c
 800fcc2:	f000 f9c7 	bl	8010054 <_scanf_i>
 800fcc6:	e7af      	b.n	800fc28 <__ssvfiscanf_r+0x1e0>
 800fcc8:	4b0f      	ldr	r3, [pc, #60]	@ (800fd08 <__ssvfiscanf_r+0x2c0>)
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d100      	bne.n	800fcd0 <__ssvfiscanf_r+0x288>
 800fcce:	e6e3      	b.n	800fa98 <__ssvfiscanf_r+0x50>
 800fcd0:	0022      	movs	r2, r4
 800fcd2:	9801      	ldr	r0, [sp, #4]
 800fcd4:	ab02      	add	r3, sp, #8
 800fcd6:	a943      	add	r1, sp, #268	@ 0x10c
 800fcd8:	e000      	b.n	800fcdc <__ssvfiscanf_r+0x294>
 800fcda:	bf00      	nop
 800fcdc:	e7a4      	b.n	800fc28 <__ssvfiscanf_r+0x1e0>
 800fcde:	89a3      	ldrh	r3, [r4, #12]
 800fce0:	065b      	lsls	r3, r3, #25
 800fce2:	d500      	bpl.n	800fce6 <__ssvfiscanf_r+0x29e>
 800fce4:	e76f      	b.n	800fbc6 <__ssvfiscanf_r+0x17e>
 800fce6:	23a5      	movs	r3, #165	@ 0xa5
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	449d      	add	sp, r3
 800fcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcee:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800fcf0:	e7f9      	b.n	800fce6 <__ssvfiscanf_r+0x29e>
 800fcf2:	46c0      	nop			@ (mov r8, r8)
 800fcf4:	fffffd6c 	.word	0xfffffd6c
 800fcf8:	0800f991 	.word	0x0800f991
 800fcfc:	0800fa09 	.word	0x0800fa09
 800fd00:	08012587 	.word	0x08012587
 800fd04:	08012556 	.word	0x08012556
 800fd08:	00000000 	.word	0x00000000

0800fd0c <__sfputc_r>:
 800fd0c:	6893      	ldr	r3, [r2, #8]
 800fd0e:	b510      	push	{r4, lr}
 800fd10:	3b01      	subs	r3, #1
 800fd12:	6093      	str	r3, [r2, #8]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	da04      	bge.n	800fd22 <__sfputc_r+0x16>
 800fd18:	6994      	ldr	r4, [r2, #24]
 800fd1a:	42a3      	cmp	r3, r4
 800fd1c:	db07      	blt.n	800fd2e <__sfputc_r+0x22>
 800fd1e:	290a      	cmp	r1, #10
 800fd20:	d005      	beq.n	800fd2e <__sfputc_r+0x22>
 800fd22:	6813      	ldr	r3, [r2, #0]
 800fd24:	1c58      	adds	r0, r3, #1
 800fd26:	6010      	str	r0, [r2, #0]
 800fd28:	7019      	strb	r1, [r3, #0]
 800fd2a:	0008      	movs	r0, r1
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	f7fe f84b 	bl	800ddc8 <__swbuf_r>
 800fd32:	0001      	movs	r1, r0
 800fd34:	e7f9      	b.n	800fd2a <__sfputc_r+0x1e>

0800fd36 <__sfputs_r>:
 800fd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd38:	0006      	movs	r6, r0
 800fd3a:	000f      	movs	r7, r1
 800fd3c:	0014      	movs	r4, r2
 800fd3e:	18d5      	adds	r5, r2, r3
 800fd40:	42ac      	cmp	r4, r5
 800fd42:	d101      	bne.n	800fd48 <__sfputs_r+0x12>
 800fd44:	2000      	movs	r0, #0
 800fd46:	e007      	b.n	800fd58 <__sfputs_r+0x22>
 800fd48:	7821      	ldrb	r1, [r4, #0]
 800fd4a:	003a      	movs	r2, r7
 800fd4c:	0030      	movs	r0, r6
 800fd4e:	f7ff ffdd 	bl	800fd0c <__sfputc_r>
 800fd52:	3401      	adds	r4, #1
 800fd54:	1c43      	adds	r3, r0, #1
 800fd56:	d1f3      	bne.n	800fd40 <__sfputs_r+0xa>
 800fd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd5c <_vfiprintf_r>:
 800fd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5e:	b0a1      	sub	sp, #132	@ 0x84
 800fd60:	000f      	movs	r7, r1
 800fd62:	0015      	movs	r5, r2
 800fd64:	001e      	movs	r6, r3
 800fd66:	9003      	str	r0, [sp, #12]
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d004      	beq.n	800fd76 <_vfiprintf_r+0x1a>
 800fd6c:	6a03      	ldr	r3, [r0, #32]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <_vfiprintf_r+0x1a>
 800fd72:	f7fd fedb 	bl	800db2c <__sinit>
 800fd76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd78:	07db      	lsls	r3, r3, #31
 800fd7a:	d405      	bmi.n	800fd88 <_vfiprintf_r+0x2c>
 800fd7c:	89bb      	ldrh	r3, [r7, #12]
 800fd7e:	059b      	lsls	r3, r3, #22
 800fd80:	d402      	bmi.n	800fd88 <_vfiprintf_r+0x2c>
 800fd82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fd84:	f7fe f945 	bl	800e012 <__retarget_lock_acquire_recursive>
 800fd88:	89bb      	ldrh	r3, [r7, #12]
 800fd8a:	071b      	lsls	r3, r3, #28
 800fd8c:	d502      	bpl.n	800fd94 <_vfiprintf_r+0x38>
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d113      	bne.n	800fdbc <_vfiprintf_r+0x60>
 800fd94:	0039      	movs	r1, r7
 800fd96:	9803      	ldr	r0, [sp, #12]
 800fd98:	f7fe f858 	bl	800de4c <__swsetup_r>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d00d      	beq.n	800fdbc <_vfiprintf_r+0x60>
 800fda0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fda2:	07db      	lsls	r3, r3, #31
 800fda4:	d503      	bpl.n	800fdae <_vfiprintf_r+0x52>
 800fda6:	2001      	movs	r0, #1
 800fda8:	4240      	negs	r0, r0
 800fdaa:	b021      	add	sp, #132	@ 0x84
 800fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdae:	89bb      	ldrh	r3, [r7, #12]
 800fdb0:	059b      	lsls	r3, r3, #22
 800fdb2:	d4f8      	bmi.n	800fda6 <_vfiprintf_r+0x4a>
 800fdb4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fdb6:	f7fe f92d 	bl	800e014 <__retarget_lock_release_recursive>
 800fdba:	e7f4      	b.n	800fda6 <_vfiprintf_r+0x4a>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	ac08      	add	r4, sp, #32
 800fdc0:	6163      	str	r3, [r4, #20]
 800fdc2:	3320      	adds	r3, #32
 800fdc4:	7663      	strb	r3, [r4, #25]
 800fdc6:	3310      	adds	r3, #16
 800fdc8:	76a3      	strb	r3, [r4, #26]
 800fdca:	9607      	str	r6, [sp, #28]
 800fdcc:	002e      	movs	r6, r5
 800fdce:	7833      	ldrb	r3, [r6, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <_vfiprintf_r+0x7c>
 800fdd4:	2b25      	cmp	r3, #37	@ 0x25
 800fdd6:	d148      	bne.n	800fe6a <_vfiprintf_r+0x10e>
 800fdd8:	1b73      	subs	r3, r6, r5
 800fdda:	9305      	str	r3, [sp, #20]
 800fddc:	42ae      	cmp	r6, r5
 800fdde:	d00b      	beq.n	800fdf8 <_vfiprintf_r+0x9c>
 800fde0:	002a      	movs	r2, r5
 800fde2:	0039      	movs	r1, r7
 800fde4:	9803      	ldr	r0, [sp, #12]
 800fde6:	f7ff ffa6 	bl	800fd36 <__sfputs_r>
 800fdea:	3001      	adds	r0, #1
 800fdec:	d100      	bne.n	800fdf0 <_vfiprintf_r+0x94>
 800fdee:	e0ae      	b.n	800ff4e <_vfiprintf_r+0x1f2>
 800fdf0:	6963      	ldr	r3, [r4, #20]
 800fdf2:	9a05      	ldr	r2, [sp, #20]
 800fdf4:	189b      	adds	r3, r3, r2
 800fdf6:	6163      	str	r3, [r4, #20]
 800fdf8:	7833      	ldrb	r3, [r6, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d100      	bne.n	800fe00 <_vfiprintf_r+0xa4>
 800fdfe:	e0a6      	b.n	800ff4e <_vfiprintf_r+0x1f2>
 800fe00:	2201      	movs	r2, #1
 800fe02:	2300      	movs	r3, #0
 800fe04:	4252      	negs	r2, r2
 800fe06:	6062      	str	r2, [r4, #4]
 800fe08:	a904      	add	r1, sp, #16
 800fe0a:	3254      	adds	r2, #84	@ 0x54
 800fe0c:	1852      	adds	r2, r2, r1
 800fe0e:	1c75      	adds	r5, r6, #1
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	60e3      	str	r3, [r4, #12]
 800fe14:	60a3      	str	r3, [r4, #8]
 800fe16:	7013      	strb	r3, [r2, #0]
 800fe18:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fe1a:	4b59      	ldr	r3, [pc, #356]	@ (800ff80 <_vfiprintf_r+0x224>)
 800fe1c:	2205      	movs	r2, #5
 800fe1e:	0018      	movs	r0, r3
 800fe20:	7829      	ldrb	r1, [r5, #0]
 800fe22:	9305      	str	r3, [sp, #20]
 800fe24:	f7fe f8f7 	bl	800e016 <memchr>
 800fe28:	1c6e      	adds	r6, r5, #1
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d11f      	bne.n	800fe6e <_vfiprintf_r+0x112>
 800fe2e:	6822      	ldr	r2, [r4, #0]
 800fe30:	06d3      	lsls	r3, r2, #27
 800fe32:	d504      	bpl.n	800fe3e <_vfiprintf_r+0xe2>
 800fe34:	2353      	movs	r3, #83	@ 0x53
 800fe36:	a904      	add	r1, sp, #16
 800fe38:	185b      	adds	r3, r3, r1
 800fe3a:	2120      	movs	r1, #32
 800fe3c:	7019      	strb	r1, [r3, #0]
 800fe3e:	0713      	lsls	r3, r2, #28
 800fe40:	d504      	bpl.n	800fe4c <_vfiprintf_r+0xf0>
 800fe42:	2353      	movs	r3, #83	@ 0x53
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	185b      	adds	r3, r3, r1
 800fe48:	212b      	movs	r1, #43	@ 0x2b
 800fe4a:	7019      	strb	r1, [r3, #0]
 800fe4c:	782b      	ldrb	r3, [r5, #0]
 800fe4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe50:	d016      	beq.n	800fe80 <_vfiprintf_r+0x124>
 800fe52:	002e      	movs	r6, r5
 800fe54:	2100      	movs	r1, #0
 800fe56:	200a      	movs	r0, #10
 800fe58:	68e3      	ldr	r3, [r4, #12]
 800fe5a:	7832      	ldrb	r2, [r6, #0]
 800fe5c:	1c75      	adds	r5, r6, #1
 800fe5e:	3a30      	subs	r2, #48	@ 0x30
 800fe60:	2a09      	cmp	r2, #9
 800fe62:	d950      	bls.n	800ff06 <_vfiprintf_r+0x1aa>
 800fe64:	2900      	cmp	r1, #0
 800fe66:	d111      	bne.n	800fe8c <_vfiprintf_r+0x130>
 800fe68:	e017      	b.n	800fe9a <_vfiprintf_r+0x13e>
 800fe6a:	3601      	adds	r6, #1
 800fe6c:	e7af      	b.n	800fdce <_vfiprintf_r+0x72>
 800fe6e:	9b05      	ldr	r3, [sp, #20]
 800fe70:	6822      	ldr	r2, [r4, #0]
 800fe72:	1ac0      	subs	r0, r0, r3
 800fe74:	2301      	movs	r3, #1
 800fe76:	4083      	lsls	r3, r0
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	0035      	movs	r5, r6
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	e7cc      	b.n	800fe1a <_vfiprintf_r+0xbe>
 800fe80:	9b07      	ldr	r3, [sp, #28]
 800fe82:	1d19      	adds	r1, r3, #4
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	9107      	str	r1, [sp, #28]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	db01      	blt.n	800fe90 <_vfiprintf_r+0x134>
 800fe8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe8e:	e004      	b.n	800fe9a <_vfiprintf_r+0x13e>
 800fe90:	425b      	negs	r3, r3
 800fe92:	60e3      	str	r3, [r4, #12]
 800fe94:	2302      	movs	r3, #2
 800fe96:	4313      	orrs	r3, r2
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	7833      	ldrb	r3, [r6, #0]
 800fe9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe9e:	d10c      	bne.n	800feba <_vfiprintf_r+0x15e>
 800fea0:	7873      	ldrb	r3, [r6, #1]
 800fea2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fea4:	d134      	bne.n	800ff10 <_vfiprintf_r+0x1b4>
 800fea6:	9b07      	ldr	r3, [sp, #28]
 800fea8:	3602      	adds	r6, #2
 800feaa:	1d1a      	adds	r2, r3, #4
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	9207      	str	r2, [sp, #28]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	da01      	bge.n	800feb8 <_vfiprintf_r+0x15c>
 800feb4:	2301      	movs	r3, #1
 800feb6:	425b      	negs	r3, r3
 800feb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800feba:	4d32      	ldr	r5, [pc, #200]	@ (800ff84 <_vfiprintf_r+0x228>)
 800febc:	2203      	movs	r2, #3
 800febe:	0028      	movs	r0, r5
 800fec0:	7831      	ldrb	r1, [r6, #0]
 800fec2:	f7fe f8a8 	bl	800e016 <memchr>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d006      	beq.n	800fed8 <_vfiprintf_r+0x17c>
 800feca:	2340      	movs	r3, #64	@ 0x40
 800fecc:	1b40      	subs	r0, r0, r5
 800fece:	4083      	lsls	r3, r0
 800fed0:	6822      	ldr	r2, [r4, #0]
 800fed2:	3601      	adds	r6, #1
 800fed4:	4313      	orrs	r3, r2
 800fed6:	6023      	str	r3, [r4, #0]
 800fed8:	7831      	ldrb	r1, [r6, #0]
 800feda:	2206      	movs	r2, #6
 800fedc:	482a      	ldr	r0, [pc, #168]	@ (800ff88 <_vfiprintf_r+0x22c>)
 800fede:	1c75      	adds	r5, r6, #1
 800fee0:	7621      	strb	r1, [r4, #24]
 800fee2:	f7fe f898 	bl	800e016 <memchr>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d040      	beq.n	800ff6c <_vfiprintf_r+0x210>
 800feea:	4b28      	ldr	r3, [pc, #160]	@ (800ff8c <_vfiprintf_r+0x230>)
 800feec:	2b00      	cmp	r3, #0
 800feee:	d122      	bne.n	800ff36 <_vfiprintf_r+0x1da>
 800fef0:	2207      	movs	r2, #7
 800fef2:	9b07      	ldr	r3, [sp, #28]
 800fef4:	3307      	adds	r3, #7
 800fef6:	4393      	bics	r3, r2
 800fef8:	3308      	adds	r3, #8
 800fefa:	9307      	str	r3, [sp, #28]
 800fefc:	6963      	ldr	r3, [r4, #20]
 800fefe:	9a04      	ldr	r2, [sp, #16]
 800ff00:	189b      	adds	r3, r3, r2
 800ff02:	6163      	str	r3, [r4, #20]
 800ff04:	e762      	b.n	800fdcc <_vfiprintf_r+0x70>
 800ff06:	4343      	muls	r3, r0
 800ff08:	002e      	movs	r6, r5
 800ff0a:	2101      	movs	r1, #1
 800ff0c:	189b      	adds	r3, r3, r2
 800ff0e:	e7a4      	b.n	800fe5a <_vfiprintf_r+0xfe>
 800ff10:	2300      	movs	r3, #0
 800ff12:	200a      	movs	r0, #10
 800ff14:	0019      	movs	r1, r3
 800ff16:	3601      	adds	r6, #1
 800ff18:	6063      	str	r3, [r4, #4]
 800ff1a:	7832      	ldrb	r2, [r6, #0]
 800ff1c:	1c75      	adds	r5, r6, #1
 800ff1e:	3a30      	subs	r2, #48	@ 0x30
 800ff20:	2a09      	cmp	r2, #9
 800ff22:	d903      	bls.n	800ff2c <_vfiprintf_r+0x1d0>
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0c8      	beq.n	800feba <_vfiprintf_r+0x15e>
 800ff28:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff2a:	e7c6      	b.n	800feba <_vfiprintf_r+0x15e>
 800ff2c:	4341      	muls	r1, r0
 800ff2e:	002e      	movs	r6, r5
 800ff30:	2301      	movs	r3, #1
 800ff32:	1889      	adds	r1, r1, r2
 800ff34:	e7f1      	b.n	800ff1a <_vfiprintf_r+0x1be>
 800ff36:	aa07      	add	r2, sp, #28
 800ff38:	9200      	str	r2, [sp, #0]
 800ff3a:	0021      	movs	r1, r4
 800ff3c:	003a      	movs	r2, r7
 800ff3e:	4b14      	ldr	r3, [pc, #80]	@ (800ff90 <_vfiprintf_r+0x234>)
 800ff40:	9803      	ldr	r0, [sp, #12]
 800ff42:	f7fd f9a7 	bl	800d294 <_printf_float>
 800ff46:	9004      	str	r0, [sp, #16]
 800ff48:	9b04      	ldr	r3, [sp, #16]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	d1d6      	bne.n	800fefc <_vfiprintf_r+0x1a0>
 800ff4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff50:	07db      	lsls	r3, r3, #31
 800ff52:	d405      	bmi.n	800ff60 <_vfiprintf_r+0x204>
 800ff54:	89bb      	ldrh	r3, [r7, #12]
 800ff56:	059b      	lsls	r3, r3, #22
 800ff58:	d402      	bmi.n	800ff60 <_vfiprintf_r+0x204>
 800ff5a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ff5c:	f7fe f85a 	bl	800e014 <__retarget_lock_release_recursive>
 800ff60:	89bb      	ldrh	r3, [r7, #12]
 800ff62:	065b      	lsls	r3, r3, #25
 800ff64:	d500      	bpl.n	800ff68 <_vfiprintf_r+0x20c>
 800ff66:	e71e      	b.n	800fda6 <_vfiprintf_r+0x4a>
 800ff68:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ff6a:	e71e      	b.n	800fdaa <_vfiprintf_r+0x4e>
 800ff6c:	aa07      	add	r2, sp, #28
 800ff6e:	9200      	str	r2, [sp, #0]
 800ff70:	0021      	movs	r1, r4
 800ff72:	003a      	movs	r2, r7
 800ff74:	4b06      	ldr	r3, [pc, #24]	@ (800ff90 <_vfiprintf_r+0x234>)
 800ff76:	9803      	ldr	r0, [sp, #12]
 800ff78:	f7fd fc3a 	bl	800d7f0 <_printf_i>
 800ff7c:	e7e3      	b.n	800ff46 <_vfiprintf_r+0x1ea>
 800ff7e:	46c0      	nop			@ (mov r8, r8)
 800ff80:	08012550 	.word	0x08012550
 800ff84:	08012556 	.word	0x08012556
 800ff88:	0801255a 	.word	0x0801255a
 800ff8c:	0800d295 	.word	0x0800d295
 800ff90:	0800fd37 	.word	0x0800fd37

0800ff94 <_scanf_chars>:
 800ff94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff96:	0015      	movs	r5, r2
 800ff98:	688a      	ldr	r2, [r1, #8]
 800ff9a:	000c      	movs	r4, r1
 800ff9c:	9001      	str	r0, [sp, #4]
 800ff9e:	2a00      	cmp	r2, #0
 800ffa0:	d104      	bne.n	800ffac <_scanf_chars+0x18>
 800ffa2:	698a      	ldr	r2, [r1, #24]
 800ffa4:	2a00      	cmp	r2, #0
 800ffa6:	d117      	bne.n	800ffd8 <_scanf_chars+0x44>
 800ffa8:	3201      	adds	r2, #1
 800ffaa:	60a2      	str	r2, [r4, #8]
 800ffac:	6822      	ldr	r2, [r4, #0]
 800ffae:	06d2      	lsls	r2, r2, #27
 800ffb0:	d403      	bmi.n	800ffba <_scanf_chars+0x26>
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	1d11      	adds	r1, r2, #4
 800ffb6:	6019      	str	r1, [r3, #0]
 800ffb8:	6817      	ldr	r7, [r2, #0]
 800ffba:	2600      	movs	r6, #0
 800ffbc:	69a0      	ldr	r0, [r4, #24]
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d016      	beq.n	800fff0 <_scanf_chars+0x5c>
 800ffc2:	2801      	cmp	r0, #1
 800ffc4:	d10b      	bne.n	800ffde <_scanf_chars+0x4a>
 800ffc6:	682b      	ldr	r3, [r5, #0]
 800ffc8:	6962      	ldr	r2, [r4, #20]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	5cd3      	ldrb	r3, [r2, r3]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10e      	bne.n	800fff0 <_scanf_chars+0x5c>
 800ffd2:	2e00      	cmp	r6, #0
 800ffd4:	d03b      	beq.n	801004e <_scanf_chars+0xba>
 800ffd6:	e029      	b.n	801002c <_scanf_chars+0x98>
 800ffd8:	2201      	movs	r2, #1
 800ffda:	4252      	negs	r2, r2
 800ffdc:	e7e5      	b.n	800ffaa <_scanf_chars+0x16>
 800ffde:	2802      	cmp	r0, #2
 800ffe0:	d124      	bne.n	801002c <_scanf_chars+0x98>
 800ffe2:	682b      	ldr	r3, [r5, #0]
 800ffe4:	4a1a      	ldr	r2, [pc, #104]	@ (8010050 <_scanf_chars+0xbc>)
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	5cd3      	ldrb	r3, [r2, r3]
 800ffea:	2208      	movs	r2, #8
 800ffec:	4213      	tst	r3, r2
 800ffee:	d11d      	bne.n	801002c <_scanf_chars+0x98>
 800fff0:	2210      	movs	r2, #16
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	3601      	adds	r6, #1
 800fff6:	4213      	tst	r3, r2
 800fff8:	d103      	bne.n	8010002 <_scanf_chars+0x6e>
 800fffa:	682b      	ldr	r3, [r5, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	703b      	strb	r3, [r7, #0]
 8010000:	3701      	adds	r7, #1
 8010002:	682a      	ldr	r2, [r5, #0]
 8010004:	686b      	ldr	r3, [r5, #4]
 8010006:	3201      	adds	r2, #1
 8010008:	602a      	str	r2, [r5, #0]
 801000a:	68a2      	ldr	r2, [r4, #8]
 801000c:	3b01      	subs	r3, #1
 801000e:	3a01      	subs	r2, #1
 8010010:	606b      	str	r3, [r5, #4]
 8010012:	60a2      	str	r2, [r4, #8]
 8010014:	2a00      	cmp	r2, #0
 8010016:	d009      	beq.n	801002c <_scanf_chars+0x98>
 8010018:	2b00      	cmp	r3, #0
 801001a:	dccf      	bgt.n	800ffbc <_scanf_chars+0x28>
 801001c:	23c0      	movs	r3, #192	@ 0xc0
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	0029      	movs	r1, r5
 8010022:	58e3      	ldr	r3, [r4, r3]
 8010024:	9801      	ldr	r0, [sp, #4]
 8010026:	4798      	blx	r3
 8010028:	2800      	cmp	r0, #0
 801002a:	d0c7      	beq.n	800ffbc <_scanf_chars+0x28>
 801002c:	6822      	ldr	r2, [r4, #0]
 801002e:	2310      	movs	r3, #16
 8010030:	0011      	movs	r1, r2
 8010032:	4019      	ands	r1, r3
 8010034:	421a      	tst	r2, r3
 8010036:	d106      	bne.n	8010046 <_scanf_chars+0xb2>
 8010038:	68e3      	ldr	r3, [r4, #12]
 801003a:	3301      	adds	r3, #1
 801003c:	60e3      	str	r3, [r4, #12]
 801003e:	69a3      	ldr	r3, [r4, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d000      	beq.n	8010046 <_scanf_chars+0xb2>
 8010044:	7039      	strb	r1, [r7, #0]
 8010046:	2000      	movs	r0, #0
 8010048:	6923      	ldr	r3, [r4, #16]
 801004a:	199b      	adds	r3, r3, r6
 801004c:	6123      	str	r3, [r4, #16]
 801004e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010050:	08012587 	.word	0x08012587

08010054 <_scanf_i>:
 8010054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010056:	b08b      	sub	sp, #44	@ 0x2c
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	4b78      	ldr	r3, [pc, #480]	@ (801023c <_scanf_i+0x1e8>)
 801005c:	0016      	movs	r6, r2
 801005e:	9004      	str	r0, [sp, #16]
 8010060:	aa07      	add	r2, sp, #28
 8010062:	cba1      	ldmia	r3!, {r0, r5, r7}
 8010064:	c2a1      	stmia	r2!, {r0, r5, r7}
 8010066:	4a76      	ldr	r2, [pc, #472]	@ (8010240 <_scanf_i+0x1ec>)
 8010068:	698b      	ldr	r3, [r1, #24]
 801006a:	000c      	movs	r4, r1
 801006c:	9205      	str	r2, [sp, #20]
 801006e:	2b03      	cmp	r3, #3
 8010070:	d101      	bne.n	8010076 <_scanf_i+0x22>
 8010072:	4b74      	ldr	r3, [pc, #464]	@ (8010244 <_scanf_i+0x1f0>)
 8010074:	9305      	str	r3, [sp, #20]
 8010076:	22ae      	movs	r2, #174	@ 0xae
 8010078:	2000      	movs	r0, #0
 801007a:	68a3      	ldr	r3, [r4, #8]
 801007c:	0052      	lsls	r2, r2, #1
 801007e:	1e59      	subs	r1, r3, #1
 8010080:	9003      	str	r0, [sp, #12]
 8010082:	4291      	cmp	r1, r2
 8010084:	d905      	bls.n	8010092 <_scanf_i+0x3e>
 8010086:	3b5e      	subs	r3, #94	@ 0x5e
 8010088:	3bff      	subs	r3, #255	@ 0xff
 801008a:	9303      	str	r3, [sp, #12]
 801008c:	235e      	movs	r3, #94	@ 0x5e
 801008e:	33ff      	adds	r3, #255	@ 0xff
 8010090:	60a3      	str	r3, [r4, #8]
 8010092:	0023      	movs	r3, r4
 8010094:	331c      	adds	r3, #28
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	23d0      	movs	r3, #208	@ 0xd0
 801009a:	2700      	movs	r7, #0
 801009c:	6822      	ldr	r2, [r4, #0]
 801009e:	011b      	lsls	r3, r3, #4
 80100a0:	4313      	orrs	r3, r2
 80100a2:	6023      	str	r3, [r4, #0]
 80100a4:	9b00      	ldr	r3, [sp, #0]
 80100a6:	9302      	str	r3, [sp, #8]
 80100a8:	6833      	ldr	r3, [r6, #0]
 80100aa:	a807      	add	r0, sp, #28
 80100ac:	7819      	ldrb	r1, [r3, #0]
 80100ae:	00bb      	lsls	r3, r7, #2
 80100b0:	2202      	movs	r2, #2
 80100b2:	5818      	ldr	r0, [r3, r0]
 80100b4:	f7fd ffaf 	bl	800e016 <memchr>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d029      	beq.n	8010110 <_scanf_i+0xbc>
 80100bc:	2f01      	cmp	r7, #1
 80100be:	d15e      	bne.n	801017e <_scanf_i+0x12a>
 80100c0:	6863      	ldr	r3, [r4, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <_scanf_i+0x80>
 80100c6:	3308      	adds	r3, #8
 80100c8:	6822      	ldr	r2, [r4, #0]
 80100ca:	6063      	str	r3, [r4, #4]
 80100cc:	33f9      	adds	r3, #249	@ 0xf9
 80100ce:	33ff      	adds	r3, #255	@ 0xff
 80100d0:	4313      	orrs	r3, r2
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	4a5c      	ldr	r2, [pc, #368]	@ (8010248 <_scanf_i+0x1f4>)
 80100d8:	4013      	ands	r3, r2
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	68a3      	ldr	r3, [r4, #8]
 80100de:	1e5a      	subs	r2, r3, #1
 80100e0:	60a2      	str	r2, [r4, #8]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d014      	beq.n	8010110 <_scanf_i+0xbc>
 80100e6:	6833      	ldr	r3, [r6, #0]
 80100e8:	1c5a      	adds	r2, r3, #1
 80100ea:	6032      	str	r2, [r6, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	9a02      	ldr	r2, [sp, #8]
 80100f0:	7013      	strb	r3, [r2, #0]
 80100f2:	6873      	ldr	r3, [r6, #4]
 80100f4:	1c55      	adds	r5, r2, #1
 80100f6:	3b01      	subs	r3, #1
 80100f8:	6073      	str	r3, [r6, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	dc07      	bgt.n	801010e <_scanf_i+0xba>
 80100fe:	23c0      	movs	r3, #192	@ 0xc0
 8010100:	005b      	lsls	r3, r3, #1
 8010102:	0031      	movs	r1, r6
 8010104:	58e3      	ldr	r3, [r4, r3]
 8010106:	9804      	ldr	r0, [sp, #16]
 8010108:	4798      	blx	r3
 801010a:	2800      	cmp	r0, #0
 801010c:	d17e      	bne.n	801020c <_scanf_i+0x1b8>
 801010e:	9502      	str	r5, [sp, #8]
 8010110:	3701      	adds	r7, #1
 8010112:	2f03      	cmp	r7, #3
 8010114:	d1c8      	bne.n	80100a8 <_scanf_i+0x54>
 8010116:	6863      	ldr	r3, [r4, #4]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d101      	bne.n	8010120 <_scanf_i+0xcc>
 801011c:	330a      	adds	r3, #10
 801011e:	6063      	str	r3, [r4, #4]
 8010120:	2700      	movs	r7, #0
 8010122:	6863      	ldr	r3, [r4, #4]
 8010124:	4949      	ldr	r1, [pc, #292]	@ (801024c <_scanf_i+0x1f8>)
 8010126:	6960      	ldr	r0, [r4, #20]
 8010128:	1ac9      	subs	r1, r1, r3
 801012a:	f000 f9c0 	bl	80104ae <__sccl>
 801012e:	9d02      	ldr	r5, [sp, #8]
 8010130:	68a3      	ldr	r3, [r4, #8]
 8010132:	6820      	ldr	r0, [r4, #0]
 8010134:	9302      	str	r3, [sp, #8]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d03f      	beq.n	80101ba <_scanf_i+0x166>
 801013a:	6831      	ldr	r1, [r6, #0]
 801013c:	6963      	ldr	r3, [r4, #20]
 801013e:	780a      	ldrb	r2, [r1, #0]
 8010140:	5c9b      	ldrb	r3, [r3, r2]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d039      	beq.n	80101ba <_scanf_i+0x166>
 8010146:	2a30      	cmp	r2, #48	@ 0x30
 8010148:	d128      	bne.n	801019c <_scanf_i+0x148>
 801014a:	2380      	movs	r3, #128	@ 0x80
 801014c:	011b      	lsls	r3, r3, #4
 801014e:	4218      	tst	r0, r3
 8010150:	d024      	beq.n	801019c <_scanf_i+0x148>
 8010152:	9b03      	ldr	r3, [sp, #12]
 8010154:	3701      	adds	r7, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d005      	beq.n	8010166 <_scanf_i+0x112>
 801015a:	001a      	movs	r2, r3
 801015c:	9b02      	ldr	r3, [sp, #8]
 801015e:	3a01      	subs	r2, #1
 8010160:	3301      	adds	r3, #1
 8010162:	9203      	str	r2, [sp, #12]
 8010164:	60a3      	str	r3, [r4, #8]
 8010166:	6873      	ldr	r3, [r6, #4]
 8010168:	3b01      	subs	r3, #1
 801016a:	6073      	str	r3, [r6, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	dd1c      	ble.n	80101aa <_scanf_i+0x156>
 8010170:	6833      	ldr	r3, [r6, #0]
 8010172:	3301      	adds	r3, #1
 8010174:	6033      	str	r3, [r6, #0]
 8010176:	68a3      	ldr	r3, [r4, #8]
 8010178:	3b01      	subs	r3, #1
 801017a:	60a3      	str	r3, [r4, #8]
 801017c:	e7d8      	b.n	8010130 <_scanf_i+0xdc>
 801017e:	2f02      	cmp	r7, #2
 8010180:	d1ac      	bne.n	80100dc <_scanf_i+0x88>
 8010182:	23c0      	movs	r3, #192	@ 0xc0
 8010184:	2180      	movs	r1, #128	@ 0x80
 8010186:	6822      	ldr	r2, [r4, #0]
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	4013      	ands	r3, r2
 801018c:	0089      	lsls	r1, r1, #2
 801018e:	428b      	cmp	r3, r1
 8010190:	d1c1      	bne.n	8010116 <_scanf_i+0xc2>
 8010192:	2310      	movs	r3, #16
 8010194:	6063      	str	r3, [r4, #4]
 8010196:	33f0      	adds	r3, #240	@ 0xf0
 8010198:	4313      	orrs	r3, r2
 801019a:	e79e      	b.n	80100da <_scanf_i+0x86>
 801019c:	4b2c      	ldr	r3, [pc, #176]	@ (8010250 <_scanf_i+0x1fc>)
 801019e:	4003      	ands	r3, r0
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	780b      	ldrb	r3, [r1, #0]
 80101a4:	702b      	strb	r3, [r5, #0]
 80101a6:	3501      	adds	r5, #1
 80101a8:	e7dd      	b.n	8010166 <_scanf_i+0x112>
 80101aa:	23c0      	movs	r3, #192	@ 0xc0
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	0031      	movs	r1, r6
 80101b0:	58e3      	ldr	r3, [r4, r3]
 80101b2:	9804      	ldr	r0, [sp, #16]
 80101b4:	4798      	blx	r3
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d0dd      	beq.n	8010176 <_scanf_i+0x122>
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	05db      	lsls	r3, r3, #23
 80101be:	d50e      	bpl.n	80101de <_scanf_i+0x18a>
 80101c0:	9b00      	ldr	r3, [sp, #0]
 80101c2:	429d      	cmp	r5, r3
 80101c4:	d907      	bls.n	80101d6 <_scanf_i+0x182>
 80101c6:	23be      	movs	r3, #190	@ 0xbe
 80101c8:	3d01      	subs	r5, #1
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	0032      	movs	r2, r6
 80101ce:	7829      	ldrb	r1, [r5, #0]
 80101d0:	58e3      	ldr	r3, [r4, r3]
 80101d2:	9804      	ldr	r0, [sp, #16]
 80101d4:	4798      	blx	r3
 80101d6:	9b00      	ldr	r3, [sp, #0]
 80101d8:	2001      	movs	r0, #1
 80101da:	429d      	cmp	r5, r3
 80101dc:	d029      	beq.n	8010232 <_scanf_i+0x1de>
 80101de:	6821      	ldr	r1, [r4, #0]
 80101e0:	2310      	movs	r3, #16
 80101e2:	000a      	movs	r2, r1
 80101e4:	401a      	ands	r2, r3
 80101e6:	4219      	tst	r1, r3
 80101e8:	d11c      	bne.n	8010224 <_scanf_i+0x1d0>
 80101ea:	702a      	strb	r2, [r5, #0]
 80101ec:	6863      	ldr	r3, [r4, #4]
 80101ee:	9900      	ldr	r1, [sp, #0]
 80101f0:	9804      	ldr	r0, [sp, #16]
 80101f2:	9e05      	ldr	r6, [sp, #20]
 80101f4:	47b0      	blx	r6
 80101f6:	9b01      	ldr	r3, [sp, #4]
 80101f8:	6822      	ldr	r2, [r4, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	0691      	lsls	r1, r2, #26
 80101fe:	d507      	bpl.n	8010210 <_scanf_i+0x1bc>
 8010200:	9901      	ldr	r1, [sp, #4]
 8010202:	1d1a      	adds	r2, r3, #4
 8010204:	600a      	str	r2, [r1, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	6018      	str	r0, [r3, #0]
 801020a:	e008      	b.n	801021e <_scanf_i+0x1ca>
 801020c:	2700      	movs	r7, #0
 801020e:	e7d4      	b.n	80101ba <_scanf_i+0x166>
 8010210:	1d19      	adds	r1, r3, #4
 8010212:	07d6      	lsls	r6, r2, #31
 8010214:	d50f      	bpl.n	8010236 <_scanf_i+0x1e2>
 8010216:	9a01      	ldr	r2, [sp, #4]
 8010218:	6011      	str	r1, [r2, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	8018      	strh	r0, [r3, #0]
 801021e:	68e3      	ldr	r3, [r4, #12]
 8010220:	3301      	adds	r3, #1
 8010222:	60e3      	str	r3, [r4, #12]
 8010224:	2000      	movs	r0, #0
 8010226:	9b00      	ldr	r3, [sp, #0]
 8010228:	1aed      	subs	r5, r5, r3
 801022a:	6923      	ldr	r3, [r4, #16]
 801022c:	19ed      	adds	r5, r5, r7
 801022e:	195b      	adds	r3, r3, r5
 8010230:	6123      	str	r3, [r4, #16]
 8010232:	b00b      	add	sp, #44	@ 0x2c
 8010234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010236:	9a01      	ldr	r2, [sp, #4]
 8010238:	6011      	str	r1, [r2, #0]
 801023a:	e7e4      	b.n	8010206 <_scanf_i+0x1b2>
 801023c:	08011e88 	.word	0x08011e88
 8010240:	0801093d 	.word	0x0801093d
 8010244:	08010831 	.word	0x08010831
 8010248:	fffffaff 	.word	0xfffffaff
 801024c:	08012571 	.word	0x08012571
 8010250:	fffff6ff 	.word	0xfffff6ff

08010254 <__sflush_r>:
 8010254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010256:	220c      	movs	r2, #12
 8010258:	5e8b      	ldrsh	r3, [r1, r2]
 801025a:	0005      	movs	r5, r0
 801025c:	000c      	movs	r4, r1
 801025e:	071a      	lsls	r2, r3, #28
 8010260:	d456      	bmi.n	8010310 <__sflush_r+0xbc>
 8010262:	684a      	ldr	r2, [r1, #4]
 8010264:	2a00      	cmp	r2, #0
 8010266:	dc02      	bgt.n	801026e <__sflush_r+0x1a>
 8010268:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801026a:	2a00      	cmp	r2, #0
 801026c:	dd4e      	ble.n	801030c <__sflush_r+0xb8>
 801026e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010270:	2f00      	cmp	r7, #0
 8010272:	d04b      	beq.n	801030c <__sflush_r+0xb8>
 8010274:	2200      	movs	r2, #0
 8010276:	2080      	movs	r0, #128	@ 0x80
 8010278:	682e      	ldr	r6, [r5, #0]
 801027a:	602a      	str	r2, [r5, #0]
 801027c:	001a      	movs	r2, r3
 801027e:	0140      	lsls	r0, r0, #5
 8010280:	6a21      	ldr	r1, [r4, #32]
 8010282:	4002      	ands	r2, r0
 8010284:	4203      	tst	r3, r0
 8010286:	d033      	beq.n	80102f0 <__sflush_r+0x9c>
 8010288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	075b      	lsls	r3, r3, #29
 801028e:	d506      	bpl.n	801029e <__sflush_r+0x4a>
 8010290:	6863      	ldr	r3, [r4, #4]
 8010292:	1ad2      	subs	r2, r2, r3
 8010294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010296:	2b00      	cmp	r3, #0
 8010298:	d001      	beq.n	801029e <__sflush_r+0x4a>
 801029a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801029c:	1ad2      	subs	r2, r2, r3
 801029e:	2300      	movs	r3, #0
 80102a0:	0028      	movs	r0, r5
 80102a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80102a4:	6a21      	ldr	r1, [r4, #32]
 80102a6:	47b8      	blx	r7
 80102a8:	89a2      	ldrh	r2, [r4, #12]
 80102aa:	1c43      	adds	r3, r0, #1
 80102ac:	d106      	bne.n	80102bc <__sflush_r+0x68>
 80102ae:	6829      	ldr	r1, [r5, #0]
 80102b0:	291d      	cmp	r1, #29
 80102b2:	d846      	bhi.n	8010342 <__sflush_r+0xee>
 80102b4:	4b29      	ldr	r3, [pc, #164]	@ (801035c <__sflush_r+0x108>)
 80102b6:	410b      	asrs	r3, r1
 80102b8:	07db      	lsls	r3, r3, #31
 80102ba:	d442      	bmi.n	8010342 <__sflush_r+0xee>
 80102bc:	2300      	movs	r3, #0
 80102be:	6063      	str	r3, [r4, #4]
 80102c0:	6923      	ldr	r3, [r4, #16]
 80102c2:	6023      	str	r3, [r4, #0]
 80102c4:	04d2      	lsls	r2, r2, #19
 80102c6:	d505      	bpl.n	80102d4 <__sflush_r+0x80>
 80102c8:	1c43      	adds	r3, r0, #1
 80102ca:	d102      	bne.n	80102d2 <__sflush_r+0x7e>
 80102cc:	682b      	ldr	r3, [r5, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d100      	bne.n	80102d4 <__sflush_r+0x80>
 80102d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80102d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102d6:	602e      	str	r6, [r5, #0]
 80102d8:	2900      	cmp	r1, #0
 80102da:	d017      	beq.n	801030c <__sflush_r+0xb8>
 80102dc:	0023      	movs	r3, r4
 80102de:	3344      	adds	r3, #68	@ 0x44
 80102e0:	4299      	cmp	r1, r3
 80102e2:	d002      	beq.n	80102ea <__sflush_r+0x96>
 80102e4:	0028      	movs	r0, r5
 80102e6:	f7fe fd4b 	bl	800ed80 <_free_r>
 80102ea:	2300      	movs	r3, #0
 80102ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80102ee:	e00d      	b.n	801030c <__sflush_r+0xb8>
 80102f0:	2301      	movs	r3, #1
 80102f2:	0028      	movs	r0, r5
 80102f4:	47b8      	blx	r7
 80102f6:	0002      	movs	r2, r0
 80102f8:	1c43      	adds	r3, r0, #1
 80102fa:	d1c6      	bne.n	801028a <__sflush_r+0x36>
 80102fc:	682b      	ldr	r3, [r5, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d0c3      	beq.n	801028a <__sflush_r+0x36>
 8010302:	2b1d      	cmp	r3, #29
 8010304:	d001      	beq.n	801030a <__sflush_r+0xb6>
 8010306:	2b16      	cmp	r3, #22
 8010308:	d11a      	bne.n	8010340 <__sflush_r+0xec>
 801030a:	602e      	str	r6, [r5, #0]
 801030c:	2000      	movs	r0, #0
 801030e:	e01e      	b.n	801034e <__sflush_r+0xfa>
 8010310:	690e      	ldr	r6, [r1, #16]
 8010312:	2e00      	cmp	r6, #0
 8010314:	d0fa      	beq.n	801030c <__sflush_r+0xb8>
 8010316:	680f      	ldr	r7, [r1, #0]
 8010318:	600e      	str	r6, [r1, #0]
 801031a:	1bba      	subs	r2, r7, r6
 801031c:	9201      	str	r2, [sp, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	079b      	lsls	r3, r3, #30
 8010322:	d100      	bne.n	8010326 <__sflush_r+0xd2>
 8010324:	694a      	ldr	r2, [r1, #20]
 8010326:	60a2      	str	r2, [r4, #8]
 8010328:	9b01      	ldr	r3, [sp, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	ddee      	ble.n	801030c <__sflush_r+0xb8>
 801032e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010330:	0032      	movs	r2, r6
 8010332:	001f      	movs	r7, r3
 8010334:	0028      	movs	r0, r5
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	6a21      	ldr	r1, [r4, #32]
 801033a:	47b8      	blx	r7
 801033c:	2800      	cmp	r0, #0
 801033e:	dc07      	bgt.n	8010350 <__sflush_r+0xfc>
 8010340:	89a2      	ldrh	r2, [r4, #12]
 8010342:	2340      	movs	r3, #64	@ 0x40
 8010344:	2001      	movs	r0, #1
 8010346:	4313      	orrs	r3, r2
 8010348:	b21b      	sxth	r3, r3
 801034a:	81a3      	strh	r3, [r4, #12]
 801034c:	4240      	negs	r0, r0
 801034e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010350:	9b01      	ldr	r3, [sp, #4]
 8010352:	1836      	adds	r6, r6, r0
 8010354:	1a1b      	subs	r3, r3, r0
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	e7e6      	b.n	8010328 <__sflush_r+0xd4>
 801035a:	46c0      	nop			@ (mov r8, r8)
 801035c:	dfbffffe 	.word	0xdfbffffe

08010360 <_fflush_r>:
 8010360:	690b      	ldr	r3, [r1, #16]
 8010362:	b570      	push	{r4, r5, r6, lr}
 8010364:	0005      	movs	r5, r0
 8010366:	000c      	movs	r4, r1
 8010368:	2b00      	cmp	r3, #0
 801036a:	d102      	bne.n	8010372 <_fflush_r+0x12>
 801036c:	2500      	movs	r5, #0
 801036e:	0028      	movs	r0, r5
 8010370:	bd70      	pop	{r4, r5, r6, pc}
 8010372:	2800      	cmp	r0, #0
 8010374:	d004      	beq.n	8010380 <_fflush_r+0x20>
 8010376:	6a03      	ldr	r3, [r0, #32]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d101      	bne.n	8010380 <_fflush_r+0x20>
 801037c:	f7fd fbd6 	bl	800db2c <__sinit>
 8010380:	220c      	movs	r2, #12
 8010382:	5ea3      	ldrsh	r3, [r4, r2]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d0f1      	beq.n	801036c <_fflush_r+0xc>
 8010388:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801038a:	07d2      	lsls	r2, r2, #31
 801038c:	d404      	bmi.n	8010398 <_fflush_r+0x38>
 801038e:	059b      	lsls	r3, r3, #22
 8010390:	d402      	bmi.n	8010398 <_fflush_r+0x38>
 8010392:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010394:	f7fd fe3d 	bl	800e012 <__retarget_lock_acquire_recursive>
 8010398:	0028      	movs	r0, r5
 801039a:	0021      	movs	r1, r4
 801039c:	f7ff ff5a 	bl	8010254 <__sflush_r>
 80103a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80103a2:	0005      	movs	r5, r0
 80103a4:	07db      	lsls	r3, r3, #31
 80103a6:	d4e2      	bmi.n	801036e <_fflush_r+0xe>
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	059b      	lsls	r3, r3, #22
 80103ac:	d4df      	bmi.n	801036e <_fflush_r+0xe>
 80103ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103b0:	f7fd fe30 	bl	800e014 <__retarget_lock_release_recursive>
 80103b4:	e7db      	b.n	801036e <_fflush_r+0xe>
	...

080103b8 <fiprintf>:
 80103b8:	b40e      	push	{r1, r2, r3}
 80103ba:	b517      	push	{r0, r1, r2, r4, lr}
 80103bc:	4c05      	ldr	r4, [pc, #20]	@ (80103d4 <fiprintf+0x1c>)
 80103be:	ab05      	add	r3, sp, #20
 80103c0:	cb04      	ldmia	r3!, {r2}
 80103c2:	0001      	movs	r1, r0
 80103c4:	6820      	ldr	r0, [r4, #0]
 80103c6:	9301      	str	r3, [sp, #4]
 80103c8:	f7ff fcc8 	bl	800fd5c <_vfiprintf_r>
 80103cc:	bc1e      	pop	{r1, r2, r3, r4}
 80103ce:	bc08      	pop	{r3}
 80103d0:	b003      	add	sp, #12
 80103d2:	4718      	bx	r3
 80103d4:	2000002c 	.word	0x2000002c

080103d8 <__swhatbuf_r>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	000e      	movs	r6, r1
 80103dc:	001d      	movs	r5, r3
 80103de:	230e      	movs	r3, #14
 80103e0:	5ec9      	ldrsh	r1, [r1, r3]
 80103e2:	0014      	movs	r4, r2
 80103e4:	b096      	sub	sp, #88	@ 0x58
 80103e6:	2900      	cmp	r1, #0
 80103e8:	da0c      	bge.n	8010404 <__swhatbuf_r+0x2c>
 80103ea:	89b2      	ldrh	r2, [r6, #12]
 80103ec:	2380      	movs	r3, #128	@ 0x80
 80103ee:	0011      	movs	r1, r2
 80103f0:	4019      	ands	r1, r3
 80103f2:	421a      	tst	r2, r3
 80103f4:	d114      	bne.n	8010420 <__swhatbuf_r+0x48>
 80103f6:	2380      	movs	r3, #128	@ 0x80
 80103f8:	00db      	lsls	r3, r3, #3
 80103fa:	2000      	movs	r0, #0
 80103fc:	6029      	str	r1, [r5, #0]
 80103fe:	6023      	str	r3, [r4, #0]
 8010400:	b016      	add	sp, #88	@ 0x58
 8010402:	bd70      	pop	{r4, r5, r6, pc}
 8010404:	466a      	mov	r2, sp
 8010406:	f000 f8dd 	bl	80105c4 <_fstat_r>
 801040a:	2800      	cmp	r0, #0
 801040c:	dbed      	blt.n	80103ea <__swhatbuf_r+0x12>
 801040e:	23f0      	movs	r3, #240	@ 0xf0
 8010410:	9901      	ldr	r1, [sp, #4]
 8010412:	021b      	lsls	r3, r3, #8
 8010414:	4019      	ands	r1, r3
 8010416:	4b04      	ldr	r3, [pc, #16]	@ (8010428 <__swhatbuf_r+0x50>)
 8010418:	18c9      	adds	r1, r1, r3
 801041a:	424b      	negs	r3, r1
 801041c:	4159      	adcs	r1, r3
 801041e:	e7ea      	b.n	80103f6 <__swhatbuf_r+0x1e>
 8010420:	2100      	movs	r1, #0
 8010422:	2340      	movs	r3, #64	@ 0x40
 8010424:	e7e9      	b.n	80103fa <__swhatbuf_r+0x22>
 8010426:	46c0      	nop			@ (mov r8, r8)
 8010428:	ffffe000 	.word	0xffffe000

0801042c <__smakebuf_r>:
 801042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801042e:	2602      	movs	r6, #2
 8010430:	898b      	ldrh	r3, [r1, #12]
 8010432:	0005      	movs	r5, r0
 8010434:	000c      	movs	r4, r1
 8010436:	b085      	sub	sp, #20
 8010438:	4233      	tst	r3, r6
 801043a:	d007      	beq.n	801044c <__smakebuf_r+0x20>
 801043c:	0023      	movs	r3, r4
 801043e:	3347      	adds	r3, #71	@ 0x47
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	6123      	str	r3, [r4, #16]
 8010444:	2301      	movs	r3, #1
 8010446:	6163      	str	r3, [r4, #20]
 8010448:	b005      	add	sp, #20
 801044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801044c:	ab03      	add	r3, sp, #12
 801044e:	aa02      	add	r2, sp, #8
 8010450:	f7ff ffc2 	bl	80103d8 <__swhatbuf_r>
 8010454:	9f02      	ldr	r7, [sp, #8]
 8010456:	9001      	str	r0, [sp, #4]
 8010458:	0039      	movs	r1, r7
 801045a:	0028      	movs	r0, r5
 801045c:	f7fe fd06 	bl	800ee6c <_malloc_r>
 8010460:	2800      	cmp	r0, #0
 8010462:	d108      	bne.n	8010476 <__smakebuf_r+0x4a>
 8010464:	220c      	movs	r2, #12
 8010466:	5ea3      	ldrsh	r3, [r4, r2]
 8010468:	059a      	lsls	r2, r3, #22
 801046a:	d4ed      	bmi.n	8010448 <__smakebuf_r+0x1c>
 801046c:	2203      	movs	r2, #3
 801046e:	4393      	bics	r3, r2
 8010470:	431e      	orrs	r6, r3
 8010472:	81a6      	strh	r6, [r4, #12]
 8010474:	e7e2      	b.n	801043c <__smakebuf_r+0x10>
 8010476:	2380      	movs	r3, #128	@ 0x80
 8010478:	89a2      	ldrh	r2, [r4, #12]
 801047a:	6020      	str	r0, [r4, #0]
 801047c:	4313      	orrs	r3, r2
 801047e:	81a3      	strh	r3, [r4, #12]
 8010480:	9b03      	ldr	r3, [sp, #12]
 8010482:	6120      	str	r0, [r4, #16]
 8010484:	6167      	str	r7, [r4, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00c      	beq.n	80104a4 <__smakebuf_r+0x78>
 801048a:	0028      	movs	r0, r5
 801048c:	230e      	movs	r3, #14
 801048e:	5ee1      	ldrsh	r1, [r4, r3]
 8010490:	f000 f8aa 	bl	80105e8 <_isatty_r>
 8010494:	2800      	cmp	r0, #0
 8010496:	d005      	beq.n	80104a4 <__smakebuf_r+0x78>
 8010498:	2303      	movs	r3, #3
 801049a:	89a2      	ldrh	r2, [r4, #12]
 801049c:	439a      	bics	r2, r3
 801049e:	3b02      	subs	r3, #2
 80104a0:	4313      	orrs	r3, r2
 80104a2:	81a3      	strh	r3, [r4, #12]
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	9a01      	ldr	r2, [sp, #4]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	81a3      	strh	r3, [r4, #12]
 80104ac:	e7cc      	b.n	8010448 <__smakebuf_r+0x1c>

080104ae <__sccl>:
 80104ae:	b570      	push	{r4, r5, r6, lr}
 80104b0:	780b      	ldrb	r3, [r1, #0]
 80104b2:	0004      	movs	r4, r0
 80104b4:	2b5e      	cmp	r3, #94	@ 0x5e
 80104b6:	d018      	beq.n	80104ea <__sccl+0x3c>
 80104b8:	2200      	movs	r2, #0
 80104ba:	1c4d      	adds	r5, r1, #1
 80104bc:	0021      	movs	r1, r4
 80104be:	1c60      	adds	r0, r4, #1
 80104c0:	30ff      	adds	r0, #255	@ 0xff
 80104c2:	700a      	strb	r2, [r1, #0]
 80104c4:	3101      	adds	r1, #1
 80104c6:	4281      	cmp	r1, r0
 80104c8:	d1fb      	bne.n	80104c2 <__sccl+0x14>
 80104ca:	1e68      	subs	r0, r5, #1
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00b      	beq.n	80104e8 <__sccl+0x3a>
 80104d0:	2101      	movs	r1, #1
 80104d2:	404a      	eors	r2, r1
 80104d4:	0028      	movs	r0, r5
 80104d6:	54e2      	strb	r2, [r4, r3]
 80104d8:	7801      	ldrb	r1, [r0, #0]
 80104da:	1c45      	adds	r5, r0, #1
 80104dc:	292d      	cmp	r1, #45	@ 0x2d
 80104de:	d00a      	beq.n	80104f6 <__sccl+0x48>
 80104e0:	295d      	cmp	r1, #93	@ 0x5d
 80104e2:	d01b      	beq.n	801051c <__sccl+0x6e>
 80104e4:	2900      	cmp	r1, #0
 80104e6:	d104      	bne.n	80104f2 <__sccl+0x44>
 80104e8:	bd70      	pop	{r4, r5, r6, pc}
 80104ea:	2201      	movs	r2, #1
 80104ec:	784b      	ldrb	r3, [r1, #1]
 80104ee:	1c8d      	adds	r5, r1, #2
 80104f0:	e7e4      	b.n	80104bc <__sccl+0xe>
 80104f2:	000b      	movs	r3, r1
 80104f4:	e7ee      	b.n	80104d4 <__sccl+0x26>
 80104f6:	7846      	ldrb	r6, [r0, #1]
 80104f8:	2e5d      	cmp	r6, #93	@ 0x5d
 80104fa:	d0fa      	beq.n	80104f2 <__sccl+0x44>
 80104fc:	42b3      	cmp	r3, r6
 80104fe:	dcf8      	bgt.n	80104f2 <__sccl+0x44>
 8010500:	0019      	movs	r1, r3
 8010502:	3002      	adds	r0, #2
 8010504:	3101      	adds	r1, #1
 8010506:	5462      	strb	r2, [r4, r1]
 8010508:	428e      	cmp	r6, r1
 801050a:	dcfb      	bgt.n	8010504 <__sccl+0x56>
 801050c:	2100      	movs	r1, #0
 801050e:	1c5d      	adds	r5, r3, #1
 8010510:	42b3      	cmp	r3, r6
 8010512:	da01      	bge.n	8010518 <__sccl+0x6a>
 8010514:	1af1      	subs	r1, r6, r3
 8010516:	3901      	subs	r1, #1
 8010518:	186b      	adds	r3, r5, r1
 801051a:	e7dd      	b.n	80104d8 <__sccl+0x2a>
 801051c:	0028      	movs	r0, r5
 801051e:	e7e3      	b.n	80104e8 <__sccl+0x3a>

08010520 <__submore>:
 8010520:	000b      	movs	r3, r1
 8010522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010524:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8010526:	3344      	adds	r3, #68	@ 0x44
 8010528:	000c      	movs	r4, r1
 801052a:	429d      	cmp	r5, r3
 801052c:	d11c      	bne.n	8010568 <__submore+0x48>
 801052e:	2680      	movs	r6, #128	@ 0x80
 8010530:	00f6      	lsls	r6, r6, #3
 8010532:	0031      	movs	r1, r6
 8010534:	f7fe fc9a 	bl	800ee6c <_malloc_r>
 8010538:	2800      	cmp	r0, #0
 801053a:	d102      	bne.n	8010542 <__submore+0x22>
 801053c:	2001      	movs	r0, #1
 801053e:	4240      	negs	r0, r0
 8010540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010542:	0023      	movs	r3, r4
 8010544:	6360      	str	r0, [r4, #52]	@ 0x34
 8010546:	63a6      	str	r6, [r4, #56]	@ 0x38
 8010548:	3346      	adds	r3, #70	@ 0x46
 801054a:	781a      	ldrb	r2, [r3, #0]
 801054c:	4b10      	ldr	r3, [pc, #64]	@ (8010590 <__submore+0x70>)
 801054e:	54c2      	strb	r2, [r0, r3]
 8010550:	0023      	movs	r3, r4
 8010552:	3345      	adds	r3, #69	@ 0x45
 8010554:	781a      	ldrb	r2, [r3, #0]
 8010556:	4b0f      	ldr	r3, [pc, #60]	@ (8010594 <__submore+0x74>)
 8010558:	54c2      	strb	r2, [r0, r3]
 801055a:	782a      	ldrb	r2, [r5, #0]
 801055c:	4b0e      	ldr	r3, [pc, #56]	@ (8010598 <__submore+0x78>)
 801055e:	54c2      	strb	r2, [r0, r3]
 8010560:	18c0      	adds	r0, r0, r3
 8010562:	6020      	str	r0, [r4, #0]
 8010564:	2000      	movs	r0, #0
 8010566:	e7eb      	b.n	8010540 <__submore+0x20>
 8010568:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 801056a:	0029      	movs	r1, r5
 801056c:	0073      	lsls	r3, r6, #1
 801056e:	001a      	movs	r2, r3
 8010570:	9301      	str	r3, [sp, #4]
 8010572:	f000 f8a3 	bl	80106bc <_realloc_r>
 8010576:	1e05      	subs	r5, r0, #0
 8010578:	d0e0      	beq.n	801053c <__submore+0x1c>
 801057a:	1987      	adds	r7, r0, r6
 801057c:	0001      	movs	r1, r0
 801057e:	0032      	movs	r2, r6
 8010580:	0038      	movs	r0, r7
 8010582:	f7fd fd53 	bl	800e02c <memcpy>
 8010586:	9b01      	ldr	r3, [sp, #4]
 8010588:	6027      	str	r7, [r4, #0]
 801058a:	6365      	str	r5, [r4, #52]	@ 0x34
 801058c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801058e:	e7e9      	b.n	8010564 <__submore+0x44>
 8010590:	000003ff 	.word	0x000003ff
 8010594:	000003fe 	.word	0x000003fe
 8010598:	000003fd 	.word	0x000003fd

0801059c <memmove>:
 801059c:	b510      	push	{r4, lr}
 801059e:	4288      	cmp	r0, r1
 80105a0:	d806      	bhi.n	80105b0 <memmove+0x14>
 80105a2:	2300      	movs	r3, #0
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d008      	beq.n	80105ba <memmove+0x1e>
 80105a8:	5ccc      	ldrb	r4, [r1, r3]
 80105aa:	54c4      	strb	r4, [r0, r3]
 80105ac:	3301      	adds	r3, #1
 80105ae:	e7f9      	b.n	80105a4 <memmove+0x8>
 80105b0:	188b      	adds	r3, r1, r2
 80105b2:	4298      	cmp	r0, r3
 80105b4:	d2f5      	bcs.n	80105a2 <memmove+0x6>
 80105b6:	3a01      	subs	r2, #1
 80105b8:	d200      	bcs.n	80105bc <memmove+0x20>
 80105ba:	bd10      	pop	{r4, pc}
 80105bc:	5c8b      	ldrb	r3, [r1, r2]
 80105be:	5483      	strb	r3, [r0, r2]
 80105c0:	e7f9      	b.n	80105b6 <memmove+0x1a>
	...

080105c4 <_fstat_r>:
 80105c4:	2300      	movs	r3, #0
 80105c6:	b570      	push	{r4, r5, r6, lr}
 80105c8:	4d06      	ldr	r5, [pc, #24]	@ (80105e4 <_fstat_r+0x20>)
 80105ca:	0004      	movs	r4, r0
 80105cc:	0008      	movs	r0, r1
 80105ce:	0011      	movs	r1, r2
 80105d0:	602b      	str	r3, [r5, #0]
 80105d2:	f7f4 fd81 	bl	80050d8 <_fstat>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	d103      	bne.n	80105e2 <_fstat_r+0x1e>
 80105da:	682b      	ldr	r3, [r5, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d000      	beq.n	80105e2 <_fstat_r+0x1e>
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	200005b4 	.word	0x200005b4

080105e8 <_isatty_r>:
 80105e8:	2300      	movs	r3, #0
 80105ea:	b570      	push	{r4, r5, r6, lr}
 80105ec:	4d06      	ldr	r5, [pc, #24]	@ (8010608 <_isatty_r+0x20>)
 80105ee:	0004      	movs	r4, r0
 80105f0:	0008      	movs	r0, r1
 80105f2:	602b      	str	r3, [r5, #0]
 80105f4:	f7f4 fd7e 	bl	80050f4 <_isatty>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d103      	bne.n	8010604 <_isatty_r+0x1c>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d000      	beq.n	8010604 <_isatty_r+0x1c>
 8010602:	6023      	str	r3, [r4, #0]
 8010604:	bd70      	pop	{r4, r5, r6, pc}
 8010606:	46c0      	nop			@ (mov r8, r8)
 8010608:	200005b4 	.word	0x200005b4

0801060c <_sbrk_r>:
 801060c:	2300      	movs	r3, #0
 801060e:	b570      	push	{r4, r5, r6, lr}
 8010610:	4d06      	ldr	r5, [pc, #24]	@ (801062c <_sbrk_r+0x20>)
 8010612:	0004      	movs	r4, r0
 8010614:	0008      	movs	r0, r1
 8010616:	602b      	str	r3, [r5, #0]
 8010618:	f7f4 fd80 	bl	800511c <_sbrk>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	d103      	bne.n	8010628 <_sbrk_r+0x1c>
 8010620:	682b      	ldr	r3, [r5, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d000      	beq.n	8010628 <_sbrk_r+0x1c>
 8010626:	6023      	str	r3, [r4, #0]
 8010628:	bd70      	pop	{r4, r5, r6, pc}
 801062a:	46c0      	nop			@ (mov r8, r8)
 801062c:	200005b4 	.word	0x200005b4

08010630 <abort>:
 8010630:	2006      	movs	r0, #6
 8010632:	b510      	push	{r4, lr}
 8010634:	f000 f9bc 	bl	80109b0 <raise>
 8010638:	2001      	movs	r0, #1
 801063a:	f7f4 fcfd 	bl	8005038 <_exit>

0801063e <_calloc_r>:
 801063e:	b570      	push	{r4, r5, r6, lr}
 8010640:	0c0b      	lsrs	r3, r1, #16
 8010642:	0c15      	lsrs	r5, r2, #16
 8010644:	2b00      	cmp	r3, #0
 8010646:	d11e      	bne.n	8010686 <_calloc_r+0x48>
 8010648:	2d00      	cmp	r5, #0
 801064a:	d10c      	bne.n	8010666 <_calloc_r+0x28>
 801064c:	b289      	uxth	r1, r1
 801064e:	b294      	uxth	r4, r2
 8010650:	434c      	muls	r4, r1
 8010652:	0021      	movs	r1, r4
 8010654:	f7fe fc0a 	bl	800ee6c <_malloc_r>
 8010658:	1e05      	subs	r5, r0, #0
 801065a:	d01a      	beq.n	8010692 <_calloc_r+0x54>
 801065c:	0022      	movs	r2, r4
 801065e:	2100      	movs	r1, #0
 8010660:	f7fd fc52 	bl	800df08 <memset>
 8010664:	e016      	b.n	8010694 <_calloc_r+0x56>
 8010666:	1c2b      	adds	r3, r5, #0
 8010668:	1c0c      	adds	r4, r1, #0
 801066a:	b289      	uxth	r1, r1
 801066c:	b292      	uxth	r2, r2
 801066e:	434a      	muls	r2, r1
 8010670:	b29b      	uxth	r3, r3
 8010672:	b2a1      	uxth	r1, r4
 8010674:	4359      	muls	r1, r3
 8010676:	0c14      	lsrs	r4, r2, #16
 8010678:	190c      	adds	r4, r1, r4
 801067a:	0c23      	lsrs	r3, r4, #16
 801067c:	d107      	bne.n	801068e <_calloc_r+0x50>
 801067e:	0424      	lsls	r4, r4, #16
 8010680:	b292      	uxth	r2, r2
 8010682:	4314      	orrs	r4, r2
 8010684:	e7e5      	b.n	8010652 <_calloc_r+0x14>
 8010686:	2d00      	cmp	r5, #0
 8010688:	d101      	bne.n	801068e <_calloc_r+0x50>
 801068a:	1c14      	adds	r4, r2, #0
 801068c:	e7ed      	b.n	801066a <_calloc_r+0x2c>
 801068e:	230c      	movs	r3, #12
 8010690:	6003      	str	r3, [r0, #0]
 8010692:	2500      	movs	r5, #0
 8010694:	0028      	movs	r0, r5
 8010696:	bd70      	pop	{r4, r5, r6, pc}

08010698 <__ascii_mbtowc>:
 8010698:	b082      	sub	sp, #8
 801069a:	2900      	cmp	r1, #0
 801069c:	d100      	bne.n	80106a0 <__ascii_mbtowc+0x8>
 801069e:	a901      	add	r1, sp, #4
 80106a0:	1e10      	subs	r0, r2, #0
 80106a2:	d006      	beq.n	80106b2 <__ascii_mbtowc+0x1a>
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d006      	beq.n	80106b6 <__ascii_mbtowc+0x1e>
 80106a8:	7813      	ldrb	r3, [r2, #0]
 80106aa:	600b      	str	r3, [r1, #0]
 80106ac:	7810      	ldrb	r0, [r2, #0]
 80106ae:	1e43      	subs	r3, r0, #1
 80106b0:	4198      	sbcs	r0, r3
 80106b2:	b002      	add	sp, #8
 80106b4:	4770      	bx	lr
 80106b6:	2002      	movs	r0, #2
 80106b8:	4240      	negs	r0, r0
 80106ba:	e7fa      	b.n	80106b2 <__ascii_mbtowc+0x1a>

080106bc <_realloc_r>:
 80106bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106be:	0006      	movs	r6, r0
 80106c0:	000c      	movs	r4, r1
 80106c2:	0015      	movs	r5, r2
 80106c4:	2900      	cmp	r1, #0
 80106c6:	d105      	bne.n	80106d4 <_realloc_r+0x18>
 80106c8:	0011      	movs	r1, r2
 80106ca:	f7fe fbcf 	bl	800ee6c <_malloc_r>
 80106ce:	0004      	movs	r4, r0
 80106d0:	0020      	movs	r0, r4
 80106d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80106d4:	2a00      	cmp	r2, #0
 80106d6:	d103      	bne.n	80106e0 <_realloc_r+0x24>
 80106d8:	f7fe fb52 	bl	800ed80 <_free_r>
 80106dc:	2400      	movs	r4, #0
 80106de:	e7f7      	b.n	80106d0 <_realloc_r+0x14>
 80106e0:	f000 f986 	bl	80109f0 <_malloc_usable_size_r>
 80106e4:	0007      	movs	r7, r0
 80106e6:	4285      	cmp	r5, r0
 80106e8:	d802      	bhi.n	80106f0 <_realloc_r+0x34>
 80106ea:	0843      	lsrs	r3, r0, #1
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	d3ef      	bcc.n	80106d0 <_realloc_r+0x14>
 80106f0:	0029      	movs	r1, r5
 80106f2:	0030      	movs	r0, r6
 80106f4:	f7fe fbba 	bl	800ee6c <_malloc_r>
 80106f8:	9001      	str	r0, [sp, #4]
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d0ee      	beq.n	80106dc <_realloc_r+0x20>
 80106fe:	002a      	movs	r2, r5
 8010700:	42bd      	cmp	r5, r7
 8010702:	d900      	bls.n	8010706 <_realloc_r+0x4a>
 8010704:	003a      	movs	r2, r7
 8010706:	0021      	movs	r1, r4
 8010708:	9801      	ldr	r0, [sp, #4]
 801070a:	f7fd fc8f 	bl	800e02c <memcpy>
 801070e:	0021      	movs	r1, r4
 8010710:	0030      	movs	r0, r6
 8010712:	f7fe fb35 	bl	800ed80 <_free_r>
 8010716:	9c01      	ldr	r4, [sp, #4]
 8010718:	e7da      	b.n	80106d0 <_realloc_r+0x14>
	...

0801071c <_strtol_l.constprop.0>:
 801071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801071e:	b085      	sub	sp, #20
 8010720:	0017      	movs	r7, r2
 8010722:	001e      	movs	r6, r3
 8010724:	9003      	str	r0, [sp, #12]
 8010726:	9101      	str	r1, [sp, #4]
 8010728:	2b24      	cmp	r3, #36	@ 0x24
 801072a:	d844      	bhi.n	80107b6 <_strtol_l.constprop.0+0x9a>
 801072c:	000c      	movs	r4, r1
 801072e:	2b01      	cmp	r3, #1
 8010730:	d041      	beq.n	80107b6 <_strtol_l.constprop.0+0x9a>
 8010732:	4b3d      	ldr	r3, [pc, #244]	@ (8010828 <_strtol_l.constprop.0+0x10c>)
 8010734:	2208      	movs	r2, #8
 8010736:	469c      	mov	ip, r3
 8010738:	0023      	movs	r3, r4
 801073a:	4661      	mov	r1, ip
 801073c:	781d      	ldrb	r5, [r3, #0]
 801073e:	3401      	adds	r4, #1
 8010740:	5d48      	ldrb	r0, [r1, r5]
 8010742:	0001      	movs	r1, r0
 8010744:	4011      	ands	r1, r2
 8010746:	4210      	tst	r0, r2
 8010748:	d1f6      	bne.n	8010738 <_strtol_l.constprop.0+0x1c>
 801074a:	2d2d      	cmp	r5, #45	@ 0x2d
 801074c:	d13a      	bne.n	80107c4 <_strtol_l.constprop.0+0xa8>
 801074e:	7825      	ldrb	r5, [r4, #0]
 8010750:	1c9c      	adds	r4, r3, #2
 8010752:	2301      	movs	r3, #1
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	2210      	movs	r2, #16
 8010758:	0033      	movs	r3, r6
 801075a:	4393      	bics	r3, r2
 801075c:	d109      	bne.n	8010772 <_strtol_l.constprop.0+0x56>
 801075e:	2d30      	cmp	r5, #48	@ 0x30
 8010760:	d136      	bne.n	80107d0 <_strtol_l.constprop.0+0xb4>
 8010762:	2120      	movs	r1, #32
 8010764:	7823      	ldrb	r3, [r4, #0]
 8010766:	438b      	bics	r3, r1
 8010768:	2b58      	cmp	r3, #88	@ 0x58
 801076a:	d131      	bne.n	80107d0 <_strtol_l.constprop.0+0xb4>
 801076c:	0016      	movs	r6, r2
 801076e:	7865      	ldrb	r5, [r4, #1]
 8010770:	3402      	adds	r4, #2
 8010772:	4a2e      	ldr	r2, [pc, #184]	@ (801082c <_strtol_l.constprop.0+0x110>)
 8010774:	9b00      	ldr	r3, [sp, #0]
 8010776:	4694      	mov	ip, r2
 8010778:	4463      	add	r3, ip
 801077a:	0031      	movs	r1, r6
 801077c:	0018      	movs	r0, r3
 801077e:	9302      	str	r3, [sp, #8]
 8010780:	f7ef fd64 	bl	800024c <__aeabi_uidivmod>
 8010784:	2200      	movs	r2, #0
 8010786:	4684      	mov	ip, r0
 8010788:	0010      	movs	r0, r2
 801078a:	002b      	movs	r3, r5
 801078c:	3b30      	subs	r3, #48	@ 0x30
 801078e:	2b09      	cmp	r3, #9
 8010790:	d825      	bhi.n	80107de <_strtol_l.constprop.0+0xc2>
 8010792:	001d      	movs	r5, r3
 8010794:	42ae      	cmp	r6, r5
 8010796:	dd31      	ble.n	80107fc <_strtol_l.constprop.0+0xe0>
 8010798:	1c53      	adds	r3, r2, #1
 801079a:	d009      	beq.n	80107b0 <_strtol_l.constprop.0+0x94>
 801079c:	2201      	movs	r2, #1
 801079e:	4252      	negs	r2, r2
 80107a0:	4584      	cmp	ip, r0
 80107a2:	d305      	bcc.n	80107b0 <_strtol_l.constprop.0+0x94>
 80107a4:	d101      	bne.n	80107aa <_strtol_l.constprop.0+0x8e>
 80107a6:	42a9      	cmp	r1, r5
 80107a8:	db25      	blt.n	80107f6 <_strtol_l.constprop.0+0xda>
 80107aa:	2201      	movs	r2, #1
 80107ac:	4370      	muls	r0, r6
 80107ae:	1828      	adds	r0, r5, r0
 80107b0:	7825      	ldrb	r5, [r4, #0]
 80107b2:	3401      	adds	r4, #1
 80107b4:	e7e9      	b.n	801078a <_strtol_l.constprop.0+0x6e>
 80107b6:	f7fd fc01 	bl	800dfbc <__errno>
 80107ba:	2316      	movs	r3, #22
 80107bc:	6003      	str	r3, [r0, #0]
 80107be:	2000      	movs	r0, #0
 80107c0:	b005      	add	sp, #20
 80107c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c4:	9100      	str	r1, [sp, #0]
 80107c6:	2d2b      	cmp	r5, #43	@ 0x2b
 80107c8:	d1c5      	bne.n	8010756 <_strtol_l.constprop.0+0x3a>
 80107ca:	7825      	ldrb	r5, [r4, #0]
 80107cc:	1c9c      	adds	r4, r3, #2
 80107ce:	e7c2      	b.n	8010756 <_strtol_l.constprop.0+0x3a>
 80107d0:	2e00      	cmp	r6, #0
 80107d2:	d1ce      	bne.n	8010772 <_strtol_l.constprop.0+0x56>
 80107d4:	3608      	adds	r6, #8
 80107d6:	2d30      	cmp	r5, #48	@ 0x30
 80107d8:	d0cb      	beq.n	8010772 <_strtol_l.constprop.0+0x56>
 80107da:	3602      	adds	r6, #2
 80107dc:	e7c9      	b.n	8010772 <_strtol_l.constprop.0+0x56>
 80107de:	002b      	movs	r3, r5
 80107e0:	3b41      	subs	r3, #65	@ 0x41
 80107e2:	2b19      	cmp	r3, #25
 80107e4:	d801      	bhi.n	80107ea <_strtol_l.constprop.0+0xce>
 80107e6:	3d37      	subs	r5, #55	@ 0x37
 80107e8:	e7d4      	b.n	8010794 <_strtol_l.constprop.0+0x78>
 80107ea:	002b      	movs	r3, r5
 80107ec:	3b61      	subs	r3, #97	@ 0x61
 80107ee:	2b19      	cmp	r3, #25
 80107f0:	d804      	bhi.n	80107fc <_strtol_l.constprop.0+0xe0>
 80107f2:	3d57      	subs	r5, #87	@ 0x57
 80107f4:	e7ce      	b.n	8010794 <_strtol_l.constprop.0+0x78>
 80107f6:	2201      	movs	r2, #1
 80107f8:	4252      	negs	r2, r2
 80107fa:	e7d9      	b.n	80107b0 <_strtol_l.constprop.0+0x94>
 80107fc:	1c53      	adds	r3, r2, #1
 80107fe:	d108      	bne.n	8010812 <_strtol_l.constprop.0+0xf6>
 8010800:	2322      	movs	r3, #34	@ 0x22
 8010802:	9a03      	ldr	r2, [sp, #12]
 8010804:	9802      	ldr	r0, [sp, #8]
 8010806:	6013      	str	r3, [r2, #0]
 8010808:	2f00      	cmp	r7, #0
 801080a:	d0d9      	beq.n	80107c0 <_strtol_l.constprop.0+0xa4>
 801080c:	1e63      	subs	r3, r4, #1
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	e007      	b.n	8010822 <_strtol_l.constprop.0+0x106>
 8010812:	9b00      	ldr	r3, [sp, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d000      	beq.n	801081a <_strtol_l.constprop.0+0xfe>
 8010818:	4240      	negs	r0, r0
 801081a:	2f00      	cmp	r7, #0
 801081c:	d0d0      	beq.n	80107c0 <_strtol_l.constprop.0+0xa4>
 801081e:	2a00      	cmp	r2, #0
 8010820:	d1f4      	bne.n	801080c <_strtol_l.constprop.0+0xf0>
 8010822:	9b01      	ldr	r3, [sp, #4]
 8010824:	603b      	str	r3, [r7, #0]
 8010826:	e7cb      	b.n	80107c0 <_strtol_l.constprop.0+0xa4>
 8010828:	08012587 	.word	0x08012587
 801082c:	7fffffff 	.word	0x7fffffff

08010830 <_strtol_r>:
 8010830:	b510      	push	{r4, lr}
 8010832:	f7ff ff73 	bl	801071c <_strtol_l.constprop.0>
 8010836:	bd10      	pop	{r4, pc}

08010838 <_strtoul_l.constprop.0>:
 8010838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801083a:	001e      	movs	r6, r3
 801083c:	4b3e      	ldr	r3, [pc, #248]	@ (8010938 <_strtoul_l.constprop.0+0x100>)
 801083e:	0017      	movs	r7, r2
 8010840:	000c      	movs	r4, r1
 8010842:	469c      	mov	ip, r3
 8010844:	2208      	movs	r2, #8
 8010846:	b085      	sub	sp, #20
 8010848:	9003      	str	r0, [sp, #12]
 801084a:	9100      	str	r1, [sp, #0]
 801084c:	0023      	movs	r3, r4
 801084e:	4661      	mov	r1, ip
 8010850:	781d      	ldrb	r5, [r3, #0]
 8010852:	3401      	adds	r4, #1
 8010854:	5d48      	ldrb	r0, [r1, r5]
 8010856:	0001      	movs	r1, r0
 8010858:	4011      	ands	r1, r2
 801085a:	4210      	tst	r0, r2
 801085c:	d1f6      	bne.n	801084c <_strtoul_l.constprop.0+0x14>
 801085e:	2d2d      	cmp	r5, #45	@ 0x2d
 8010860:	d137      	bne.n	80108d2 <_strtoul_l.constprop.0+0x9a>
 8010862:	7825      	ldrb	r5, [r4, #0]
 8010864:	1c9c      	adds	r4, r3, #2
 8010866:	2301      	movs	r3, #1
 8010868:	9302      	str	r3, [sp, #8]
 801086a:	2210      	movs	r2, #16
 801086c:	0033      	movs	r3, r6
 801086e:	4393      	bics	r3, r2
 8010870:	d109      	bne.n	8010886 <_strtoul_l.constprop.0+0x4e>
 8010872:	2d30      	cmp	r5, #48	@ 0x30
 8010874:	d133      	bne.n	80108de <_strtoul_l.constprop.0+0xa6>
 8010876:	2120      	movs	r1, #32
 8010878:	7823      	ldrb	r3, [r4, #0]
 801087a:	438b      	bics	r3, r1
 801087c:	2b58      	cmp	r3, #88	@ 0x58
 801087e:	d12e      	bne.n	80108de <_strtoul_l.constprop.0+0xa6>
 8010880:	0016      	movs	r6, r2
 8010882:	7865      	ldrb	r5, [r4, #1]
 8010884:	3402      	adds	r4, #2
 8010886:	2001      	movs	r0, #1
 8010888:	0031      	movs	r1, r6
 801088a:	4240      	negs	r0, r0
 801088c:	f7ef fc58 	bl	8000140 <__udivsi3>
 8010890:	9001      	str	r0, [sp, #4]
 8010892:	2001      	movs	r0, #1
 8010894:	0031      	movs	r1, r6
 8010896:	4240      	negs	r0, r0
 8010898:	f7ef fcd8 	bl	800024c <__aeabi_uidivmod>
 801089c:	2300      	movs	r3, #0
 801089e:	2201      	movs	r2, #1
 80108a0:	0018      	movs	r0, r3
 80108a2:	4694      	mov	ip, r2
 80108a4:	002a      	movs	r2, r5
 80108a6:	3a30      	subs	r2, #48	@ 0x30
 80108a8:	2a09      	cmp	r2, #9
 80108aa:	d81f      	bhi.n	80108ec <_strtoul_l.constprop.0+0xb4>
 80108ac:	0015      	movs	r5, r2
 80108ae:	42ae      	cmp	r6, r5
 80108b0:	dd2b      	ble.n	801090a <_strtoul_l.constprop.0+0xd2>
 80108b2:	1c5a      	adds	r2, r3, #1
 80108b4:	d00a      	beq.n	80108cc <_strtoul_l.constprop.0+0x94>
 80108b6:	2301      	movs	r3, #1
 80108b8:	9a01      	ldr	r2, [sp, #4]
 80108ba:	425b      	negs	r3, r3
 80108bc:	4282      	cmp	r2, r0
 80108be:	d305      	bcc.n	80108cc <_strtoul_l.constprop.0+0x94>
 80108c0:	d101      	bne.n	80108c6 <_strtoul_l.constprop.0+0x8e>
 80108c2:	42a9      	cmp	r1, r5
 80108c4:	db1e      	blt.n	8010904 <_strtoul_l.constprop.0+0xcc>
 80108c6:	4663      	mov	r3, ip
 80108c8:	4370      	muls	r0, r6
 80108ca:	1828      	adds	r0, r5, r0
 80108cc:	7825      	ldrb	r5, [r4, #0]
 80108ce:	3401      	adds	r4, #1
 80108d0:	e7e8      	b.n	80108a4 <_strtoul_l.constprop.0+0x6c>
 80108d2:	9102      	str	r1, [sp, #8]
 80108d4:	2d2b      	cmp	r5, #43	@ 0x2b
 80108d6:	d1c8      	bne.n	801086a <_strtoul_l.constprop.0+0x32>
 80108d8:	7825      	ldrb	r5, [r4, #0]
 80108da:	1c9c      	adds	r4, r3, #2
 80108dc:	e7c5      	b.n	801086a <_strtoul_l.constprop.0+0x32>
 80108de:	2e00      	cmp	r6, #0
 80108e0:	d1d1      	bne.n	8010886 <_strtoul_l.constprop.0+0x4e>
 80108e2:	3608      	adds	r6, #8
 80108e4:	2d30      	cmp	r5, #48	@ 0x30
 80108e6:	d0ce      	beq.n	8010886 <_strtoul_l.constprop.0+0x4e>
 80108e8:	3602      	adds	r6, #2
 80108ea:	e7cc      	b.n	8010886 <_strtoul_l.constprop.0+0x4e>
 80108ec:	002a      	movs	r2, r5
 80108ee:	3a41      	subs	r2, #65	@ 0x41
 80108f0:	2a19      	cmp	r2, #25
 80108f2:	d801      	bhi.n	80108f8 <_strtoul_l.constprop.0+0xc0>
 80108f4:	3d37      	subs	r5, #55	@ 0x37
 80108f6:	e7da      	b.n	80108ae <_strtoul_l.constprop.0+0x76>
 80108f8:	002a      	movs	r2, r5
 80108fa:	3a61      	subs	r2, #97	@ 0x61
 80108fc:	2a19      	cmp	r2, #25
 80108fe:	d804      	bhi.n	801090a <_strtoul_l.constprop.0+0xd2>
 8010900:	3d57      	subs	r5, #87	@ 0x57
 8010902:	e7d4      	b.n	80108ae <_strtoul_l.constprop.0+0x76>
 8010904:	2301      	movs	r3, #1
 8010906:	425b      	negs	r3, r3
 8010908:	e7e0      	b.n	80108cc <_strtoul_l.constprop.0+0x94>
 801090a:	1c5a      	adds	r2, r3, #1
 801090c:	d107      	bne.n	801091e <_strtoul_l.constprop.0+0xe6>
 801090e:	2222      	movs	r2, #34	@ 0x22
 8010910:	9903      	ldr	r1, [sp, #12]
 8010912:	0018      	movs	r0, r3
 8010914:	600a      	str	r2, [r1, #0]
 8010916:	2f00      	cmp	r7, #0
 8010918:	d109      	bne.n	801092e <_strtoul_l.constprop.0+0xf6>
 801091a:	b005      	add	sp, #20
 801091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801091e:	9a02      	ldr	r2, [sp, #8]
 8010920:	2a00      	cmp	r2, #0
 8010922:	d000      	beq.n	8010926 <_strtoul_l.constprop.0+0xee>
 8010924:	4240      	negs	r0, r0
 8010926:	2f00      	cmp	r7, #0
 8010928:	d0f7      	beq.n	801091a <_strtoul_l.constprop.0+0xe2>
 801092a:	2b00      	cmp	r3, #0
 801092c:	d001      	beq.n	8010932 <_strtoul_l.constprop.0+0xfa>
 801092e:	1e63      	subs	r3, r4, #1
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	9b00      	ldr	r3, [sp, #0]
 8010934:	603b      	str	r3, [r7, #0]
 8010936:	e7f0      	b.n	801091a <_strtoul_l.constprop.0+0xe2>
 8010938:	08012587 	.word	0x08012587

0801093c <_strtoul_r>:
 801093c:	b510      	push	{r4, lr}
 801093e:	f7ff ff7b 	bl	8010838 <_strtoul_l.constprop.0>
 8010942:	bd10      	pop	{r4, pc}

08010944 <__ascii_wctomb>:
 8010944:	0003      	movs	r3, r0
 8010946:	1e08      	subs	r0, r1, #0
 8010948:	d005      	beq.n	8010956 <__ascii_wctomb+0x12>
 801094a:	2aff      	cmp	r2, #255	@ 0xff
 801094c:	d904      	bls.n	8010958 <__ascii_wctomb+0x14>
 801094e:	228a      	movs	r2, #138	@ 0x8a
 8010950:	2001      	movs	r0, #1
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	4240      	negs	r0, r0
 8010956:	4770      	bx	lr
 8010958:	2001      	movs	r0, #1
 801095a:	700a      	strb	r2, [r1, #0]
 801095c:	e7fb      	b.n	8010956 <__ascii_wctomb+0x12>

0801095e <_raise_r>:
 801095e:	b570      	push	{r4, r5, r6, lr}
 8010960:	0004      	movs	r4, r0
 8010962:	000d      	movs	r5, r1
 8010964:	291f      	cmp	r1, #31
 8010966:	d904      	bls.n	8010972 <_raise_r+0x14>
 8010968:	2316      	movs	r3, #22
 801096a:	6003      	str	r3, [r0, #0]
 801096c:	2001      	movs	r0, #1
 801096e:	4240      	negs	r0, r0
 8010970:	bd70      	pop	{r4, r5, r6, pc}
 8010972:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010974:	2b00      	cmp	r3, #0
 8010976:	d004      	beq.n	8010982 <_raise_r+0x24>
 8010978:	008a      	lsls	r2, r1, #2
 801097a:	189b      	adds	r3, r3, r2
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	2a00      	cmp	r2, #0
 8010980:	d108      	bne.n	8010994 <_raise_r+0x36>
 8010982:	0020      	movs	r0, r4
 8010984:	f000 f830 	bl	80109e8 <_getpid_r>
 8010988:	002a      	movs	r2, r5
 801098a:	0001      	movs	r1, r0
 801098c:	0020      	movs	r0, r4
 801098e:	f000 f819 	bl	80109c4 <_kill_r>
 8010992:	e7ed      	b.n	8010970 <_raise_r+0x12>
 8010994:	2a01      	cmp	r2, #1
 8010996:	d009      	beq.n	80109ac <_raise_r+0x4e>
 8010998:	1c51      	adds	r1, r2, #1
 801099a:	d103      	bne.n	80109a4 <_raise_r+0x46>
 801099c:	2316      	movs	r3, #22
 801099e:	6003      	str	r3, [r0, #0]
 80109a0:	2001      	movs	r0, #1
 80109a2:	e7e5      	b.n	8010970 <_raise_r+0x12>
 80109a4:	2100      	movs	r1, #0
 80109a6:	0028      	movs	r0, r5
 80109a8:	6019      	str	r1, [r3, #0]
 80109aa:	4790      	blx	r2
 80109ac:	2000      	movs	r0, #0
 80109ae:	e7df      	b.n	8010970 <_raise_r+0x12>

080109b0 <raise>:
 80109b0:	b510      	push	{r4, lr}
 80109b2:	4b03      	ldr	r3, [pc, #12]	@ (80109c0 <raise+0x10>)
 80109b4:	0001      	movs	r1, r0
 80109b6:	6818      	ldr	r0, [r3, #0]
 80109b8:	f7ff ffd1 	bl	801095e <_raise_r>
 80109bc:	bd10      	pop	{r4, pc}
 80109be:	46c0      	nop			@ (mov r8, r8)
 80109c0:	2000002c 	.word	0x2000002c

080109c4 <_kill_r>:
 80109c4:	2300      	movs	r3, #0
 80109c6:	b570      	push	{r4, r5, r6, lr}
 80109c8:	4d06      	ldr	r5, [pc, #24]	@ (80109e4 <_kill_r+0x20>)
 80109ca:	0004      	movs	r4, r0
 80109cc:	0008      	movs	r0, r1
 80109ce:	0011      	movs	r1, r2
 80109d0:	602b      	str	r3, [r5, #0]
 80109d2:	f7f4 fb21 	bl	8005018 <_kill>
 80109d6:	1c43      	adds	r3, r0, #1
 80109d8:	d103      	bne.n	80109e2 <_kill_r+0x1e>
 80109da:	682b      	ldr	r3, [r5, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d000      	beq.n	80109e2 <_kill_r+0x1e>
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	bd70      	pop	{r4, r5, r6, pc}
 80109e4:	200005b4 	.word	0x200005b4

080109e8 <_getpid_r>:
 80109e8:	b510      	push	{r4, lr}
 80109ea:	f7f4 fb0f 	bl	800500c <_getpid>
 80109ee:	bd10      	pop	{r4, pc}

080109f0 <_malloc_usable_size_r>:
 80109f0:	1f0b      	subs	r3, r1, #4
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	1f18      	subs	r0, r3, #4
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	da01      	bge.n	80109fe <_malloc_usable_size_r+0xe>
 80109fa:	580b      	ldr	r3, [r1, r0]
 80109fc:	18c0      	adds	r0, r0, r3
 80109fe:	4770      	bx	lr

08010a00 <pow>:
 8010a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a02:	0014      	movs	r4, r2
 8010a04:	001d      	movs	r5, r3
 8010a06:	9000      	str	r0, [sp, #0]
 8010a08:	9101      	str	r1, [sp, #4]
 8010a0a:	f000 f86f 	bl	8010aec <__ieee754_pow>
 8010a0e:	0022      	movs	r2, r4
 8010a10:	0006      	movs	r6, r0
 8010a12:	000f      	movs	r7, r1
 8010a14:	002b      	movs	r3, r5
 8010a16:	0020      	movs	r0, r4
 8010a18:	0029      	movs	r1, r5
 8010a1a:	f7f1 fda9 	bl	8002570 <__aeabi_dcmpun>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	d13f      	bne.n	8010aa2 <pow+0xa2>
 8010a22:	9800      	ldr	r0, [sp, #0]
 8010a24:	9901      	ldr	r1, [sp, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	2300      	movs	r3, #0
 8010a2a:	f7ef fd0f 	bl	800044c <__aeabi_dcmpeq>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d019      	beq.n	8010a66 <pow+0x66>
 8010a32:	2200      	movs	r2, #0
 8010a34:	2300      	movs	r3, #0
 8010a36:	0020      	movs	r0, r4
 8010a38:	0029      	movs	r1, r5
 8010a3a:	f7ef fd07 	bl	800044c <__aeabi_dcmpeq>
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	d146      	bne.n	8010ad0 <pow+0xd0>
 8010a42:	0020      	movs	r0, r4
 8010a44:	0029      	movs	r1, r5
 8010a46:	f000 f849 	bl	8010adc <finite>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d029      	beq.n	8010aa2 <pow+0xa2>
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	0020      	movs	r0, r4
 8010a54:	0029      	movs	r1, r5
 8010a56:	f7ef fcff 	bl	8000458 <__aeabi_dcmplt>
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	d021      	beq.n	8010aa2 <pow+0xa2>
 8010a5e:	f7fd faad 	bl	800dfbc <__errno>
 8010a62:	2322      	movs	r3, #34	@ 0x22
 8010a64:	e01c      	b.n	8010aa0 <pow+0xa0>
 8010a66:	0030      	movs	r0, r6
 8010a68:	0039      	movs	r1, r7
 8010a6a:	f000 f837 	bl	8010adc <finite>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d11b      	bne.n	8010aaa <pow+0xaa>
 8010a72:	9800      	ldr	r0, [sp, #0]
 8010a74:	9901      	ldr	r1, [sp, #4]
 8010a76:	f000 f831 	bl	8010adc <finite>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d015      	beq.n	8010aaa <pow+0xaa>
 8010a7e:	0020      	movs	r0, r4
 8010a80:	0029      	movs	r1, r5
 8010a82:	f000 f82b 	bl	8010adc <finite>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d00f      	beq.n	8010aaa <pow+0xaa>
 8010a8a:	0032      	movs	r2, r6
 8010a8c:	003b      	movs	r3, r7
 8010a8e:	0030      	movs	r0, r6
 8010a90:	0039      	movs	r1, r7
 8010a92:	f7f1 fd6d 	bl	8002570 <__aeabi_dcmpun>
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d0e1      	beq.n	8010a5e <pow+0x5e>
 8010a9a:	f7fd fa8f 	bl	800dfbc <__errno>
 8010a9e:	2321      	movs	r3, #33	@ 0x21
 8010aa0:	6003      	str	r3, [r0, #0]
 8010aa2:	0030      	movs	r0, r6
 8010aa4:	0039      	movs	r1, r7
 8010aa6:	b003      	add	sp, #12
 8010aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aaa:	2200      	movs	r2, #0
 8010aac:	2300      	movs	r3, #0
 8010aae:	0030      	movs	r0, r6
 8010ab0:	0039      	movs	r1, r7
 8010ab2:	f7ef fccb 	bl	800044c <__aeabi_dcmpeq>
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d0f3      	beq.n	8010aa2 <pow+0xa2>
 8010aba:	9800      	ldr	r0, [sp, #0]
 8010abc:	9901      	ldr	r1, [sp, #4]
 8010abe:	f000 f80d 	bl	8010adc <finite>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d0ed      	beq.n	8010aa2 <pow+0xa2>
 8010ac6:	0020      	movs	r0, r4
 8010ac8:	0029      	movs	r1, r5
 8010aca:	f000 f807 	bl	8010adc <finite>
 8010ace:	e7c4      	b.n	8010a5a <pow+0x5a>
 8010ad0:	2600      	movs	r6, #0
 8010ad2:	4f01      	ldr	r7, [pc, #4]	@ (8010ad8 <pow+0xd8>)
 8010ad4:	e7e5      	b.n	8010aa2 <pow+0xa2>
 8010ad6:	46c0      	nop			@ (mov r8, r8)
 8010ad8:	3ff00000 	.word	0x3ff00000

08010adc <finite>:
 8010adc:	4b02      	ldr	r3, [pc, #8]	@ (8010ae8 <finite+0xc>)
 8010ade:	0048      	lsls	r0, r1, #1
 8010ae0:	0840      	lsrs	r0, r0, #1
 8010ae2:	18c0      	adds	r0, r0, r3
 8010ae4:	0fc0      	lsrs	r0, r0, #31
 8010ae6:	4770      	bx	lr
 8010ae8:	80100000 	.word	0x80100000

08010aec <__ieee754_pow>:
 8010aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aee:	b095      	sub	sp, #84	@ 0x54
 8010af0:	9202      	str	r2, [sp, #8]
 8010af2:	9303      	str	r3, [sp, #12]
 8010af4:	9b03      	ldr	r3, [sp, #12]
 8010af6:	9a03      	ldr	r2, [sp, #12]
 8010af8:	9306      	str	r3, [sp, #24]
 8010afa:	0052      	lsls	r2, r2, #1
 8010afc:	9b02      	ldr	r3, [sp, #8]
 8010afe:	0852      	lsrs	r2, r2, #1
 8010b00:	9204      	str	r2, [sp, #16]
 8010b02:	001a      	movs	r2, r3
 8010b04:	000f      	movs	r7, r1
 8010b06:	9904      	ldr	r1, [sp, #16]
 8010b08:	0006      	movs	r6, r0
 8010b0a:	430a      	orrs	r2, r1
 8010b0c:	d119      	bne.n	8010b42 <__ieee754_pow+0x56>
 8010b0e:	2180      	movs	r1, #128	@ 0x80
 8010b10:	0309      	lsls	r1, r1, #12
 8010b12:	4079      	eors	r1, r7
 8010b14:	0002      	movs	r2, r0
 8010b16:	000b      	movs	r3, r1
 8010b18:	1892      	adds	r2, r2, r2
 8010b1a:	415b      	adcs	r3, r3
 8010b1c:	499b      	ldr	r1, [pc, #620]	@ (8010d8c <__ieee754_pow+0x2a0>)
 8010b1e:	428b      	cmp	r3, r1
 8010b20:	d806      	bhi.n	8010b30 <__ieee754_pow+0x44>
 8010b22:	d001      	beq.n	8010b28 <__ieee754_pow+0x3c>
 8010b24:	f000 fcde 	bl	80114e4 <__ieee754_pow+0x9f8>
 8010b28:	2a00      	cmp	r2, #0
 8010b2a:	d101      	bne.n	8010b30 <__ieee754_pow+0x44>
 8010b2c:	f000 fcda 	bl	80114e4 <__ieee754_pow+0x9f8>
 8010b30:	9a02      	ldr	r2, [sp, #8]
 8010b32:	9b03      	ldr	r3, [sp, #12]
 8010b34:	0030      	movs	r0, r6
 8010b36:	0039      	movs	r1, r7
 8010b38:	f7ef ff0e 	bl	8000958 <__aeabi_dadd>
 8010b3c:	9000      	str	r0, [sp, #0]
 8010b3e:	9101      	str	r1, [sp, #4]
 8010b40:	e0af      	b.n	8010ca2 <__ieee754_pow+0x1b6>
 8010b42:	4a93      	ldr	r2, [pc, #588]	@ (8010d90 <__ieee754_pow+0x2a4>)
 8010b44:	007c      	lsls	r4, r7, #1
 8010b46:	9708      	str	r7, [sp, #32]
 8010b48:	900e      	str	r0, [sp, #56]	@ 0x38
 8010b4a:	0864      	lsrs	r4, r4, #1
 8010b4c:	4294      	cmp	r4, r2
 8010b4e:	d809      	bhi.n	8010b64 <__ieee754_pow+0x78>
 8010b50:	d101      	bne.n	8010b56 <__ieee754_pow+0x6a>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d1ec      	bne.n	8010b30 <__ieee754_pow+0x44>
 8010b56:	9904      	ldr	r1, [sp, #16]
 8010b58:	4a8d      	ldr	r2, [pc, #564]	@ (8010d90 <__ieee754_pow+0x2a4>)
 8010b5a:	4291      	cmp	r1, r2
 8010b5c:	d802      	bhi.n	8010b64 <__ieee754_pow+0x78>
 8010b5e:	d10c      	bne.n	8010b7a <__ieee754_pow+0x8e>
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00a      	beq.n	8010b7a <__ieee754_pow+0x8e>
 8010b64:	4b8b      	ldr	r3, [pc, #556]	@ (8010d94 <__ieee754_pow+0x2a8>)
 8010b66:	18fb      	adds	r3, r7, r3
 8010b68:	4333      	orrs	r3, r6
 8010b6a:	d1e1      	bne.n	8010b30 <__ieee754_pow+0x44>
 8010b6c:	2180      	movs	r1, #128	@ 0x80
 8010b6e:	9803      	ldr	r0, [sp, #12]
 8010b70:	0309      	lsls	r1, r1, #12
 8010b72:	4048      	eors	r0, r1
 8010b74:	0003      	movs	r3, r0
 8010b76:	9a02      	ldr	r2, [sp, #8]
 8010b78:	e7ce      	b.n	8010b18 <__ieee754_pow+0x2c>
 8010b7a:	2500      	movs	r5, #0
 8010b7c:	9a08      	ldr	r2, [sp, #32]
 8010b7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010b80:	42aa      	cmp	r2, r5
 8010b82:	da68      	bge.n	8010c56 <__ieee754_pow+0x16a>
 8010b84:	4a84      	ldr	r2, [pc, #528]	@ (8010d98 <__ieee754_pow+0x2ac>)
 8010b86:	9904      	ldr	r1, [sp, #16]
 8010b88:	4291      	cmp	r1, r2
 8010b8a:	d863      	bhi.n	8010c54 <__ieee754_pow+0x168>
 8010b8c:	4a83      	ldr	r2, [pc, #524]	@ (8010d9c <__ieee754_pow+0x2b0>)
 8010b8e:	4291      	cmp	r1, r2
 8010b90:	d910      	bls.n	8010bb4 <__ieee754_pow+0xc8>
 8010b92:	150a      	asrs	r2, r1, #20
 8010b94:	4982      	ldr	r1, [pc, #520]	@ (8010da0 <__ieee754_pow+0x2b4>)
 8010b96:	1852      	adds	r2, r2, r1
 8010b98:	2a14      	cmp	r2, #20
 8010b9a:	dd3b      	ble.n	8010c14 <__ieee754_pow+0x128>
 8010b9c:	2134      	movs	r1, #52	@ 0x34
 8010b9e:	1a89      	subs	r1, r1, r2
 8010ba0:	9a02      	ldr	r2, [sp, #8]
 8010ba2:	40ca      	lsrs	r2, r1
 8010ba4:	0010      	movs	r0, r2
 8010ba6:	4088      	lsls	r0, r1
 8010ba8:	4298      	cmp	r0, r3
 8010baa:	d103      	bne.n	8010bb4 <__ieee754_pow+0xc8>
 8010bac:	2101      	movs	r1, #1
 8010bae:	3502      	adds	r5, #2
 8010bb0:	400a      	ands	r2, r1
 8010bb2:	1aad      	subs	r5, r5, r2
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d03d      	beq.n	8010c34 <__ieee754_pow+0x148>
 8010bb8:	0030      	movs	r0, r6
 8010bba:	0039      	movs	r1, r7
 8010bbc:	f000 fcc2 	bl	8011544 <fabs>
 8010bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bc2:	9000      	str	r0, [sp, #0]
 8010bc4:	9101      	str	r1, [sp, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d000      	beq.n	8010bcc <__ieee754_pow+0xe0>
 8010bca:	e093      	b.n	8010cf4 <__ieee754_pow+0x208>
 8010bcc:	4a75      	ldr	r2, [pc, #468]	@ (8010da4 <__ieee754_pow+0x2b8>)
 8010bce:	00bb      	lsls	r3, r7, #2
 8010bd0:	089b      	lsrs	r3, r3, #2
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d002      	beq.n	8010bdc <__ieee754_pow+0xf0>
 8010bd6:	2c00      	cmp	r4, #0
 8010bd8:	d000      	beq.n	8010bdc <__ieee754_pow+0xf0>
 8010bda:	e08b      	b.n	8010cf4 <__ieee754_pow+0x208>
 8010bdc:	9b06      	ldr	r3, [sp, #24]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da07      	bge.n	8010bf2 <__ieee754_pow+0x106>
 8010be2:	9a00      	ldr	r2, [sp, #0]
 8010be4:	9b01      	ldr	r3, [sp, #4]
 8010be6:	2000      	movs	r0, #0
 8010be8:	496e      	ldr	r1, [pc, #440]	@ (8010da4 <__ieee754_pow+0x2b8>)
 8010bea:	f7f0 fa19 	bl	8001020 <__aeabi_ddiv>
 8010bee:	9000      	str	r0, [sp, #0]
 8010bf0:	9101      	str	r1, [sp, #4]
 8010bf2:	9b08      	ldr	r3, [sp, #32]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	da54      	bge.n	8010ca2 <__ieee754_pow+0x1b6>
 8010bf8:	4b66      	ldr	r3, [pc, #408]	@ (8010d94 <__ieee754_pow+0x2a8>)
 8010bfa:	18e4      	adds	r4, r4, r3
 8010bfc:	432c      	orrs	r4, r5
 8010bfe:	d000      	beq.n	8010c02 <__ieee754_pow+0x116>
 8010c00:	e06d      	b.n	8010cde <__ieee754_pow+0x1f2>
 8010c02:	9a00      	ldr	r2, [sp, #0]
 8010c04:	9b01      	ldr	r3, [sp, #4]
 8010c06:	0010      	movs	r0, r2
 8010c08:	0019      	movs	r1, r3
 8010c0a:	f7f1 f915 	bl	8001e38 <__aeabi_dsub>
 8010c0e:	0002      	movs	r2, r0
 8010c10:	000b      	movs	r3, r1
 8010c12:	e01c      	b.n	8010c4e <__ieee754_pow+0x162>
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1cf      	bne.n	8010bb8 <__ieee754_pow+0xcc>
 8010c18:	3314      	adds	r3, #20
 8010c1a:	1a9a      	subs	r2, r3, r2
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	4113      	asrs	r3, r2
 8010c20:	0019      	movs	r1, r3
 8010c22:	4091      	lsls	r1, r2
 8010c24:	000a      	movs	r2, r1
 8010c26:	9904      	ldr	r1, [sp, #16]
 8010c28:	428a      	cmp	r2, r1
 8010c2a:	d103      	bne.n	8010c34 <__ieee754_pow+0x148>
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	2502      	movs	r5, #2
 8010c30:	4013      	ands	r3, r2
 8010c32:	1aed      	subs	r5, r5, r3
 8010c34:	4b5b      	ldr	r3, [pc, #364]	@ (8010da4 <__ieee754_pow+0x2b8>)
 8010c36:	9a04      	ldr	r2, [sp, #16]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d136      	bne.n	8010caa <__ieee754_pow+0x1be>
 8010c3c:	9b06      	ldr	r3, [sp, #24]
 8010c3e:	9600      	str	r6, [sp, #0]
 8010c40:	9701      	str	r7, [sp, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	da2d      	bge.n	8010ca2 <__ieee754_pow+0x1b6>
 8010c46:	0032      	movs	r2, r6
 8010c48:	003b      	movs	r3, r7
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	4955      	ldr	r1, [pc, #340]	@ (8010da4 <__ieee754_pow+0x2b8>)
 8010c4e:	f7f0 f9e7 	bl	8001020 <__aeabi_ddiv>
 8010c52:	e773      	b.n	8010b3c <__ieee754_pow+0x50>
 8010c54:	2502      	movs	r5, #2
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d1ae      	bne.n	8010bb8 <__ieee754_pow+0xcc>
 8010c5a:	9b04      	ldr	r3, [sp, #16]
 8010c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8010d90 <__ieee754_pow+0x2a4>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d1e8      	bne.n	8010c34 <__ieee754_pow+0x148>
 8010c62:	4b4c      	ldr	r3, [pc, #304]	@ (8010d94 <__ieee754_pow+0x2a8>)
 8010c64:	18e3      	adds	r3, r4, r3
 8010c66:	4333      	orrs	r3, r6
 8010c68:	d101      	bne.n	8010c6e <__ieee754_pow+0x182>
 8010c6a:	f000 fc3b 	bl	80114e4 <__ieee754_pow+0x9f8>
 8010c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8010d9c <__ieee754_pow+0x2b0>)
 8010c70:	429c      	cmp	r4, r3
 8010c72:	d909      	bls.n	8010c88 <__ieee754_pow+0x19c>
 8010c74:	9b06      	ldr	r3, [sp, #24]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	da01      	bge.n	8010c7e <__ieee754_pow+0x192>
 8010c7a:	f000 fc37 	bl	80114ec <__ieee754_pow+0xa00>
 8010c7e:	9b02      	ldr	r3, [sp, #8]
 8010c80:	9c03      	ldr	r4, [sp, #12]
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	9401      	str	r4, [sp, #4]
 8010c86:	e00c      	b.n	8010ca2 <__ieee754_pow+0x1b6>
 8010c88:	9b06      	ldr	r3, [sp, #24]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	db01      	blt.n	8010c92 <__ieee754_pow+0x1a6>
 8010c8e:	f000 fc2d 	bl	80114ec <__ieee754_pow+0xa00>
 8010c92:	2280      	movs	r2, #128	@ 0x80
 8010c94:	0612      	lsls	r2, r2, #24
 8010c96:	4694      	mov	ip, r2
 8010c98:	9b02      	ldr	r3, [sp, #8]
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	9b03      	ldr	r3, [sp, #12]
 8010c9e:	4463      	add	r3, ip
 8010ca0:	9301      	str	r3, [sp, #4]
 8010ca2:	9800      	ldr	r0, [sp, #0]
 8010ca4:	9901      	ldr	r1, [sp, #4]
 8010ca6:	b015      	add	sp, #84	@ 0x54
 8010ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010caa:	2380      	movs	r3, #128	@ 0x80
 8010cac:	9a06      	ldr	r2, [sp, #24]
 8010cae:	05db      	lsls	r3, r3, #23
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d106      	bne.n	8010cc2 <__ieee754_pow+0x1d6>
 8010cb4:	0032      	movs	r2, r6
 8010cb6:	003b      	movs	r3, r7
 8010cb8:	0030      	movs	r0, r6
 8010cba:	0039      	movs	r1, r7
 8010cbc:	f7f0 fdf4 	bl	80018a8 <__aeabi_dmul>
 8010cc0:	e73c      	b.n	8010b3c <__ieee754_pow+0x50>
 8010cc2:	4b39      	ldr	r3, [pc, #228]	@ (8010da8 <__ieee754_pow+0x2bc>)
 8010cc4:	9a06      	ldr	r2, [sp, #24]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d000      	beq.n	8010ccc <__ieee754_pow+0x1e0>
 8010cca:	e775      	b.n	8010bb8 <__ieee754_pow+0xcc>
 8010ccc:	9b08      	ldr	r3, [sp, #32]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	da00      	bge.n	8010cd4 <__ieee754_pow+0x1e8>
 8010cd2:	e771      	b.n	8010bb8 <__ieee754_pow+0xcc>
 8010cd4:	0030      	movs	r0, r6
 8010cd6:	0039      	movs	r1, r7
 8010cd8:	f000 fcd2 	bl	8011680 <__ieee754_sqrt>
 8010cdc:	e72e      	b.n	8010b3c <__ieee754_pow+0x50>
 8010cde:	2d01      	cmp	r5, #1
 8010ce0:	d1df      	bne.n	8010ca2 <__ieee754_pow+0x1b6>
 8010ce2:	9800      	ldr	r0, [sp, #0]
 8010ce4:	2180      	movs	r1, #128	@ 0x80
 8010ce6:	0002      	movs	r2, r0
 8010ce8:	9801      	ldr	r0, [sp, #4]
 8010cea:	0609      	lsls	r1, r1, #24
 8010cec:	1843      	adds	r3, r0, r1
 8010cee:	9200      	str	r2, [sp, #0]
 8010cf0:	9301      	str	r3, [sp, #4]
 8010cf2:	e7d6      	b.n	8010ca2 <__ieee754_pow+0x1b6>
 8010cf4:	0ffb      	lsrs	r3, r7, #31
 8010cf6:	3b01      	subs	r3, #1
 8010cf8:	001a      	movs	r2, r3
 8010cfa:	432a      	orrs	r2, r5
 8010cfc:	d104      	bne.n	8010d08 <__ieee754_pow+0x21c>
 8010cfe:	0032      	movs	r2, r6
 8010d00:	003b      	movs	r3, r7
 8010d02:	0030      	movs	r0, r6
 8010d04:	0039      	movs	r1, r7
 8010d06:	e780      	b.n	8010c0a <__ieee754_pow+0x11e>
 8010d08:	3d01      	subs	r5, #1
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	431d      	orrs	r5, r3
 8010d0e:	d015      	beq.n	8010d3c <__ieee754_pow+0x250>
 8010d10:	4b24      	ldr	r3, [pc, #144]	@ (8010da4 <__ieee754_pow+0x2b8>)
 8010d12:	9208      	str	r2, [sp, #32]
 8010d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d16:	2384      	movs	r3, #132	@ 0x84
 8010d18:	9a04      	ldr	r2, [sp, #16]
 8010d1a:	05db      	lsls	r3, r3, #23
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d800      	bhi.n	8010d22 <__ieee754_pow+0x236>
 8010d20:	e102      	b.n	8010f28 <__ieee754_pow+0x43c>
 8010d22:	4b22      	ldr	r3, [pc, #136]	@ (8010dac <__ieee754_pow+0x2c0>)
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d912      	bls.n	8010d4e <__ieee754_pow+0x262>
 8010d28:	4b1c      	ldr	r3, [pc, #112]	@ (8010d9c <__ieee754_pow+0x2b0>)
 8010d2a:	429c      	cmp	r4, r3
 8010d2c:	d808      	bhi.n	8010d40 <__ieee754_pow+0x254>
 8010d2e:	9b06      	ldr	r3, [sp, #24]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	da08      	bge.n	8010d46 <__ieee754_pow+0x25a>
 8010d34:	2000      	movs	r0, #0
 8010d36:	f000 fc9b 	bl	8011670 <__math_oflow>
 8010d3a:	e6ff      	b.n	8010b3c <__ieee754_pow+0x50>
 8010d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8010db0 <__ieee754_pow+0x2c4>)
 8010d3e:	e7e8      	b.n	8010d12 <__ieee754_pow+0x226>
 8010d40:	9b06      	ldr	r3, [sp, #24]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dcf6      	bgt.n	8010d34 <__ieee754_pow+0x248>
 8010d46:	2000      	movs	r0, #0
 8010d48:	f000 fc8b 	bl	8011662 <__math_uflow>
 8010d4c:	e6f6      	b.n	8010b3c <__ieee754_pow+0x50>
 8010d4e:	4b19      	ldr	r3, [pc, #100]	@ (8010db4 <__ieee754_pow+0x2c8>)
 8010d50:	429c      	cmp	r4, r3
 8010d52:	d80b      	bhi.n	8010d6c <__ieee754_pow+0x280>
 8010d54:	9808      	ldr	r0, [sp, #32]
 8010d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d58:	2300      	movs	r3, #0
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ef fb7c 	bl	8000458 <__aeabi_dcmplt>
 8010d60:	1e43      	subs	r3, r0, #1
 8010d62:	4198      	sbcs	r0, r3
 8010d64:	9b06      	ldr	r3, [sp, #24]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	daee      	bge.n	8010d48 <__ieee754_pow+0x25c>
 8010d6a:	e7e4      	b.n	8010d36 <__ieee754_pow+0x24a>
 8010d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8010da4 <__ieee754_pow+0x2b8>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	429c      	cmp	r4, r3
 8010d72:	d921      	bls.n	8010db8 <__ieee754_pow+0x2cc>
 8010d74:	9808      	ldr	r0, [sp, #32]
 8010d76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f7ef fb6d 	bl	8000458 <__aeabi_dcmplt>
 8010d7e:	1e43      	subs	r3, r0, #1
 8010d80:	4198      	sbcs	r0, r3
 8010d82:	9b06      	ldr	r3, [sp, #24]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dcd6      	bgt.n	8010d36 <__ieee754_pow+0x24a>
 8010d88:	e7de      	b.n	8010d48 <__ieee754_pow+0x25c>
 8010d8a:	46c0      	nop			@ (mov r8, r8)
 8010d8c:	fff00000 	.word	0xfff00000
 8010d90:	7ff00000 	.word	0x7ff00000
 8010d94:	c0100000 	.word	0xc0100000
 8010d98:	433fffff 	.word	0x433fffff
 8010d9c:	3fefffff 	.word	0x3fefffff
 8010da0:	fffffc01 	.word	0xfffffc01
 8010da4:	3ff00000 	.word	0x3ff00000
 8010da8:	3fe00000 	.word	0x3fe00000
 8010dac:	43f00000 	.word	0x43f00000
 8010db0:	bff00000 	.word	0xbff00000
 8010db4:	3feffffe 	.word	0x3feffffe
 8010db8:	9800      	ldr	r0, [sp, #0]
 8010dba:	9901      	ldr	r1, [sp, #4]
 8010dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8010efc <__ieee754_pow+0x410>)
 8010dbe:	f7f1 f83b 	bl	8001e38 <__aeabi_dsub>
 8010dc2:	22c0      	movs	r2, #192	@ 0xc0
 8010dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8010f00 <__ieee754_pow+0x414>)
 8010dc6:	05d2      	lsls	r2, r2, #23
 8010dc8:	0006      	movs	r6, r0
 8010dca:	000f      	movs	r7, r1
 8010dcc:	f7f0 fd6c 	bl	80018a8 <__aeabi_dmul>
 8010dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8010f04 <__ieee754_pow+0x418>)
 8010dd2:	9004      	str	r0, [sp, #16]
 8010dd4:	9105      	str	r1, [sp, #20]
 8010dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8010f08 <__ieee754_pow+0x41c>)
 8010dd8:	0030      	movs	r0, r6
 8010dda:	0039      	movs	r1, r7
 8010ddc:	f7f0 fd64 	bl	80018a8 <__aeabi_dmul>
 8010de0:	2200      	movs	r2, #0
 8010de2:	9000      	str	r0, [sp, #0]
 8010de4:	9101      	str	r1, [sp, #4]
 8010de6:	4b49      	ldr	r3, [pc, #292]	@ (8010f0c <__ieee754_pow+0x420>)
 8010de8:	0030      	movs	r0, r6
 8010dea:	0039      	movs	r1, r7
 8010dec:	f7f0 fd5c 	bl	80018a8 <__aeabi_dmul>
 8010df0:	0002      	movs	r2, r0
 8010df2:	000b      	movs	r3, r1
 8010df4:	4846      	ldr	r0, [pc, #280]	@ (8010f10 <__ieee754_pow+0x424>)
 8010df6:	4947      	ldr	r1, [pc, #284]	@ (8010f14 <__ieee754_pow+0x428>)
 8010df8:	f7f1 f81e 	bl	8001e38 <__aeabi_dsub>
 8010dfc:	0032      	movs	r2, r6
 8010dfe:	003b      	movs	r3, r7
 8010e00:	f7f0 fd52 	bl	80018a8 <__aeabi_dmul>
 8010e04:	0002      	movs	r2, r0
 8010e06:	000b      	movs	r3, r1
 8010e08:	2000      	movs	r0, #0
 8010e0a:	4943      	ldr	r1, [pc, #268]	@ (8010f18 <__ieee754_pow+0x42c>)
 8010e0c:	f7f1 f814 	bl	8001e38 <__aeabi_dsub>
 8010e10:	0032      	movs	r2, r6
 8010e12:	0004      	movs	r4, r0
 8010e14:	000d      	movs	r5, r1
 8010e16:	003b      	movs	r3, r7
 8010e18:	0030      	movs	r0, r6
 8010e1a:	0039      	movs	r1, r7
 8010e1c:	f7f0 fd44 	bl	80018a8 <__aeabi_dmul>
 8010e20:	0002      	movs	r2, r0
 8010e22:	000b      	movs	r3, r1
 8010e24:	0020      	movs	r0, r4
 8010e26:	0029      	movs	r1, r5
 8010e28:	f7f0 fd3e 	bl	80018a8 <__aeabi_dmul>
 8010e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8010f1c <__ieee754_pow+0x430>)
 8010e2e:	4b34      	ldr	r3, [pc, #208]	@ (8010f00 <__ieee754_pow+0x414>)
 8010e30:	f7f0 fd3a 	bl	80018a8 <__aeabi_dmul>
 8010e34:	0002      	movs	r2, r0
 8010e36:	000b      	movs	r3, r1
 8010e38:	9800      	ldr	r0, [sp, #0]
 8010e3a:	9901      	ldr	r1, [sp, #4]
 8010e3c:	f7f0 fffc 	bl	8001e38 <__aeabi_dsub>
 8010e40:	0002      	movs	r2, r0
 8010e42:	000b      	movs	r3, r1
 8010e44:	0004      	movs	r4, r0
 8010e46:	000d      	movs	r5, r1
 8010e48:	9804      	ldr	r0, [sp, #16]
 8010e4a:	9905      	ldr	r1, [sp, #20]
 8010e4c:	f7ef fd84 	bl	8000958 <__aeabi_dadd>
 8010e50:	9a04      	ldr	r2, [sp, #16]
 8010e52:	9b05      	ldr	r3, [sp, #20]
 8010e54:	2000      	movs	r0, #0
 8010e56:	9000      	str	r0, [sp, #0]
 8010e58:	9101      	str	r1, [sp, #4]
 8010e5a:	f7f0 ffed 	bl	8001e38 <__aeabi_dsub>
 8010e5e:	0002      	movs	r2, r0
 8010e60:	000b      	movs	r3, r1
 8010e62:	0020      	movs	r0, r4
 8010e64:	0029      	movs	r1, r5
 8010e66:	f7f0 ffe7 	bl	8001e38 <__aeabi_dsub>
 8010e6a:	9b02      	ldr	r3, [sp, #8]
 8010e6c:	9c03      	ldr	r4, [sp, #12]
 8010e6e:	9304      	str	r3, [sp, #16]
 8010e70:	9405      	str	r4, [sp, #20]
 8010e72:	2300      	movs	r3, #0
 8010e74:	9304      	str	r3, [sp, #16]
 8010e76:	9c04      	ldr	r4, [sp, #16]
 8010e78:	9d05      	ldr	r5, [sp, #20]
 8010e7a:	0006      	movs	r6, r0
 8010e7c:	000f      	movs	r7, r1
 8010e7e:	9802      	ldr	r0, [sp, #8]
 8010e80:	9903      	ldr	r1, [sp, #12]
 8010e82:	0022      	movs	r2, r4
 8010e84:	002b      	movs	r3, r5
 8010e86:	f7f0 ffd7 	bl	8001e38 <__aeabi_dsub>
 8010e8a:	9a00      	ldr	r2, [sp, #0]
 8010e8c:	9b01      	ldr	r3, [sp, #4]
 8010e8e:	f7f0 fd0b 	bl	80018a8 <__aeabi_dmul>
 8010e92:	9a02      	ldr	r2, [sp, #8]
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	9006      	str	r0, [sp, #24]
 8010e98:	9107      	str	r1, [sp, #28]
 8010e9a:	0030      	movs	r0, r6
 8010e9c:	0039      	movs	r1, r7
 8010e9e:	f7f0 fd03 	bl	80018a8 <__aeabi_dmul>
 8010ea2:	0002      	movs	r2, r0
 8010ea4:	000b      	movs	r3, r1
 8010ea6:	9806      	ldr	r0, [sp, #24]
 8010ea8:	9907      	ldr	r1, [sp, #28]
 8010eaa:	f7ef fd55 	bl	8000958 <__aeabi_dadd>
 8010eae:	0022      	movs	r2, r4
 8010eb0:	002b      	movs	r3, r5
 8010eb2:	9002      	str	r0, [sp, #8]
 8010eb4:	9103      	str	r1, [sp, #12]
 8010eb6:	9800      	ldr	r0, [sp, #0]
 8010eb8:	9901      	ldr	r1, [sp, #4]
 8010eba:	f7f0 fcf5 	bl	80018a8 <__aeabi_dmul>
 8010ebe:	000b      	movs	r3, r1
 8010ec0:	0002      	movs	r2, r0
 8010ec2:	0006      	movs	r6, r0
 8010ec4:	000f      	movs	r7, r1
 8010ec6:	9802      	ldr	r0, [sp, #8]
 8010ec8:	9903      	ldr	r1, [sp, #12]
 8010eca:	f7ef fd45 	bl	8000958 <__aeabi_dadd>
 8010ece:	9000      	str	r0, [sp, #0]
 8010ed0:	9101      	str	r1, [sp, #4]
 8010ed2:	9c01      	ldr	r4, [sp, #4]
 8010ed4:	4b12      	ldr	r3, [pc, #72]	@ (8010f20 <__ieee754_pow+0x434>)
 8010ed6:	9406      	str	r4, [sp, #24]
 8010ed8:	429c      	cmp	r4, r3
 8010eda:	dc00      	bgt.n	8010ede <__ieee754_pow+0x3f2>
 8010edc:	e222      	b.n	8011324 <__ieee754_pow+0x838>
 8010ede:	4a11      	ldr	r2, [pc, #68]	@ (8010f24 <__ieee754_pow+0x438>)
 8010ee0:	18a3      	adds	r3, r4, r2
 8010ee2:	9a00      	ldr	r2, [sp, #0]
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	d100      	bne.n	8010eea <__ieee754_pow+0x3fe>
 8010ee8:	e1a0      	b.n	801122c <__ieee754_pow+0x740>
 8010eea:	9808      	ldr	r0, [sp, #32]
 8010eec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010eee:	2300      	movs	r3, #0
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f7ef fab1 	bl	8000458 <__aeabi_dcmplt>
 8010ef6:	1e43      	subs	r3, r0, #1
 8010ef8:	4198      	sbcs	r0, r3
 8010efa:	e71c      	b.n	8010d36 <__ieee754_pow+0x24a>
 8010efc:	3ff00000 	.word	0x3ff00000
 8010f00:	3ff71547 	.word	0x3ff71547
 8010f04:	f85ddf44 	.word	0xf85ddf44
 8010f08:	3e54ae0b 	.word	0x3e54ae0b
 8010f0c:	3fd00000 	.word	0x3fd00000
 8010f10:	55555555 	.word	0x55555555
 8010f14:	3fd55555 	.word	0x3fd55555
 8010f18:	3fe00000 	.word	0x3fe00000
 8010f1c:	652b82fe 	.word	0x652b82fe
 8010f20:	408fffff 	.word	0x408fffff
 8010f24:	bf700000 	.word	0xbf700000
 8010f28:	4be0      	ldr	r3, [pc, #896]	@ (80112ac <__ieee754_pow+0x7c0>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	423b      	tst	r3, r7
 8010f2e:	d10b      	bne.n	8010f48 <__ieee754_pow+0x45c>
 8010f30:	9800      	ldr	r0, [sp, #0]
 8010f32:	9901      	ldr	r1, [sp, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	4bde      	ldr	r3, [pc, #888]	@ (80112b0 <__ieee754_pow+0x7c4>)
 8010f38:	f7f0 fcb6 	bl	80018a8 <__aeabi_dmul>
 8010f3c:	2235      	movs	r2, #53	@ 0x35
 8010f3e:	9000      	str	r0, [sp, #0]
 8010f40:	9101      	str	r1, [sp, #4]
 8010f42:	9b01      	ldr	r3, [sp, #4]
 8010f44:	4252      	negs	r2, r2
 8010f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f4a:	49da      	ldr	r1, [pc, #872]	@ (80112b4 <__ieee754_pow+0x7c8>)
 8010f4c:	151b      	asrs	r3, r3, #20
 8010f4e:	185b      	adds	r3, r3, r1
 8010f50:	189b      	adds	r3, r3, r2
 8010f52:	930e      	str	r3, [sp, #56]	@ 0x38
 8010f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f56:	4dd8      	ldr	r5, [pc, #864]	@ (80112b8 <__ieee754_pow+0x7cc>)
 8010f58:	031b      	lsls	r3, r3, #12
 8010f5a:	4ad8      	ldr	r2, [pc, #864]	@ (80112bc <__ieee754_pow+0x7d0>)
 8010f5c:	0b1b      	lsrs	r3, r3, #12
 8010f5e:	2600      	movs	r6, #0
 8010f60:	431d      	orrs	r5, r3
 8010f62:	4293      	cmp	r3, r2
 8010f64:	dd09      	ble.n	8010f7a <__ieee754_pow+0x48e>
 8010f66:	4ad6      	ldr	r2, [pc, #856]	@ (80112c0 <__ieee754_pow+0x7d4>)
 8010f68:	3601      	adds	r6, #1
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	dd05      	ble.n	8010f7a <__ieee754_pow+0x48e>
 8010f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f70:	199b      	adds	r3, r3, r6
 8010f72:	2600      	movs	r6, #0
 8010f74:	930e      	str	r3, [sp, #56]	@ 0x38
 8010f76:	4bd3      	ldr	r3, [pc, #844]	@ (80112c4 <__ieee754_pow+0x7d8>)
 8010f78:	18ed      	adds	r5, r5, r3
 8010f7a:	9800      	ldr	r0, [sp, #0]
 8010f7c:	9901      	ldr	r1, [sp, #4]
 8010f7e:	0029      	movs	r1, r5
 8010f80:	4bd1      	ldr	r3, [pc, #836]	@ (80112c8 <__ieee754_pow+0x7dc>)
 8010f82:	00f2      	lsls	r2, r6, #3
 8010f84:	189b      	adds	r3, r3, r2
 8010f86:	685c      	ldr	r4, [r3, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010f8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f90:	001a      	movs	r2, r3
 8010f92:	0023      	movs	r3, r4
 8010f94:	900c      	str	r0, [sp, #48]	@ 0x30
 8010f96:	910d      	str	r1, [sp, #52]	@ 0x34
 8010f98:	f7f0 ff4e 	bl	8001e38 <__aeabi_dsub>
 8010f9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010fa0:	9010      	str	r0, [sp, #64]	@ 0x40
 8010fa2:	9111      	str	r1, [sp, #68]	@ 0x44
 8010fa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010fa6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010fa8:	f7ef fcd6 	bl	8000958 <__aeabi_dadd>
 8010fac:	0002      	movs	r2, r0
 8010fae:	000b      	movs	r3, r1
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	49c1      	ldr	r1, [pc, #772]	@ (80112b8 <__ieee754_pow+0x7cc>)
 8010fb4:	f7f0 f834 	bl	8001020 <__aeabi_ddiv>
 8010fb8:	0002      	movs	r2, r0
 8010fba:	000b      	movs	r3, r1
 8010fbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8010fbe:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010fc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010fc2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010fc4:	f7f0 fc70 	bl	80018a8 <__aeabi_dmul>
 8010fc8:	9006      	str	r0, [sp, #24]
 8010fca:	9107      	str	r1, [sp, #28]
 8010fcc:	9b06      	ldr	r3, [sp, #24]
 8010fce:	9c07      	ldr	r4, [sp, #28]
 8010fd0:	2180      	movs	r1, #128	@ 0x80
 8010fd2:	9304      	str	r3, [sp, #16]
 8010fd4:	9405      	str	r4, [sp, #20]
 8010fd6:	2080      	movs	r0, #128	@ 0x80
 8010fd8:	2300      	movs	r3, #0
 8010fda:	2200      	movs	r2, #0
 8010fdc:	106d      	asrs	r5, r5, #1
 8010fde:	0589      	lsls	r1, r1, #22
 8010fe0:	9304      	str	r3, [sp, #16]
 8010fe2:	4329      	orrs	r1, r5
 8010fe4:	0300      	lsls	r0, r0, #12
 8010fe6:	9b04      	ldr	r3, [sp, #16]
 8010fe8:	9c05      	ldr	r4, [sp, #20]
 8010fea:	1809      	adds	r1, r1, r0
 8010fec:	9300      	str	r3, [sp, #0]
 8010fee:	9401      	str	r4, [sp, #4]
 8010ff0:	04b6      	lsls	r6, r6, #18
 8010ff2:	198b      	adds	r3, r1, r6
 8010ff4:	9800      	ldr	r0, [sp, #0]
 8010ff6:	9901      	ldr	r1, [sp, #4]
 8010ff8:	0014      	movs	r4, r2
 8010ffa:	001d      	movs	r5, r3
 8010ffc:	f7f0 fc54 	bl	80018a8 <__aeabi_dmul>
 8011000:	0002      	movs	r2, r0
 8011002:	000b      	movs	r3, r1
 8011004:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011006:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011008:	f7f0 ff16 	bl	8001e38 <__aeabi_dsub>
 801100c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801100e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011010:	0006      	movs	r6, r0
 8011012:	000f      	movs	r7, r1
 8011014:	0020      	movs	r0, r4
 8011016:	0029      	movs	r1, r5
 8011018:	f7f0 ff0e 	bl	8001e38 <__aeabi_dsub>
 801101c:	0002      	movs	r2, r0
 801101e:	000b      	movs	r3, r1
 8011020:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011022:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011024:	f7f0 ff08 	bl	8001e38 <__aeabi_dsub>
 8011028:	9a00      	ldr	r2, [sp, #0]
 801102a:	9b01      	ldr	r3, [sp, #4]
 801102c:	f7f0 fc3c 	bl	80018a8 <__aeabi_dmul>
 8011030:	0002      	movs	r2, r0
 8011032:	000b      	movs	r3, r1
 8011034:	0030      	movs	r0, r6
 8011036:	0039      	movs	r1, r7
 8011038:	f7f0 fefe 	bl	8001e38 <__aeabi_dsub>
 801103c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801103e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011040:	f7f0 fc32 	bl	80018a8 <__aeabi_dmul>
 8011044:	9a06      	ldr	r2, [sp, #24]
 8011046:	9b07      	ldr	r3, [sp, #28]
 8011048:	900a      	str	r0, [sp, #40]	@ 0x28
 801104a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801104c:	0010      	movs	r0, r2
 801104e:	0019      	movs	r1, r3
 8011050:	f7f0 fc2a 	bl	80018a8 <__aeabi_dmul>
 8011054:	0006      	movs	r6, r0
 8011056:	000f      	movs	r7, r1
 8011058:	4a9c      	ldr	r2, [pc, #624]	@ (80112cc <__ieee754_pow+0x7e0>)
 801105a:	4b9d      	ldr	r3, [pc, #628]	@ (80112d0 <__ieee754_pow+0x7e4>)
 801105c:	f7f0 fc24 	bl	80018a8 <__aeabi_dmul>
 8011060:	4a9c      	ldr	r2, [pc, #624]	@ (80112d4 <__ieee754_pow+0x7e8>)
 8011062:	4b9d      	ldr	r3, [pc, #628]	@ (80112d8 <__ieee754_pow+0x7ec>)
 8011064:	f7ef fc78 	bl	8000958 <__aeabi_dadd>
 8011068:	0032      	movs	r2, r6
 801106a:	003b      	movs	r3, r7
 801106c:	f7f0 fc1c 	bl	80018a8 <__aeabi_dmul>
 8011070:	4a9a      	ldr	r2, [pc, #616]	@ (80112dc <__ieee754_pow+0x7f0>)
 8011072:	4b9b      	ldr	r3, [pc, #620]	@ (80112e0 <__ieee754_pow+0x7f4>)
 8011074:	f7ef fc70 	bl	8000958 <__aeabi_dadd>
 8011078:	0032      	movs	r2, r6
 801107a:	003b      	movs	r3, r7
 801107c:	f7f0 fc14 	bl	80018a8 <__aeabi_dmul>
 8011080:	4a98      	ldr	r2, [pc, #608]	@ (80112e4 <__ieee754_pow+0x7f8>)
 8011082:	4b99      	ldr	r3, [pc, #612]	@ (80112e8 <__ieee754_pow+0x7fc>)
 8011084:	f7ef fc68 	bl	8000958 <__aeabi_dadd>
 8011088:	0032      	movs	r2, r6
 801108a:	003b      	movs	r3, r7
 801108c:	f7f0 fc0c 	bl	80018a8 <__aeabi_dmul>
 8011090:	4a96      	ldr	r2, [pc, #600]	@ (80112ec <__ieee754_pow+0x800>)
 8011092:	4b97      	ldr	r3, [pc, #604]	@ (80112f0 <__ieee754_pow+0x804>)
 8011094:	f7ef fc60 	bl	8000958 <__aeabi_dadd>
 8011098:	0032      	movs	r2, r6
 801109a:	003b      	movs	r3, r7
 801109c:	f7f0 fc04 	bl	80018a8 <__aeabi_dmul>
 80110a0:	4a94      	ldr	r2, [pc, #592]	@ (80112f4 <__ieee754_pow+0x808>)
 80110a2:	4b95      	ldr	r3, [pc, #596]	@ (80112f8 <__ieee754_pow+0x80c>)
 80110a4:	f7ef fc58 	bl	8000958 <__aeabi_dadd>
 80110a8:	0032      	movs	r2, r6
 80110aa:	0004      	movs	r4, r0
 80110ac:	000d      	movs	r5, r1
 80110ae:	003b      	movs	r3, r7
 80110b0:	0030      	movs	r0, r6
 80110b2:	0039      	movs	r1, r7
 80110b4:	f7f0 fbf8 	bl	80018a8 <__aeabi_dmul>
 80110b8:	0002      	movs	r2, r0
 80110ba:	000b      	movs	r3, r1
 80110bc:	0020      	movs	r0, r4
 80110be:	0029      	movs	r1, r5
 80110c0:	f7f0 fbf2 	bl	80018a8 <__aeabi_dmul>
 80110c4:	9a00      	ldr	r2, [sp, #0]
 80110c6:	9b01      	ldr	r3, [sp, #4]
 80110c8:	0004      	movs	r4, r0
 80110ca:	000d      	movs	r5, r1
 80110cc:	9806      	ldr	r0, [sp, #24]
 80110ce:	9907      	ldr	r1, [sp, #28]
 80110d0:	f7ef fc42 	bl	8000958 <__aeabi_dadd>
 80110d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110d8:	f7f0 fbe6 	bl	80018a8 <__aeabi_dmul>
 80110dc:	0022      	movs	r2, r4
 80110de:	002b      	movs	r3, r5
 80110e0:	f7ef fc3a 	bl	8000958 <__aeabi_dadd>
 80110e4:	9a00      	ldr	r2, [sp, #0]
 80110e6:	9b01      	ldr	r3, [sp, #4]
 80110e8:	900c      	str	r0, [sp, #48]	@ 0x30
 80110ea:	910d      	str	r1, [sp, #52]	@ 0x34
 80110ec:	0010      	movs	r0, r2
 80110ee:	0019      	movs	r1, r3
 80110f0:	f7f0 fbda 	bl	80018a8 <__aeabi_dmul>
 80110f4:	2200      	movs	r2, #0
 80110f6:	4b81      	ldr	r3, [pc, #516]	@ (80112fc <__ieee754_pow+0x810>)
 80110f8:	0004      	movs	r4, r0
 80110fa:	000d      	movs	r5, r1
 80110fc:	f7ef fc2c 	bl	8000958 <__aeabi_dadd>
 8011100:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011104:	f7ef fc28 	bl	8000958 <__aeabi_dadd>
 8011108:	2000      	movs	r0, #0
 801110a:	000f      	movs	r7, r1
 801110c:	0006      	movs	r6, r0
 801110e:	0002      	movs	r2, r0
 8011110:	000b      	movs	r3, r1
 8011112:	9800      	ldr	r0, [sp, #0]
 8011114:	9901      	ldr	r1, [sp, #4]
 8011116:	f7f0 fbc7 	bl	80018a8 <__aeabi_dmul>
 801111a:	2200      	movs	r2, #0
 801111c:	9000      	str	r0, [sp, #0]
 801111e:	9101      	str	r1, [sp, #4]
 8011120:	4b76      	ldr	r3, [pc, #472]	@ (80112fc <__ieee754_pow+0x810>)
 8011122:	0030      	movs	r0, r6
 8011124:	0039      	movs	r1, r7
 8011126:	f7f0 fe87 	bl	8001e38 <__aeabi_dsub>
 801112a:	0022      	movs	r2, r4
 801112c:	002b      	movs	r3, r5
 801112e:	f7f0 fe83 	bl	8001e38 <__aeabi_dsub>
 8011132:	0002      	movs	r2, r0
 8011134:	000b      	movs	r3, r1
 8011136:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011138:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801113a:	f7f0 fe7d 	bl	8001e38 <__aeabi_dsub>
 801113e:	9a06      	ldr	r2, [sp, #24]
 8011140:	9b07      	ldr	r3, [sp, #28]
 8011142:	f7f0 fbb1 	bl	80018a8 <__aeabi_dmul>
 8011146:	0032      	movs	r2, r6
 8011148:	0004      	movs	r4, r0
 801114a:	000d      	movs	r5, r1
 801114c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801114e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011150:	003b      	movs	r3, r7
 8011152:	f7f0 fba9 	bl	80018a8 <__aeabi_dmul>
 8011156:	0002      	movs	r2, r0
 8011158:	000b      	movs	r3, r1
 801115a:	0020      	movs	r0, r4
 801115c:	0029      	movs	r1, r5
 801115e:	f7ef fbfb 	bl	8000958 <__aeabi_dadd>
 8011162:	0004      	movs	r4, r0
 8011164:	000d      	movs	r5, r1
 8011166:	0002      	movs	r2, r0
 8011168:	000b      	movs	r3, r1
 801116a:	9800      	ldr	r0, [sp, #0]
 801116c:	9901      	ldr	r1, [sp, #4]
 801116e:	f7ef fbf3 	bl	8000958 <__aeabi_dadd>
 8011172:	22e0      	movs	r2, #224	@ 0xe0
 8011174:	2000      	movs	r0, #0
 8011176:	4b62      	ldr	r3, [pc, #392]	@ (8011300 <__ieee754_pow+0x814>)
 8011178:	0612      	lsls	r2, r2, #24
 801117a:	0006      	movs	r6, r0
 801117c:	000f      	movs	r7, r1
 801117e:	f7f0 fb93 	bl	80018a8 <__aeabi_dmul>
 8011182:	9006      	str	r0, [sp, #24]
 8011184:	9107      	str	r1, [sp, #28]
 8011186:	9a00      	ldr	r2, [sp, #0]
 8011188:	9b01      	ldr	r3, [sp, #4]
 801118a:	0030      	movs	r0, r6
 801118c:	0039      	movs	r1, r7
 801118e:	f7f0 fe53 	bl	8001e38 <__aeabi_dsub>
 8011192:	0002      	movs	r2, r0
 8011194:	000b      	movs	r3, r1
 8011196:	0020      	movs	r0, r4
 8011198:	0029      	movs	r1, r5
 801119a:	f7f0 fe4d 	bl	8001e38 <__aeabi_dsub>
 801119e:	4a59      	ldr	r2, [pc, #356]	@ (8011304 <__ieee754_pow+0x818>)
 80111a0:	4b57      	ldr	r3, [pc, #348]	@ (8011300 <__ieee754_pow+0x814>)
 80111a2:	f7f0 fb81 	bl	80018a8 <__aeabi_dmul>
 80111a6:	4a58      	ldr	r2, [pc, #352]	@ (8011308 <__ieee754_pow+0x81c>)
 80111a8:	0004      	movs	r4, r0
 80111aa:	000d      	movs	r5, r1
 80111ac:	0030      	movs	r0, r6
 80111ae:	0039      	movs	r1, r7
 80111b0:	4b56      	ldr	r3, [pc, #344]	@ (801130c <__ieee754_pow+0x820>)
 80111b2:	f7f0 fb79 	bl	80018a8 <__aeabi_dmul>
 80111b6:	0002      	movs	r2, r0
 80111b8:	000b      	movs	r3, r1
 80111ba:	0020      	movs	r0, r4
 80111bc:	0029      	movs	r1, r5
 80111be:	f7ef fbcb 	bl	8000958 <__aeabi_dadd>
 80111c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80111c4:	4b52      	ldr	r3, [pc, #328]	@ (8011310 <__ieee754_pow+0x824>)
 80111c6:	189b      	adds	r3, r3, r2
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	f7ef fbc4 	bl	8000958 <__aeabi_dadd>
 80111d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80111d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80111d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80111d6:	f7f1 fa29 	bl	800262c <__aeabi_i2d>
 80111da:	0004      	movs	r4, r0
 80111dc:	000d      	movs	r5, r1
 80111de:	9806      	ldr	r0, [sp, #24]
 80111e0:	9907      	ldr	r1, [sp, #28]
 80111e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80111e4:	4b4b      	ldr	r3, [pc, #300]	@ (8011314 <__ieee754_pow+0x828>)
 80111e6:	189b      	adds	r3, r3, r2
 80111e8:	681e      	ldr	r6, [r3, #0]
 80111ea:	685f      	ldr	r7, [r3, #4]
 80111ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80111ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111f0:	f7ef fbb2 	bl	8000958 <__aeabi_dadd>
 80111f4:	0032      	movs	r2, r6
 80111f6:	003b      	movs	r3, r7
 80111f8:	f7ef fbae 	bl	8000958 <__aeabi_dadd>
 80111fc:	0022      	movs	r2, r4
 80111fe:	002b      	movs	r3, r5
 8011200:	f7ef fbaa 	bl	8000958 <__aeabi_dadd>
 8011204:	2000      	movs	r0, #0
 8011206:	0022      	movs	r2, r4
 8011208:	002b      	movs	r3, r5
 801120a:	9000      	str	r0, [sp, #0]
 801120c:	9101      	str	r1, [sp, #4]
 801120e:	f7f0 fe13 	bl	8001e38 <__aeabi_dsub>
 8011212:	0032      	movs	r2, r6
 8011214:	003b      	movs	r3, r7
 8011216:	f7f0 fe0f 	bl	8001e38 <__aeabi_dsub>
 801121a:	9a06      	ldr	r2, [sp, #24]
 801121c:	9b07      	ldr	r3, [sp, #28]
 801121e:	f7f0 fe0b 	bl	8001e38 <__aeabi_dsub>
 8011222:	0002      	movs	r2, r0
 8011224:	000b      	movs	r3, r1
 8011226:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801122a:	e61c      	b.n	8010e66 <__ieee754_pow+0x37a>
 801122c:	4a3a      	ldr	r2, [pc, #232]	@ (8011318 <__ieee754_pow+0x82c>)
 801122e:	4b3b      	ldr	r3, [pc, #236]	@ (801131c <__ieee754_pow+0x830>)
 8011230:	9802      	ldr	r0, [sp, #8]
 8011232:	9903      	ldr	r1, [sp, #12]
 8011234:	f7ef fb90 	bl	8000958 <__aeabi_dadd>
 8011238:	0032      	movs	r2, r6
 801123a:	003b      	movs	r3, r7
 801123c:	9004      	str	r0, [sp, #16]
 801123e:	9105      	str	r1, [sp, #20]
 8011240:	9800      	ldr	r0, [sp, #0]
 8011242:	9901      	ldr	r1, [sp, #4]
 8011244:	f7f0 fdf8 	bl	8001e38 <__aeabi_dsub>
 8011248:	0002      	movs	r2, r0
 801124a:	000b      	movs	r3, r1
 801124c:	9804      	ldr	r0, [sp, #16]
 801124e:	9905      	ldr	r1, [sp, #20]
 8011250:	f7ef f916 	bl	8000480 <__aeabi_dcmpgt>
 8011254:	2800      	cmp	r0, #0
 8011256:	d000      	beq.n	801125a <__ieee754_pow+0x76e>
 8011258:	e647      	b.n	8010eea <__ieee754_pow+0x3fe>
 801125a:	2580      	movs	r5, #128	@ 0x80
 801125c:	4b30      	ldr	r3, [pc, #192]	@ (8011320 <__ieee754_pow+0x834>)
 801125e:	036d      	lsls	r5, r5, #13
 8011260:	1524      	asrs	r4, r4, #20
 8011262:	18e4      	adds	r4, r4, r3
 8011264:	002b      	movs	r3, r5
 8011266:	4123      	asrs	r3, r4
 8011268:	9a06      	ldr	r2, [sp, #24]
 801126a:	4912      	ldr	r1, [pc, #72]	@ (80112b4 <__ieee754_pow+0x7c8>)
 801126c:	189b      	adds	r3, r3, r2
 801126e:	005a      	lsls	r2, r3, #1
 8011270:	4c14      	ldr	r4, [pc, #80]	@ (80112c4 <__ieee754_pow+0x7d8>)
 8011272:	0d52      	lsrs	r2, r2, #21
 8011274:	1852      	adds	r2, r2, r1
 8011276:	4114      	asrs	r4, r2
 8011278:	401c      	ands	r4, r3
 801127a:	0021      	movs	r1, r4
 801127c:	2414      	movs	r4, #20
 801127e:	031b      	lsls	r3, r3, #12
 8011280:	0b1b      	lsrs	r3, r3, #12
 8011282:	432b      	orrs	r3, r5
 8011284:	1aa2      	subs	r2, r4, r2
 8011286:	4113      	asrs	r3, r2
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	9b06      	ldr	r3, [sp, #24]
 801128c:	2000      	movs	r0, #0
 801128e:	2b00      	cmp	r3, #0
 8011290:	da02      	bge.n	8011298 <__ieee754_pow+0x7ac>
 8011292:	9b00      	ldr	r3, [sp, #0]
 8011294:	425b      	negs	r3, r3
 8011296:	9300      	str	r3, [sp, #0]
 8011298:	0002      	movs	r2, r0
 801129a:	000b      	movs	r3, r1
 801129c:	0030      	movs	r0, r6
 801129e:	0039      	movs	r1, r7
 80112a0:	f7f0 fdca 	bl	8001e38 <__aeabi_dsub>
 80112a4:	0006      	movs	r6, r0
 80112a6:	000f      	movs	r7, r1
 80112a8:	e065      	b.n	8011376 <__ieee754_pow+0x88a>
 80112aa:	46c0      	nop			@ (mov r8, r8)
 80112ac:	7ff00000 	.word	0x7ff00000
 80112b0:	43400000 	.word	0x43400000
 80112b4:	fffffc01 	.word	0xfffffc01
 80112b8:	3ff00000 	.word	0x3ff00000
 80112bc:	0003988e 	.word	0x0003988e
 80112c0:	000bb679 	.word	0x000bb679
 80112c4:	fff00000 	.word	0xfff00000
 80112c8:	080126a8 	.word	0x080126a8
 80112cc:	4a454eef 	.word	0x4a454eef
 80112d0:	3fca7e28 	.word	0x3fca7e28
 80112d4:	93c9db65 	.word	0x93c9db65
 80112d8:	3fcd864a 	.word	0x3fcd864a
 80112dc:	a91d4101 	.word	0xa91d4101
 80112e0:	3fd17460 	.word	0x3fd17460
 80112e4:	518f264d 	.word	0x518f264d
 80112e8:	3fd55555 	.word	0x3fd55555
 80112ec:	db6fabff 	.word	0xdb6fabff
 80112f0:	3fdb6db6 	.word	0x3fdb6db6
 80112f4:	33333303 	.word	0x33333303
 80112f8:	3fe33333 	.word	0x3fe33333
 80112fc:	40080000 	.word	0x40080000
 8011300:	3feec709 	.word	0x3feec709
 8011304:	dc3a03fd 	.word	0xdc3a03fd
 8011308:	145b01f5 	.word	0x145b01f5
 801130c:	be3e2fe0 	.word	0xbe3e2fe0
 8011310:	08012688 	.word	0x08012688
 8011314:	08012698 	.word	0x08012698
 8011318:	652b82fe 	.word	0x652b82fe
 801131c:	3c971547 	.word	0x3c971547
 8011320:	fffffc02 	.word	0xfffffc02
 8011324:	9b01      	ldr	r3, [sp, #4]
 8011326:	005c      	lsls	r4, r3, #1
 8011328:	4b72      	ldr	r3, [pc, #456]	@ (80114f4 <__ieee754_pow+0xa08>)
 801132a:	0864      	lsrs	r4, r4, #1
 801132c:	429c      	cmp	r4, r3
 801132e:	d91c      	bls.n	801136a <__ieee754_pow+0x87e>
 8011330:	4a71      	ldr	r2, [pc, #452]	@ (80114f8 <__ieee754_pow+0xa0c>)
 8011332:	9b01      	ldr	r3, [sp, #4]
 8011334:	189b      	adds	r3, r3, r2
 8011336:	9a00      	ldr	r2, [sp, #0]
 8011338:	4313      	orrs	r3, r2
 801133a:	d008      	beq.n	801134e <__ieee754_pow+0x862>
 801133c:	9808      	ldr	r0, [sp, #32]
 801133e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011340:	2300      	movs	r3, #0
 8011342:	2200      	movs	r2, #0
 8011344:	f7ef f888 	bl	8000458 <__aeabi_dcmplt>
 8011348:	1e43      	subs	r3, r0, #1
 801134a:	4198      	sbcs	r0, r3
 801134c:	e4fc      	b.n	8010d48 <__ieee754_pow+0x25c>
 801134e:	0032      	movs	r2, r6
 8011350:	9800      	ldr	r0, [sp, #0]
 8011352:	9901      	ldr	r1, [sp, #4]
 8011354:	003b      	movs	r3, r7
 8011356:	f7f0 fd6f 	bl	8001e38 <__aeabi_dsub>
 801135a:	9a02      	ldr	r2, [sp, #8]
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	f7ef f899 	bl	8000494 <__aeabi_dcmpge>
 8011362:	2800      	cmp	r0, #0
 8011364:	d1ea      	bne.n	801133c <__ieee754_pow+0x850>
 8011366:	4c65      	ldr	r4, [pc, #404]	@ (80114fc <__ieee754_pow+0xa10>)
 8011368:	e777      	b.n	801125a <__ieee754_pow+0x76e>
 801136a:	9a04      	ldr	r2, [sp, #16]
 801136c:	4b64      	ldr	r3, [pc, #400]	@ (8011500 <__ieee754_pow+0xa14>)
 801136e:	9200      	str	r2, [sp, #0]
 8011370:	429c      	cmp	r4, r3
 8011372:	d900      	bls.n	8011376 <__ieee754_pow+0x88a>
 8011374:	e771      	b.n	801125a <__ieee754_pow+0x76e>
 8011376:	9a02      	ldr	r2, [sp, #8]
 8011378:	9b03      	ldr	r3, [sp, #12]
 801137a:	0030      	movs	r0, r6
 801137c:	0039      	movs	r1, r7
 801137e:	f7ef faeb 	bl	8000958 <__aeabi_dadd>
 8011382:	2000      	movs	r0, #0
 8011384:	2200      	movs	r2, #0
 8011386:	4b5f      	ldr	r3, [pc, #380]	@ (8011504 <__ieee754_pow+0xa18>)
 8011388:	9004      	str	r0, [sp, #16]
 801138a:	9105      	str	r1, [sp, #20]
 801138c:	f7f0 fa8c 	bl	80018a8 <__aeabi_dmul>
 8011390:	0032      	movs	r2, r6
 8011392:	003b      	movs	r3, r7
 8011394:	9006      	str	r0, [sp, #24]
 8011396:	9107      	str	r1, [sp, #28]
 8011398:	9804      	ldr	r0, [sp, #16]
 801139a:	9905      	ldr	r1, [sp, #20]
 801139c:	f7f0 fd4c 	bl	8001e38 <__aeabi_dsub>
 80113a0:	0002      	movs	r2, r0
 80113a2:	000b      	movs	r3, r1
 80113a4:	9802      	ldr	r0, [sp, #8]
 80113a6:	9903      	ldr	r1, [sp, #12]
 80113a8:	f7f0 fd46 	bl	8001e38 <__aeabi_dsub>
 80113ac:	4a56      	ldr	r2, [pc, #344]	@ (8011508 <__ieee754_pow+0xa1c>)
 80113ae:	4b57      	ldr	r3, [pc, #348]	@ (801150c <__ieee754_pow+0xa20>)
 80113b0:	f7f0 fa7a 	bl	80018a8 <__aeabi_dmul>
 80113b4:	4a56      	ldr	r2, [pc, #344]	@ (8011510 <__ieee754_pow+0xa24>)
 80113b6:	0004      	movs	r4, r0
 80113b8:	000d      	movs	r5, r1
 80113ba:	9804      	ldr	r0, [sp, #16]
 80113bc:	9905      	ldr	r1, [sp, #20]
 80113be:	4b55      	ldr	r3, [pc, #340]	@ (8011514 <__ieee754_pow+0xa28>)
 80113c0:	f7f0 fa72 	bl	80018a8 <__aeabi_dmul>
 80113c4:	0002      	movs	r2, r0
 80113c6:	000b      	movs	r3, r1
 80113c8:	0020      	movs	r0, r4
 80113ca:	0029      	movs	r1, r5
 80113cc:	f7ef fac4 	bl	8000958 <__aeabi_dadd>
 80113d0:	0004      	movs	r4, r0
 80113d2:	000d      	movs	r5, r1
 80113d4:	0002      	movs	r2, r0
 80113d6:	000b      	movs	r3, r1
 80113d8:	9806      	ldr	r0, [sp, #24]
 80113da:	9907      	ldr	r1, [sp, #28]
 80113dc:	f7ef fabc 	bl	8000958 <__aeabi_dadd>
 80113e0:	9a06      	ldr	r2, [sp, #24]
 80113e2:	9b07      	ldr	r3, [sp, #28]
 80113e4:	0006      	movs	r6, r0
 80113e6:	000f      	movs	r7, r1
 80113e8:	f7f0 fd26 	bl	8001e38 <__aeabi_dsub>
 80113ec:	0002      	movs	r2, r0
 80113ee:	000b      	movs	r3, r1
 80113f0:	0020      	movs	r0, r4
 80113f2:	0029      	movs	r1, r5
 80113f4:	f7f0 fd20 	bl	8001e38 <__aeabi_dsub>
 80113f8:	0032      	movs	r2, r6
 80113fa:	9002      	str	r0, [sp, #8]
 80113fc:	9103      	str	r1, [sp, #12]
 80113fe:	003b      	movs	r3, r7
 8011400:	0030      	movs	r0, r6
 8011402:	0039      	movs	r1, r7
 8011404:	f7f0 fa50 	bl	80018a8 <__aeabi_dmul>
 8011408:	0004      	movs	r4, r0
 801140a:	000d      	movs	r5, r1
 801140c:	4a42      	ldr	r2, [pc, #264]	@ (8011518 <__ieee754_pow+0xa2c>)
 801140e:	4b43      	ldr	r3, [pc, #268]	@ (801151c <__ieee754_pow+0xa30>)
 8011410:	f7f0 fa4a 	bl	80018a8 <__aeabi_dmul>
 8011414:	4a42      	ldr	r2, [pc, #264]	@ (8011520 <__ieee754_pow+0xa34>)
 8011416:	4b43      	ldr	r3, [pc, #268]	@ (8011524 <__ieee754_pow+0xa38>)
 8011418:	f7f0 fd0e 	bl	8001e38 <__aeabi_dsub>
 801141c:	0022      	movs	r2, r4
 801141e:	002b      	movs	r3, r5
 8011420:	f7f0 fa42 	bl	80018a8 <__aeabi_dmul>
 8011424:	4a40      	ldr	r2, [pc, #256]	@ (8011528 <__ieee754_pow+0xa3c>)
 8011426:	4b41      	ldr	r3, [pc, #260]	@ (801152c <__ieee754_pow+0xa40>)
 8011428:	f7ef fa96 	bl	8000958 <__aeabi_dadd>
 801142c:	0022      	movs	r2, r4
 801142e:	002b      	movs	r3, r5
 8011430:	f7f0 fa3a 	bl	80018a8 <__aeabi_dmul>
 8011434:	4a3e      	ldr	r2, [pc, #248]	@ (8011530 <__ieee754_pow+0xa44>)
 8011436:	4b3f      	ldr	r3, [pc, #252]	@ (8011534 <__ieee754_pow+0xa48>)
 8011438:	f7f0 fcfe 	bl	8001e38 <__aeabi_dsub>
 801143c:	0022      	movs	r2, r4
 801143e:	002b      	movs	r3, r5
 8011440:	f7f0 fa32 	bl	80018a8 <__aeabi_dmul>
 8011444:	4a3c      	ldr	r2, [pc, #240]	@ (8011538 <__ieee754_pow+0xa4c>)
 8011446:	4b3d      	ldr	r3, [pc, #244]	@ (801153c <__ieee754_pow+0xa50>)
 8011448:	f7ef fa86 	bl	8000958 <__aeabi_dadd>
 801144c:	0022      	movs	r2, r4
 801144e:	002b      	movs	r3, r5
 8011450:	f7f0 fa2a 	bl	80018a8 <__aeabi_dmul>
 8011454:	0002      	movs	r2, r0
 8011456:	000b      	movs	r3, r1
 8011458:	0030      	movs	r0, r6
 801145a:	0039      	movs	r1, r7
 801145c:	f7f0 fcec 	bl	8001e38 <__aeabi_dsub>
 8011460:	0004      	movs	r4, r0
 8011462:	000d      	movs	r5, r1
 8011464:	0002      	movs	r2, r0
 8011466:	000b      	movs	r3, r1
 8011468:	0030      	movs	r0, r6
 801146a:	0039      	movs	r1, r7
 801146c:	f7f0 fa1c 	bl	80018a8 <__aeabi_dmul>
 8011470:	2380      	movs	r3, #128	@ 0x80
 8011472:	9004      	str	r0, [sp, #16]
 8011474:	9105      	str	r1, [sp, #20]
 8011476:	2200      	movs	r2, #0
 8011478:	0020      	movs	r0, r4
 801147a:	0029      	movs	r1, r5
 801147c:	05db      	lsls	r3, r3, #23
 801147e:	f7f0 fcdb 	bl	8001e38 <__aeabi_dsub>
 8011482:	0002      	movs	r2, r0
 8011484:	000b      	movs	r3, r1
 8011486:	9804      	ldr	r0, [sp, #16]
 8011488:	9905      	ldr	r1, [sp, #20]
 801148a:	f7ef fdc9 	bl	8001020 <__aeabi_ddiv>
 801148e:	9a02      	ldr	r2, [sp, #8]
 8011490:	9b03      	ldr	r3, [sp, #12]
 8011492:	0004      	movs	r4, r0
 8011494:	000d      	movs	r5, r1
 8011496:	0030      	movs	r0, r6
 8011498:	0039      	movs	r1, r7
 801149a:	f7f0 fa05 	bl	80018a8 <__aeabi_dmul>
 801149e:	9a02      	ldr	r2, [sp, #8]
 80114a0:	9b03      	ldr	r3, [sp, #12]
 80114a2:	f7ef fa59 	bl	8000958 <__aeabi_dadd>
 80114a6:	0002      	movs	r2, r0
 80114a8:	000b      	movs	r3, r1
 80114aa:	0020      	movs	r0, r4
 80114ac:	0029      	movs	r1, r5
 80114ae:	f7f0 fcc3 	bl	8001e38 <__aeabi_dsub>
 80114b2:	0032      	movs	r2, r6
 80114b4:	003b      	movs	r3, r7
 80114b6:	f7f0 fcbf 	bl	8001e38 <__aeabi_dsub>
 80114ba:	0002      	movs	r2, r0
 80114bc:	000b      	movs	r3, r1
 80114be:	2000      	movs	r0, #0
 80114c0:	491f      	ldr	r1, [pc, #124]	@ (8011540 <__ieee754_pow+0xa54>)
 80114c2:	f7f0 fcb9 	bl	8001e38 <__aeabi_dsub>
 80114c6:	9b00      	ldr	r3, [sp, #0]
 80114c8:	051b      	lsls	r3, r3, #20
 80114ca:	185b      	adds	r3, r3, r1
 80114cc:	151a      	asrs	r2, r3, #20
 80114ce:	2a00      	cmp	r2, #0
 80114d0:	dc06      	bgt.n	80114e0 <__ieee754_pow+0x9f4>
 80114d2:	9a00      	ldr	r2, [sp, #0]
 80114d4:	f000 f83a 	bl	801154c <scalbn>
 80114d8:	9a08      	ldr	r2, [sp, #32]
 80114da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114dc:	f7ff fbee 	bl	8010cbc <__ieee754_pow+0x1d0>
 80114e0:	0019      	movs	r1, r3
 80114e2:	e7f9      	b.n	80114d8 <__ieee754_pow+0x9ec>
 80114e4:	2300      	movs	r3, #0
 80114e6:	4c16      	ldr	r4, [pc, #88]	@ (8011540 <__ieee754_pow+0xa54>)
 80114e8:	f7ff fbcb 	bl	8010c82 <__ieee754_pow+0x196>
 80114ec:	2300      	movs	r3, #0
 80114ee:	2400      	movs	r4, #0
 80114f0:	f7ff fbc7 	bl	8010c82 <__ieee754_pow+0x196>
 80114f4:	4090cbff 	.word	0x4090cbff
 80114f8:	3f6f3400 	.word	0x3f6f3400
 80114fc:	4090cc00 	.word	0x4090cc00
 8011500:	3fe00000 	.word	0x3fe00000
 8011504:	3fe62e43 	.word	0x3fe62e43
 8011508:	fefa39ef 	.word	0xfefa39ef
 801150c:	3fe62e42 	.word	0x3fe62e42
 8011510:	0ca86c39 	.word	0x0ca86c39
 8011514:	be205c61 	.word	0xbe205c61
 8011518:	72bea4d0 	.word	0x72bea4d0
 801151c:	3e663769 	.word	0x3e663769
 8011520:	c5d26bf1 	.word	0xc5d26bf1
 8011524:	3ebbbd41 	.word	0x3ebbbd41
 8011528:	af25de2c 	.word	0xaf25de2c
 801152c:	3f11566a 	.word	0x3f11566a
 8011530:	16bebd93 	.word	0x16bebd93
 8011534:	3f66c16c 	.word	0x3f66c16c
 8011538:	5555553e 	.word	0x5555553e
 801153c:	3fc55555 	.word	0x3fc55555
 8011540:	3ff00000 	.word	0x3ff00000

08011544 <fabs>:
 8011544:	0049      	lsls	r1, r1, #1
 8011546:	084b      	lsrs	r3, r1, #1
 8011548:	0019      	movs	r1, r3
 801154a:	4770      	bx	lr

0801154c <scalbn>:
 801154c:	004b      	lsls	r3, r1, #1
 801154e:	b570      	push	{r4, r5, r6, lr}
 8011550:	0d5b      	lsrs	r3, r3, #21
 8011552:	0014      	movs	r4, r2
 8011554:	000d      	movs	r5, r1
 8011556:	2b00      	cmp	r3, #0
 8011558:	d10f      	bne.n	801157a <scalbn+0x2e>
 801155a:	004b      	lsls	r3, r1, #1
 801155c:	085b      	lsrs	r3, r3, #1
 801155e:	4303      	orrs	r3, r0
 8011560:	d012      	beq.n	8011588 <scalbn+0x3c>
 8011562:	4b23      	ldr	r3, [pc, #140]	@ (80115f0 <scalbn+0xa4>)
 8011564:	2200      	movs	r2, #0
 8011566:	f7f0 f99f 	bl	80018a8 <__aeabi_dmul>
 801156a:	4b22      	ldr	r3, [pc, #136]	@ (80115f4 <scalbn+0xa8>)
 801156c:	429c      	cmp	r4, r3
 801156e:	da0c      	bge.n	801158a <scalbn+0x3e>
 8011570:	4a21      	ldr	r2, [pc, #132]	@ (80115f8 <scalbn+0xac>)
 8011572:	4b22      	ldr	r3, [pc, #136]	@ (80115fc <scalbn+0xb0>)
 8011574:	f7f0 f998 	bl	80018a8 <__aeabi_dmul>
 8011578:	e006      	b.n	8011588 <scalbn+0x3c>
 801157a:	4a21      	ldr	r2, [pc, #132]	@ (8011600 <scalbn+0xb4>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d108      	bne.n	8011592 <scalbn+0x46>
 8011580:	0002      	movs	r2, r0
 8011582:	000b      	movs	r3, r1
 8011584:	f7ef f9e8 	bl	8000958 <__aeabi_dadd>
 8011588:	bd70      	pop	{r4, r5, r6, pc}
 801158a:	000d      	movs	r5, r1
 801158c:	004b      	lsls	r3, r1, #1
 801158e:	0d5b      	lsrs	r3, r3, #21
 8011590:	3b36      	subs	r3, #54	@ 0x36
 8011592:	4a1c      	ldr	r2, [pc, #112]	@ (8011604 <scalbn+0xb8>)
 8011594:	4294      	cmp	r4, r2
 8011596:	dd0a      	ble.n	80115ae <scalbn+0x62>
 8011598:	4c1b      	ldr	r4, [pc, #108]	@ (8011608 <scalbn+0xbc>)
 801159a:	4d1c      	ldr	r5, [pc, #112]	@ (801160c <scalbn+0xc0>)
 801159c:	2900      	cmp	r1, #0
 801159e:	da01      	bge.n	80115a4 <scalbn+0x58>
 80115a0:	4c19      	ldr	r4, [pc, #100]	@ (8011608 <scalbn+0xbc>)
 80115a2:	4d1b      	ldr	r5, [pc, #108]	@ (8011610 <scalbn+0xc4>)
 80115a4:	4a18      	ldr	r2, [pc, #96]	@ (8011608 <scalbn+0xbc>)
 80115a6:	4b19      	ldr	r3, [pc, #100]	@ (801160c <scalbn+0xc0>)
 80115a8:	0020      	movs	r0, r4
 80115aa:	0029      	movs	r1, r5
 80115ac:	e7e2      	b.n	8011574 <scalbn+0x28>
 80115ae:	18e2      	adds	r2, r4, r3
 80115b0:	4b18      	ldr	r3, [pc, #96]	@ (8011614 <scalbn+0xc8>)
 80115b2:	429a      	cmp	r2, r3
 80115b4:	dcf0      	bgt.n	8011598 <scalbn+0x4c>
 80115b6:	2a00      	cmp	r2, #0
 80115b8:	dd05      	ble.n	80115c6 <scalbn+0x7a>
 80115ba:	4b17      	ldr	r3, [pc, #92]	@ (8011618 <scalbn+0xcc>)
 80115bc:	0512      	lsls	r2, r2, #20
 80115be:	402b      	ands	r3, r5
 80115c0:	431a      	orrs	r2, r3
 80115c2:	0011      	movs	r1, r2
 80115c4:	e7e0      	b.n	8011588 <scalbn+0x3c>
 80115c6:	0013      	movs	r3, r2
 80115c8:	3335      	adds	r3, #53	@ 0x35
 80115ca:	da08      	bge.n	80115de <scalbn+0x92>
 80115cc:	4c0a      	ldr	r4, [pc, #40]	@ (80115f8 <scalbn+0xac>)
 80115ce:	4d0b      	ldr	r5, [pc, #44]	@ (80115fc <scalbn+0xb0>)
 80115d0:	2900      	cmp	r1, #0
 80115d2:	da01      	bge.n	80115d8 <scalbn+0x8c>
 80115d4:	4c08      	ldr	r4, [pc, #32]	@ (80115f8 <scalbn+0xac>)
 80115d6:	4d11      	ldr	r5, [pc, #68]	@ (801161c <scalbn+0xd0>)
 80115d8:	4a07      	ldr	r2, [pc, #28]	@ (80115f8 <scalbn+0xac>)
 80115da:	4b08      	ldr	r3, [pc, #32]	@ (80115fc <scalbn+0xb0>)
 80115dc:	e7e4      	b.n	80115a8 <scalbn+0x5c>
 80115de:	4b0e      	ldr	r3, [pc, #56]	@ (8011618 <scalbn+0xcc>)
 80115e0:	3236      	adds	r2, #54	@ 0x36
 80115e2:	401d      	ands	r5, r3
 80115e4:	0512      	lsls	r2, r2, #20
 80115e6:	432a      	orrs	r2, r5
 80115e8:	0011      	movs	r1, r2
 80115ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011620 <scalbn+0xd4>)
 80115ec:	2200      	movs	r2, #0
 80115ee:	e7c1      	b.n	8011574 <scalbn+0x28>
 80115f0:	43500000 	.word	0x43500000
 80115f4:	ffff3cb0 	.word	0xffff3cb0
 80115f8:	c2f8f359 	.word	0xc2f8f359
 80115fc:	01a56e1f 	.word	0x01a56e1f
 8011600:	000007ff 	.word	0x000007ff
 8011604:	0000c350 	.word	0x0000c350
 8011608:	8800759c 	.word	0x8800759c
 801160c:	7e37e43c 	.word	0x7e37e43c
 8011610:	fe37e43c 	.word	0xfe37e43c
 8011614:	000007fe 	.word	0x000007fe
 8011618:	800fffff 	.word	0x800fffff
 801161c:	81a56e1f 	.word	0x81a56e1f
 8011620:	3c900000 	.word	0x3c900000

08011624 <with_errno>:
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	000d      	movs	r5, r1
 8011628:	0016      	movs	r6, r2
 801162a:	0004      	movs	r4, r0
 801162c:	f7fc fcc6 	bl	800dfbc <__errno>
 8011630:	0029      	movs	r1, r5
 8011632:	6006      	str	r6, [r0, #0]
 8011634:	0020      	movs	r0, r4
 8011636:	bd70      	pop	{r4, r5, r6, pc}

08011638 <xflow>:
 8011638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801163a:	0014      	movs	r4, r2
 801163c:	001d      	movs	r5, r3
 801163e:	2800      	cmp	r0, #0
 8011640:	d002      	beq.n	8011648 <xflow+0x10>
 8011642:	2180      	movs	r1, #128	@ 0x80
 8011644:	0609      	lsls	r1, r1, #24
 8011646:	185b      	adds	r3, r3, r1
 8011648:	9200      	str	r2, [sp, #0]
 801164a:	9301      	str	r3, [sp, #4]
 801164c:	9a00      	ldr	r2, [sp, #0]
 801164e:	9b01      	ldr	r3, [sp, #4]
 8011650:	0020      	movs	r0, r4
 8011652:	0029      	movs	r1, r5
 8011654:	f7f0 f928 	bl	80018a8 <__aeabi_dmul>
 8011658:	2222      	movs	r2, #34	@ 0x22
 801165a:	f7ff ffe3 	bl	8011624 <with_errno>
 801165e:	b003      	add	sp, #12
 8011660:	bd30      	pop	{r4, r5, pc}

08011662 <__math_uflow>:
 8011662:	2380      	movs	r3, #128	@ 0x80
 8011664:	b510      	push	{r4, lr}
 8011666:	2200      	movs	r2, #0
 8011668:	055b      	lsls	r3, r3, #21
 801166a:	f7ff ffe5 	bl	8011638 <xflow>
 801166e:	bd10      	pop	{r4, pc}

08011670 <__math_oflow>:
 8011670:	23e0      	movs	r3, #224	@ 0xe0
 8011672:	b510      	push	{r4, lr}
 8011674:	2200      	movs	r2, #0
 8011676:	05db      	lsls	r3, r3, #23
 8011678:	f7ff ffde 	bl	8011638 <xflow>
 801167c:	bd10      	pop	{r4, pc}
	...

08011680 <__ieee754_sqrt>:
 8011680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011682:	000a      	movs	r2, r1
 8011684:	000d      	movs	r5, r1
 8011686:	496d      	ldr	r1, [pc, #436]	@ (801183c <__ieee754_sqrt+0x1bc>)
 8011688:	0004      	movs	r4, r0
 801168a:	0003      	movs	r3, r0
 801168c:	0008      	movs	r0, r1
 801168e:	b087      	sub	sp, #28
 8011690:	4028      	ands	r0, r5
 8011692:	4288      	cmp	r0, r1
 8011694:	d111      	bne.n	80116ba <__ieee754_sqrt+0x3a>
 8011696:	0022      	movs	r2, r4
 8011698:	002b      	movs	r3, r5
 801169a:	0020      	movs	r0, r4
 801169c:	0029      	movs	r1, r5
 801169e:	f7f0 f903 	bl	80018a8 <__aeabi_dmul>
 80116a2:	0002      	movs	r2, r0
 80116a4:	000b      	movs	r3, r1
 80116a6:	0020      	movs	r0, r4
 80116a8:	0029      	movs	r1, r5
 80116aa:	f7ef f955 	bl	8000958 <__aeabi_dadd>
 80116ae:	0004      	movs	r4, r0
 80116b0:	000d      	movs	r5, r1
 80116b2:	0020      	movs	r0, r4
 80116b4:	0029      	movs	r1, r5
 80116b6:	b007      	add	sp, #28
 80116b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116ba:	2d00      	cmp	r5, #0
 80116bc:	dc11      	bgt.n	80116e2 <__ieee754_sqrt+0x62>
 80116be:	0069      	lsls	r1, r5, #1
 80116c0:	0849      	lsrs	r1, r1, #1
 80116c2:	4321      	orrs	r1, r4
 80116c4:	d0f5      	beq.n	80116b2 <__ieee754_sqrt+0x32>
 80116c6:	2000      	movs	r0, #0
 80116c8:	4285      	cmp	r5, r0
 80116ca:	d010      	beq.n	80116ee <__ieee754_sqrt+0x6e>
 80116cc:	0022      	movs	r2, r4
 80116ce:	002b      	movs	r3, r5
 80116d0:	0020      	movs	r0, r4
 80116d2:	0029      	movs	r1, r5
 80116d4:	f7f0 fbb0 	bl	8001e38 <__aeabi_dsub>
 80116d8:	0002      	movs	r2, r0
 80116da:	000b      	movs	r3, r1
 80116dc:	f7ef fca0 	bl	8001020 <__aeabi_ddiv>
 80116e0:	e7e5      	b.n	80116ae <__ieee754_sqrt+0x2e>
 80116e2:	1528      	asrs	r0, r5, #20
 80116e4:	d115      	bne.n	8011712 <__ieee754_sqrt+0x92>
 80116e6:	2480      	movs	r4, #128	@ 0x80
 80116e8:	2100      	movs	r1, #0
 80116ea:	0364      	lsls	r4, r4, #13
 80116ec:	e007      	b.n	80116fe <__ieee754_sqrt+0x7e>
 80116ee:	0ada      	lsrs	r2, r3, #11
 80116f0:	3815      	subs	r0, #21
 80116f2:	055b      	lsls	r3, r3, #21
 80116f4:	2a00      	cmp	r2, #0
 80116f6:	d0fa      	beq.n	80116ee <__ieee754_sqrt+0x6e>
 80116f8:	e7f5      	b.n	80116e6 <__ieee754_sqrt+0x66>
 80116fa:	0052      	lsls	r2, r2, #1
 80116fc:	3101      	adds	r1, #1
 80116fe:	4222      	tst	r2, r4
 8011700:	d0fb      	beq.n	80116fa <__ieee754_sqrt+0x7a>
 8011702:	1e4c      	subs	r4, r1, #1
 8011704:	1b00      	subs	r0, r0, r4
 8011706:	2420      	movs	r4, #32
 8011708:	001d      	movs	r5, r3
 801170a:	1a64      	subs	r4, r4, r1
 801170c:	40e5      	lsrs	r5, r4
 801170e:	408b      	lsls	r3, r1
 8011710:	432a      	orrs	r2, r5
 8011712:	494b      	ldr	r1, [pc, #300]	@ (8011840 <__ieee754_sqrt+0x1c0>)
 8011714:	0312      	lsls	r2, r2, #12
 8011716:	1844      	adds	r4, r0, r1
 8011718:	2180      	movs	r1, #128	@ 0x80
 801171a:	0b12      	lsrs	r2, r2, #12
 801171c:	0349      	lsls	r1, r1, #13
 801171e:	4311      	orrs	r1, r2
 8011720:	07c0      	lsls	r0, r0, #31
 8011722:	d403      	bmi.n	801172c <__ieee754_sqrt+0xac>
 8011724:	0fda      	lsrs	r2, r3, #31
 8011726:	0049      	lsls	r1, r1, #1
 8011728:	1851      	adds	r1, r2, r1
 801172a:	005b      	lsls	r3, r3, #1
 801172c:	2500      	movs	r5, #0
 801172e:	1062      	asrs	r2, r4, #1
 8011730:	0049      	lsls	r1, r1, #1
 8011732:	2480      	movs	r4, #128	@ 0x80
 8011734:	9205      	str	r2, [sp, #20]
 8011736:	0fda      	lsrs	r2, r3, #31
 8011738:	1852      	adds	r2, r2, r1
 801173a:	2016      	movs	r0, #22
 801173c:	0029      	movs	r1, r5
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	03a4      	lsls	r4, r4, #14
 8011742:	190e      	adds	r6, r1, r4
 8011744:	4296      	cmp	r6, r2
 8011746:	dc02      	bgt.n	801174e <__ieee754_sqrt+0xce>
 8011748:	1931      	adds	r1, r6, r4
 801174a:	1b92      	subs	r2, r2, r6
 801174c:	192d      	adds	r5, r5, r4
 801174e:	0fde      	lsrs	r6, r3, #31
 8011750:	0052      	lsls	r2, r2, #1
 8011752:	3801      	subs	r0, #1
 8011754:	1992      	adds	r2, r2, r6
 8011756:	005b      	lsls	r3, r3, #1
 8011758:	0864      	lsrs	r4, r4, #1
 801175a:	2800      	cmp	r0, #0
 801175c:	d1f1      	bne.n	8011742 <__ieee754_sqrt+0xc2>
 801175e:	2620      	movs	r6, #32
 8011760:	2780      	movs	r7, #128	@ 0x80
 8011762:	0004      	movs	r4, r0
 8011764:	9604      	str	r6, [sp, #16]
 8011766:	063f      	lsls	r7, r7, #24
 8011768:	19c6      	adds	r6, r0, r7
 801176a:	46b4      	mov	ip, r6
 801176c:	4291      	cmp	r1, r2
 801176e:	db02      	blt.n	8011776 <__ieee754_sqrt+0xf6>
 8011770:	d114      	bne.n	801179c <__ieee754_sqrt+0x11c>
 8011772:	429e      	cmp	r6, r3
 8011774:	d812      	bhi.n	801179c <__ieee754_sqrt+0x11c>
 8011776:	4660      	mov	r0, ip
 8011778:	4666      	mov	r6, ip
 801177a:	19c0      	adds	r0, r0, r7
 801177c:	9100      	str	r1, [sp, #0]
 801177e:	2e00      	cmp	r6, #0
 8011780:	da03      	bge.n	801178a <__ieee754_sqrt+0x10a>
 8011782:	43c6      	mvns	r6, r0
 8011784:	0ff6      	lsrs	r6, r6, #31
 8011786:	198e      	adds	r6, r1, r6
 8011788:	9600      	str	r6, [sp, #0]
 801178a:	1a52      	subs	r2, r2, r1
 801178c:	4563      	cmp	r3, ip
 801178e:	4189      	sbcs	r1, r1
 8011790:	4249      	negs	r1, r1
 8011792:	1a52      	subs	r2, r2, r1
 8011794:	4661      	mov	r1, ip
 8011796:	1a5b      	subs	r3, r3, r1
 8011798:	9900      	ldr	r1, [sp, #0]
 801179a:	19e4      	adds	r4, r4, r7
 801179c:	0fde      	lsrs	r6, r3, #31
 801179e:	0052      	lsls	r2, r2, #1
 80117a0:	1992      	adds	r2, r2, r6
 80117a2:	9e04      	ldr	r6, [sp, #16]
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	3e01      	subs	r6, #1
 80117a8:	087f      	lsrs	r7, r7, #1
 80117aa:	9604      	str	r6, [sp, #16]
 80117ac:	2e00      	cmp	r6, #0
 80117ae:	d1db      	bne.n	8011768 <__ieee754_sqrt+0xe8>
 80117b0:	431a      	orrs	r2, r3
 80117b2:	d01f      	beq.n	80117f4 <__ieee754_sqrt+0x174>
 80117b4:	4e23      	ldr	r6, [pc, #140]	@ (8011844 <__ieee754_sqrt+0x1c4>)
 80117b6:	4f24      	ldr	r7, [pc, #144]	@ (8011848 <__ieee754_sqrt+0x1c8>)
 80117b8:	6830      	ldr	r0, [r6, #0]
 80117ba:	6871      	ldr	r1, [r6, #4]
 80117bc:	683a      	ldr	r2, [r7, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	9200      	str	r2, [sp, #0]
 80117c2:	9301      	str	r3, [sp, #4]
 80117c4:	6832      	ldr	r2, [r6, #0]
 80117c6:	6873      	ldr	r3, [r6, #4]
 80117c8:	9202      	str	r2, [sp, #8]
 80117ca:	9303      	str	r3, [sp, #12]
 80117cc:	9a00      	ldr	r2, [sp, #0]
 80117ce:	9b01      	ldr	r3, [sp, #4]
 80117d0:	f7f0 fb32 	bl	8001e38 <__aeabi_dsub>
 80117d4:	0002      	movs	r2, r0
 80117d6:	000b      	movs	r3, r1
 80117d8:	9802      	ldr	r0, [sp, #8]
 80117da:	9903      	ldr	r1, [sp, #12]
 80117dc:	f7ee fe46 	bl	800046c <__aeabi_dcmple>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d007      	beq.n	80117f4 <__ieee754_sqrt+0x174>
 80117e4:	6830      	ldr	r0, [r6, #0]
 80117e6:	6871      	ldr	r1, [r6, #4]
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	1c67      	adds	r7, r4, #1
 80117ee:	d10f      	bne.n	8011810 <__ieee754_sqrt+0x190>
 80117f0:	9c04      	ldr	r4, [sp, #16]
 80117f2:	3501      	adds	r5, #1
 80117f4:	4b15      	ldr	r3, [pc, #84]	@ (801184c <__ieee754_sqrt+0x1cc>)
 80117f6:	106a      	asrs	r2, r5, #1
 80117f8:	18d2      	adds	r2, r2, r3
 80117fa:	0863      	lsrs	r3, r4, #1
 80117fc:	07ed      	lsls	r5, r5, #31
 80117fe:	d502      	bpl.n	8011806 <__ieee754_sqrt+0x186>
 8011800:	2180      	movs	r1, #128	@ 0x80
 8011802:	0609      	lsls	r1, r1, #24
 8011804:	430b      	orrs	r3, r1
 8011806:	9905      	ldr	r1, [sp, #20]
 8011808:	001c      	movs	r4, r3
 801180a:	0509      	lsls	r1, r1, #20
 801180c:	188d      	adds	r5, r1, r2
 801180e:	e750      	b.n	80116b2 <__ieee754_sqrt+0x32>
 8011810:	f7ef f8a2 	bl	8000958 <__aeabi_dadd>
 8011814:	6877      	ldr	r7, [r6, #4]
 8011816:	6836      	ldr	r6, [r6, #0]
 8011818:	0002      	movs	r2, r0
 801181a:	000b      	movs	r3, r1
 801181c:	0030      	movs	r0, r6
 801181e:	0039      	movs	r1, r7
 8011820:	f7ee fe1a 	bl	8000458 <__aeabi_dcmplt>
 8011824:	2800      	cmp	r0, #0
 8011826:	d004      	beq.n	8011832 <__ieee754_sqrt+0x1b2>
 8011828:	3402      	adds	r4, #2
 801182a:	4263      	negs	r3, r4
 801182c:	4163      	adcs	r3, r4
 801182e:	18ed      	adds	r5, r5, r3
 8011830:	e7e0      	b.n	80117f4 <__ieee754_sqrt+0x174>
 8011832:	2301      	movs	r3, #1
 8011834:	3401      	adds	r4, #1
 8011836:	439c      	bics	r4, r3
 8011838:	e7dc      	b.n	80117f4 <__ieee754_sqrt+0x174>
 801183a:	46c0      	nop			@ (mov r8, r8)
 801183c:	7ff00000 	.word	0x7ff00000
 8011840:	fffffc01 	.word	0xfffffc01
 8011844:	200001f0 	.word	0x200001f0
 8011848:	200001e8 	.word	0x200001e8
 801184c:	3fe00000 	.word	0x3fe00000

08011850 <_init>:
 8011850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011852:	46c0      	nop			@ (mov r8, r8)
 8011854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011856:	bc08      	pop	{r3}
 8011858:	469e      	mov	lr, r3
 801185a:	4770      	bx	lr

0801185c <_fini>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	46c0      	nop			@ (mov r8, r8)
 8011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011862:	bc08      	pop	{r3}
 8011864:	469e      	mov	lr, r3
 8011866:	4770      	bx	lr
